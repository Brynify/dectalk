	TITLE	D:\work\Product\dapi\src\Lts\ls_proc.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_ls_proc_do_sign
EXTRN	_pminus:BYTE
EXTRN	_pplus:BYTE
EXTRN	_ls_util_lookup:NEAR
EXTRN	_ls_util_send_phone_list:NEAR
EXTRN	_ls_util_send_phone:NEAR
_TEXT	SEGMENT
_phTTS$ = 8
_sign$ = 12
_lbuf$ = 12
_ls_proc_do_sign PROC NEAR

; 79   : 	LETTER	lbuf[2];
; 80   : 
; 81   : 	if (sign == '-')

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _sign$[esp-4]
  00004	56		 push	 esi
  00005	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00008	75 1c		 jne	 SHORT $L71773

; 82   : 	{
; 83   : 		/* Special case.	*/
; 84   : 		ls_util_send_phone_list(phTTS,pminus);

  0000a	8b 74 24 08	 mov	 esi, DWORD PTR _phTTS$[esp]
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:_pminus
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 85   : 		ls_util_send_phone(phTTS,WBOUND);

  00019	6a 6f		 push	 111			; 0000006fH
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _ls_util_send_phone
  00021	83 c4 10	 add	 esp, 16			; 00000010H
  00024	5e		 pop	 esi

; 107  : 			}
; 108  : 		}
; 109  : 	}
; 110  : }

  00025	c3		 ret	 0
$L71773:

; 86   : 	}
; 87   : 	else	
; 88   : 	{
; 89   : 	 	if (sign == '+')

  00026	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00029	75 1c		 jne	 SHORT $L71775

; 90   : 		{			/* Special case.	*/
; 91   : 			ls_util_send_phone_list(phTTS,pplus);

  0002b	8b 74 24 08	 mov	 esi, DWORD PTR _phTTS$[esp]
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:_pplus
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 92   : 			ls_util_send_phone(phTTS,WBOUND);

  0003a	6a 6f		 push	 111			; 0000006fH
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _ls_util_send_phone
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	5e		 pop	 esi

; 107  : 			}
; 108  : 		}
; 109  : 	}
; 110  : }

  00046	c3		 ret	 0
$L71775:

; 93   : 		}
; 94   : 	 	else 
; 95   : 	 	{
; 96   : 	 		if (sign != 0)

  00047	85 c0		 test	 eax, eax
  00049	74 3f		 je	 SHORT $L71777

; 97   : 			{		/* Dictionary case.	*/
; 98   : 				lbuf[0].l_ch = ' ';
; 99   : //				lbuf[0].l_ip = NULL;
; 100  : 				lbuf[1].l_ch = sign;
; 101  : //				lbuf[1].l_ip = NULL;
; 102  : 
; 103  :                                 if (ls_util_lookup(phTTS,&lbuf[0], &lbuf[2], FIRST) == MISS)

  0004b	8b 74 24 08	 mov	 esi, DWORD PTR _phTTS$[esp]
  0004f	66 89 44 24 0e	 mov	 WORD PTR _lbuf$[esp+2], ax
  00054	8d 44 24 10	 lea	 eax, DWORD PTR _lbuf$[esp+4]
  00058	6a 00		 push	 0
  0005a	8d 4c 24 10	 lea	 ecx, DWORD PTR _lbuf$[esp+4]
  0005e	50		 push	 eax
  0005f	51		 push	 ecx
  00060	56		 push	 esi
  00061	66 c7 44 24 1c
	20 00		 mov	 WORD PTR _lbuf$[esp+16], 32 ; 00000020H
  00068	e8 00 00 00 00	 call	 _ls_util_lookup
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	85 c0		 test	 eax, eax
  00072	75 0b		 jne	 SHORT $L71778

; 104  : 					ls_util_send_phone(phTTS,US_EY);

  00074	6a 03		 push	 3
  00076	56		 push	 esi
  00077	e8 00 00 00 00	 call	 _ls_util_send_phone
  0007c	83 c4 08	 add	 esp, 8
$L71778:

; 105  : 
; 106  : 				ls_util_send_phone(phTTS,WBOUND);

  0007f	6a 6f		 push	 111			; 0000006fH
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 _ls_util_send_phone
  00087	83 c4 08	 add	 esp, 8
$L71777:
  0008a	5e		 pop	 esi

; 107  : 			}
; 108  : 		}
; 109  : 	}
; 110  : }

  0008b	c3		 ret	 0
_ls_proc_do_sign ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_do_part_number
PUBLIC	_ls_proc_do_4_digits
PUBLIC	_ls_proc_do_2_digits
PUBLIC	_ls_proc_do_3_digits
PUBLIC	_ls_proc_is_a_part
EXTRN	_ls_spel_spell:NEAR
EXTRN	_ls_spel_spell_speed:NEAR
_TEXT	SEGMENT
_phTTS$ = 8
_llp$ = 12
_rlp$ = 16
_ls_proc_do_part_number PROC NEAR

; 159  : {

  00090	53		 push	 ebx

; 160  : 	LETTER *blp;
; 161  : 	int	speed;
; 162  : 
; 163  : 	int	nd;
; 164  : 
; 165  : 	while (llp != rlp) 

  00091	8b 5c 24 10	 mov	 ebx, DWORD PTR _rlp$[esp]
  00095	55		 push	 ebp
  00096	56		 push	 esi
  00097	8b 74 24 14	 mov	 esi, DWORD PTR _llp$[esp+8]
  0009b	57		 push	 edi
  0009c	3b f3		 cmp	 esi, ebx
  0009e	0f 84 31 01 00
	00		 je	 $L71791
  000a4	8b 6c 24 14	 mov	 ebp, DWORD PTR _phTTS$[esp+12]
$L71790:

; 166  : 	{
; 167  : 		blp = llp;

  000a8	8b fe		 mov	 edi, esi

; 168  : 		++llp;

  000aa	83 c6 02	 add	 esi, 2

; 169  : 		if (blp->l_ch=='-' || blp->l_ch=='/') 

  000ad	66 8b 07	 mov	 ax, WORD PTR [edi]
  000b0	66 3d 2d 00	 cmp	 ax, 45			; 0000002dH
  000b4	0f 84 f9 00 00
	00		 je	 $L71793
  000ba	66 3d 2f 00	 cmp	 ax, 47			; 0000002fH
  000be	0f 84 ef 00 00
	00		 je	 $L71793

; 176  : #endif
; 177  : 		} 
; 178  : 		else
; 179  : 		{ 
; 180  : 			if (blp->l_ch>='0' && blp->l_ch<='9') 

  000c4	66 3d 30 00	 cmp	 ax, 48			; 00000030H
  000c8	7c 71		 jl	 SHORT $L72158
  000ca	66 3d 39 00	 cmp	 ax, 57			; 00000039H
  000ce	7f 6b		 jg	 SHORT $L72158

; 181  : 			{
; 182  : 				while (llp!=rlp && llp->l_ch>='0' && llp->l_ch<='9')

  000d0	3b f3		 cmp	 esi, ebx
  000d2	74 16		 je	 SHORT $L71799
$L71798:
  000d4	66 8b 06	 mov	 ax, WORD PTR [esi]
  000d7	66 3d 30 00	 cmp	 ax, 48			; 00000030H
  000db	7c 0d		 jl	 SHORT $L71799
  000dd	66 3d 39 00	 cmp	 ax, 57			; 00000039H
  000e1	7f 07		 jg	 SHORT $L71799

; 183  : 					++llp;

  000e3	83 c6 02	 add	 esi, 2
  000e6	3b f3		 cmp	 esi, ebx
  000e8	75 ea		 jne	 SHORT $L71798
$L71799:

; 184  : 				if ((nd = llp-blp) == 2)

  000ea	8b c6		 mov	 eax, esi
  000ec	2b c7		 sub	 eax, edi
  000ee	d1 f8		 sar	 eax, 1
  000f0	83 f8 02	 cmp	 eax, 2
  000f3	75 0c		 jne	 SHORT $L71800

; 185  : 				{
; 186  : 					ls_proc_do_2_digits(phTTS,blp);

  000f5	57		 push	 edi
  000f6	55		 push	 ebp
  000f7	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  000fc	83 c4 08	 add	 esp, 8

; 187  : 				}
; 188  : 				else

  000ff	eb 2d		 jmp	 SHORT $L71805
$L71800:

; 189  : 				{ 
; 190  : 					if (nd == 3)

  00101	83 f8 03	 cmp	 eax, 3
  00104	75 0c		 jne	 SHORT $L71802

; 191  : 					{
; 192  : 						ls_proc_do_3_digits(phTTS,blp);

  00106	57		 push	 edi
  00107	55		 push	 ebp
  00108	e8 00 00 00 00	 call	 _ls_proc_do_3_digits
  0010d	83 c4 08	 add	 esp, 8

; 193  : 					}
; 194  : 					else

  00110	eb 1c		 jmp	 SHORT $L71805
$L71802:

; 195  : 					{ 
; 196  : 						if (nd == 4)

  00112	83 f8 04	 cmp	 eax, 4
  00115	75 0c		 jne	 SHORT $L71804

; 197  : 							ls_proc_do_4_digits(phTTS,blp);

  00117	57		 push	 edi
  00118	55		 push	 ebp
  00119	e8 00 00 00 00	 call	 _ls_proc_do_4_digits
  0011e	83 c4 08	 add	 esp, 8

; 198  : 						else				

  00121	eb 0b		 jmp	 SHORT $L71805
$L71804:

; 199  : 							ls_spel_spell(phTTS,blp, llp);

  00123	56		 push	 esi
  00124	57		 push	 edi
  00125	55		 push	 ebp
  00126	e8 00 00 00 00	 call	 _ls_spel_spell
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L71805:

; 200  : 					}
; 201  : 				}
; 202  : 				if (llp != rlp)

  0012e	3b f3		 cmp	 esi, ebx
  00130	0f 84 9f 00 00
	00		 je	 $L71791

; 203  : 				{
; 204  : 					ls_util_send_phone(phTTS,WBOUND);
; 205  : 				}
; 206  : 			} 
; 207  : 			else 

  00136	e9 87 00 00 00	 jmp	 $L72161
$L72158:

; 208  : 			{
; 209  : 				while (llp!=rlp && ls_proc_is_a_part(llp->l_ch)!=FALSE)

  0013b	3b f3		 cmp	 esi, ebx
  0013d	74 17		 je	 SHORT $L71810
$L71809:
  0013f	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 _ls_proc_is_a_part
  00148	83 c4 04	 add	 esp, 4
  0014b	85 c0		 test	 eax, eax
  0014d	74 07		 je	 SHORT $L71810

; 210  : 					++llp;

  0014f	83 c6 02	 add	 esi, 2
  00152	3b f3		 cmp	 esi, ebx
  00154	75 e9		 jne	 SHORT $L71809
$L71810:

; 211  : 				if (llp-blp<3 || ls_util_lookup(phTTS, blp, llp, FALSE)==MISS) 

  00156	8b ce		 mov	 ecx, esi
  00158	2b cf		 sub	 ecx, edi
  0015a	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0015d	83 f9 06	 cmp	 ecx, 6
  00160	7c 17		 jl	 SHORT $L71812
  00162	6a 00		 push	 0
  00164	56		 push	 esi
  00165	57		 push	 edi
  00166	55		 push	 ebp
  00167	e8 00 00 00 00	 call	 _ls_util_lookup
  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	85 c0		 test	 eax, eax
  00171	74 06		 je	 SHORT $L71812

; 247  : 					if (llp != rlp)

  00173	3b f3		 cmp	 esi, ebx
  00175	74 5e		 je	 SHORT $L71791

; 248  : 						ls_util_send_phone(phTTS,WBOUND);

  00177	eb 49		 jmp	 SHORT $L72161
$L71812:

; 212  : 				{
; 213  : 					/*
; 214  : 					   GL 02/01/1977  only spell non-alphabet word or alphabet word
; 215  : 					   without vowel
; 216  : 					   GL 02/07/1997 rollback this change for further study
; 217  : 
; 218  : 					   GL 06/04/1997 BATS#377 add this change for FAA mode
; 219  : 					   this change will break part number like QA-255KAA-SB
; 220  : 				    */
; 221  : #ifdef FAA
; 222  : 				    if (ls_util_is_aword(blp,llp))
; 223  : 					{	
; 224  : 						/* MGS 6/16/97 BATS #387 Added becasue rule engine needs lower case characters */
; 225  : 						ls_task_remove_case(blp,llp);
; 226  : 				    	ls_rule_do_lts(phTTS,blp, llp);
; 227  : 					}
; 228  : 				    else
; 229  : 				    {
; 230  : 						speed = ls_spel_spell_speed(blp, llp);
; 231  : 						ls_spel_spell(phTTS,blp, llp);
; 232  : 						if (speed == FAST)
; 233  : 							ls_util_send_phone(phTTS,WBOUND);
; 234  : 						else
; 235  : 							ls_util_send_phone(phTTS,COMMA);
; 236  : 					}
; 237  : #else
; 238  : 					speed = ls_spel_spell_speed(blp, llp);

  00179	56		 push	 esi
  0017a	57		 push	 edi
  0017b	e8 00 00 00 00	 call	 _ls_spel_spell_speed

; 239  : 					ls_spel_spell(phTTS,blp, llp);

  00180	56		 push	 esi
  00181	57		 push	 edi
  00182	55		 push	 ebp
  00183	8b d8		 mov	 ebx, eax
  00185	e8 00 00 00 00	 call	 _ls_spel_spell
  0018a	83 c4 14	 add	 esp, 20			; 00000014H

; 240  : 					if (speed == FAST)

  0018d	85 db		 test	 ebx, ebx
  0018f	75 11		 jne	 SHORT $L71813

; 241  : 						ls_util_send_phone(phTTS,WBOUND);

  00191	6a 6f		 push	 111			; 0000006fH
  00193	55		 push	 ebp
  00194	e8 00 00 00 00	 call	 _ls_util_send_phone

; 242  : 					else

  00199	8b 5c 24 24	 mov	 ebx, DWORD PTR _rlp$[esp+20]
  0019d	83 c4 08	 add	 esp, 8
  001a0	eb 2b		 jmp	 SHORT $L71794
$L71813:

; 243  : 						ls_util_send_phone(phTTS,COMMA);

  001a2	6a 73		 push	 115			; 00000073H
  001a4	55		 push	 ebp
  001a5	e8 00 00 00 00	 call	 _ls_util_send_phone

; 244  : #endif
; 245  : 				} 
; 246  : 				else 

  001aa	8b 5c 24 24	 mov	 ebx, DWORD PTR _rlp$[esp+20]
  001ae	83 c4 08	 add	 esp, 8
  001b1	eb 1a		 jmp	 SHORT $L71794
$L71793:

; 170  : 		{
; 171  : /* GL 06/04/1997 BATS#377 add FAA switch */
; 172  : #ifndef FAA
; 173  : 			ls_spel_spell(phTTS,blp, llp);

  001b3	56		 push	 esi
  001b4	57		 push	 edi
  001b5	55		 push	 ebp
  001b6	e8 00 00 00 00	 call	 _ls_spel_spell
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 174  : 			if (llp != rlp)

  001be	3b f3		 cmp	 esi, ebx
  001c0	74 13		 je	 SHORT $L71791
$L72161:

; 175  : 				ls_util_send_phone(phTTS,WBOUND);

  001c2	6a 6f		 push	 111			; 0000006fH
  001c4	55		 push	 ebp
  001c5	e8 00 00 00 00	 call	 _ls_util_send_phone
  001ca	83 c4 08	 add	 esp, 8
$L71794:

; 160  : 	LETTER *blp;
; 161  : 	int	speed;
; 162  : 
; 163  : 	int	nd;
; 164  : 
; 165  : 	while (llp != rlp) 

  001cd	3b f3		 cmp	 esi, ebx
  001cf	0f 85 d3 fe ff
	ff		 jne	 $L71790
$L71791:
  001d5	5f		 pop	 edi
  001d6	5e		 pop	 esi
  001d7	5d		 pop	 ebp
  001d8	5b		 pop	 ebx

; 249  : 			}
; 250  : 		}
; 251  : 	}
; 252  : }

  001d9	c3		 ret	 0
_ls_proc_do_part_number ENDP
_c$ = 8
_ls_proc_is_a_part PROC NEAR

; 272  : 	if (c=='-' || c=='/' || (c>='0' && c<='9'))

  001e0	8b 44 24 04	 mov	 eax, DWORD PTR _c$[esp-4]
  001e4	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  001e7	74 15		 je	 SHORT $L71821
  001e9	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  001ec	74 10		 je	 SHORT $L71821
  001ee	83 f8 30	 cmp	 eax, 48			; 00000030H
  001f1	7c 05		 jl	 SHORT $L71820
  001f3	83 f8 39	 cmp	 eax, 57			; 00000039H
  001f6	7e 06		 jle	 SHORT $L71821
$L71820:

; 274  : 	return (TRUE);

  001f8	b8 01 00 00 00	 mov	 eax, 1

; 275  : }

  001fd	c3		 ret	 0
$L71821:

; 273  : 		return (FALSE);

  001fe	33 c0		 xor	 eax, eax

; 275  : }

  00200	c3		 ret	 0
_ls_proc_is_a_part ENDP
_TEXT	ENDS
EXTRN	_punits:BYTE
EXTRN	_pteens:BYTE
EXTRN	_ptens:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_lp$ = 12
_ls_proc_do_2_digits PROC NEAR

; 294  : {

  00210	56		 push	 esi

; 295  : 	if (lp->l_ch == '0')

  00211	8b 74 24 0c	 mov	 esi, DWORD PTR _lp$[esp]
  00215	57		 push	 edi
  00216	66 8b 06	 mov	 ax, WORD PTR [esi]
  00219	66 3d 30 00	 cmp	 ax, 48			; 00000030H
  0021d	75 15		 jne	 SHORT $L71827

; 296  : 		ls_spel_spell(phTTS,lp, lp+2);

  0021f	8b 4c 24 0c	 mov	 ecx, DWORD PTR _phTTS$[esp+4]
  00223	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00226	50		 push	 eax
  00227	56		 push	 esi
  00228	51		 push	 ecx
  00229	e8 00 00 00 00	 call	 _ls_spel_spell
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi

; 308  :                         }
; 309  : 		}
; 310  : 	}
; 311  : }

  00233	c3		 ret	 0
$L71827:

; 297  : 	else 
; 298  : 	{
; 299  : 		if (lp->l_ch == '1')

  00234	66 3d 31 00	 cmp	 ax, 49			; 00000031H
  00238	75 1c		 jne	 SHORT $L71829

; 300  : 			ls_util_send_phone_list(phTTS,pteens[(lp+1)->l_ch-'0']);

  0023a	0f bf 56 02	 movsx	 edx, WORD PTR [esi+2]
  0023e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _phTTS$[esp+4]
  00242	8b 04 95 40 ff
	ff ff		 mov	 eax, DWORD PTR _pteens[edx*4-192]
  00249	50		 push	 eax
  0024a	51		 push	 ecx
  0024b	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00250	83 c4 08	 add	 esp, 8
  00253	5f		 pop	 edi
  00254	5e		 pop	 esi

; 308  :                         }
; 309  : 		}
; 310  : 	}
; 311  : }

  00255	c3		 ret	 0
$L71829:

; 301  : 		else 
; 302  : 		{
; 303  : 			ls_util_send_phone_list(phTTS,ptens[lp->l_ch-'0']);

  00256	8b 7c 24 0c	 mov	 edi, DWORD PTR _phTTS$[esp+4]
  0025a	0f bf d0	 movsx	 edx, ax
  0025d	8b 04 95 40 ff
	ff ff		 mov	 eax, DWORD PTR _ptens[edx*4-192]
  00264	50		 push	 eax
  00265	57		 push	 edi
  00266	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  0026b	83 c4 08	 add	 esp, 8

; 304  : 			if ((lp+1)->l_ch != '0') 

  0026e	66 83 7e 02 30	 cmp	 WORD PTR [esi+2], 48	; 00000030H
  00273	74 1d		 je	 SHORT $L71831

; 305  : 			{
; 306  : 				ls_util_send_phone(phTTS,WBOUND);

  00275	6a 6f		 push	 111			; 0000006fH
  00277	57		 push	 edi
  00278	e8 00 00 00 00	 call	 _ls_util_send_phone

; 307  : 				ls_util_send_phone_list(phTTS,punits[(lp+1)->l_ch-'0']);

  0027d	0f bf 4e 02	 movsx	 ecx, WORD PTR [esi+2]
  00281	8b 14 8d 40 ff
	ff ff		 mov	 edx, DWORD PTR _punits[ecx*4-192]
  00288	52		 push	 edx
  00289	57		 push	 edi
  0028a	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  0028f	83 c4 10	 add	 esp, 16			; 00000010H
$L71831:
  00292	5f		 pop	 edi
  00293	5e		 pop	 esi

; 308  :                         }
; 309  : 		}
; 310  : 	}
; 311  : }

  00294	c3		 ret	 0
_ls_proc_do_2_digits ENDP
_TEXT	ENDS
EXTRN	_upunits:BYTE
EXTRN	_phundred:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_lp$ = 12
_ls_proc_do_3_digits PROC NEAR

; 332  : {

  002a0	56		 push	 esi
  002a1	57		 push	 edi

; 333  : 	if (lp->l_ch == '0')

  002a2	8b 7c 24 10	 mov	 edi, DWORD PTR _lp$[esp+4]
  002a6	66 8b 07	 mov	 ax, WORD PTR [edi]
  002a9	66 3d 30 00	 cmp	 ax, 48			; 00000030H
  002ad	75 15		 jne	 SHORT $L71837

; 334  : 		ls_spel_spell(phTTS,lp, lp+3);

  002af	8b 4c 24 0c	 mov	 ecx, DWORD PTR _phTTS$[esp+4]
  002b3	8d 47 06	 lea	 eax, DWORD PTR [edi+6]
  002b6	50		 push	 eax
  002b7	57		 push	 edi
  002b8	51		 push	 ecx
  002b9	e8 00 00 00 00	 call	 _ls_spel_spell
  002be	83 c4 0c	 add	 esp, 12			; 0000000cH
  002c1	5f		 pop	 edi
  002c2	5e		 pop	 esi

; 346  : 	}
; 347  : }

  002c3	c3		 ret	 0
$L71837:

; 335  : 	else 
; 336  : 	{
; 337  : 		//BATS 863 which corrected the number before 
; 338  : 		//a quatitiy (hudred thousand ect ) from stressed to unstressed
; 339  : 		ls_util_send_phone_list(phTTS,upunits[lp->l_ch-'0']);

  002c4	8b 74 24 0c	 mov	 esi, DWORD PTR _phTTS$[esp+4]
  002c8	0f bf d0	 movsx	 edx, ax
  002cb	8b 04 95 40 ff
	ff ff		 mov	 eax, DWORD PTR _upunits[edx*4-192]
  002d2	50		 push	 eax
  002d3	56		 push	 esi
  002d4	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 340  : 		ls_util_send_phone(phTTS,WBOUND);

  002d9	6a 6f		 push	 111			; 0000006fH
  002db	56		 push	 esi
  002dc	e8 00 00 00 00	 call	 _ls_util_send_phone

; 341  : 		if ((lp+1)->l_ch=='0' && (lp+2)->l_ch=='0') 

  002e1	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  002e4	83 c4 10	 add	 esp, 16			; 00000010H
  002e7	66 83 38 30	 cmp	 WORD PTR [eax], 48	; 00000030H
  002eb	75 18		 jne	 SHORT $L71839
  002ed	66 83 7f 04 30	 cmp	 WORD PTR [edi+4], 48	; 00000030H
  002f2	75 11		 jne	 SHORT $L71839

; 342  : 		{
; 343  : 			ls_util_send_phone_list(phTTS,phundred);

  002f4	68 00 00 00 00	 push	 OFFSET FLAT:_phundred
  002f9	56		 push	 esi
  002fa	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 344  : 		} else
; 345  : 			ls_proc_do_2_digits(phTTS,lp+1);

  002ff	83 c4 08	 add	 esp, 8
  00302	5f		 pop	 edi
  00303	5e		 pop	 esi

; 346  : 	}
; 347  : }

  00304	c3		 ret	 0
$L71839:

; 344  : 		} else
; 345  : 			ls_proc_do_2_digits(phTTS,lp+1);

  00305	50		 push	 eax
  00306	56		 push	 esi
  00307	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  0030c	83 c4 08	 add	 esp, 8
  0030f	5f		 pop	 edi
  00310	5e		 pop	 esi

; 346  : 	}
; 347  : }

  00311	c3		 ret	 0
_ls_proc_do_3_digits ENDP
_TEXT	ENDS
EXTRN	_pthousand:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_lp$ = 12
_ls_proc_do_4_digits PROC NEAR

; 367  : 	if (lp->l_ch == '0')

  00320	8b 44 24 08	 mov	 eax, DWORD PTR _lp$[esp-4]
  00324	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00329	56		 push	 esi
  0032a	57		 push	 edi
  0032b	66 8b 08	 mov	 cx, WORD PTR [eax]
  0032e	66 3b ca	 cmp	 cx, dx
  00331	75 15		 jne	 SHORT $L71846

; 368  : 		ls_spel_spell(phTTS,lp, lp+4);

  00333	8b 54 24 0c	 mov	 edx, DWORD PTR _phTTS$[esp+4]
  00337	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  0033a	51		 push	 ecx
  0033b	50		 push	 eax
  0033c	52		 push	 edx
  0033d	e8 00 00 00 00	 call	 _ls_spel_spell
  00342	83 c4 0c	 add	 esp, 12			; 0000000cH
  00345	5f		 pop	 edi
  00346	5e		 pop	 esi

; 395  : 		}
; 396  : 	}
; 397  : 	return;
; 398  : }

  00347	c3		 ret	 0
$L71846:

; 369  : 	else 
; 370  : 	{
; 371  : 		if ((lp+2)->l_ch=='0' && (lp+3)->l_ch=='0') 

  00348	66 39 50 04	 cmp	 WORD PTR [eax+4], dx
  0034c	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0034f	75 5e		 jne	 SHORT $L71848
  00351	66 39 50 06	 cmp	 WORD PTR [eax+6], dx
  00355	75 58		 jne	 SHORT $L71848

; 372  : 		{
; 373  : 			if ((lp+1)->l_ch == '0') 

  00357	66 39 50 02	 cmp	 WORD PTR [eax+2], dx
  0035b	75 2e		 jne	 SHORT $L71849

; 374  : 			{
; 375  : 				//BATS 863 which corrected the number before 
; 376  : 				//a quatitiy (hudred thousand ect ) from stressed to unstressed
; 377  : 				ls_util_send_phone_list(phTTS,upunits[lp->l_ch-'0']);

  0035d	8b 74 24 0c	 mov	 esi, DWORD PTR _phTTS$[esp+4]
  00361	0f bf c1	 movsx	 eax, cx
  00364	8b 0c 85 40 ff
	ff ff		 mov	 ecx, DWORD PTR _upunits[eax*4-192]
  0036b	51		 push	 ecx
  0036c	56		 push	 esi
  0036d	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 378  : 				ls_util_send_phone(phTTS,WBOUND);

  00372	6a 6f		 push	 111			; 0000006fH
  00374	56		 push	 esi
  00375	e8 00 00 00 00	 call	 _ls_util_send_phone

; 379  : 				ls_util_send_phone_list(phTTS,pthousand);

  0037a	68 00 00 00 00	 push	 OFFSET FLAT:_pthousand
  0037f	56		 push	 esi
  00380	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 394  : 			ls_proc_do_2_digits(phTTS,lp+2); 

  00385	83 c4 18	 add	 esp, 24			; 00000018H
  00388	5f		 pop	 edi
  00389	5e		 pop	 esi

; 395  : 		}
; 396  : 	}
; 397  : 	return;
; 398  : }

  0038a	c3		 ret	 0
$L71849:

; 380  : 			} 
; 381  : 			else 
; 382  : 			{
; 383  : 
; 384  : 				ls_proc_do_2_digits(phTTS,lp);

  0038b	8b 74 24 0c	 mov	 esi, DWORD PTR _phTTS$[esp+4]
  0038f	50		 push	 eax
  00390	56		 push	 esi
  00391	e8 00 00 00 00	 call	 _ls_proc_do_2_digits

; 385  : 				ls_util_send_phone(phTTS,WBOUND);

  00396	6a 6f		 push	 111			; 0000006fH
  00398	56		 push	 esi
  00399	e8 00 00 00 00	 call	 _ls_util_send_phone

; 386  : 				ls_util_send_phone_list(phTTS,phundred);

  0039e	68 00 00 00 00	 push	 OFFSET FLAT:_phundred
  003a3	56		 push	 esi
  003a4	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 394  : 			ls_proc_do_2_digits(phTTS,lp+2); 

  003a9	83 c4 18	 add	 esp, 24			; 00000018H
  003ac	5f		 pop	 edi
  003ad	5e		 pop	 esi

; 395  : 		}
; 396  : 	}
; 397  : 	return;
; 398  : }

  003ae	c3		 ret	 0
$L71848:

; 387  : 			}
; 388  : 		} 
; 389  : 		else 
; 390  : 		{
; 391  : 
; 392  : 			ls_proc_do_2_digits(phTTS,lp+0);

  003af	8b 74 24 0c	 mov	 esi, DWORD PTR _phTTS$[esp+4]
  003b3	50		 push	 eax
  003b4	56		 push	 esi
  003b5	e8 00 00 00 00	 call	 _ls_proc_do_2_digits

; 393  : 			ls_util_send_phone(phTTS,WBOUND);

  003ba	6a 6f		 push	 111			; 0000006fH
  003bc	56		 push	 esi
  003bd	e8 00 00 00 00	 call	 _ls_util_send_phone

; 394  : 			ls_proc_do_2_digits(phTTS,lp+2); 

  003c2	57		 push	 edi
  003c3	56		 push	 esi
  003c4	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  003c9	83 c4 18	 add	 esp, 24			; 00000018H
  003cc	5f		 pop	 edi
  003cd	5e		 pop	 esi

; 395  : 		}
; 396  : 	}
; 397  : 	return;
; 398  : }

  003ce	c3		 ret	 0
_ls_proc_do_4_digits ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_do_digit_group
EXTRN	_pand:BYTE
EXTRN	_pordin:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_buf$ = 12
_oflag$ = 16
_ls_proc_do_digit_group PROC NEAR

; 423  : {

  003d0	56		 push	 esi

; 424  : 	if (buf[0] != '0') 

  003d1	8b 74 24 08	 mov	 esi, DWORD PTR _phTTS$[esp]
  003d5	57		 push	 edi
  003d6	8b 7c 24 10	 mov	 edi, DWORD PTR _buf$[esp+4]
  003da	8a 07		 mov	 al, BYTE PTR [edi]
  003dc	3c 30		 cmp	 al, 48			; 00000030H
  003de	74 5e		 je	 SHORT $L71859

; 425  : 	{
; 426  : 		//BATS 863 which corrected the number before 
; 427  : 		//a quatitiy (hudred thousand ect ) from stressed to unstressed
; 428  : 		ls_util_send_phone_list(phTTS,upunits[buf[0]-'0']);

  003e0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003e5	8b 04 85 40 ff
	ff ff		 mov	 eax, DWORD PTR _upunits[eax*4-192]
  003ec	50		 push	 eax
  003ed	56		 push	 esi
  003ee	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 429  : 		ls_util_send_phone(phTTS,WBOUND);

  003f3	6a 6f		 push	 111			; 0000006fH
  003f5	56		 push	 esi
  003f6	e8 00 00 00 00	 call	 _ls_util_send_phone

; 430  : 		ls_util_send_phone_list(phTTS,phundred);

  003fb	68 00 00 00 00	 push	 OFFSET FLAT:_phundred
  00400	56		 push	 esi
  00401	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 431  : 		if (buf[1]=='0' && buf[2]=='0') 

  00406	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00409	83 c4 18	 add	 esp, 24			; 00000018H
  0040c	3c 30		 cmp	 al, 48			; 00000030H
  0040e	75 20		 jne	 SHORT $L71860
  00410	80 7f 02 30	 cmp	 BYTE PTR [edi+2], 48	; 00000030H
  00414	75 1a		 jne	 SHORT $L71860

; 432  : 		{
; 433  : 			if (oflag != FALSE)

  00416	8b 44 24 14	 mov	 eax, DWORD PTR _oflag$[esp+4]
  0041a	85 c0		 test	 eax, eax
  0041c	0f 84 d4 00 00
	00		 je	 $L71868

; 434  : 			{
; 435  : 				ls_util_send_phone(phTTS,US_TH);

  00422	6a 27		 push	 39			; 00000027H
  00424	56		 push	 esi
  00425	e8 00 00 00 00	 call	 _ls_util_send_phone

; 470  : 	else
; 471  : 		ls_util_send_phone_list(phTTS,punits[buf[2]-'0']);

  0042a	83 c4 08	 add	 esp, 8
  0042d	5f		 pop	 edi
  0042e	5e		 pop	 esi

; 472  : }

  0042f	c3		 ret	 0
$L71860:

; 436  : 			}
; 437  : 			return;
; 438  : 		}
; 439  : 		ls_util_send_phone_list(phTTS,pand);

  00430	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  00435	56		 push	 esi
  00436	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  0043b	83 c4 08	 add	 esp, 8
$L71859:

; 440  : 	}
; 441  : 	if (buf[1] == '1') 

  0043e	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00441	3c 31		 cmp	 al, 49			; 00000031H
  00443	75 30		 jne	 SHORT $L71862

; 442  : 	{
; 443  : 		ls_util_send_phone_list(phTTS,pteens[buf[2]-'0']);

  00445	33 c9		 xor	 ecx, ecx
  00447	8a 4f 02	 mov	 cl, BYTE PTR [edi+2]
  0044a	8b 14 8d 40 ff
	ff ff		 mov	 edx, DWORD PTR _pteens[ecx*4-192]
  00451	52		 push	 edx
  00452	56		 push	 esi
  00453	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 444  : 
; 445  : 		if (oflag != FALSE)

  00458	8b 44 24 1c	 mov	 eax, DWORD PTR _oflag$[esp+12]
  0045c	83 c4 08	 add	 esp, 8
  0045f	85 c0		 test	 eax, eax
  00461	0f 84 8f 00 00
	00		 je	 $L71868

; 446  : 		{
; 447  : 			ls_util_send_phone(phTTS,US_TH);

  00467	6a 27		 push	 39			; 00000027H
  00469	56		 push	 esi
  0046a	e8 00 00 00 00	 call	 _ls_util_send_phone

; 470  : 	else
; 471  : 		ls_util_send_phone_list(phTTS,punits[buf[2]-'0']);

  0046f	83 c4 08	 add	 esp, 8
  00472	5f		 pop	 edi
  00473	5e		 pop	 esi

; 472  : }

  00474	c3		 ret	 0
$L71862:

; 448  : 		}
; 449  : 		return;
; 450  : 	}
; 451  : 	if (buf[1] != '0') 

  00475	3c 30		 cmp	 al, 48			; 00000030H
  00477	74 46		 je	 SHORT $L71864

; 452  : 	{
; 453  : 
; 454  : 
; 455  : 		ls_util_send_phone_list(phTTS,ptens[buf[1]-'0']);

  00479	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0047e	8b 04 85 40 ff
	ff ff		 mov	 eax, DWORD PTR _ptens[eax*4-192]
  00485	50		 push	 eax
  00486	56		 push	 esi
  00487	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 456  : 		if (buf[2] == '0') 

  0048c	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  0048f	83 c4 08	 add	 esp, 8
  00492	3c 30		 cmp	 al, 48			; 00000030H
  00494	75 1e		 jne	 SHORT $L71865

; 457  : 		{
; 458  : 			if (oflag != FALSE) 

  00496	8b 44 24 14	 mov	 eax, DWORD PTR _oflag$[esp+4]
  0049a	85 c0		 test	 eax, eax
  0049c	74 58		 je	 SHORT $L71868

; 459  : 			{
; 460  : 				ls_util_send_phone(phTTS,US_IX);

  0049e	6a 12		 push	 18			; 00000012H
  004a0	56		 push	 esi
  004a1	e8 00 00 00 00	 call	 _ls_util_send_phone

; 461  : 				ls_util_send_phone(phTTS,US_TH);

  004a6	6a 27		 push	 39			; 00000027H
  004a8	56		 push	 esi
  004a9	e8 00 00 00 00	 call	 _ls_util_send_phone
  004ae	83 c4 10	 add	 esp, 16			; 00000010H
  004b1	5f		 pop	 edi
  004b2	5e		 pop	 esi

; 472  : }

  004b3	c3		 ret	 0
$L71865:

; 462  : 			}
; 463  : 			return;
; 464  : 		}
; 465  : 		ls_util_send_phone(phTTS,WBOUND);

  004b4	6a 6f		 push	 111			; 0000006fH
  004b6	56		 push	 esi
  004b7	e8 00 00 00 00	 call	 _ls_util_send_phone
  004bc	83 c4 08	 add	 esp, 8
$L71864:

; 466  : 	}
; 467  : 
; 468  : 	if (oflag != FALSE)

  004bf	8b 44 24 14	 mov	 eax, DWORD PTR _oflag$[esp+4]
  004c3	85 c0		 test	 eax, eax
  004c5	74 19		 je	 SHORT $L71867

; 469  : 		ls_util_send_phone_list(phTTS,pordin[buf[2]-'0']);

  004c7	33 c9		 xor	 ecx, ecx
  004c9	8a 4f 02	 mov	 cl, BYTE PTR [edi+2]
  004cc	8b 14 8d 40 ff
	ff ff		 mov	 edx, DWORD PTR _pordin[ecx*4-192]
  004d3	52		 push	 edx

; 470  : 	else
; 471  : 		ls_util_send_phone_list(phTTS,punits[buf[2]-'0']);

  004d4	56		 push	 esi
  004d5	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  004da	83 c4 08	 add	 esp, 8
  004dd	5f		 pop	 edi
  004de	5e		 pop	 esi

; 472  : }

  004df	c3		 ret	 0
$L71867:

; 470  : 	else
; 471  : 		ls_util_send_phone_list(phTTS,punits[buf[2]-'0']);

  004e0	33 c0		 xor	 eax, eax
  004e2	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  004e5	8b 0c 85 40 ff
	ff ff		 mov	 ecx, DWORD PTR _punits[eax*4-192]
  004ec	51		 push	 ecx
  004ed	56		 push	 esi
  004ee	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  004f3	83 c4 08	 add	 esp, 8
$L71868:
  004f6	5f		 pop	 edi
  004f7	5e		 pop	 esi

; 472  : }

  004f8	c3		 ret	 0
_ls_proc_do_digit_group ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_non_zero
PUBLIC	_ls_proc_do_number
EXTRN	_pmillion:BYTE
EXTRN	_ptrillion:BYTE
EXTRN	_pquadrillion:BYTE
EXTRN	_pbillion:BYTE
EXTRN	_ppoint:BYTE
EXTRN	_ptt2tp:BYTE
EXTRN	_ls_char_feat:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_llp$ = 12
_rlp$ = 16
_oflag$ = 20
_tlp1$ = -28
_n$ = 20
_pflag$ = -24
_buf$ = -20
_pLts_t$ = 8
_ls_proc_do_number PROC NEAR

; 501  : {

  00500	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 502  : 	LETTER *tlp1;
; 503  : 	LETTER *tlp2;
; 504  : 	int	c;
; 505  : 	int	n;
; 506  : 	int	pflag;
; 507  : 	int	ndig;
; 508  : 	int	sflag;
; 509  : 	/* MGS 07/22/97 BATS #412 changed buf to unsigned */
; 510  : 	unsigned char		buf[18];
; 511  : 	PLTS_T pLts_t;
; 512  : 	pLts_t = phTTS->pLTSThreadData;
; 513  : #ifdef NWS_US
; 514  : /* eab 10/97 set off numbers with a glotal stop*/
; 515  : 	ls_util_send_phone(phTTS,US_Q);
; 516  : #endif
; 517  : 
; 518  : 
; 519  : 	tlp1  = llp;
; 520  : 	/* This handles integer parts like "1/2".			*/
; 521  : 	if (tlp1!=rlp && (tlp1->l_ch==0xBC || tlp1->l_ch==0xBD)) 

  00503	8b 54 24 28	 mov	 edx, DWORD PTR _rlp$[esp+24]
  00507	53		 push	 ebx
  00508	8b 5c 24 28	 mov	 ebx, DWORD PTR _llp$[esp+28]
  0050c	56		 push	 esi
  0050d	8b 74 24 28	 mov	 esi, DWORD PTR _phTTS$[esp+32]
  00511	3b da		 cmp	 ebx, edx
  00513	89 5c 24 08	 mov	 DWORD PTR _tlp1$[esp+36], ebx
  00517	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0051a	89 44 24 28	 mov	 DWORD PTR _pLts_t$[esp+32], eax
  0051e	74 22		 je	 SHORT $L71887
  00520	66 8b 03	 mov	 ax, WORD PTR [ebx]
  00523	66 3d bc 00	 cmp	 ax, 188			; 000000bcH
  00527	74 06		 je	 SHORT $L71888
  00529	66 3d bd 00	 cmp	 ax, 189			; 000000bdH
  0052d	75 13		 jne	 SHORT $L71887
$L71888:

; 522  : 	{
; 523  : 		ls_spel_spell(phTTS,tlp1, rlp);

  0052f	52		 push	 edx
  00530	53		 push	 ebx
  00531	56		 push	 esi
  00532	e8 00 00 00 00	 call	 _ls_spel_spell
  00537	83 c4 0c	 add	 esp, 12			; 0000000cH

; 524  : 		return (FALSE);

  0053a	33 c0		 xor	 eax, eax
  0053c	5e		 pop	 esi
  0053d	5b		 pop	 ebx

; 778  : }

  0053e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00541	c3		 ret	 0
$L71887:
  00542	55		 push	 ebp
  00543	57		 push	 edi

; 525  : 	}
; 526  : 	pflag = FALSE;				/* Not plural.			*/

  00544	33 ed		 xor	 ebp, ebp

; 527  : 	sflag = FALSE;				/* No user "," seen.	*/

  00546	33 ff		 xor	 edi, edi

; 528  : 	ndig  = 0;

  00548	33 c9		 xor	 ecx, ecx

; 529  : #ifdef LS2DEBUG
; 530  : 	printf("In ls_proc_do_number\n");
; 531  : 
; 532  : #endif
; 533  : 	while (tlp1!=rlp && (IS_DIGIT(tlp1->l_ch) || tlp1->l_ch==pLts_t->schar) &&
; 534  : 		/* MGS 07/22/97 BATS #412 */
; 535  : 		(tlp1->l_ch != 0xBC &&  tlp1->l_ch !=0xBD) ) 

  0054a	3b da		 cmp	 ebx, edx
  0054c	89 6c 24 14	 mov	 DWORD PTR _pflag$[esp+44], ebp
  00550	0f 84 5c 06 00
	00		 je	 $L71973
  00556	b2 10		 mov	 dl, 16			; 00000010H
$L71890:
  00558	66 8b 03	 mov	 ax, WORD PTR [ebx]
  0055b	0f bf e8	 movsx	 ebp, ax
  0055e	84 95 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ebp], dl
  00564	75 0d		 jne	 SHORT $L71892
  00566	8b 6c 24 30	 mov	 ebp, DWORD PTR _pLts_t$[esp+40]
  0056a	66 3b 85 ee 08
	00 00		 cmp	 ax, WORD PTR [ebp+2286]
  00571	75 5a		 jne	 SHORT $L72206
$L71892:
  00573	66 3d bc 00	 cmp	 ax, 188			; 000000bcH
  00577	74 54		 je	 SHORT $L72206
  00579	66 3d bd 00	 cmp	 ax, 189			; 000000bdH
  0057d	74 4e		 je	 SHORT $L72206

; 536  : 	{
; 537  : 		if (tlp1->l_ch == pLts_t->schar)

  0057f	8b 6c 24 30	 mov	 ebp, DWORD PTR _pLts_t$[esp+40]
  00583	66 3b 85 ee 08
	00 00		 cmp	 ax, WORD PTR [ebp+2286]
  0058a	75 07		 jne	 SHORT $L71893

; 538  : 			sflag = TRUE;

  0058c	bf 01 00 00 00	 mov	 edi, 1

; 539  : 		else

  00591	eb 01		 jmp	 SHORT $L71894
$L71893:

; 540  : 			++ndig;

  00593	41		 inc	 ecx
$L71894:

; 529  : #ifdef LS2DEBUG
; 530  : 	printf("In ls_proc_do_number\n");
; 531  : 
; 532  : #endif
; 533  : 	while (tlp1!=rlp && (IS_DIGIT(tlp1->l_ch) || tlp1->l_ch==pLts_t->schar) &&
; 534  : 		/* MGS 07/22/97 BATS #412 */
; 535  : 		(tlp1->l_ch != 0xBC &&  tlp1->l_ch !=0xBD) ) 

  00594	8b 44 24 38	 mov	 eax, DWORD PTR _rlp$[esp+40]

; 541  : 		++tlp1;

  00598	83 c3 02	 add	 ebx, 2
  0059b	3b d8		 cmp	 ebx, eax
  0059d	75 b9		 jne	 SHORT $L71890
  0059f	89 5c 24 10	 mov	 DWORD PTR _tlp1$[esp+44], ebx
$L71891:

; 542  : 	}
; 543  : 	if (ndig>18 && sflag!=FALSE) 

  005a3	83 f9 12	 cmp	 ecx, 18			; 00000012H
  005a6	7e 69		 jle	 SHORT $L72186
  005a8	85 ff		 test	 edi, edi
  005aa	0f 84 2b 04 00
	00		 je	 $L71904

; 544  : 	{
; 545  : 		/* Long, commas.	*/
; 546  : 		tlp2 = llp;

  005b0	8b 7c 24 34	 mov	 edi, DWORD PTR _llp$[esp+40]

; 547  : 		while (tlp2 != tlp1) 

  005b4	3b fb		 cmp	 edi, ebx
  005b6	74 4f		 je	 SHORT $L71898
$L71897:

; 548  : 		{
; 549  : 			/* Pause where you are	*/
; 550  : 			c = tlp2->l_ch;		/* told to do so.	*/

  005b8	0f bf 07	 movsx	 eax, WORD PTR [edi]

; 551  : 			++tlp2;
; 552  : 			if (c == pLts_t->schar)

  005bb	0f bf 8d ee 08
	00 00		 movsx	 ecx, WORD PTR [ebp+2286]
  005c2	83 c7 02	 add	 edi, 2
  005c5	3b c1		 cmp	 eax, ecx
  005c7	75 0e		 jne	 SHORT $L71899

; 553  : 				ls_util_send_phone(phTTS,COMMA);

  005c9	6a 73		 push	 115			; 00000073H

; 554  : 			else 

  005cb	eb 2d		 jmp	 SHORT $L72220
$L72206:

; 529  : #ifdef LS2DEBUG
; 530  : 	printf("In ls_proc_do_number\n");
; 531  : 
; 532  : #endif
; 533  : 	while (tlp1!=rlp && (IS_DIGIT(tlp1->l_ch) || tlp1->l_ch==pLts_t->schar) &&
; 534  : 		/* MGS 07/22/97 BATS #412 */
; 535  : 		(tlp1->l_ch != 0xBC &&  tlp1->l_ch !=0xBD) ) 

  005cd	8b 6c 24 30	 mov	 ebp, DWORD PTR _pLts_t$[esp+40]

; 541  : 		++tlp1;

  005d1	89 5c 24 10	 mov	 DWORD PTR _tlp1$[esp+44], ebx
  005d5	eb cc		 jmp	 SHORT $L71891
$L71899:

; 555  : 			{
; 556  : 				ls_util_send_phone_list(phTTS,punits[c-'0']);

  005d7	8b 14 85 40 ff
	ff ff		 mov	 edx, DWORD PTR _punits[eax*4-192]
  005de	52		 push	 edx
  005df	56		 push	 esi
  005e0	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  005e5	83 c4 08	 add	 esp, 8

; 557  : 				if (tlp2!=tlp1 && tlp2->l_ch!=pLts_t->schar)

  005e8	3b fb		 cmp	 edi, ebx
  005ea	74 1b		 je	 SHORT $L71898
  005ec	66 8b 07	 mov	 ax, WORD PTR [edi]
  005ef	66 3b 85 ee 08
	00 00		 cmp	 ax, WORD PTR [ebp+2286]
  005f6	74 0b		 je	 SHORT $L71901

; 558  : 					ls_util_send_phone(phTTS,WBOUND);

  005f8	6a 6f		 push	 111			; 0000006fH
$L72220:
  005fa	56		 push	 esi
  005fb	e8 00 00 00 00	 call	 _ls_util_send_phone
  00600	83 c4 08	 add	 esp, 8
$L71901:

; 547  : 		while (tlp2 != tlp1) 

  00603	3b fb		 cmp	 edi, ebx
  00605	75 b1		 jne	 SHORT $L71897
$L71898:

; 559  : 			}
; 560  : 		}
; 561  : 		pflag = TRUE;

  00607	bd 01 00 00 00	 mov	 ebp, 1

; 562  : 	} 
; 563  : 	else

  0060c	e9 99 04 00 00	 jmp	 $out$71932
$L72186:

; 564  : 	{ 
; 565  : 		if (ndig>18 || (ndig>1 && llp->l_ch=='0')) 

  00611	8b 54 24 34	 mov	 edx, DWORD PTR _llp$[esp+40]
  00615	83 f9 01	 cmp	 ecx, 1
  00618	7e 0a		 jle	 SHORT $L71903
  0061a	66 83 3a 30	 cmp	 WORD PTR [edx], 48	; 00000030H
  0061e	0f 84 b7 03 00
	00		 je	 $L71904
$L71903:

; 599  : 		} 
; 600  : 		else 
; 601  : 		{
; 602  : 			if (ndig != 0) 

  00624	85 c9		 test	 ecx, ecx
  00626	0f 84 7a 04 00
	00		 je	 $L72211

; 603  : 			{
; 604  : 				n = 18;				/* Right justify	*/
; 605  : 
; 606  : 				tlp2 = tlp1;
; 607  : 				while (tlp2 != llp)

  0062c	3b da		 cmp	 ebx, edx
  0062e	bf 12 00 00 00	 mov	 edi, 18			; 00000012H
  00633	8b c3		 mov	 eax, ebx
  00635	74 2d		 je	 SHORT $L71925
  00637	eb 04		 jmp	 SHORT $L71921
$L72215:
  00639	8b 6c 24 30	 mov	 ebp, DWORD PTR _pLts_t$[esp+40]
$L71921:

; 608  : 				{
; 609  : 					c = (--tlp2)->l_ch;

  0063d	0f bf 48 fe	 movsx	 ecx, WORD PTR [eax-2]

; 610  : 					if (c != pLts_t->schar)

  00641	0f bf ad ee 08
	00 00		 movsx	 ebp, WORD PTR [ebp+2286]
  00648	83 e8 02	 sub	 eax, 2
  0064b	3b cd		 cmp	 ecx, ebp
  0064d	74 05		 je	 SHORT $L71923

; 611  : 						buf[--n] = c;

  0064f	4f		 dec	 edi
  00650	88 4c 3c 18	 mov	 BYTE PTR _buf$[esp+edi+44], cl
$L71923:

; 603  : 			{
; 604  : 				n = 18;				/* Right justify	*/
; 605  : 
; 606  : 				tlp2 = tlp1;
; 607  : 				while (tlp2 != llp)

  00654	3b c2		 cmp	 eax, edx
  00656	75 e1		 jne	 SHORT $L72215

; 612  : 				}
; 613  : 				if (n!=17 || buf[17]!='1')	/* Watch for "1".	*/

  00658	83 ff 11	 cmp	 edi, 17			; 00000011H
  0065b	75 07		 jne	 SHORT $L71925
  0065d	80 7c 24 29 31	 cmp	 BYTE PTR _buf$[esp+61], 49 ; 00000031H
  00662	74 0b		 je	 SHORT $L72210
$L71925:

; 614  : 					pflag = TRUE;
; 615  : 				while (n != 0)

  00664	85 ff		 test	 edi, edi
  00666	bd 01 00 00 00	 mov	 ebp, 1
  0066b	74 0e		 je	 SHORT $L71928
  0066d	eb 04		 jmp	 SHORT $L71927
$L72210:
  0066f	8b 6c 24 14	 mov	 ebp, DWORD PTR _pflag$[esp+44]
$L71927:

; 616  : 					buf[--n] = '0';

  00673	4f		 dec	 edi
  00674	c6 44 3c 18 30	 mov	 BYTE PTR _buf$[esp+edi+44], 48 ; 00000030H
  00679	75 f8		 jne	 SHORT $L71927
$L71928:

; 617  : 				if (ls_proc_non_zero(&buf[0], 3) != FALSE) 

  0067b	8d 4c 24 18	 lea	 ecx, DWORD PTR _buf$[esp+44]
  0067f	6a 03		 push	 3
  00681	51		 push	 ecx
  00682	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00687	83 c4 08	 add	 esp, 8
  0068a	85 c0		 test	 eax, eax
  0068c	0f 84 91 00 00
	00		 je	 $L71936

; 618  : 				{	/* Quadrillions		*/
; 619  : 					ls_proc_do_digit_group(phTTS,&buf[0], FALSE);

  00692	8d 54 24 18	 lea	 edx, DWORD PTR _buf$[esp+44]
  00696	6a 00		 push	 0
  00698	52		 push	 edx
  00699	56		 push	 esi
  0069a	e8 00 00 00 00	 call	 _ls_proc_do_digit_group

; 620  : 					ls_util_send_phone(phTTS,WBOUND);

  0069f	6a 6f		 push	 111			; 0000006fH
  006a1	56		 push	 esi
  006a2	e8 00 00 00 00	 call	 _ls_util_send_phone

; 621  : 					ls_util_send_phone_list(phTTS,pquadrillion);

  006a7	68 00 00 00 00	 push	 OFFSET FLAT:_pquadrillion
  006ac	56		 push	 esi
  006ad	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 622  : 					if (ls_proc_non_zero(&buf[3], 15) == FALSE) 

  006b2	8d 44 24 37	 lea	 eax, DWORD PTR _buf$[esp+75]
  006b6	6a 0f		 push	 15			; 0000000fH
  006b8	50		 push	 eax
  006b9	e8 00 00 00 00	 call	 _ls_proc_non_zero
  006be	83 c4 24	 add	 esp, 36			; 00000024H
  006c1	85 c0		 test	 eax, eax
  006c3	75 1c		 jne	 SHORT $L71930

; 623  : 					{
; 624  : 
; 625  : 						if (oflag != FALSE)

  006c5	8b 44 24 3c	 mov	 eax, DWORD PTR _oflag$[esp+40]
  006c9	85 c0		 test	 eax, eax
  006cb	0f 84 d9 03 00
	00		 je	 $out$71932

; 626  : 						{
; 627  : 							ls_util_send_phone(phTTS,US_TH);

  006d1	6a 27		 push	 39			; 00000027H
  006d3	56		 push	 esi
  006d4	e8 00 00 00 00	 call	 _ls_util_send_phone
  006d9	83 c4 08	 add	 esp, 8

; 628  : 						}
; 629  : 						goto out;

  006dc	e9 c9 03 00 00	 jmp	 $out$71932
$L71930:

; 630  : 					}
; 631  : 					if (ls_proc_non_zero(&buf[4], 14) == FALSE)

  006e1	8d 4c 24 1c	 lea	 ecx, DWORD PTR _buf$[esp+48]
  006e5	6a 0e		 push	 14			; 0000000eH
  006e7	51		 push	 ecx
  006e8	e8 00 00 00 00	 call	 _ls_proc_non_zero
  006ed	83 c4 08	 add	 esp, 8
  006f0	85 c0		 test	 eax, eax
  006f2	75 04		 jne	 SHORT $L71933

; 632  : 						ls_util_send_phone(phTTS,VPSTART);

  006f4	6a 71		 push	 113			; 00000071H

; 633  : 					else if (ls_proc_non_zero(&buf[3], 1) == FALSE)

  006f6	eb 22		 jmp	 SHORT $L72221
$L71933:
  006f8	8d 54 24 1b	 lea	 edx, DWORD PTR _buf$[esp+47]
  006fc	6a 01		 push	 1
  006fe	52		 push	 edx
  006ff	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00704	83 c4 08	 add	 esp, 8
  00707	85 c0		 test	 eax, eax
  00709	75 0d		 jne	 SHORT $L71935

; 634  : 						ls_util_send_phone_list(phTTS,pand);

  0070b	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  00710	56		 push	 esi
  00711	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 635  : 					else

  00716	eb 08		 jmp	 SHORT $L72222
$L71935:

; 636  : 						ls_util_send_phone(phTTS,COMMA);

  00718	6a 73		 push	 115			; 00000073H
$L72221:
  0071a	56		 push	 esi
  0071b	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72222:
  00720	83 c4 08	 add	 esp, 8
$L71936:

; 637  : 				}
; 638  : 				if (ls_proc_non_zero(&buf[3], 3) != FALSE) 

  00723	8d 44 24 1b	 lea	 eax, DWORD PTR _buf$[esp+47]
  00727	6a 03		 push	 3
  00729	50		 push	 eax
  0072a	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0072f	83 c4 08	 add	 esp, 8
  00732	85 c0		 test	 eax, eax
  00734	0f 84 91 00 00
	00		 je	 $L71943

; 639  : 				{	/* Trillions		*/
; 640  : 					ls_proc_do_digit_group(phTTS,&buf[3], FALSE);

  0073a	8d 4c 24 1b	 lea	 ecx, DWORD PTR _buf$[esp+47]
  0073e	6a 00		 push	 0
  00740	51		 push	 ecx
  00741	56		 push	 esi
  00742	e8 00 00 00 00	 call	 _ls_proc_do_digit_group

; 641  : 					ls_util_send_phone(phTTS,WBOUND);

  00747	6a 6f		 push	 111			; 0000006fH
  00749	56		 push	 esi
  0074a	e8 00 00 00 00	 call	 _ls_util_send_phone

; 642  : 					ls_util_send_phone_list(phTTS,ptrillion);

  0074f	68 00 00 00 00	 push	 OFFSET FLAT:_ptrillion
  00754	56		 push	 esi
  00755	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 643  : 					if (ls_proc_non_zero(&buf[6], 12) == FALSE) 

  0075a	8d 54 24 3a	 lea	 edx, DWORD PTR _buf$[esp+78]
  0075e	6a 0c		 push	 12			; 0000000cH
  00760	52		 push	 edx
  00761	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00766	83 c4 24	 add	 esp, 36			; 00000024H
  00769	85 c0		 test	 eax, eax
  0076b	75 1c		 jne	 SHORT $L71938

; 644  : 					{
; 645  : 
; 646  : 						if (oflag != FALSE)

  0076d	8b 44 24 3c	 mov	 eax, DWORD PTR _oflag$[esp+40]
  00771	85 c0		 test	 eax, eax
  00773	0f 84 31 03 00
	00		 je	 $out$71932

; 647  : 						{
; 648  :                                                     ls_util_send_phone(phTTS,US_TH);

  00779	6a 27		 push	 39			; 00000027H
  0077b	56		 push	 esi
  0077c	e8 00 00 00 00	 call	 _ls_util_send_phone
  00781	83 c4 08	 add	 esp, 8

; 649  : 						}
; 650  : 						goto out;

  00784	e9 21 03 00 00	 jmp	 $out$71932
$L71938:

; 651  : 					}
; 652  : 					if (ls_proc_non_zero(&buf[7], 11) == FALSE)

  00789	8d 44 24 1f	 lea	 eax, DWORD PTR _buf$[esp+51]
  0078d	6a 0b		 push	 11			; 0000000bH
  0078f	50		 push	 eax
  00790	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00795	83 c4 08	 add	 esp, 8
  00798	85 c0		 test	 eax, eax
  0079a	75 04		 jne	 SHORT $L71940

; 653  : 						ls_util_send_phone(phTTS,VPSTART);

  0079c	6a 71		 push	 113			; 00000071H

; 654  : 					else 

  0079e	eb 22		 jmp	 SHORT $L72223
$L71940:

; 655  : 					if (ls_proc_non_zero(&buf[6], 1) == FALSE)

  007a0	8d 4c 24 1e	 lea	 ecx, DWORD PTR _buf$[esp+50]
  007a4	6a 01		 push	 1
  007a6	51		 push	 ecx
  007a7	e8 00 00 00 00	 call	 _ls_proc_non_zero
  007ac	83 c4 08	 add	 esp, 8
  007af	85 c0		 test	 eax, eax
  007b1	75 0d		 jne	 SHORT $L71942

; 656  : 						ls_util_send_phone_list(phTTS,pand);

  007b3	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  007b8	56		 push	 esi
  007b9	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 657  : 					else

  007be	eb 08		 jmp	 SHORT $L72224
$L71942:

; 658  : 						ls_util_send_phone(phTTS,COMMA);

  007c0	6a 73		 push	 115			; 00000073H
$L72223:
  007c2	56		 push	 esi
  007c3	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72224:
  007c8	83 c4 08	 add	 esp, 8
$L71943:

; 659  : 				}
; 660  : 				if (ls_proc_non_zero(&buf[6], 3) != FALSE) 

  007cb	8d 54 24 1e	 lea	 edx, DWORD PTR _buf$[esp+50]
  007cf	6a 03		 push	 3
  007d1	52		 push	 edx
  007d2	e8 00 00 00 00	 call	 _ls_proc_non_zero
  007d7	83 c4 08	 add	 esp, 8
  007da	85 c0		 test	 eax, eax
  007dc	0f 84 91 00 00
	00		 je	 $L71950

; 661  : 				{	/* Billions		*/
; 662  : 					ls_proc_do_digit_group(phTTS,&buf[6], FALSE);

  007e2	8d 44 24 1e	 lea	 eax, DWORD PTR _buf$[esp+50]
  007e6	6a 00		 push	 0
  007e8	50		 push	 eax
  007e9	56		 push	 esi
  007ea	e8 00 00 00 00	 call	 _ls_proc_do_digit_group

; 663  : 					ls_util_send_phone(phTTS,WBOUND);

  007ef	6a 6f		 push	 111			; 0000006fH
  007f1	56		 push	 esi
  007f2	e8 00 00 00 00	 call	 _ls_util_send_phone

; 664  : 					ls_util_send_phone_list(phTTS,pbillion);

  007f7	68 00 00 00 00	 push	 OFFSET FLAT:_pbillion
  007fc	56		 push	 esi
  007fd	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 665  : 					if (ls_proc_non_zero(&buf[9], 9) == FALSE) 

  00802	8d 4c 24 3d	 lea	 ecx, DWORD PTR _buf$[esp+81]
  00806	6a 09		 push	 9
  00808	51		 push	 ecx
  00809	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0080e	83 c4 24	 add	 esp, 36			; 00000024H
  00811	85 c0		 test	 eax, eax
  00813	75 1c		 jne	 SHORT $L71945

; 666  : 					{
; 667  : 
; 668  : 						if (oflag != FALSE)

  00815	8b 44 24 3c	 mov	 eax, DWORD PTR _oflag$[esp+40]
  00819	85 c0		 test	 eax, eax
  0081b	0f 84 89 02 00
	00		 je	 $out$71932

; 669  : 						{
; 670  : 							ls_util_send_phone(phTTS,US_TH);

  00821	6a 27		 push	 39			; 00000027H
  00823	56		 push	 esi
  00824	e8 00 00 00 00	 call	 _ls_util_send_phone
  00829	83 c4 08	 add	 esp, 8

; 671  : 						}
; 672  : 						goto out;

  0082c	e9 79 02 00 00	 jmp	 $out$71932
$L71945:

; 673  : 					}
; 674  : 					if (ls_proc_non_zero(&buf[10], 8) == FALSE)

  00831	8d 54 24 22	 lea	 edx, DWORD PTR _buf$[esp+54]
  00835	6a 08		 push	 8
  00837	52		 push	 edx
  00838	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0083d	83 c4 08	 add	 esp, 8
  00840	85 c0		 test	 eax, eax
  00842	75 04		 jne	 SHORT $L71947

; 675  : 						ls_util_send_phone(phTTS,VPSTART);

  00844	6a 71		 push	 113			; 00000071H

; 676  : 					else 

  00846	eb 22		 jmp	 SHORT $L72225
$L71947:

; 677  : 					if (ls_proc_non_zero(&buf[9], 1) == FALSE)

  00848	8d 44 24 21	 lea	 eax, DWORD PTR _buf$[esp+53]
  0084c	6a 01		 push	 1
  0084e	50		 push	 eax
  0084f	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00854	83 c4 08	 add	 esp, 8
  00857	85 c0		 test	 eax, eax
  00859	75 0d		 jne	 SHORT $L71949

; 678  : 						ls_util_send_phone_list(phTTS,pand);

  0085b	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  00860	56		 push	 esi
  00861	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 679  : 					else

  00866	eb 08		 jmp	 SHORT $L72226
$L71949:

; 680  : 						ls_util_send_phone(phTTS,COMMA);

  00868	6a 73		 push	 115			; 00000073H
$L72225:
  0086a	56		 push	 esi
  0086b	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72226:
  00870	83 c4 08	 add	 esp, 8
$L71950:

; 681  : 				}
; 682  : 				if (ls_proc_non_zero(&buf[9], 3) != FALSE) 

  00873	8d 4c 24 21	 lea	 ecx, DWORD PTR _buf$[esp+53]
  00877	6a 03		 push	 3
  00879	51		 push	 ecx
  0087a	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0087f	83 c4 08	 add	 esp, 8
  00882	85 c0		 test	 eax, eax
  00884	0f 84 91 00 00
	00		 je	 $L71957

; 683  : 				{	/* Millions		*/
; 684  : 					ls_proc_do_digit_group(phTTS,&buf[9], FALSE);

  0088a	8d 54 24 21	 lea	 edx, DWORD PTR _buf$[esp+53]
  0088e	6a 00		 push	 0
  00890	52		 push	 edx
  00891	56		 push	 esi
  00892	e8 00 00 00 00	 call	 _ls_proc_do_digit_group

; 685  : 					ls_util_send_phone(phTTS,WBOUND);

  00897	6a 6f		 push	 111			; 0000006fH
  00899	56		 push	 esi
  0089a	e8 00 00 00 00	 call	 _ls_util_send_phone

; 686  : 					ls_util_send_phone_list(phTTS,pmillion);

  0089f	68 00 00 00 00	 push	 OFFSET FLAT:_pmillion
  008a4	56		 push	 esi
  008a5	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 687  : 					if (ls_proc_non_zero(&buf[12], 6) == FALSE) 

  008aa	8d 44 24 40	 lea	 eax, DWORD PTR _buf$[esp+84]
  008ae	6a 06		 push	 6
  008b0	50		 push	 eax
  008b1	e8 00 00 00 00	 call	 _ls_proc_non_zero
  008b6	83 c4 24	 add	 esp, 36			; 00000024H
  008b9	85 c0		 test	 eax, eax
  008bb	75 1c		 jne	 SHORT $L71952

; 688  : 					{
; 689  : 
; 690  : 						if (oflag != FALSE)

  008bd	8b 44 24 3c	 mov	 eax, DWORD PTR _oflag$[esp+40]
  008c1	85 c0		 test	 eax, eax
  008c3	0f 84 e1 01 00
	00		 je	 $out$71932

; 691  : 						{
; 692  : 							ls_util_send_phone(phTTS,US_TH);

  008c9	6a 27		 push	 39			; 00000027H
  008cb	56		 push	 esi
  008cc	e8 00 00 00 00	 call	 _ls_util_send_phone
  008d1	83 c4 08	 add	 esp, 8

; 693  : 						}
; 694  : 						goto out;

  008d4	e9 d1 01 00 00	 jmp	 $out$71932
$L71952:

; 695  : 					}
; 696  : 					if (ls_proc_non_zero(&buf[13], 5) == FALSE)

  008d9	8d 4c 24 25	 lea	 ecx, DWORD PTR _buf$[esp+57]
  008dd	6a 05		 push	 5
  008df	51		 push	 ecx
  008e0	e8 00 00 00 00	 call	 _ls_proc_non_zero
  008e5	83 c4 08	 add	 esp, 8
  008e8	85 c0		 test	 eax, eax
  008ea	75 04		 jne	 SHORT $L71954

; 697  : 						ls_util_send_phone(phTTS,VPSTART);

  008ec	6a 71		 push	 113			; 00000071H

; 698  : 					else 

  008ee	eb 22		 jmp	 SHORT $L72227
$L71954:

; 699  : 					if (ls_proc_non_zero(&buf[12], 1) == FALSE)

  008f0	8d 54 24 24	 lea	 edx, DWORD PTR _buf$[esp+56]
  008f4	6a 01		 push	 1
  008f6	52		 push	 edx
  008f7	e8 00 00 00 00	 call	 _ls_proc_non_zero
  008fc	83 c4 08	 add	 esp, 8
  008ff	85 c0		 test	 eax, eax
  00901	75 0d		 jne	 SHORT $L71956

; 700  : 						ls_util_send_phone_list(phTTS,pand);

  00903	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  00908	56		 push	 esi
  00909	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 701  : 					else

  0090e	eb 08		 jmp	 SHORT $L72228
$L71956:

; 702  : 						ls_util_send_phone(phTTS,COMMA);

  00910	6a 73		 push	 115			; 00000073H
$L72227:
  00912	56		 push	 esi
  00913	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72228:
  00918	83 c4 08	 add	 esp, 8
$L71957:

; 703  : 				}
; 704  : 
; 705  : 				if (ls_proc_non_zero(&buf[12], 3) != FALSE) 

  0091b	8d 44 24 24	 lea	 eax, DWORD PTR _buf$[esp+56]
  0091f	6a 03		 push	 3
  00921	50		 push	 eax
  00922	e8 00 00 00 00	 call	 _ls_proc_non_zero
  00927	83 c4 08	 add	 esp, 8
  0092a	85 c0		 test	 eax, eax
  0092c	0f 84 91 00 00
	00		 je	 $L71964

; 706  : 				{	/* Thousands		*/
; 707  : 
; 708  : 					ls_proc_do_digit_group(phTTS,&buf[12], FALSE);

  00932	8d 4c 24 24	 lea	 ecx, DWORD PTR _buf$[esp+56]
  00936	6a 00		 push	 0
  00938	51		 push	 ecx
  00939	56		 push	 esi
  0093a	e8 00 00 00 00	 call	 _ls_proc_do_digit_group

; 709  : 					ls_util_send_phone(phTTS,WBOUND);

  0093f	6a 6f		 push	 111			; 0000006fH
  00941	56		 push	 esi
  00942	e8 00 00 00 00	 call	 _ls_util_send_phone

; 710  : 					ls_util_send_phone_list(phTTS,pthousand);

  00947	68 00 00 00 00	 push	 OFFSET FLAT:_pthousand
  0094c	56		 push	 esi
  0094d	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 711  : 					if (ls_proc_non_zero(&buf[15], 3) == FALSE) 

  00952	8d 54 24 43	 lea	 edx, DWORD PTR _buf$[esp+87]
  00956	6a 03		 push	 3
  00958	52		 push	 edx
  00959	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0095e	83 c4 24	 add	 esp, 36			; 00000024H
  00961	85 c0		 test	 eax, eax
  00963	75 1c		 jne	 SHORT $L71959

; 712  : 					{
; 713  : 						if (oflag != FALSE)

  00965	8b 44 24 3c	 mov	 eax, DWORD PTR _oflag$[esp+40]
  00969	85 c0		 test	 eax, eax
  0096b	0f 84 39 01 00
	00		 je	 $out$71932

; 714  : 						{
; 715  : 							ls_util_send_phone(phTTS,US_TH);

  00971	6a 27		 push	 39			; 00000027H
  00973	56		 push	 esi
  00974	e8 00 00 00 00	 call	 _ls_util_send_phone
  00979	83 c4 08	 add	 esp, 8

; 716  : 						}
; 717  : 						goto out;

  0097c	e9 29 01 00 00	 jmp	 $out$71932
$L71959:

; 718  : 					}
; 719  : 					if (ls_proc_non_zero(&buf[16], 2) == FALSE)

  00981	8d 44 24 28	 lea	 eax, DWORD PTR _buf$[esp+60]
  00985	6a 02		 push	 2
  00987	50		 push	 eax
  00988	e8 00 00 00 00	 call	 _ls_proc_non_zero
  0098d	83 c4 08	 add	 esp, 8
  00990	85 c0		 test	 eax, eax
  00992	75 04		 jne	 SHORT $L71961

; 720  : 						ls_util_send_phone(phTTS,VPSTART);

  00994	6a 71		 push	 113			; 00000071H

; 721  : 					else if (ls_proc_non_zero(&buf[15], 1) == FALSE)

  00996	eb 22		 jmp	 SHORT $L72229
$L71961:
  00998	8d 4c 24 27	 lea	 ecx, DWORD PTR _buf$[esp+59]
  0099c	6a 01		 push	 1
  0099e	51		 push	 ecx
  0099f	e8 00 00 00 00	 call	 _ls_proc_non_zero
  009a4	83 c4 08	 add	 esp, 8
  009a7	85 c0		 test	 eax, eax
  009a9	75 0d		 jne	 SHORT $L71963

; 722  : 						ls_util_send_phone_list(phTTS,pand);

  009ab	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  009b0	56		 push	 esi
  009b1	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 723  : 					else

  009b6	eb 08		 jmp	 SHORT $L72230
$L71963:

; 724  : 						ls_util_send_phone(phTTS,COMMA);

  009b8	6a 73		 push	 115			; 00000073H
$L72229:
  009ba	56		 push	 esi
  009bb	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72230:
  009c0	83 c4 08	 add	 esp, 8
$L71964:

; 725  : 				}
; 726  : 		
; 727  : 				ls_proc_do_digit_group(phTTS,&buf[15], oflag);	/* Units		*/

  009c3	8b 54 24 3c	 mov	 edx, DWORD PTR _oflag$[esp+40]
  009c7	8d 44 24 27	 lea	 eax, DWORD PTR _buf$[esp+59]
  009cb	52		 push	 edx
  009cc	50		 push	 eax
  009cd	56		 push	 esi
  009ce	e8 00 00 00 00	 call	 _ls_proc_do_digit_group
  009d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  009d6	e9 cf 00 00 00	 jmp	 $out$71932
$L71904:

; 566  : 		{
; 567  : 			tlp2 = llp;

  009db	8b 6c 24 34	 mov	 ebp, DWORD PTR _llp$[esp+40]

; 568  : 			while (ndig >= 6) 

  009df	83 f9 06	 cmp	 ecx, 6
  009e2	7c 68		 jl	 SHORT $L71907
  009e4	83 c1 fd	 add	 ecx, -3			; fffffffdH
  009e7	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  009ec	f7 e1		 mul	 ecx
  009ee	d1 ea		 shr	 edx, 1
  009f0	89 54 24 3c	 mov	 DWORD PTR 20+[esp+40], edx
$L71906:

; 569  : 			{
; 570  : 				/* At least 1 group.	*/
; 571  : 				n = 0;

  009f4	33 ff		 xor	 edi, edi
$L71909:

; 572  : 				while (n < 3) 
; 573  : 				{
; 574  : 					if ((c=tlp2->l_ch) != pLts_t->schar) 

  009f6	8b 4c 24 30	 mov	 ecx, DWORD PTR _pLts_t$[esp+40]
  009fa	0f bf 5d 00	 movsx	 ebx, WORD PTR [ebp]
  009fe	0f bf 91 ee 08
	00 00		 movsx	 edx, WORD PTR [ecx+2286]
  00a05	3b da		 cmp	 ebx, edx
  00a07	74 21		 je	 SHORT $L71911

; 575  : 					{
; 576  : 						if (n != 0)

  00a09	85 ff		 test	 edi, edi
  00a0b	74 0b		 je	 SHORT $L71912

; 577  : 							ls_util_send_phone(phTTS,WBOUND);

  00a0d	6a 6f		 push	 111			; 0000006fH
  00a0f	56		 push	 esi
  00a10	e8 00 00 00 00	 call	 _ls_util_send_phone
  00a15	83 c4 08	 add	 esp, 8
$L71912:

; 578  : 						++n;
; 579  : 						ls_util_send_phone_list(phTTS,punits[c-'0']);

  00a18	8b 04 9d 40 ff
	ff ff		 mov	 eax, DWORD PTR _punits[ebx*4-192]
  00a1f	47		 inc	 edi
  00a20	50		 push	 eax
  00a21	56		 push	 esi
  00a22	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00a27	83 c4 08	 add	 esp, 8
$L71911:

; 580  : 					}
; 581  : 					++tlp2;

  00a2a	83 c5 02	 add	 ebp, 2
  00a2d	83 ff 03	 cmp	 edi, 3
  00a30	7c c4		 jl	 SHORT $L71909

; 582  : 				}
; 583  : 				ls_util_send_phone(phTTS,COMMA);

  00a32	6a 73		 push	 115			; 00000073H
  00a34	56		 push	 esi
  00a35	e8 00 00 00 00	 call	 _ls_util_send_phone
  00a3a	8b 44 24 44	 mov	 eax, DWORD PTR 20+[esp+48]
  00a3e	83 c4 08	 add	 esp, 8
  00a41	48		 dec	 eax
  00a42	89 44 24 3c	 mov	 DWORD PTR 20+[esp+40], eax
  00a46	75 ac		 jne	 SHORT $L71906

; 568  : 			while (ndig >= 6) 

  00a48	8b 5c 24 10	 mov	 ebx, DWORD PTR _tlp1$[esp+44]
$L71907:

; 584  : 				ndig -= 3;
; 585  : 			}
; 586  : 			n = 0;				/* Last group.		*/
; 587  : 			while (tlp2 != tlp1) 

  00a4c	3b eb		 cmp	 ebp, ebx
  00a4e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR _n$[esp+40], 0
  00a56	74 47		 je	 SHORT $L71915
$L71914:

; 588  : 			{
; 589  : 				if ((c=tlp2->l_ch) != pLts_t->schar) 

  00a58	8b 4c 24 30	 mov	 ecx, DWORD PTR _pLts_t$[esp+40]
  00a5c	0f bf 7d 00	 movsx	 edi, WORD PTR [ebp]
  00a60	0f bf 91 ee 08
	00 00		 movsx	 edx, WORD PTR [ecx+2286]
  00a67	3b fa		 cmp	 edi, edx
  00a69	74 2d		 je	 SHORT $L71916

; 590  : 				{
; 591  : 					if (n != 0)

  00a6b	8b 44 24 3c	 mov	 eax, DWORD PTR _n$[esp+40]
  00a6f	85 c0		 test	 eax, eax
  00a71	74 0b		 je	 SHORT $L71917

; 592  : 						ls_util_send_phone(phTTS,WBOUND);

  00a73	6a 6f		 push	 111			; 0000006fH
  00a75	56		 push	 esi
  00a76	e8 00 00 00 00	 call	 _ls_util_send_phone
  00a7b	83 c4 08	 add	 esp, 8
$L71917:

; 593  : 					++n;

  00a7e	8b 44 24 3c	 mov	 eax, DWORD PTR _n$[esp+40]
  00a82	40		 inc	 eax
  00a83	89 44 24 3c	 mov	 DWORD PTR _n$[esp+40], eax

; 594  : 					ls_util_send_phone_list(phTTS,punits[c-'0']);

  00a87	8b 04 bd 40 ff
	ff ff		 mov	 eax, DWORD PTR _punits[edi*4-192]
  00a8e	50		 push	 eax
  00a8f	56		 push	 esi
  00a90	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00a95	83 c4 08	 add	 esp, 8
$L71916:

; 595  : 				}
; 596  : 				++tlp2;

  00a98	83 c5 02	 add	 ebp, 2
  00a9b	3b eb		 cmp	 ebp, ebx
  00a9d	75 b9		 jne	 SHORT $L71914
$L71915:

; 597  : 			}
; 598  : 			pflag = TRUE;			/* Long => plural.	*/

  00a9f	bd 01 00 00 00	 mov	 ebp, 1
  00aa4	eb 04		 jmp	 SHORT $out$71932
$L72211:
  00aa6	8b 6c 24 14	 mov	 ebp, DWORD PTR _pflag$[esp+44]
$out$71932:

; 728  : 
; 729  : 			out:	;
; 730  : 			}
; 731  : 		}
; 732  : 	}
; 733  : 	/* This code handles integer parts like "1 1/2".		*/
; 734  : 	if (tlp1!=rlp && (tlp1->l_ch==0xBC || tlp1->l_ch==0xBD)) 

  00aaa	8b 7c 24 38	 mov	 edi, DWORD PTR _rlp$[esp+40]
  00aae	3b df		 cmp	 ebx, edi
  00ab0	0f 84 fc 00 00
	00		 je	 $L71973
  00ab6	66 8b 03	 mov	 ax, WORD PTR [ebx]
  00ab9	66 3d bc 00	 cmp	 ax, 188			; 000000bcH
  00abd	74 06		 je	 SHORT $L71966
  00abf	66 3d bd 00	 cmp	 ax, 189			; 000000bdH
  00ac3	75 24		 jne	 SHORT $L71965
$L71966:

; 735  : 	{
; 736  : 		ls_util_send_phone_list(phTTS,pand);

  00ac5	68 00 00 00 00	 push	 OFFSET FLAT:_pand
  00aca	56		 push	 esi
  00acb	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 737  : 		ls_spel_spell(phTTS,tlp1, tlp1+1);

  00ad0	8d 7b 02	 lea	 edi, DWORD PTR [ebx+2]
  00ad3	57		 push	 edi
  00ad4	53		 push	 ebx
  00ad5	56		 push	 esi
  00ad6	e8 00 00 00 00	 call	 _ls_spel_spell

; 738  : 		++tlp1;

  00adb	8b df		 mov	 ebx, edi

; 739  : 		pflag = TRUE;			/* Always plural.	*/

  00add	8b 7c 24 4c	 mov	 edi, DWORD PTR _rlp$[esp+60]
  00ae1	83 c4 14	 add	 esp, 20			; 00000014H
  00ae4	bd 01 00 00 00	 mov	 ebp, 1
$L71965:

; 740  : 	}
; 741  : 	if (tlp1!=rlp && tlp1->l_ch==pLts_t->fchar) 

  00ae9	3b df		 cmp	 ebx, edi
  00aeb	0f 84 c1 00 00
	00		 je	 $L71973
  00af1	8b 54 24 30	 mov	 edx, DWORD PTR _pLts_t$[esp+40]
  00af5	66 8b 0b	 mov	 cx, WORD PTR [ebx]
  00af8	66 3b 8a ec 08
	00 00		 cmp	 cx, WORD PTR [edx+2284]
  00aff	75 6c		 jne	 SHORT $L71967

; 742  : 	{	/* Fraction digits.	*/
; 743  : 		if (llp != tlp1)

  00b01	39 5c 24 34	 cmp	 DWORD PTR _llp$[esp+40], ebx
  00b05	74 0b		 je	 SHORT $L71968

; 744  : 			ls_util_send_phone(phTTS,WBOUND);

  00b07	6a 6f		 push	 111			; 0000006fH
  00b09	56		 push	 esi
  00b0a	e8 00 00 00 00	 call	 _ls_util_send_phone
  00b0f	83 c4 08	 add	 esp, 8
$L71968:

; 745  : 		ls_util_send_phone_list(phTTS,ppoint);

  00b12	68 00 00 00 00	 push	 OFFSET FLAT:_ppoint
  00b17	56		 push	 esi
  00b18	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 746  : 		tlp2 = tlp1;
; 747  : 		++tlp1;

  00b1d	83 c3 02	 add	 ebx, 2
  00b20	83 c4 08	 add	 esp, 8

; 748  : 		while (tlp1!=rlp && tlp1->l_ch!='e') 

  00b23	3b df		 cmp	 ebx, edi
  00b25	74 41		 je	 SHORT $L71971
$L71970:
  00b27	66 8b 03	 mov	 ax, WORD PTR [ebx]
  00b2a	66 3d 65 00	 cmp	 ax, 101			; 00000065H
  00b2e	74 38		 je	 SHORT $L71971

; 749  : 		{
; 750  : 			c = tlp1->l_ch;

  00b30	0f bf f8	 movsx	 edi, ax

; 751  : 			if (c != pLts_t->schar) 

  00b33	8b 44 24 30	 mov	 eax, DWORD PTR _pLts_t$[esp+40]
  00b37	0f bf 88 ee 08
	00 00		 movsx	 ecx, WORD PTR [eax+2286]
  00b3e	3b f9		 cmp	 edi, ecx
  00b40	74 19		 je	 SHORT $L71972

; 752  : 			{
; 753  : 				ls_util_send_phone(phTTS,WBOUND);

  00b42	6a 6f		 push	 111			; 0000006fH
  00b44	56		 push	 esi
  00b45	e8 00 00 00 00	 call	 _ls_util_send_phone

; 754  : 				ls_util_send_phone_list(phTTS,punits[c-'0']);

  00b4a	8b 14 bd 40 ff
	ff ff		 mov	 edx, DWORD PTR _punits[edi*4-192]
  00b51	52		 push	 edx
  00b52	56		 push	 esi
  00b53	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00b58	83 c4 10	 add	 esp, 16			; 00000010H
$L71972:
  00b5b	8b 44 24 38	 mov	 eax, DWORD PTR _rlp$[esp+40]

; 755  : 			}
; 756  : 			++tlp1;

  00b5f	83 c3 02	 add	 ebx, 2
  00b62	3b d8		 cmp	 ebx, eax
  00b64	8b f8		 mov	 edi, eax
  00b66	75 bf		 jne	 SHORT $L71970
$L71971:

; 757  : 		}
; 758  : 		pflag = TRUE;								/* 1.01 is plural.	*/

  00b68	bd 01 00 00 00	 mov	 ebp, 1
$L71967:

; 759  : 	}
; 760  : 	if (tlp1 != rlp) 

  00b6d	3b df		 cmp	 ebx, edi
  00b6f	74 41		 je	 SHORT $L71973

; 761  : 	{												/* Must be an "e".	*/
; 762  : 		ls_util_send_phone_list(phTTS,ptt2tp);		/* " " on end.		*/

  00b71	68 00 00 00 00	 push	 OFFSET FLAT:_ptt2tp
  00b76	56		 push	 esi
  00b77	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 763  : 		tlp2 = tlp1;
; 764  : 		++tlp1;										/* Skip "e"			*/

  00b7c	83 c3 02	 add	 ebx, 2
  00b7f	83 c4 08	 add	 esp, 8

; 765  : 		if (tlp1 != rlp) 

  00b82	3b df		 cmp	 ebx, edi
  00b84	74 1a		 je	 SHORT $L71975

; 766  : 		{											/* Handle signs.	*/
; 767  : 			c = tlp1->l_ch;

  00b86	0f bf 03	 movsx	 eax, WORD PTR [ebx]

; 768  : 			if (c=='-' || c=='+') 

  00b89	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b8c	74 05		 je	 SHORT $L71976
  00b8e	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00b91	75 0d		 jne	 SHORT $L71975
$L71976:

; 769  : 			{
; 770  : 				ls_proc_do_sign(phTTS,c);

  00b93	50		 push	 eax
  00b94	56		 push	 esi
  00b95	e8 00 00 00 00	 call	 _ls_proc_do_sign
  00b9a	83 c4 08	 add	 esp, 8

; 771  : 				++tlp1;

  00b9d	83 c3 02	 add	 ebx, 2
$L71975:

; 772  : 			}
; 773  : 		}
; 774  : 		ls_proc_do_number(phTTS,tlp1, rlp, FALSE);	/* Cannot recur on "e".	*/

  00ba0	6a 00		 push	 0
  00ba2	57		 push	 edi
  00ba3	53		 push	 ebx
  00ba4	56		 push	 esi
  00ba5	e8 00 00 00 00	 call	 _ls_proc_do_number
  00baa	83 c4 10	 add	 esp, 16			; 00000010H

; 775  : 		pflag = TRUE;								/* 1E01 is plural.		*/

  00bad	bd 01 00 00 00	 mov	 ebp, 1
$L71973:

; 776  : 	}
; 777  : 	return (pflag);

  00bb2	8b c5		 mov	 eax, ebp
  00bb4	5f		 pop	 edi
  00bb5	5d		 pop	 ebp
  00bb6	5e		 pop	 esi
  00bb7	5b		 pop	 ebx

; 778  : }

  00bb8	83 c4 1c	 add	 esp, 28			; 0000001cH
  00bbb	c3		 ret	 0
_ls_proc_do_number ENDP
_p$ = 8
_n$ = 12
_ls_proc_non_zero PROC NEAR

; 798  : 	while (n--) 

  00bc0	8b 4c 24 08	 mov	 ecx, DWORD PTR _n$[esp-4]
  00bc4	8b c1		 mov	 eax, ecx
  00bc6	49		 dec	 ecx
  00bc7	85 c0		 test	 eax, eax
  00bc9	74 11		 je	 SHORT $L71984
  00bcb	8b 44 24 04	 mov	 eax, DWORD PTR _p$[esp-4]
$L71983:

; 799  : 	{
; 800  : 		if (*p != '0')

  00bcf	80 38 30	 cmp	 BYTE PTR [eax], 48	; 00000030H
  00bd2	75 0b		 jne	 SHORT $L72233

; 802  : 		++p;

  00bd4	40		 inc	 eax
  00bd5	8b d1		 mov	 edx, ecx
  00bd7	49		 dec	 ecx
  00bd8	85 d2		 test	 edx, edx
  00bda	75 f3		 jne	 SHORT $L71983
$L71984:

; 803  : 	}
; 804  : 	return (FALSE);

  00bdc	33 c0		 xor	 eax, eax

; 805  : }

  00bde	c3		 ret	 0
$L72233:

; 801  : 			return (TRUE);

  00bdf	b8 01 00 00 00	 mov	 eax, 1

; 805  : }

  00be4	c3		 ret	 0
_ls_proc_non_zero ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_is_date
EXTRN	_months:BYTE
_TEXT	SEGMENT
_llp$ = 8
_rlp$ = 12
_buf$ = -8
_ls_proc_is_date PROC NEAR

; 830  : 	char *cp;
; 831  : 	 int	i;
; 832  : 	short		buf[3];
; 833  : 
; 834  : 	if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)	/* First digit.		*/

  00bf0	8b 44 24 04	 mov	 eax, DWORD PTR _llp$[esp-4]
  00bf4	83 ec 08	 sub	 esp, 8
  00bf7	b2 10		 mov	 dl, 16			; 00000010H
  00bf9	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00bfc	53		 push	 ebx
  00bfd	56		 push	 esi
  00bfe	8a 99 00 00 00
	00		 mov	 bl, BYTE PTR _ls_char_feat[ecx]
  00c04	57		 push	 edi
  00c05	84 da		 test	 bl, dl
  00c07	0f 84 5d 01 00
	00		 je	 $L71998
  00c0d	8b 74 24 1c	 mov	 esi, DWORD PTR _rlp$[esp+16]
  00c11	83 c0 02	 add	 eax, 2
  00c14	3b c6		 cmp	 eax, esi
  00c16	0f 84 4e 01 00
	00		 je	 $L71998

; 836  : 	if (llp->l_ch != '-') 

  00c1c	66 8b 08	 mov	 cx, WORD PTR [eax]
  00c1f	66 83 f9 2d	 cmp	 cx, 45			; 0000002dH
  00c23	74 24		 je	 SHORT $L71999

; 837  : 	{												/* Optional digit.	*/
; 838  : 		if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)

  00c25	0f bf c9	 movsx	 ecx, cx
  00c28	84 91 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ecx], dl
  00c2e	0f 84 36 01 00
	00		 je	 $L71998
  00c34	83 c0 02	 add	 eax, 2
  00c37	3b c6		 cmp	 eax, esi
  00c39	0f 84 2b 01 00
	00		 je	 $L71998

; 839  : 			return (FALSE);
; 840  : 		if (llp->l_ch != '-')						/* Must be "-" now!	*/

  00c3f	66 83 38 2d	 cmp	 WORD PTR [eax], 45	; 0000002dH

; 841  : 			return (FALSE);

  00c43	0f 85 21 01 00
	00		 jne	 $L71998
$L71999:

; 842  : 	}
; 843  : 	if (++llp==rlp || !IS_ALPHA(llp->l_ch))	/* Three alphas.	*/

  00c49	83 c0 02	 add	 eax, 2
  00c4c	3b c6		 cmp	 eax, esi
  00c4e	0f 84 16 01 00
	00		 je	 $L71998
  00c54	66 8b 08	 mov	 cx, WORD PTR [eax]
  00c57	b2 03		 mov	 dl, 3
  00c59	0f bf f9	 movsx	 edi, cx
  00c5c	84 97 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edi], dl
  00c62	0f 84 02 01 00
	00		 je	 $L71998

; 844  : 		return (FALSE);
; 845  : 	buf[0] = llp->l_ch;
; 846  : 	if (++llp==rlp || !IS_ALPHA(llp->l_ch))

  00c68	83 c0 02	 add	 eax, 2
  00c6b	66 89 4c 24 0c	 mov	 WORD PTR _buf$[esp+20], cx
  00c70	3b c6		 cmp	 eax, esi
  00c72	0f 84 f2 00 00
	00		 je	 $L71998
  00c78	66 8b 08	 mov	 cx, WORD PTR [eax]
  00c7b	0f bf f9	 movsx	 edi, cx
  00c7e	84 97 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edi], dl
  00c84	0f 84 e0 00 00
	00		 je	 $L71998

; 847  : 		return (FALSE);
; 848  : 	buf[1] = llp->l_ch;
; 849  : 	if (++llp==rlp || !IS_ALPHA(llp->l_ch))

  00c8a	83 c0 02	 add	 eax, 2
  00c8d	66 89 4c 24 0e	 mov	 WORD PTR _buf$[esp+22], cx
  00c92	3b c6		 cmp	 eax, esi
  00c94	0f 84 d0 00 00
	00		 je	 $L71998
  00c9a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00c9d	84 91 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ecx], dl
  00ca3	0f 84 c1 00 00
	00		 je	 $L71998

; 850  : 		return (FALSE);
; 851  : 	buf[2] = llp->l_ch;
; 852  : 	for (i=0; i<12; ++i) 

  00ca9	33 ff		 xor	 edi, edi
  00cab	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_months
$L72006:

; 853  : 	{			/* Validate.		*/
; 854  : 		cp = months[i];

  00cb0	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 855  : 		if (buf[0]==cp[0] && buf[1]==cp[1] && buf[2]==cp[2])

  00cb2	66 0f be 19	 movsx	 bx, BYTE PTR [ecx]
  00cb6	66 39 5c 24 0c	 cmp	 WORD PTR _buf$[esp+20], bx
  00cbb	75 16		 jne	 SHORT $L72007
  00cbd	66 0f be 59 01	 movsx	 bx, BYTE PTR [ecx+1]
  00cc2	66 39 5c 24 0e	 cmp	 WORD PTR _buf$[esp+22], bx
  00cc7	75 0a		 jne	 SHORT $L72007
  00cc9	66 0f be 49 02	 movsx	 cx, BYTE PTR [ecx+2]
  00cce	66 39 08	 cmp	 WORD PTR [eax], cx
  00cd1	74 0c		 je	 SHORT $L72237
$L72007:

; 850  : 		return (FALSE);
; 851  : 	buf[2] = llp->l_ch;
; 852  : 	for (i=0; i<12; ++i) 

  00cd3	83 c2 04	 add	 edx, 4
  00cd6	47		 inc	 edi
  00cd7	81 fa 30 00 00
	00		 cmp	 edx, OFFSET FLAT:_months+48
  00cdd	7c d1		 jl	 SHORT $L72006
$L72237:

; 856  : 			break;
; 857  : 	}
; 858  : 	if (i == 12)				/* Loss!		*/

  00cdf	83 ff 0c	 cmp	 edi, 12			; 0000000cH

; 859  : 		return (FALSE);

  00ce2	0f 84 82 00 00
	00		 je	 $L71998

; 860  : 	if (++llp == rlp)			/* 23-Aug		*/

  00ce8	83 c0 02	 add	 eax, 2
  00ceb	3b c6		 cmp	 eax, esi
  00ced	75 0c		 jne	 SHORT $L72011
  00cef	5f		 pop	 edi
  00cf0	5e		 pop	 esi

; 861  : 		return (TRUE);

  00cf1	b8 01 00 00 00	 mov	 eax, 1
  00cf6	5b		 pop	 ebx

; 875  : }

  00cf7	83 c4 08	 add	 esp, 8
  00cfa	c3		 ret	 0
$L72011:

; 862  : 	if (llp->l_ch != '-')		/* Must be a year.	*/

  00cfb	66 83 38 2d	 cmp	 WORD PTR [eax], 45	; 0000002dH

; 863  : 		return (FALSE);

  00cff	75 69		 jne	 SHORT $L71998

; 864  : 	if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  00d01	83 c0 02	 add	 eax, 2
  00d04	3b c6		 cmp	 eax, esi
  00d06	74 62		 je	 SHORT $L71998
  00d08	0f bf 10	 movsx	 edx, WORD PTR [eax]
  00d0b	b1 10		 mov	 cl, 16			; 00000010H
  00d0d	84 8a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], cl
  00d13	74 55		 je	 SHORT $L71998

; 865  : 		return (FALSE);
; 866  : 	if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  00d15	83 c0 02	 add	 eax, 2
  00d18	3b c6		 cmp	 eax, esi
  00d1a	74 4e		 je	 SHORT $L71998
  00d1c	0f bf 10	 movsx	 edx, WORD PTR [eax]
  00d1f	84 8a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], cl
  00d25	74 43		 je	 SHORT $L71998

; 867  : 		return (FALSE);
; 868  : 	if (++llp == rlp)			/* 23-Aug-84		*/

  00d27	83 c0 02	 add	 eax, 2
  00d2a	3b c6		 cmp	 eax, esi
  00d2c	75 0c		 jne	 SHORT $L72017
  00d2e	5f		 pop	 edi
  00d2f	5e		 pop	 esi

; 869  : 		return (TRUE);

  00d30	b8 01 00 00 00	 mov	 eax, 1
  00d35	5b		 pop	 ebx

; 875  : }

  00d36	83 c4 08	 add	 esp, 8
  00d39	c3		 ret	 0
$L72017:

; 870  : 	if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)	/* Need 2 more digits.	*/

  00d3a	0f bf 10	 movsx	 edx, WORD PTR [eax]
  00d3d	84 8a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], cl
  00d43	74 25		 je	 SHORT $L71998
  00d45	83 c0 02	 add	 eax, 2
  00d48	3b c6		 cmp	 eax, esi
  00d4a	74 1e		 je	 SHORT $L71998

; 871  : 		return (FALSE);
; 872  : 	if (!IS_DIGIT(llp->l_ch) || ++llp!=rlp)

  00d4c	0f bf 10	 movsx	 edx, WORD PTR [eax]
  00d4f	84 8a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], cl
  00d55	74 13		 je	 SHORT $L71998
  00d57	83 c0 02	 add	 eax, 2
  00d5a	3b c6		 cmp	 eax, esi
  00d5c	75 0c		 jne	 SHORT $L71998
  00d5e	5f		 pop	 edi
  00d5f	5e		 pop	 esi

; 873  : 		return (FALSE);
; 874  : 	return (TRUE);				/* 23-Aug-1984		*/

  00d60	b8 01 00 00 00	 mov	 eax, 1
  00d65	5b		 pop	 ebx

; 875  : }

  00d66	83 c4 08	 add	 esp, 8
  00d69	c3		 ret	 0
$L71998:
  00d6a	5f		 pop	 edi
  00d6b	5e		 pop	 esi

; 835  : 		return (FALSE);

  00d6c	33 c0		 xor	 eax, eax
  00d6e	5b		 pop	 ebx

; 875  : }

  00d6f	83 c4 08	 add	 esp, 8
  00d72	c3		 ret	 0
_ls_proc_is_date ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_do_date
EXTRN	_pOH:BYTE
EXTRN	_pmonths:BYTE
EXTRN	_pthe:BYTE
EXTRN	_pof:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_llp$ = 12
_rlp$ = 16
_i$ = 8
_ls_proc_do_date PROC NEAR

; 895  : {

  00d80	53		 push	 ebx

; 896  : 	LETTER	*lp1;
; 897  : 	 int	i;
; 898  : 	char *cp;
; 899  : 
; 900  : 	PKSD_T  pKsd_t;
; 901  : 	pKsd_t = phTTS->pKernelShareData;
; 902  : 
; 903  : 
; 904  : 	lp1 = llp;				/* Find end of day.	*/

  00d81	8b 5c 24 0c	 mov	 ebx, DWORD PTR _llp$[esp]
  00d85	56		 push	 esi
  00d86	57		 push	 edi

; 905  : 	while (lp1->l_ch != '-')

  00d87	66 83 3b 2d	 cmp	 WORD PTR [ebx], 45	; 0000002dH
  00d8b	8b 7c 24 10	 mov	 edi, DWORD PTR _phTTS$[esp+8]
  00d8f	8b f3		 mov	 esi, ebx
  00d91	74 09		 je	 SHORT $L72035
$L72034:

; 906  : 		++lp1;

  00d93	83 c6 02	 add	 esi, 2
  00d96	66 83 3e 2d	 cmp	 WORD PTR [esi], 45	; 0000002dH
  00d9a	75 f7		 jne	 SHORT $L72034
$L72035:

; 908  : 	{						/* Get month.		*/
; 909  : 		cp = months[i];
; 910  : 		if ((lp1+1)->l_ch == cp[0]
; 911  : 		&&  (lp1+2)->l_ch == cp[1]
; 912  : 		&&  (lp1+3)->l_ch == cp[2])

  00d9c	66 8b 56 02	 mov	 dx, WORD PTR [esi+2]
  00da0	55		 push	 ebp
  00da1	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _i$[esp+12], 0
  00da9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_months
$L72036:
  00dae	8b 08		 mov	 ecx, DWORD PTR [eax]
  00db0	66 0f be 29	 movsx	 bp, BYTE PTR [ecx]
  00db4	66 3b d5	 cmp	 dx, bp
  00db7	75 16		 jne	 SHORT $L72037
  00db9	66 0f be 69 01	 movsx	 bp, BYTE PTR [ecx+1]
  00dbe	66 39 6e 04	 cmp	 WORD PTR [esi+4], bp
  00dc2	75 0b		 jne	 SHORT $L72037
  00dc4	66 0f be 49 02	 movsx	 cx, BYTE PTR [ecx+2]
  00dc9	66 39 4e 06	 cmp	 WORD PTR [esi+6], cx
  00dcd	74 13		 je	 SHORT $L72245
$L72037:

; 907  : 	for (i=0; i<12; ++i) 

  00dcf	8b 4c 24 14	 mov	 ecx, DWORD PTR _i$[esp+12]
  00dd3	83 c0 04	 add	 eax, 4
  00dd6	41		 inc	 ecx
  00dd7	3d 30 00 00 00	 cmp	 eax, OFFSET FLAT:_months+48
  00ddc	89 4c 24 14	 mov	 DWORD PTR _i$[esp+12], ecx
  00de0	7c cc		 jl	 SHORT $L72036
$L72245:

; 913  : 			break;
; 914  : 	}
; 915  : 
; 916  : 	/* GL 10/21/98, BATS#770 support europe date reading */
; 917  :     if ((pKsd_t->modeflag&MODE_EUROPE) != 0)

  00de2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00de5	5d		 pop	 ebp
  00de6	f6 80 c0 03 00
	00 08		 test	 BYTE PTR [eax+960], 8
  00ded	74 68		 je	 SHORT $L72040

; 918  : 	{
; 919  : 		ls_util_send_phone_list(phTTS,pthe);	/* 19XX					*/

  00def	68 00 00 00 00	 push	 OFFSET FLAT:_pthe
  00df4	57		 push	 edi
  00df5	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 920  : 		ls_util_send_phone(phTTS,WBOUND);

  00dfa	6a 6f		 push	 111			; 0000006fH
  00dfc	57		 push	 edi
  00dfd	e8 00 00 00 00	 call	 _ls_util_send_phone

; 921  : 		if (lp1!=llp+1 && llp->l_ch=='0')					/* Get "01-Jan-84" ok.	*/

  00e02	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00e05	83 c4 10	 add	 esp, 16			; 00000010H
  00e08	3b f0		 cmp	 esi, eax
  00e0a	74 0c		 je	 SHORT $L72041
  00e0c	66 83 3b 30	 cmp	 WORD PTR [ebx], 48	; 00000030H
  00e10	75 06		 jne	 SHORT $L72041

; 922  : 			ls_proc_do_number(phTTS,llp+1, lp1, TRUE);

  00e12	6a 01		 push	 1
  00e14	56		 push	 esi
  00e15	50		 push	 eax

; 923  : 		else

  00e16	eb 04		 jmp	 SHORT $L72249
$L72041:

; 924  : 			ls_proc_do_number(phTTS,llp, lp1, TRUE);

  00e18	6a 01		 push	 1
  00e1a	56		 push	 esi
  00e1b	53		 push	 ebx
$L72249:
  00e1c	57		 push	 edi
  00e1d	e8 00 00 00 00	 call	 _ls_proc_do_number
  00e22	83 c4 10	 add	 esp, 16			; 00000010H

; 925  : 		ls_util_send_phone(phTTS,WBOUND);

  00e25	6a 6f		 push	 111			; 0000006fH
  00e27	57		 push	 edi
  00e28	e8 00 00 00 00	 call	 _ls_util_send_phone

; 926  : 		ls_util_send_phone_list(phTTS,pof);

  00e2d	68 00 00 00 00	 push	 OFFSET FLAT:_pof
  00e32	57		 push	 edi
  00e33	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 927  : 		ls_util_send_phone(phTTS,WBOUND);

  00e38	6a 6f		 push	 111			; 0000006fH
  00e3a	57		 push	 edi
  00e3b	e8 00 00 00 00	 call	 _ls_util_send_phone

; 928  : 		ls_util_send_phone_list(phTTS,pmonths[i]);			/* Speak the month		*/

  00e40	8b 54 24 28	 mov	 edx, DWORD PTR _i$[esp+32]
  00e44	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR _pmonths[edx*4]
  00e4b	50		 push	 eax
  00e4c	57		 push	 edi
  00e4d	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00e52	83 c4 20	 add	 esp, 32			; 00000020H

; 929  : 	}
; 930  : 	else

  00e55	eb 3d		 jmp	 SHORT $L72045
$L72040:

; 931  : 	{
; 932  : 		ls_util_send_phone_list(phTTS,pmonths[i]);			/* Speak the month		*/

  00e57	8b 4c 24 10	 mov	 ecx, DWORD PTR _i$[esp+8]
  00e5b	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR _pmonths[ecx*4]
  00e62	52		 push	 edx
  00e63	57		 push	 edi
  00e64	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 933  : 		ls_util_send_phone(phTTS,WBOUND);

  00e69	6a 6f		 push	 111			; 0000006fH
  00e6b	57		 push	 edi
  00e6c	e8 00 00 00 00	 call	 _ls_util_send_phone

; 934  : 		if (lp1!=llp+1 && llp->l_ch=='0')					/* Get "01-Jan-84" ok.	*/

  00e71	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00e74	83 c4 10	 add	 esp, 16			; 00000010H
  00e77	3b f0		 cmp	 esi, eax
  00e79	74 0c		 je	 SHORT $L72044
  00e7b	66 83 3b 30	 cmp	 WORD PTR [ebx], 48	; 00000030H
  00e7f	75 06		 jne	 SHORT $L72044

; 935  : 			ls_proc_do_number(phTTS,llp+1, lp1, TRUE);

  00e81	6a 01		 push	 1
  00e83	56		 push	 esi
  00e84	50		 push	 eax

; 936  : 		else

  00e85	eb 04		 jmp	 SHORT $L72250
$L72044:

; 937  : 			ls_proc_do_number(phTTS,llp, lp1, TRUE);

  00e87	6a 01		 push	 1
  00e89	56		 push	 esi
  00e8a	53		 push	 ebx
$L72250:
  00e8b	57		 push	 edi
  00e8c	e8 00 00 00 00	 call	 _ls_proc_do_number
  00e91	83 c4 10	 add	 esp, 16			; 00000010H
$L72045:

; 938  : 	}
; 939  : 	lp1 += 4;
; 940  : 	if (lp1 != rlp) {

  00e94	8b 5c 24 18	 mov	 ebx, DWORD PTR _rlp$[esp+8]
  00e98	83 c6 08	 add	 esi, 8
  00e9b	3b f3		 cmp	 esi, ebx
  00e9d	74 7e		 je	 SHORT $L72050

; 941  : 		ls_util_send_phone(phTTS,COMMA);

  00e9f	6a 73		 push	 115			; 00000073H
  00ea1	57		 push	 edi
  00ea2	e8 00 00 00 00	 call	 _ls_util_send_phone

; 942  : 
; 943  : 		if (lp1+3 == rlp) 

  00ea7	8d 4e 06	 lea	 ecx, DWORD PTR [esi+6]
  00eaa	83 c4 08	 add	 esp, 8
  00ead	3b cb		 cmp	 ecx, ebx
  00eaf	75 11		 jne	 SHORT $L72047

; 944  : 		{
; 945  : #ifdef LIKE_BUGS /* BATS 266 let not guess the year eab*/
; 946  : 			ls_util_send_phone_list(phTTS,pteens[9]);	/* 19XX					*/
; 947  : 			ls_util_send_phone(phTTS,WBOUND);
; 948  : #endif
; 949  : 			ls_proc_do_2_digits(phTTS,lp1+1);

  00eb1	83 c6 02	 add	 esi, 2
  00eb4	56		 push	 esi
  00eb5	57		 push	 edi
  00eb6	e8 00 00 00 00	 call	 _ls_proc_do_2_digits

; 961  : 
; 962  : 				//ls_proc_do_4_digits(phTTS,lp1+1);			/* YYXX					*/		
; 963  : 				/* this is a 200X date */
; 964  : 			}
; 965  : 			else
; 966  : 			{
; 967  : 				ls_proc_do_4_digits(phTTS,lp1+1);			/* YYXX					*/		

  00ebb	83 c4 08	 add	 esp, 8
  00ebe	5f		 pop	 edi
  00ebf	5e		 pop	 esi
  00ec0	5b		 pop	 ebx

; 968  : 			}
; 969  : 		}
; 970  : 	}
; 971  : }

  00ec1	c3		 ret	 0
$L72047:

; 950  : 		} 
; 951  : 		else
; 952  : 		{
; 953  : 			/* 012 MGS 11/23/1998 BATS #329 fixed 02-apr-2001 */
; 954  : 			if ((lp1+1)->l_ch!='0' && (lp1+2)->l_ch=='0' && (lp1+3)->l_ch=='0' && (lp1+4)->l_ch!='0')

  00ec2	66 83 7e 02 30	 cmp	 WORD PTR [esi+2], 48	; 00000030H
  00ec7	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00eca	74 47		 je	 SHORT $L72049
  00ecc	66 83 7e 04 30	 cmp	 WORD PTR [esi+4], 48	; 00000030H
  00ed1	75 40		 jne	 SHORT $L72049
  00ed3	66 83 39 30	 cmp	 WORD PTR [ecx], 48	; 00000030H
  00ed7	75 3a		 jne	 SHORT $L72049
  00ed9	66 83 7e 08 30	 cmp	 WORD PTR [esi+8], 48	; 00000030H
  00ede	74 33		 je	 SHORT $L72049

; 955  : 			{
; 956  : 
; 957  : 				ls_proc_do_2_digits(phTTS,lp1+1);

  00ee0	50		 push	 eax
  00ee1	57		 push	 edi
  00ee2	e8 00 00 00 00	 call	 _ls_proc_do_2_digits

; 958  : 				ls_util_send_phone(phTTS,WBOUND);

  00ee7	6a 6f		 push	 111			; 0000006fH
  00ee9	57		 push	 edi
  00eea	e8 00 00 00 00	 call	 _ls_util_send_phone

; 959  : 				ls_util_send_phone_list(phTTS,pOH);

  00eef	68 00 00 00 00	 push	 OFFSET FLAT:_pOH
  00ef4	57		 push	 edi
  00ef5	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 960  : 				ls_util_send_phone_list(phTTS,punits[(lp1+4)->l_ch-'0']);

  00efa	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00efe	8b 0c 85 40 ff
	ff ff		 mov	 ecx, DWORD PTR _punits[eax*4-192]
  00f05	51		 push	 ecx
  00f06	57		 push	 edi
  00f07	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  00f0c	83 c4 20	 add	 esp, 32			; 00000020H
  00f0f	5f		 pop	 edi
  00f10	5e		 pop	 esi
  00f11	5b		 pop	 ebx

; 968  : 			}
; 969  : 		}
; 970  : 	}
; 971  : }

  00f12	c3		 ret	 0
$L72049:

; 961  : 
; 962  : 				//ls_proc_do_4_digits(phTTS,lp1+1);			/* YYXX					*/		
; 963  : 				/* this is a 200X date */
; 964  : 			}
; 965  : 			else
; 966  : 			{
; 967  : 				ls_proc_do_4_digits(phTTS,lp1+1);			/* YYXX					*/		

  00f13	50		 push	 eax
  00f14	57		 push	 edi
  00f15	e8 00 00 00 00	 call	 _ls_proc_do_4_digits
  00f1a	83 c4 08	 add	 esp, 8
$L72050:
  00f1d	5f		 pop	 edi
  00f1e	5e		 pop	 esi
  00f1f	5b		 pop	 ebx

; 968  : 			}
; 969  : 		}
; 970  : 	}
; 971  : }

  00f20	c3		 ret	 0
_ls_proc_do_date ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_is_frac
_TEXT	SEGMENT
_llp$ = 8
_rlp$ = 12
_ls_proc_is_frac PROC NEAR

; 993  : 	int	n;
; 994  : 
; 995  : 	if (!IS_DIGIT(llp->l_ch) || llp->l_ch=='0' || ++llp==rlp)

  00f30	8b 44 24 04	 mov	 eax, DWORD PTR _llp$[esp-4]
  00f34	53		 push	 ebx
  00f35	b3 10		 mov	 bl, 16			; 00000010H
  00f37	55		 push	 ebp
  00f38	66 8b 08	 mov	 cx, WORD PTR [eax]
  00f3b	56		 push	 esi
  00f3c	0f bf d1	 movsx	 edx, cx
  00f3f	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  00f45	0f 84 9d 00 00
	00		 je	 $L72061
  00f4b	66 83 f9 30	 cmp	 cx, 48			; 00000030H
  00f4f	0f 84 93 00 00
	00		 je	 $L72061
  00f55	8b 74 24 14	 mov	 esi, DWORD PTR _rlp$[esp+8]
  00f59	83 c0 02	 add	 eax, 2
  00f5c	3b c6		 cmp	 eax, esi
  00f5e	0f 84 84 00 00
	00		 je	 $L72061

; 997  : 	if (llp->l_ch != '/') 

  00f64	66 8b 08	 mov	 cx, WORD PTR [eax]
  00f67	66 83 f9 2f	 cmp	 cx, 47			; 0000002fH
  00f6b	74 18		 je	 SHORT $L72062

; 998  : 	{								/* Optional digit.		*/
; 999  : 		if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)

  00f6d	0f bf c9	 movsx	 ecx, cx
  00f70	84 99 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ecx], bl
  00f76	74 70		 je	 SHORT $L72061
  00f78	83 c0 02	 add	 eax, 2
  00f7b	3b c6		 cmp	 eax, esi
  00f7d	74 69		 je	 SHORT $L72061

; 1000 : 			return (FALSE);
; 1001 : 		if (llp->l_ch != '/')

  00f7f	66 83 38 2f	 cmp	 WORD PTR [eax], 47	; 0000002fH

; 1002 : 			return (FALSE);

  00f83	75 63		 jne	 SHORT $L72061
$L72062:

; 1003 : 	}
; 1004 : 	n = 0;							/* Count digits.		*/
; 1005 : 	while (++llp!=rlp && IS_DIGIT(llp->l_ch)) 

  00f85	83 c0 02	 add	 eax, 2
  00f88	33 c9		 xor	 ecx, ecx
  00f8a	3b c6		 cmp	 eax, esi
  00f8c	74 5a		 je	 SHORT $L72061
$L72064:
  00f8e	66 8b 10	 mov	 dx, WORD PTR [eax]
  00f91	0f bf ea	 movsx	 ebp, dx
  00f94	84 9d 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ebp], bl
  00f9a	74 12		 je	 SHORT $L72065

; 1006 : 	{
; 1007 : 		if (n==0 && llp->l_ch=='0')	/* Leading "0" is bad.	*/

  00f9c	85 c9		 test	 ecx, ecx
  00f9e	75 06		 jne	 SHORT $L72066
  00fa0	66 83 fa 30	 cmp	 dx, 48			; 00000030H
  00fa4	74 42		 je	 SHORT $L72061
$L72066:

; 1003 : 	}
; 1004 : 	n = 0;							/* Count digits.		*/
; 1005 : 	while (++llp!=rlp && IS_DIGIT(llp->l_ch)) 

  00fa6	83 c0 02	 add	 eax, 2

; 1008 : 			return (FALSE);
; 1009 : 		++n;

  00fa9	41		 inc	 ecx
  00faa	3b c6		 cmp	 eax, esi
  00fac	75 e0		 jne	 SHORT $L72064
$L72065:

; 1010 : 	}
; 1011 : 	if (n==0 || n>3)				/* 1 to 3 digits.		*/

  00fae	85 c9		 test	 ecx, ecx
  00fb0	74 36		 je	 SHORT $L72061
  00fb2	83 f9 03	 cmp	 ecx, 3
  00fb5	7f 31		 jg	 SHORT $L72061

; 1012 : 		return (FALSE);
; 1013 : 	if (n == 3) 

  00fb7	75 15		 jne	 SHORT $L72070

; 1014 : 	{								/* Limit is 100.		*/
; 1015 : 		if ((llp-1)->l_ch != '0'
; 1016 : 		||  (llp-2)->l_ch != '0'
; 1017 : 		||  (llp-3)->l_ch != '1')

  00fb9	66 83 78 fe 30	 cmp	 WORD PTR [eax-2], 48	; 00000030H
  00fbe	75 28		 jne	 SHORT $L72061
  00fc0	66 83 78 fc 30	 cmp	 WORD PTR [eax-4], 48	; 00000030H
  00fc5	75 21		 jne	 SHORT $L72061
  00fc7	66 83 78 fa 31	 cmp	 WORD PTR [eax-6], 49	; 00000031H

; 1018 : 			return (FALSE);

  00fcc	75 1a		 jne	 SHORT $L72061
$L72070:

; 1019 : 	}
; 1020 : 	if (llp != rlp) 

  00fce	3b c6		 cmp	 eax, esi
  00fd0	74 0d		 je	 SHORT $L72073

; 1021 : 	{								/* Allow "%".			*/
; 1022 : 		if (llp->l_ch!='%' || llp+1!=rlp)

  00fd2	66 83 38 25	 cmp	 WORD PTR [eax], 37	; 00000025H
  00fd6	75 10		 jne	 SHORT $L72061
  00fd8	83 c0 02	 add	 eax, 2
  00fdb	3b c6		 cmp	 eax, esi

; 1023 : 			return (FALSE);

  00fdd	75 09		 jne	 SHORT $L72061
$L72073:
  00fdf	5e		 pop	 esi
  00fe0	5d		 pop	 ebp

; 1024 : 	}
; 1025 : 	return (TRUE);

  00fe1	b8 01 00 00 00	 mov	 eax, 1
  00fe6	5b		 pop	 ebx

; 1026 : }

  00fe7	c3		 ret	 0
$L72061:
  00fe8	5e		 pop	 esi
  00fe9	5d		 pop	 ebp

; 996  : 		return (FALSE);				/* Non digit or "0".	*/

  00fea	33 c0		 xor	 eax, eax
  00fec	5b		 pop	 ebx

; 1026 : }

  00fed	c3		 ret	 0
_ls_proc_is_frac ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_do_frac
EXTRN	_ppercent:BYTE
EXTRN	_phalf:BYTE
EXTRN	_phalves:BYTE
_TEXT	SEGMENT
_phTTS$ = 8
_llp$ = 12
_rlp$ = 16
_pflag$ = 12
_ls_proc_do_frac PROC NEAR

; 1047 : 	 LETTER *tlp1;
; 1048 : 	 LETTER *tlp2;
; 1049 : 	 int	pflag;
; 1050 : 	 int	ud;
; 1051 : 
; 1052 : 	tlp1 = llp;											/* Scan to "/".			*/

  00ff0	8b 44 24 08	 mov	 eax, DWORD PTR _llp$[esp-4]
  00ff4	53		 push	 ebx
  00ff5	56		 push	 esi
  00ff6	57		 push	 edi

; 1053 : 	while (tlp1->l_ch != '/')

  00ff7	66 83 38 2f	 cmp	 WORD PTR [eax], 47	; 0000002fH
  00ffb	8b f0		 mov	 esi, eax
  00ffd	74 09		 je	 SHORT $L72088
$L72087:

; 1054 : 		++tlp1;

  00fff	83 c6 02	 add	 esi, 2
  01002	66 83 3e 2f	 cmp	 WORD PTR [esi], 47	; 0000002fH
  01006	75 f7		 jne	 SHORT $L72087
$L72088:

; 1055 : 	pflag = ls_proc_do_number(phTTS,llp, tlp1, FALSE);	/* Numerator.			*/

  01008	8b 5c 24 10	 mov	 ebx, DWORD PTR _phTTS$[esp+8]
  0100c	6a 00		 push	 0
  0100e	56		 push	 esi
  0100f	50		 push	 eax
  01010	53		 push	 ebx
  01011	e8 00 00 00 00	 call	 _ls_proc_do_number

; 1056 : 	ls_util_send_phone(phTTS,WBOUND);					/* Gap.					*/

  01016	6a 6f		 push	 111			; 0000006fH
  01018	53		 push	 ebx
  01019	89 44 24 2c	 mov	 DWORD PTR _pflag$[esp+32], eax
  0101d	e8 00 00 00 00	 call	 _ls_util_send_phone

; 1057 : 	++tlp1;												/* Skip "/".			*/
; 1058 : 	tlp2 = tlp1;										/* Scan to end or "%".	*/
; 1059 : 	while (tlp2!=rlp && tlp2->l_ch!='%')

  01022	8b 44 24 30	 mov	 eax, DWORD PTR _rlp$[esp+32]
  01026	83 c6 02	 add	 esi, 2
  01029	83 c4 18	 add	 esp, 24			; 00000018H
  0102c	3b f0		 cmp	 esi, eax
  0102e	8b fe		 mov	 edi, esi
  01030	74 0d		 je	 SHORT $L72091
$L72090:
  01032	66 83 3f 25	 cmp	 WORD PTR [edi], 37	; 00000025H
  01036	74 07		 je	 SHORT $L72091

; 1060 : 		++tlp2;

  01038	83 c7 02	 add	 edi, 2
  0103b	3b f8		 cmp	 edi, eax
  0103d	75 f3		 jne	 SHORT $L72090
$L72091:
  0103f	55		 push	 ebp

; 1061 : 	if (tlp1+1==tlp2 && tlp1->l_ch=='2') 

  01040	8d 6e 02	 lea	 ebp, DWORD PTR [esi+2]
  01043	3b ef		 cmp	 ebp, edi
  01045	75 21		 jne	 SHORT $L72092
  01047	66 83 3e 32	 cmp	 WORD PTR [esi], 50	; 00000032H
  0104b	75 1b		 jne	 SHORT $L72092

; 1062 : 	{
; 1063 : 		ls_util_send_phone_list(phTTS,pflag!=FALSE ? phalves : phalf);

  0104d	8b 44 24 18	 mov	 eax, DWORD PTR _pflag$[esp+12]
  01051	85 c0		 test	 eax, eax
  01053	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_phalves
  01058	75 05		 jne	 SHORT $L72259
  0105a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_phalf
$L72259:
  0105f	50		 push	 eax
  01060	53		 push	 ebx
  01061	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 1064 : 	} 
; 1065 : 	else 

  01066	eb 41		 jmp	 SHORT $L72268
$L72092:

; 1066 : 	{
; 1067 : 		ls_proc_do_number(phTTS,tlp1, tlp2, TRUE);		/* As an ordinal.		*/

  01068	6a 01		 push	 1
  0106a	57		 push	 edi
  0106b	56		 push	 esi
  0106c	53		 push	 ebx
  0106d	e8 00 00 00 00	 call	 _ls_proc_do_number

; 1068 : 		if (pflag != FALSE) 

  01072	8b 44 24 28	 mov	 eax, DWORD PTR _pflag$[esp+28]
  01076	83 c4 10	 add	 esp, 16			; 00000010H
  01079	85 c0		 test	 eax, eax
  0107b	74 2f		 je	 SHORT $L72094

; 1069 : 		{												/* Make plural.			*/
; 1070 : 			ud = (tlp2-1)->l_ch;

  0107d	0f bf 47 fe	 movsx	 eax, WORD PTR [edi-2]

; 1071 : 			if (tlp2>tlp1+1 && (tlp2-2)->l_ch=='1')

  01081	3b fd		 cmp	 edi, ebp
  01083	76 07		 jbe	 SHORT $L72095
  01085	66 83 7f fc 31	 cmp	 WORD PTR [edi-4], 49	; 00000031H

; 1072 : 				ud = '0';
; 1073 : 			ls_util_send_phone(phTTS,ud=='2'||ud=='3' ? US_Z : US_S);

  0108a	74 0a		 je	 SHORT $L72267
$L72095:
  0108c	83 f8 32	 cmp	 eax, 50			; 00000032H
  0108f	74 0c		 je	 SHORT $L72260
  01091	83 f8 33	 cmp	 eax, 51			; 00000033H
  01094	74 07		 je	 SHORT $L72260
$L72267:
  01096	b8 29 00 00 00	 mov	 eax, 41			; 00000029H
  0109b	eb 05		 jmp	 SHORT $L72261
$L72260:
  0109d	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
$L72261:
  010a2	50		 push	 eax
  010a3	53		 push	 ebx
  010a4	e8 00 00 00 00	 call	 _ls_util_send_phone
$L72268:
  010a9	83 c4 08	 add	 esp, 8
$L72094:

; 1074 : 		}
; 1075 : 	}
; 1076 : 	if (tlp2 != rlp) 

  010ac	8b 44 24 1c	 mov	 eax, DWORD PTR _rlp$[esp+12]
  010b0	5d		 pop	 ebp
  010b1	3b f8		 cmp	 edi, eax
  010b3	74 0e		 je	 SHORT $L72096

; 1077 : 	{													/* Must be "%".			*/
; 1078 : 		ls_util_send_phone_list(phTTS,ppercent);

  010b5	68 00 00 00 00	 push	 OFFSET FLAT:_ppercent
  010ba	53		 push	 ebx
  010bb	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  010c0	83 c4 08	 add	 esp, 8
$L72096:
  010c3	5f		 pop	 edi
  010c4	5e		 pop	 esi
  010c5	5b		 pop	 ebx

; 1079 : 	}          
; 1080 : }

  010c6	c3		 ret	 0
_ls_proc_do_frac ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_is_time
_TEXT	SEGMENT
_pLts_t$ = 8
_llp$ = 12
_rlp$ = 16
_ls_proc_is_time PROC NEAR

; 1102 : 	if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)	/* First digit.		*/

  010d0	8b 44 24 08	 mov	 eax, DWORD PTR _llp$[esp-4]
  010d4	53		 push	 ebx
  010d5	b3 10		 mov	 bl, 16			; 00000010H
  010d7	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  010da	84 99 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[ecx], bl
  010e0	0f 84 f3 00 00
	00		 je	 $L72108
  010e6	8b 4c 24 10	 mov	 ecx, DWORD PTR _rlp$[esp]
  010ea	83 c0 02	 add	 eax, 2
  010ed	3b c1		 cmp	 eax, ecx
  010ef	0f 84 e4 00 00
	00		 je	 $L72108

; 1104 : 
; 1105 : 
; 1106 : 	if (llp->l_ch != ':') 							/* Optional digit.	*/

  010f5	66 8b 10	 mov	 dx, WORD PTR [eax]
  010f8	66 83 fa 3a	 cmp	 dx, 58			; 0000003aH
  010fc	74 24		 je	 SHORT $L72109

; 1107 : 	{
; 1108 : 		if (!IS_DIGIT(llp->l_ch) || ++llp==rlp)

  010fe	0f bf d2	 movsx	 edx, dx
  01101	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  01107	0f 84 cc 00 00
	00		 je	 $L72108
  0110d	83 c0 02	 add	 eax, 2
  01110	3b c1		 cmp	 eax, ecx
  01112	0f 84 c1 00 00
	00		 je	 $L72108

; 1109 : 			return (FALSE);
; 1110 : 		if (llp->l_ch != ':')						/* Must be ":" now!	*/

  01118	66 83 38 3a	 cmp	 WORD PTR [eax], 58	; 0000003aH

; 1111 : 			return (FALSE);

  0111c	0f 85 b7 00 00
	00		 jne	 $L72108
$L72109:

; 1112 : 	}
; 1113 : 	
; 1114 : 	if (++llp==rlp || !IS_DIGIT(llp->l_ch))	/* Two digits.		*/

  01122	83 c0 02	 add	 eax, 2
  01125	3b c1		 cmp	 eax, ecx
  01127	0f 84 ac 00 00
	00		 je	 $L72108
  0112d	0f bf 10	 movsx	 edx, WORD PTR [eax]
  01130	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  01136	0f 84 9d 00 00
	00		 je	 $L72108

; 1115 : 		return (FALSE);
; 1116 : 	if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  0113c	83 c0 02	 add	 eax, 2
  0113f	3b c1		 cmp	 eax, ecx
  01141	0f 84 92 00 00
	00		 je	 $L72108
  01147	0f bf 10	 movsx	 edx, WORD PTR [eax]
  0114a	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  01150	0f 84 83 00 00
	00		 je	 $L72108

; 1117 : 		return (FALSE);
; 1118 : 	if (++llp == rlp)								/* 00:00			*/

  01156	83 c0 02	 add	 eax, 2
  01159	3b c1		 cmp	 eax, ecx
  0115b	75 07		 jne	 SHORT $L72114

; 1119 : 	{
; 1120 : 		return (TRUE);

  0115d	b8 01 00 00 00	 mov	 eax, 1
  01162	5b		 pop	 ebx

; 1139 : }

  01163	c3		 ret	 0
$L72114:

; 1121 : 	}
; 1122 : 
; 1123 : 	if (llp->l_ch == ':')

  01164	66 83 38 3a	 cmp	 WORD PTR [eax], 58	; 0000003aH
  01168	75 27		 jne	 SHORT $L72115

; 1124 : 	{												/* 00:00:00			*/
; 1125 : 		if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  0116a	83 c0 02	 add	 eax, 2
  0116d	3b c1		 cmp	 eax, ecx
  0116f	74 68		 je	 SHORT $L72108
  01171	0f bf 10	 movsx	 edx, WORD PTR [eax]
  01174	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  0117a	74 5d		 je	 SHORT $L72108

; 1126 : 			return (FALSE);
; 1127 : 		if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  0117c	83 c0 02	 add	 eax, 2
  0117f	3b c1		 cmp	 eax, ecx
  01181	74 56		 je	 SHORT $L72108
  01183	0f bf 10	 movsx	 edx, WORD PTR [eax]
  01186	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  0118c	74 4b		 je	 SHORT $L72108

; 1128 : 			return (FALSE);
; 1129 : 		++llp;

  0118e	83 c0 02	 add	 eax, 2
$L72115:

; 1130 : 	}
; 1131 : 	if (llp!=rlp && llp->l_ch==pLts_t->fchar)

  01191	3b c1		 cmp	 eax, ecx
  01193	74 3d		 je	 SHORT $L72125
  01195	66 8b 10	 mov	 dx, WORD PTR [eax]
  01198	56		 push	 esi
  01199	8b 74 24 0c	 mov	 esi, DWORD PTR _pLts_t$[esp+4]
  0119d	66 3b 96 ec 08
	00 00		 cmp	 dx, WORD PTR [esi+2284]
  011a4	5e		 pop	 esi
  011a5	75 2b		 jne	 SHORT $L72125

; 1132 : 	{	/* Fractional digits.	*/
; 1133 : 		if (++llp==rlp || !IS_DIGIT(llp->l_ch))

  011a7	83 c0 02	 add	 eax, 2
  011aa	3b c1		 cmp	 eax, ecx
  011ac	74 2b		 je	 SHORT $L72108
  011ae	0f bf 10	 movsx	 edx, WORD PTR [eax]
  011b1	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  011b7	74 20		 je	 SHORT $L72108

; 1134 : 			return (FALSE);
; 1135 : 		while (++llp!=rlp && IS_DIGIT(llp->l_ch));

  011b9	83 c0 02	 add	 eax, 2
  011bc	3b c1		 cmp	 eax, ecx
  011be	74 12		 je	 SHORT $L72125
$L72124:
  011c0	0f bf 10	 movsx	 edx, WORD PTR [eax]
  011c3	84 9a 00 00 00
	00		 test	 BYTE PTR _ls_char_feat[edx], bl
  011c9	74 07		 je	 SHORT $L72125
  011cb	83 c0 02	 add	 eax, 2
  011ce	3b c1		 cmp	 eax, ecx
  011d0	75 ee		 jne	 SHORT $L72124
$L72125:

; 1136 : 	}
; 1137 : 
; 1138 : 	return (TRUE);				/* Looks good!		*/

  011d2	b8 01 00 00 00	 mov	 eax, 1
  011d7	5b		 pop	 ebx

; 1139 : }

  011d8	c3		 ret	 0
$L72108:

; 1103 : 		return (FALSE);

  011d9	33 c0		 xor	 eax, eax
  011db	5b		 pop	 ebx

; 1139 : }

  011dc	c3		 ret	 0
_ls_proc_is_time ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_is_am_pm
_TEXT	SEGMENT
_llp$ = 8
_rlp$ = 12
_ls_proc_is_am_pm PROC NEAR

; 1162 : 	if (llp->l_ch!='a' && llp->l_ch!='A'
; 1163 : 	&&  llp->l_ch!='p' && llp->l_ch!='P')

  011e0	8b 4c 24 04	 mov	 ecx, DWORD PTR _llp$[esp-4]
  011e4	66 8b 01	 mov	 ax, WORD PTR [ecx]
  011e7	66 3d 61 00	 cmp	 ax, 97			; 00000061H
  011eb	74 15		 je	 SHORT $L72131
  011ed	66 3d 41 00	 cmp	 ax, 65			; 00000041H
  011f1	74 0f		 je	 SHORT $L72131
  011f3	66 3d 70 00	 cmp	 ax, 112			; 00000070H
  011f7	74 09		 je	 SHORT $L72131
  011f9	66 3d 50 00	 cmp	 ax, 80			; 00000050H
  011fd	74 03		 je	 SHORT $L72131

; 1164 : 		return (FALSE);

  011ff	33 c0		 xor	 eax, eax

; 1170 : 		return (FALSE);
; 1171 : 	return (TRUE);
; 1172 : }

  01201	c3		 ret	 0
$L72131:

; 1165 : 	++llp;
; 1166 : 	if (llp->l_ch!='m' && llp->l_ch!='M')

  01202	66 8b 41 02	 mov	 ax, WORD PTR [ecx+2]
  01206	83 c1 02	 add	 ecx, 2
  01209	66 3d 6d 00	 cmp	 ax, 109			; 0000006dH
  0120d	74 09		 je	 SHORT $L72132
  0120f	66 3d 4d 00	 cmp	 ax, 77			; 0000004dH
  01213	74 03		 je	 SHORT $L72132

; 1167 : 		return (FALSE);

  01215	33 c0		 xor	 eax, eax

; 1170 : 		return (FALSE);
; 1171 : 	return (TRUE);
; 1172 : }

  01217	c3		 ret	 0
$L72132:

; 1168 : 	++llp;
; 1169 : 	if (llp != rlp)

  01218	8b 54 24 08	 mov	 edx, DWORD PTR _rlp$[esp-4]
  0121c	83 c1 02	 add	 ecx, 2
  0121f	33 c0		 xor	 eax, eax
  01221	3b ca		 cmp	 ecx, edx
  01223	0f 94 c0	 sete	 al

; 1170 : 		return (FALSE);
; 1171 : 	return (TRUE);
; 1172 : }

  01226	c3		 ret	 0
_ls_proc_is_am_pm ENDP
_TEXT	ENDS
PUBLIC	_ls_proc_do_time
_TEXT	SEGMENT
_phTTS$ = 8
_llp$ = 12
_rlp$ = 16
_ls_proc_do_time PROC NEAR

; 1196 : {

  01230	53		 push	 ebx
  01231	56		 push	 esi

; 1197 : 	//int flag= 0;
; 1198 : #ifdef NWS_US
; 1199 : 	/* eab 10/97 set off numbers with a glotal stop*/
; 1200 : 	ls_util_send_phone(phTTS,US_Q);
; 1201 : #endif
; 1202 : 	
; 1203 : 	if ((llp+1)->l_ch == ':')

  01232	8b 74 24 10	 mov	 esi, DWORD PTR _llp$[esp+4]
  01236	57		 push	 edi
  01237	66 83 7e 02 3a	 cmp	 WORD PTR [esi+2], 58	; 0000003aH
  0123c	75 1d		 jne	 SHORT $L72141

; 1204 : 	{		/* Initial 1 digit.	*/
; 1205 : 
; 1206 : 		ls_util_send_phone_list(phTTS,punits[llp->l_ch-'0']);

  0123e	0f bf 06	 movsx	 eax, WORD PTR [esi]
  01241	8b 7c 24 10	 mov	 edi, DWORD PTR _phTTS$[esp+8]
  01245	8b 0c 85 40 ff
	ff ff		 mov	 ecx, DWORD PTR _punits[eax*4-192]
  0124c	51		 push	 ecx
  0124d	57		 push	 edi
  0124e	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  01253	83 c4 08	 add	 esp, 8

; 1207 : 		llp += 2;

  01256	83 c6 04	 add	 esi, 4

; 1208 : 	}
; 1209 : 	else

  01259	eb 11		 jmp	 SHORT $L72142
$L72141:

; 1210 : 	{				/* Initial 2 digit.	*/
; 1211 : 		ls_proc_do_2_digits(phTTS,llp);

  0125b	8b 7c 24 10	 mov	 edi, DWORD PTR _phTTS$[esp+8]
  0125f	56		 push	 esi
  01260	57		 push	 edi
  01261	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  01266	83 c4 08	 add	 esp, 8

; 1212 : 		llp += 3;

  01269	83 c6 06	 add	 esi, 6
$L72142:

; 1213 : 	}
; 1214 : #ifdef NWS_US
; 1215 : /* eab 10/97 set off numbers with a glotal stop*/
; 1216 : 	ls_util_send_phone(phTTS,US_Q);
; 1217 : #endif	
; 1218 : 	ls_util_send_phone(phTTS,VPSTART);			/* Middle.		*/

  0126c	6a 71		 push	 113			; 00000071H
  0126e	57		 push	 edi
  0126f	e8 00 00 00 00	 call	 _ls_util_send_phone
  01274	83 c4 08	 add	 esp, 8

; 1219 : 	if ( !( llp->l_ch == '0' && (llp+1)->l_ch == '0'))

  01277	66 83 3e 30	 cmp	 WORD PTR [esi], 48	; 00000030H
  0127b	75 07		 jne	 SHORT $L72144
  0127d	66 83 7e 02 30	 cmp	 WORD PTR [esi+2], 48	; 00000030H
  01282	74 0a		 je	 SHORT $L72143
$L72144:

; 1220 : 		ls_proc_do_2_digits(phTTS,llp);

  01284	56		 push	 esi
  01285	57		 push	 edi
  01286	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  0128b	83 c4 08	 add	 esp, 8
$L72143:

; 1221 : 	llp += 2;
; 1222 : 
; 1223 : 	if (llp!=rlp && llp->l_ch==':')

  0128e	8b 5c 24 18	 mov	 ebx, DWORD PTR _rlp$[esp+8]
  01292	83 c6 04	 add	 esi, 4
  01295	3b f3		 cmp	 esi, ebx
  01297	74 77		 je	 SHORT $L72151
  01299	66 83 3e 3a	 cmp	 WORD PTR [esi], 58	; 0000003aH
  0129d	75 18		 jne	 SHORT $L72145

; 1224 : 	{	/* End.			*/
; 1225 : 		ls_util_send_phone(phTTS,VPSTART);

  0129f	6a 71		 push	 113			; 00000071H
  012a1	57		 push	 edi
  012a2	e8 00 00 00 00	 call	 _ls_util_send_phone

; 1226 : 		ls_proc_do_2_digits(phTTS,llp+1);

  012a7	8d 56 02	 lea	 edx, DWORD PTR [esi+2]
  012aa	52		 push	 edx
  012ab	57		 push	 edi
  012ac	e8 00 00 00 00	 call	 _ls_proc_do_2_digits
  012b1	83 c4 10	 add	 esp, 16			; 00000010H

; 1227 : 		llp += 3;

  012b4	83 c6 06	 add	 esi, 6
$L72145:

; 1228 : 	}
; 1229 :     
; 1230 : 	if (llp != rlp)

  012b7	3b f3		 cmp	 esi, ebx
  012b9	74 55		 je	 SHORT $L72151

; 1231 : 	{			/* Final fractions.	*/
; 1232 : 		if(llp->l_ch  == '.')

  012bb	66 83 3e 2e	 cmp	 WORD PTR [esi], 46	; 0000002eH
  012bf	75 44		 jne	 SHORT $L72147

; 1233 : 		{
; 1234 : 			ls_util_send_phone(phTTS,WBOUND);

  012c1	6a 6f		 push	 111			; 0000006fH
  012c3	57		 push	 edi
  012c4	e8 00 00 00 00	 call	 _ls_util_send_phone

; 1235 : 			ls_util_send_phone_list(phTTS,ppoint);

  012c9	68 00 00 00 00	 push	 OFFSET FLAT:_ppoint
  012ce	57		 push	 edi
  012cf	e8 00 00 00 00	 call	 _ls_util_send_phone_list

; 1236 : 			while (++llp != rlp)

  012d4	83 c6 02	 add	 esi, 2
  012d7	83 c4 10	 add	 esp, 16			; 00000010H
  012da	3b f3		 cmp	 esi, ebx
  012dc	74 32		 je	 SHORT $L72151
$L72149:

; 1237 : 			{
; 1238 : 				ls_util_send_phone(phTTS,WBOUND);

  012de	6a 6f		 push	 111			; 0000006fH
  012e0	57		 push	 edi
  012e1	e8 00 00 00 00	 call	 _ls_util_send_phone

; 1239 : 				ls_util_send_phone_list(phTTS,punits[llp->l_ch-'0']);

  012e6	0f bf 06	 movsx	 eax, WORD PTR [esi]
  012e9	8b 0c 85 40 ff
	ff ff		 mov	 ecx, DWORD PTR _punits[eax*4-192]
  012f0	51		 push	 ecx
  012f1	57		 push	 edi
  012f2	e8 00 00 00 00	 call	 _ls_util_send_phone_list
  012f7	83 c6 02	 add	 esi, 2
  012fa	83 c4 10	 add	 esp, 16			; 00000010H
  012fd	3b f3		 cmp	 esi, ebx
  012ff	75 dd		 jne	 SHORT $L72149
  01301	5f		 pop	 edi
  01302	5e		 pop	 esi
  01303	5b		 pop	 ebx

; 1245 : 		}
; 1246 : 	}
; 1247 : 	
; 1248 : 
; 1249 : }

  01304	c3		 ret	 0
$L72147:

; 1240 : 			}
; 1241 : 		}
; 1242 : 		else
; 1243 : 		{
; 1244 : 			ls_spel_spell(phTTS,llp,rlp);

  01305	53		 push	 ebx
  01306	56		 push	 esi
  01307	57		 push	 edi
  01308	e8 00 00 00 00	 call	 _ls_spel_spell
  0130d	83 c4 0c	 add	 esp, 12			; 0000000cH
$L72151:
  01310	5f		 pop	 edi
  01311	5e		 pop	 esi
  01312	5b		 pop	 ebx

; 1245 : 		}
; 1246 : 	}
; 1247 : 	
; 1248 : 
; 1249 : }

  01313	c3		 ret	 0
_ls_proc_do_time ENDP
_TEXT	ENDS
END
