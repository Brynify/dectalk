	TITLE	D:\work\product\dapi\src\Vtm\vtm.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_B0
PUBLIC	_azero_tab
PUBLIC	_bzero_tab
PUBLIC	_czero_tab
PUBLIC	_amptable
PUBLIC	_cosine_table
PUBLIC	_radius_table
PUBLIC	_tiltf
PUBLIC	_tiltbw
_DATA	SEGMENT
COMM	_radius:WORD
_B0	DW	04b0H
	DW	0476H
	DW	0440H
	DW	040eH
	DW	03dfH
	DW	03b4H
	DW	038bH
	DW	0365H
	DW	0341H
	DW	031fH
	DW	0300H
	DW	02e2H
	DW	02c6H
	DW	02abH
	DW	0292H
	DW	027aH
	DW	0264H
	DW	024eH
	DW	023aH
	DW	0227H
	DW	0215H
	DW	0203H
	DW	01f3H
	DW	01e3H
	DW	01d4H
	DW	01c6H
	DW	01b8H
	DW	01abH
	DW	019fH
	DW	0193H
	DW	0187H
	DW	017cH
	DW	0172H
	DW	0168H
	DW	015eH
	DW	0155H
	DW	014cH
	DW	0143H
	DW	013bH
	DW	0133H
	DW	012cH
	DW	0124H
	DW	011dH
	DW	0116H
	DW	0110H
	DW	0109H
	DW	0103H
	DW	0fdH
	DW	0f7H
	DW	0f2H
	DW	0edH
	DW	0e7H
	DW	0e2H
	DW	0ddH
	DW	0d9H
	DW	0d4H
	DW	0d0H
	DW	0ccH
	DW	0c7H
	DW	0c3H
	DW	0c0H
	DW	0bcH
	DW	0b8H
	DW	0b4H
	DW	0b1H
	DW	0aeH
	DW	0aaH
	DW	0a7H
	DW	0a4H
	DW	0a1H
	DW	09eH
	DW	09bH
	DW	099H
	DW	096H
	DW	093H
	DW	091H
	DW	08eH
	DW	08cH
	DW	089H
	DW	087H
	DW	085H
	DW	083H
	DW	080H
	DW	07eH
	DW	07cH
	DW	07aH
	DW	078H
	DW	077H
	DW	075H
	DW	073H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	06aH
	DW	069H
	DW	067H
	DW	066H
	DW	064H
	DW	063H
	DW	061H
	DW	060H
	DW	05fH
	DW	05dH
	DW	05cH
	DW	05bH
	DW	05aH
	DW	058H
	DW	057H
	DW	056H
	DW	055H
	DW	054H
	DW	053H
	DW	052H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04bH
	DW	04aH
	DW	049H
	DW	048H
	DW	047H
	DW	046H
	DW	045H
	DW	044H
	DW	044H
	DW	043H
	DW	042H
	DW	041H
	DW	040H
	DW	040H
	DW	03fH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03cH
	DW	03bH
	DW	03bH
	DW	03aH
	DW	039H
	DW	039H
	DW	038H
	DW	038H
	DW	037H
	DW	037H
	DW	036H
	DW	036H
	DW	035H
	DW	035H
	DW	034H
	DW	034H
	DW	033H
	DW	033H
	DW	032H
	DW	032H
	DW	031H
	DW	031H
	DW	030H
	DW	030H
	DW	02fH
	DW	02fH
	DW	02eH
	DW	02eH
	DW	02dH
	DW	02dH
	DW	02cH
	DW	02cH
	DW	02bH
	DW	02bH
	DW	02aH
	DW	02aH
	DW	029H
	DW	029H
	DW	029H
	DW	029H
	DW	028H
	DW	028H
	DW	027H
	DW	027H
	DW	026H
	DW	026H
	DW	026H
	DW	026H
	DW	025H
	DW	025H
	DW	024H
	DW	024H
	DW	024H
	DW	024H
	DW	023H
	DW	023H
	DW	023H
	DW	023H
	DW	022H
	DW	022H
	DW	021H
	DW	021H
	DW	021H
	DW	021H
	DW	020H
	DW	020H
	DW	020H
	DW	020H
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01bH
	DW	01bH
_azero_tab DW	0f18H
	DW	0e1bH
	DW	0d4dH
	DW	0c87H
	DW	0bcaH
	DW	0b2dH
	DW	0a8cH
	DW	09fbH
	DW	0982H
	DW	0905H
	DW	0893H
	DW	082dH
	DW	07caH
	DW	0770H
	DW	071eH
	DW	06ceH
	DW	0685H
	DW	063eH
	DW	05fdH
	DW	05c1H
	DW	0587H
	DW	0551H
	DW	0520H
	DW	04efH
	DW	04c0H
	DW	0494H
	DW	046bH
	DW	0446H
	DW	0420H
	DW	03fcH
	DW	03dcH
	DW	03c3H
	DW	039eH
	DW	0381H
	DW	0365H
	ORG $+2
_bzero_tab DW	0e2e3H
	DW	0e4d0H
	DW	0e662H
	DW	0e7e5H
	DW	0e956H
	DW	0ea88H
	DW	0ebc3H
	DW	0ecddH
	DW	0edcaH
	DW	0eebeH
	DW	0ef9bH
	DW	0f064H
	DW	0f125H
	DW	0f1d4H
	DW	0f275H
	DW	0f310H
	DW	0f39fH
	DW	0f429H
	DW	0f4a7H
	DW	0f51cH
	DW	0f58eH
	DW	0f5f7H
	DW	0f658H
	DW	0f6b7H
	DW	0f713H
	DW	0f768H
	DW	0f7b8H
	DW	0f802H
	DW	0f84aH
	DW	0f891H
	DW	0f8d0H
	DW	0f90eH
	DW	0f949H
	DW	0f982H
	DW	0f9b7H
	ORG $+2
_czero_tab DW	0e5dH
	DW	0d6dH
	DW	0ca9H
	DW	0becH
	DW	0b38H
	DW	0aa3H
	DW	0a09H
	DW	0980H
	DW	090cH
	DW	0895H
	DW	0829H
	DW	07c8H
	DW	0769H
	DW	0714H
	DW	06c6H
	DW	067aH
	DW	0634H
	DW	05f1H
	DW	05b3H
	DW	057aH
	DW	0543H
	DW	0510H
	DW	04e0H
	DW	04b2H
	DW	0485H
	DW	045bH
	DW	0435H
	DW	0411H
	DW	03edH
	DW	03cbH
	DW	03acH
	DW	038eH
	DW	0371H
	DW	0355H
	DW	033bH
	ORG $+2
_amptable DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0eH
	DW	010H
	DW	012H
	DW	014H
	DW	016H
	DW	019H
	DW	01cH
	DW	020H
	DW	023H
	DW	028H
	DW	02dH
	DW	033H
	DW	039H
	DW	040H
	DW	047H
	DW	050H
	DW	05aH
	DW	065H
	DW	072H
	DW	080H
	DW	08eH
	DW	09fH
	DW	0b3H
	DW	0caH
	DW	0e3H
	DW	0100H
	DW	011cH
	DW	013eH
	DW	0167H
	DW	0195H
	DW	01c7H
	DW	0200H
	DW	0238H
	DW	027eH
	DW	02cfH
	DW	032bH
	DW	038fH
	DW	0400H
	DW	0471H
	DW	04fcH
	DW	059eH
	DW	0656H
	DW	071fH
	DW	0800H
	DW	08e1H
	DW	09f8H
	DW	0b3bH
	DW	0cacH
	DW	0e3dH
	DW	01000H
	DW	011c3H
	DW	013f0H
	DW	01677H
	DW	01958H
	DW	01c7bH
	DW	02000H
	DW	02385H
	DW	027dfH
	DW	02ceeH
	DW	032b0H
	DW	038f6H
	DW	04000H
	DW	047aeH
	DW	050a4H
	DW	05b85H
	DW	06666H
	DW	07333H
	DW	07fffH
_cosine_table DW 02000H
	DW	01fffH
	DW	01fffH
	DW	01fffH
	DW	01ffeH
	DW	01ffdH
	DW	01ffcH
	DW	01ffaH
	DW	01ff9H
	DW	01ff7H
	DW	01ff5H
	DW	01ff3H
	DW	01ff1H
	DW	01feeH
	DW	01febH
	DW	01fe8H
	DW	01fe5H
	DW	01fe2H
	DW	01fdeH
	DW	01fdaH
	DW	01fd6H
	DW	01fd2H
	DW	01fcdH
	DW	01fc9H
	DW	01fc4H
	DW	01fbfH
	DW	01fbaH
	DW	01fb4H
	DW	01faeH
	DW	01fa9H
	DW	01fa3H
	DW	01f9cH
	DW	01f96H
	DW	01f8fH
	DW	01f88H
	DW	01f81H
	DW	01f7aH
	DW	01f72H
	DW	01f6bH
	DW	01f63H
	DW	01f5aH
	DW	01f52H
	DW	01f4aH
	DW	01f41H
	DW	01f38H
	DW	01f2fH
	DW	01f25H
	DW	01f1cH
	DW	01f12H
	DW	01f08H
	DW	01efeH
	DW	01ef4H
	DW	01ee9H
	DW	01edfH
	DW	01ed4H
	DW	01ec8H
	DW	01ebdH
	DW	01eb2H
	DW	01ea6H
	DW	01e9aH
	DW	01e8eH
	DW	01e81H
	DW	01e75H
	DW	01e68H
	DW	01e5bH
	DW	01e4eH
	DW	01e41H
	DW	01e33H
	DW	01e26H
	DW	01e18H
	DW	01e0aH
	DW	01dfbH
	DW	01dedH
	DW	01ddeH
	DW	01dcfH
	DW	01dc0H
	DW	01db1H
	DW	01da2H
	DW	01d92H
	DW	01d82H
	DW	01d72H
	DW	01d62H
	DW	01d51H
	DW	01d41H
	DW	01d30H
	DW	01d1fH
	DW	01d0eH
	DW	01cfdH
	DW	01cebH
	DW	01cd9H
	DW	01cc7H
	DW	01cb5H
	DW	01ca3H
	DW	01c91H
	DW	01c7eH
	DW	01c6bH
	DW	01c58H
	DW	01c45H
	DW	01c32H
	DW	01c1eH
	DW	01c0aH
	DW	01bf6H
	DW	01be2H
	DW	01bceH
	DW	01bb9H
	DW	01ba5H
	DW	01b90H
	DW	01b7bH
	DW	01b66H
	DW	01b50H
	DW	01b3bH
	DW	01b25H
	DW	01b0fH
	DW	01af9H
	DW	01ae3H
	DW	01acdH
	DW	01ab6H
	DW	01a9fH
	DW	01a88H
	DW	01a71H
	DW	01a5aH
	DW	01a42H
	DW	01a2bH
	DW	01a13H
	DW	019fbH
	DW	019e3H
	DW	019cbH
	DW	019b2H
	DW	0199aH
	DW	01981H
	DW	01968H
	DW	0194fH
	DW	01935H
	DW	0191cH
	DW	01902H
	DW	018e9H
	DW	018cfH
	DW	018b5H
	DW	0189aH
	DW	01880H
	DW	01865H
	DW	0184bH
	DW	01830H
	DW	01815H
	DW	017faH
	DW	017deH
	DW	017c3H
	DW	017a7H
	DW	0178bH
	DW	0176fH
	DW	01753H
	DW	01737H
	DW	0171bH
	DW	016feH
	DW	016e1H
	DW	016c4H
	DW	016a7H
	DW	0168aH
	DW	0166dH
	DW	01650H
	DW	01632H
	DW	01614H
	DW	015f6H
	DW	015d8H
	DW	015baH
	DW	0159cH
	DW	0157dH
	DW	0155fH
	DW	01540H
	DW	01521H
	DW	01502H
	DW	014e3H
	DW	014c4H
	DW	014a4H
	DW	01485H
	DW	01465H
	DW	01445H
	DW	01426H
	DW	01406H
	DW	013e5H
	DW	013c5H
	DW	013a5H
	DW	01384H
	DW	01363H
	DW	01342H
	DW	01322H
	DW	01300H
	DW	012dfH
	DW	012beH
	DW	0129dH
	DW	0127bH
	DW	01259H
	DW	01238H
	DW	01216H
	DW	011f4H
	DW	011d1H
	DW	011afH
	DW	0118dH
	DW	0116aH
	DW	01148H
	DW	01125H
	DW	01102H
	DW	010dfH
	DW	010bcH
	DW	01099H
	DW	01076H
	DW	01052H
	DW	0102fH
	DW	0100bH
	DW	0fe8H
	DW	0fc4H
	DW	0fa0H
	DW	0f7cH
	DW	0f58H
	DW	0f34H
	DW	0f10H
	DW	0eebH
	DW	0ec7H
	DW	0ea2H
	DW	0e7dH
	DW	0e59H
	DW	0e34H
	DW	0e0fH
	DW	0deaH
	DW	0dc5H
	DW	0d9fH
	DW	0d7aH
	DW	0d55H
	DW	0d2fH
	DW	0d0aH
	DW	0ce4H
	DW	0cbeH
	DW	0c99H
	DW	0c73H
	DW	0c4dH
	DW	0c27H
	DW	0c01H
	DW	0bdaH
	DW	0bb4H
	DW	0b8eH
	DW	0b67H
	DW	0b41H
	DW	0b1aH
	DW	0af3H
	DW	0acdH
	DW	0aa6H
	DW	0a7fH
	DW	0a58H
	DW	0a31H
	DW	0a0aH
	DW	09e3H
	DW	09bcH
	DW	0995H
	DW	096dH
	DW	0946H
	DW	091eH
	DW	08f7H
	DW	08cfH
	DW	08a8H
	DW	0880H
	DW	0858H
	DW	0831H
	DW	0809H
	DW	07e1H
	DW	07b9H
	DW	0791H
	DW	0769H
	DW	0741H
	DW	0719H
	DW	06f0H
	DW	06c8H
	DW	06a0H
	DW	0678H
	DW	064fH
	DW	0627H
	DW	05ffH
	DW	05d6H
	DW	05aeH
	DW	0585H
	DW	055cH
	DW	0534H
	DW	050bH
	DW	04e3H
	DW	04baH
	DW	0491H
	DW	0468H
	DW	043fH
	DW	0417H
	DW	03eeH
	DW	03c5H
	DW	039cH
	DW	0373H
	DW	034aH
	DW	0321H
	DW	02f8H
	DW	02cfH
	DW	02a6H
	DW	027dH
	DW	0254H
	DW	022bH
	DW	0202H
	DW	01d9H
	DW	01b0H
	DW	0187H
	DW	015dH
	DW	0134H
	DW	010bH
	DW	0e2H
	DW	0b9H
	DW	090H
	DW	066H
	DW	03dH
	DW	014H
	DW	0ffecH
	DW	0ffc3H
	DW	0ff9aH
	DW	0ff70H
	DW	0ff47H
	DW	0ff1eH
	DW	0fef5H
	DW	0feccH
	DW	0fea3H
	DW	0fe79H
	DW	0fe50H
	DW	0fe27H
	DW	0fdfeH
	DW	0fdd5H
	DW	0fdacH
	DW	0fd83H
	DW	0fd5aH
	DW	0fd31H
	DW	0fd08H
	DW	0fcdfH
	DW	0fcb6H
	DW	0fc8dH
	DW	0fc64H
	DW	0fc3bH
	DW	0fc12H
	DW	0fbe9H
	DW	0fbc1H
	DW	0fb98H
	DW	0fb6fH
	DW	0fb46H
	DW	0fb1eH
	DW	0faf5H
	DW	0faccH
	DW	0faa4H
	DW	0fa7bH
	DW	0fa52H
	DW	0fa2aH
	DW	0fa01H
	DW	0f9d9H
	DW	0f9b1H
	DW	0f988H
	DW	0f960H
	DW	0f938H
	DW	0f910H
	DW	0f8e7H
	DW	0f8bfH
	DW	0f897H
	DW	0f86fH
	DW	0f847H
	DW	0f81fH
	DW	0f7f7H
	DW	0f7cfH
	DW	0f7a8H
	DW	0f780H
	DW	0f758H
	DW	0f731H
	DW	0f709H
	DW	0f6e2H
	DW	0f6baH
	DW	0f693H
	DW	0f66bH
	DW	0f644H
	DW	0f61dH
	DW	0f5f6H
	DW	0f5cfH
	DW	0f5a8H
	DW	0f581H
	DW	0f55aH
	DW	0f533H
	DW	0f50dH
	DW	0f4e6H
	DW	0f4bfH
	DW	0f499H
	DW	0f472H
	DW	0f44cH
	DW	0f426H
	DW	0f3ffH
	DW	0f3d9H
	DW	0f3b3H
	DW	0f38dH
	DW	0f367H
	DW	0f342H
	DW	0f31cH
	DW	0f2f6H
	DW	0f2d1H
	DW	0f2abH
	DW	0f286H
	DW	0f261H
	DW	0f23bH
	DW	0f216H
	DW	0f1f1H
	DW	0f1ccH
	DW	0f1a7H
	DW	0f183H
	DW	0f15eH
	DW	0f139H
	DW	0f115H
	DW	0f0f1H
	DW	0f0ccH
	DW	0f0a8H
	DW	0f084H
	DW	0f060H
	DW	0f03cH
	DW	0f018H
	DW	0eff5H
	DW	0efd1H
	DW	0efaeH
	DW	0ef8aH
	DW	0ef67H
	DW	0ef44H
	DW	0ef21H
	DW	0eefeH
	DW	0eedbH
	DW	0eeb8H
	DW	0ee96H
	DW	0ee73H
	DW	0ee51H
	DW	0ee2fH
	DW	0ee0cH
	DW	0edeaH
	DW	0edc9H
	DW	0eda7H
	DW	0ed85H
	DW	0ed63H
	DW	0ed42H
	DW	0ed21H
	DW	0ed00H
	DW	0ecdeH
	DW	0ecbeH
	DW	0ec9dH
	DW	0ec7cH
	DW	0ec5bH
	DW	0ec3bH
	DW	0ec1bH
	DW	0ebfbH
	DW	0ebdaH
	DW	0ebbbH
	DW	0eb9bH
	DW	0eb7bH
	DW	0eb5cH
	DW	0eb3cH
	DW	0eb1dH
	DW	0eafeH
	DW	0eadfH
	DW	0eac0H
	DW	0eaa1H
	DW	0ea83H
	DW	0ea64H
	DW	0ea46H
	DW	0ea28H
	DW	0ea0aH
	DW	0e9ecH
	DW	0e9ceH
	DW	0e9b1H
	DW	0e993H
	DW	0e976H
	DW	0e959H
	DW	0e93cH
	DW	0e91fH
	DW	0e902H
	DW	0e8e5H
	DW	0e8c9H
	DW	0e8adH
	DW	0e891H
	DW	0e875H
	DW	0e859H
	DW	0e83dH
	DW	0e822H
	DW	0e806H
	DW	0e7ebH
	DW	0e7d0H
	DW	0e7b5H
	DW	0e79bH
	DW	0e780H
	DW	0e766H
	DW	0e74bH
	DW	0e731H
	DW	0e717H
	DW	0e6feH
	DW	0e6e4H
	DW	0e6cbH
	DW	0e6b1H
	DW	0e698H
	DW	0e67fH
	DW	0e666H
	DW	0e64eH
	DW	0e635H
	DW	0e61dH
	DW	0e605H
	DW	0e5edH
	DW	0e5d5H
	DW	0e5beH
	DW	0e5a6H
	DW	0e58fH
	DW	0e578H
	DW	0e561H
	DW	0e54aH
	DW	0e533H
	DW	0e51dH
	DW	0e507H
	DW	0e4f1H
	DW	0e4dbH
	DW	0e4c5H
	DW	0e4b0H
	DW	0e49aH
	DW	0e485H
	DW	0e470H
	DW	0e45bH
	DW	0e447H
	DW	0e432H
	DW	0e41eH
	DW	0e40aH
	DW	0e3f6H
	DW	0e3e2H
	DW	0e3ceH
	DW	0e3bbH
	DW	0e3a8H
	DW	0e395H
	DW	0e382H
	DW	0e36fH
	DW	0e35dH
	DW	0e34bH
	DW	0e339H
	DW	0e327H
	DW	0e315H
	DW	0e303H
	DW	0e2f2H
	DW	0e2e1H
	DW	0e2d0H
	DW	0e2bfH
	DW	0e2afH
	DW	0e29eH
	DW	0e28eH
	DW	0e27eH
	DW	0e26eH
	DW	0e25eH
	DW	0e24fH
	DW	0e240H
	DW	0e231H
	DW	0e222H
	DW	0e213H
	DW	0e205H
	DW	0e1f6H
	DW	0e1e8H
	DW	0e1daH
	DW	0e1cdH
	DW	0e1bfH
	DW	0e1b2H
	DW	0e1a5H
	DW	0e198H
	DW	0e18bH
	DW	0e17fH
	DW	0e172H
	DW	0e166H
	DW	0e15aH
	DW	0e14eH
	DW	0e143H
	DW	0e138H
	DW	0e12cH
	DW	0e121H
	DW	0e117H
	DW	0e10cH
	DW	0e102H
	DW	0e0f8H
	DW	0e0eeH
	DW	0e0e4H
	DW	0e0dbH
	DW	0e0d1H
	DW	0e0c8H
	DW	0e0bfH
	DW	0e0b6H
	DW	0e0aeH
	DW	0e0a6H
	DW	0e09dH
	DW	0e095H
	DW	0e08eH
	DW	0e086H
	DW	0e07fH
	DW	0e078H
	DW	0e071H
	DW	0e06aH
	DW	0e064H
	DW	0e05dH
	DW	0e057H
	DW	0e052H
	DW	0e04cH
	DW	0e046H
	DW	0e041H
	DW	0e03cH
	DW	0e037H
	DW	0e033H
	DW	0e02eH
	DW	0e02aH
	DW	0e026H
	DW	0e022H
	DW	0e01eH
	DW	0e01bH
	DW	0e018H
	DW	0e015H
	DW	0e012H
	DW	0e00fH
	DW	0e00dH
	DW	0e00bH
	DW	0e009H
	DW	0e007H
	DW	0e006H
	DW	0e004H
	DW	0e003H
	DW	0e002H
	DW	0e001H
	DW	0e001H
	DW	0e001H
	DW	0e001H
_radius_table DW 01000H
	DW	0ff5H
	DW	0febH
	DW	0fe1H
	DW	0fd7H
	DW	0fccH
	DW	0fc2H
	DW	0fb8H
	DW	0faeH
	DW	0fa4H
	DW	0f9aH
	DW	0f90H
	DW	0f86H
	DW	0f7cH
	DW	0f72H
	DW	0f68H
	DW	0f5eH
	DW	0f54H
	DW	0f4aH
	DW	0f41H
	DW	0f37H
	DW	0f2dH
	DW	0f23H
	DW	0f19H
	DW	0f10H
	DW	0f06H
	DW	0efcH
	DW	0ef3H
	DW	0ee9H
	DW	0ee0H
	DW	0ed6H
	DW	0eccH
	DW	0ec3H
	DW	0eb9H
	DW	0eb0H
	DW	0ea7H
	DW	0e9dH
	DW	0e94H
	DW	0e8aH
	DW	0e81H
	DW	0e78H
	DW	0e6eH
	DW	0e65H
	DW	0e5cH
	DW	0e53H
	DW	0e49H
	DW	0e40H
	DW	0e37H
	DW	0e2eH
	DW	0e25H
	DW	0e1cH
	DW	0e13H
	DW	0e0aH
	DW	0e01H
	DW	0df8H
	DW	0defH
	DW	0de6H
	DW	0dddH
	DW	0dd4H
	DW	0dcbH
	DW	0dc2H
	DW	0db9H
	DW	0db0H
	DW	0da8H
	DW	0d9fH
	DW	0d96H
	DW	0d8dH
	DW	0d85H
	DW	0d7cH
	DW	0d73H
	DW	0d6bH
	DW	0d62H
	DW	0d59H
	DW	0d51H
	DW	0d48H
	DW	0d40H
	DW	0d37H
	DW	0d2fH
	DW	0d26H
	DW	0d1eH
	DW	0d15H
	DW	0d0dH
	DW	0d05H
	DW	0cfcH
	DW	0cf4H
	DW	0cecH
	DW	0ce3H
	DW	0cdbH
	DW	0cd3H
	DW	0ccbH
	DW	0cc2H
	DW	0cbaH
	DW	0cb2H
	DW	0caaH
	DW	0ca2H
	DW	0c9aH
	DW	0c91H
	DW	0c89H
	DW	0c81H
	DW	0c79H
	DW	0c71H
	DW	0c69H
	DW	0c61H
	DW	0c59H
	DW	0c51H
	DW	0c49H
	DW	0c42H
	DW	0c3aH
	DW	0c32H
	DW	0c2aH
	DW	0c22H
	DW	0c1aH
	DW	0c13H
	DW	0c0bH
	DW	0c03H
	DW	0bfbH
	DW	0bf4H
	DW	0becH
	DW	0be4H
	DW	0bddH
	DW	0bd5H
	DW	0bcdH
	DW	0bc6H
	DW	0bbeH
	DW	0bb7H
	DW	0bafH
	DW	0ba8H
	DW	0ba0H
	DW	0b99H
	DW	0b91H
	DW	0b8aH
	DW	0b82H
	DW	0b7bH
	DW	0b74H
	DW	0b6cH
	DW	0b65H
	DW	0b5eH
	DW	0b56H
	DW	0b4fH
	DW	0b48H
	DW	0b41H
	DW	0b39H
	DW	0b32H
	DW	0b2bH
	DW	0b24H
	DW	0b1dH
	DW	0b15H
	DW	0b0eH
	DW	0b07H
	DW	0b00H
	DW	0af9H
	DW	0af2H
	DW	0aebH
	DW	0ae4H
	DW	0addH
	DW	0ad6H
	DW	0acfH
	DW	0ac8H
	DW	0ac1H
	DW	0abaH
	DW	0ab3H
	DW	0aacH
	DW	0aa6H
	DW	0a9fH
	DW	0a98H
	DW	0a91H
	DW	0a8aH
	DW	0a84H
	DW	0a7dH
	DW	0a76H
	DW	0a6fH
	DW	0a69H
	DW	0a62H
	DW	0a5bH
	DW	0a55H
	DW	0a4eH
	DW	0a47H
	DW	0a41H
	DW	0a3aH
	DW	0a34H
	DW	0a2dH
	DW	0a26H
	DW	0a20H
	DW	0a19H
	DW	0a13H
	DW	0a0cH
	DW	0a06H
	DW	0a00H
	DW	09f9H
	DW	09f3H
	DW	09ecH
	DW	09e6H
	DW	09e0H
	DW	09d9H
	DW	09d3H
	DW	09cdH
	DW	09c6H
	DW	09c0H
	DW	09baH
	DW	09b3H
	DW	09adH
	DW	09a7H
	DW	09a1H
	DW	099bH
	DW	0994H
	DW	098eH
	DW	0988H
	DW	0982H
	DW	097cH
	DW	0976H
	DW	0970H
	DW	096aH
	DW	0964H
	DW	095eH
	DW	0958H
	DW	0952H
	DW	094cH
	DW	0946H
	DW	0940H
	DW	093aH
	DW	0934H
	DW	092eH
	DW	0928H
	DW	0922H
	DW	091cH
	DW	0916H
	DW	0911H
	DW	090bH
	DW	0905H
	DW	08ffH
	DW	08f9H
	DW	08f4H
	DW	08eeH
	DW	08e8H
	DW	08e2H
	DW	08ddH
	DW	08d7H
	DW	08d1H
	DW	08ccH
	DW	08c6H
	DW	08c0H
	DW	08bbH
	DW	08b5H
	DW	08afH
	DW	08aaH
	DW	08a4H
	DW	089fH
	DW	0899H
	DW	0894H
	DW	088eH
	DW	0889H
	DW	0883H
	DW	087eH
	DW	0878H
	DW	0873H
	DW	086dH
	DW	0868H
	DW	0863H
	DW	085dH
	DW	0858H
	DW	0852H
	DW	084dH
	DW	0848H
	DW	0842H
	DW	083dH
	DW	0838H
	DW	0833H
	DW	082dH
	DW	0828H
	DW	0823H
	DW	081eH
	DW	0818H
	DW	0813H
	DW	080eH
	DW	0809H
	DW	0804H
	DW	07feH
	DW	07f9H
	DW	07f4H
	DW	07efH
	DW	07eaH
	DW	07e5H
	DW	07e0H
	DW	07dbH
	DW	07d6H
	DW	07d1H
	DW	07ccH
	DW	07c7H
	DW	07c2H
	DW	07bdH
	DW	07b8H
	DW	07b3H
	DW	07aeH
	DW	07a9H
	DW	07a4H
	DW	079fH
	DW	079aH
	DW	0795H
	DW	0790H
	DW	078bH
	DW	0787H
	DW	0782H
	DW	077dH
	DW	0778H
	DW	0773H
	DW	076fH
	DW	076aH
	DW	0765H
	DW	0760H
	DW	075cH
	DW	0757H
	DW	0752H
	DW	074dH
	DW	0749H
	DW	0744H
	DW	073fH
	DW	073bH
	DW	0736H
	DW	0731H
	DW	072dH
	DW	0728H
	DW	0724H
	DW	071fH
	DW	071aH
	DW	0716H
	DW	0711H
	DW	070dH
	DW	0708H
	DW	0704H
	DW	06ffH
	DW	06fbH
	DW	06f6H
	DW	06f2H
	DW	06edH
	DW	06e9H
	DW	06e4H
	DW	06e0H
	DW	06dbH
	DW	06d7H
	DW	06d3H
	DW	06ceH
	DW	06caH
	DW	06c6H
	DW	06c1H
	DW	06bdH
	DW	06b9H
	DW	06b4H
	DW	06b0H
	DW	06acH
	DW	06a7H
	DW	06a3H
	DW	069fH
	DW	069bH
	DW	0696H
	DW	0692H
	DW	068eH
	DW	068aH
	DW	0685H
	DW	0681H
	DW	067dH
	DW	0679H
	DW	0675H
	DW	0671H
	DW	066cH
	DW	0668H
	DW	0664H
	DW	0660H
	DW	065cH
	DW	0658H
	DW	0654H
	DW	0650H
	DW	064cH
	DW	0648H
	DW	0644H
	DW	0640H
	DW	063cH
	DW	0638H
	DW	0634H
	DW	0630H
	DW	062cH
	DW	0628H
	DW	0624H
	DW	0620H
	DW	061cH
	DW	0618H
	DW	0614H
	DW	0610H
	DW	060cH
	DW	0608H
	DW	0604H
	DW	0601H
	DW	05fdH
	DW	05f9H
	DW	05f5H
	DW	05f1H
	DW	05edH
	DW	05e9H
	DW	05e6H
	DW	05e2H
	DW	05deH
	DW	05daH
	DW	05d7H
	DW	05d3H
	DW	05cfH
	DW	05cbH
	DW	05c8H
	DW	05c4H
	DW	05c0H
	DW	05bdH
	DW	05b9H
	DW	05b5H
	DW	05b1H
	DW	05aeH
	DW	05aaH
	DW	05a7H
	DW	05a3H
	DW	059fH
	DW	059cH
	DW	0598H
	DW	0594H
	DW	0591H
	DW	058dH
	DW	058aH
	DW	0586H
	DW	0583H
	DW	057fH
	DW	057cH
	DW	0578H
	DW	0575H
	DW	0571H
	DW	056dH
	DW	056aH
	DW	0567H
	DW	0563H
	DW	0560H
	DW	055cH
	DW	0559H
	DW	0555H
	DW	0552H
	DW	054eH
	DW	054bH
	DW	0548H
	DW	0544H
	DW	0541H
	DW	053dH
	DW	053aH
	DW	0537H
	DW	0533H
	DW	0530H
	DW	052dH
	DW	0529H
	DW	0526H
	DW	0523H
	DW	051fH
	DW	051cH
	DW	0519H
	DW	0516H
	DW	0512H
	DW	050fH
	DW	050cH
	DW	0509H
	DW	0505H
	DW	0502H
	DW	04ffH
	DW	04fcH
	DW	04f8H
	DW	04f5H
	DW	04f2H
	DW	04efH
	DW	04ecH
	DW	04e9H
	DW	04e5H
	DW	04e2H
	DW	04dfH
	DW	04dcH
	DW	04d9H
	DW	04d6H
	DW	04d3H
	DW	04d0H
	DW	04ccH
	DW	04c9H
	DW	04c6H
	DW	04c3H
	DW	04c0H
	DW	04bdH
	DW	04baH
	DW	04b7H
	DW	04b4H
	DW	04b1H
	DW	04aeH
	DW	04abH
	DW	04a8H
	DW	04a5H
	DW	04a2H
	DW	049fH
	DW	049cH
	DW	0499H
	DW	0496H
	DW	0493H
	DW	0490H
	DW	048dH
	DW	048aH
	DW	0487H
	DW	0485H
	DW	0482H
	DW	047fH
	DW	047cH
	DW	0479H
	DW	0476H
	DW	0473H
	DW	0470H
	DW	046dH
	DW	046bH
	DW	0468H
	DW	0465H
	DW	0462H
	DW	045fH
	DW	045dH
	DW	045aH
	DW	0457H
	DW	0454H
	DW	0451H
	DW	044fH
	DW	044cH
	DW	0449H
	DW	0446H
	DW	0444H
	DW	0441H
	DW	043eH
	DW	043bH
	DW	0439H
	DW	0436H
	DW	0433H
	DW	0430H
	DW	042eH
	DW	042bH
	DW	0428H
	DW	0426H
	DW	0423H
	DW	0420H
	DW	041eH
	DW	041bH
	DW	0418H
	DW	0416H
	DW	0413H
	DW	0411H
	DW	040eH
	DW	040bH
	DW	0409H
	DW	0406H
	DW	0404H
	DW	0401H
	DW	03feH
	DW	03fcH
	DW	03f9H
	DW	03f7H
	DW	03f4H
	DW	03f2H
	DW	03efH
	DW	03edH
	DW	03eaH
	DW	03e8H
	DW	03e5H
	DW	03e3H
	DW	03e0H
	DW	03deH
	DW	03dbH
	DW	03d9H
	DW	03d6H
	DW	03d4H
	DW	03d1H
	DW	03cfH
	DW	03ccH
	DW	03caH
	DW	03c7H
	DW	03c5H
	DW	03c3H
	DW	03c0H
	DW	03beH
	DW	03bbH
	DW	03b9H
	DW	03b7H
	DW	03b4H
	DW	03b2H
	DW	03afH
	DW	03adH
	DW	03abH
	DW	03a8H
	DW	03a6H
	DW	03a4H
	DW	03a1H
	DW	039fH
	DW	039dH
	DW	039aH
	DW	0398H
	DW	0396H
	DW	0393H
	DW	0391H
	DW	038fH
	DW	038cH
	DW	038aH
	DW	0388H
	DW	0386H
	DW	0383H
	DW	0381H
	DW	037fH
	DW	037dH
	DW	037aH
	DW	0378H
	DW	0376H
	DW	0374H
	DW	0371H
	DW	036fH
	DW	036dH
	DW	036bH
	DW	0369H
	DW	0366H
	DW	0364H
	DW	0362H
	DW	0360H
	DW	035eH
	DW	035cH
	DW	0359H
	DW	0357H
	DW	0355H
	ORG $+2
_tiltf	DW	01130H
	DW	010eaH
	DW	0ea6H
	DW	0cc6H
	DW	0b22H
	DW	09c4H
	DW	095aH
	DW	08f1H
	DW	0888H
	DW	0820H
	DW	07b9H
	DW	0753H
	DW	06eaH
	DW	0682H
	DW	061aH
	DW	05b2H
	DW	054aH
	DW	04e2H
	DW	04adH
	DW	0479H
	DW	0445H
	DW	0411H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_tiltbw	DW	0762H
	DW	0754H
	DW	0708H
	DW	06c4H
	DW	0688H
	DW	0656H
	DW	062cH
	DW	0602H
	DW	05d2H
	DW	05a6H
	DW	057bH
	DW	0550H
	DW	0526H
	DW	04fcH
	DW	04d3H
	DW	04abH
	DW	0482H
	DW	045aH
	DW	0441H
	DW	0427H
	DW	040eH
	DW	03f6H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_DATA	ENDS
PUBLIC	_d2pole_cf45
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_cf45 PROC NEAR

; 87   : {

  00000	56		 push	 esi

; 88   :   S16 acoef;
; 89   : 
; 90   :   /********************************************************************/
; 91   :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 92   :   /*  10 KHz.                                                         */
; 93   :   /********************************************************************/
; 94   : 
; 95   :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	83 f8 01	 cmp	 eax, 1
  0000a	75 21		 jne	 SHORT $L71337

; 96   :   {
; 97   :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  0000c	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00010	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 98   :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  00015	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0001a	0f af c2	 imul	 eax, edx
  0001d	0f af ca	 imul	 ecx, edx
  00020	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00023	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00026	24 fe		 and	 al, -2			; fffffffeH
  00028	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 99   :   }
; 100  :   else

  0002b	eb 28		 jmp	 SHORT $L71341
$L71337:

; 101  :   {
; 102  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $L71790

; 103  :     {
; 104  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00031	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00035	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 105  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0003a	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0003f	0f af c2	 imul	 eax, edx
  00042	0f af ca	 imul	 ecx, edx
  00045	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00048	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0004b	eb 08		 jmp	 SHORT $L71341
$L71790:
  0004d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00051	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71341:

; 106  :     }
; 107  :   }
; 108  : 
; 109  :   /********************************************************************/
; 110  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 111  :   /********************************************************************/
; 112  : 
; 113  :   if ( frequency >= 4500 )

  00055	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00059	7c 14		 jl	 SHORT $L71344

; 114  :   {
; 115  :     *bcoef = 0;

  0005b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _bcoef$[esp]

; 116  :     *ccoef = 0;

  0005f	8b 54 24 10	 mov	 edx, DWORD PTR _ccoef$[esp]
  00063	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00068	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 117  :   }
; 118  :   else

  0006d	eb 4d		 jmp	 SHORT $L71345
$L71344:

; 119  :   {
; 120  :     /******************************************************************/
; 121  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 122  :     /******************************************************************/
; 123  : 
; 124  :     radius = radius_table[bandwidth >> 3];

  0006f	0f bf c9	 movsx	 ecx, cx

; 125  : 
; 126  :     /******************************************************************/
; 127  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 128  :     /******************************************************************/
; 129  : 
; 130  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00072	0f bf d0	 movsx	 edx, ax
  00075	c1 f9 03	 sar	 ecx, 3
  00078	c1 fa 03	 sar	 edx, 3
  0007b	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00083	57		 push	 edi
  00084	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  0008c	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx

; 131  : 
; 132  :     /******************************************************************/
; 133  :     /*  Let ccoef = - r^2                                             */
; 134  :     /******************************************************************/
; 135  : 
; 136  :     *ccoef = - frac4mul( radius, radius );

  00093	8b 54 24 14	 mov	 edx, DWORD PTR _ccoef$[esp+4]
  00097	0f bf c9	 movsx	 ecx, cx
  0009a	0f af c1	 imul	 eax, ecx
  0009d	8b 4c 24 10	 mov	 ecx, DWORD PTR _bcoef$[esp+4]
  000a1	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax
  000a7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  000ae	8b f8		 mov	 edi, eax
  000b0	0f af f8	 imul	 edi, eax
  000b3	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  000b6	f7 df		 neg	 edi
  000b8	66 89 3a	 mov	 WORD PTR [edx], di
  000bb	5f		 pop	 edi
$L71345:

; 137  :   }
; 138  : 
; 139  :   /********************************************************************/
; 140  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 141  :   /********************************************************************/
; 142  : 
; 143  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  000bc	66 b8 00 10	 mov	 ax, 4096		; 00001000H
  000c0	66 2b 01	 sub	 ax, WORD PTR [ecx]
  000c3	66 2b 02	 sub	 ax, WORD PTR [edx]

; 144  :   
; 145  :   /********************************************************************/
; 146  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 147  :   /*  resonator in the high-order bits.                               */
; 148  :   /********************************************************************/
; 149  : 
; 150  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 151  : 
; 152  :   return( acoef );

  000c6	0f bf 54 24 1c	 movsx	 edx, WORD PTR _gain$[esp]
  000cb	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax
  000d2	5e		 pop	 esi
  000d3	0f bf c0	 movsx	 eax, ax
  000d6	0f af c2	 imul	 eax, edx
  000d9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  000dc	24 fe		 and	 al, -2			; fffffffeH

; 153  : }

  000de	c3		 ret	 0
_d2pole_cf45 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_cf123
_TEXT	SEGMENT
_pVtm_t$ = 8
_pKsd_t$ = 12
_bcoef$ = 16
_ccoef$ = 20
_frequency$ = 24
_bandwidth$ = 28
_gain$ = 32
_d2pole_cf123 PROC NEAR

; 178  : {

  000e0	56		 push	 esi

; 179  :   S16 acoef;
; 180  : 
; 181  :   /********************************************************************/
; 182  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 183  :   /*  10 KHz.                                                         */
; 184  :   /********************************************************************/
; 185  : 
; 186  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  000e1	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  000e5	8b 06		 mov	 eax, DWORD PTR [esi]
  000e7	83 f8 01	 cmp	 eax, 1
  000ea	75 21		 jne	 SHORT $L71366

; 187  :   {
; 188  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  000ec	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  000f0	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 189  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  000f5	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  000fa	0f af c2	 imul	 eax, edx
  000fd	0f af ca	 imul	 ecx, edx
  00100	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00103	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00106	24 fe		 and	 al, -2			; fffffffeH
  00108	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 190  :   }
; 191  :   else

  0010b	eb 28		 jmp	 SHORT $L71370
$L71366:

; 192  :   {
; 193  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0010d	85 c0		 test	 eax, eax
  0010f	75 1c		 jne	 SHORT $L71792

; 194  :     {
; 195  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00111	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00115	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 196  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0011a	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0011f	0f af c2	 imul	 eax, edx
  00122	0f af ca	 imul	 ecx, edx
  00125	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00128	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0012b	eb 08		 jmp	 SHORT $L71370
$L71792:
  0012d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00131	8b 44 24 18	 mov	 eax, DWORD PTR _frequency$[esp]
$L71370:

; 197  :     }
; 198  :   }
; 199  : 
; 200  :   /********************************************************************/
; 201  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 202  :   /********************************************************************/
; 203  : 
; 204  :   if ( frequency >= 4500 )

  00135	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00139	7c 11		 jl	 SHORT $L71373

; 205  :   {
; 206  :     frequency = pKsd_t->uiSampleRate >> 1;

  0013b	8b 44 24 0c	 mov	 eax, DWORD PTR _pKsd_t$[esp]
  0013f	8b 88 2c 02 00
	00		 mov	 ecx, DWORD PTR [eax+556]
  00145	8b c1		 mov	 eax, ecx
  00147	d1 e8		 shr	 eax, 1

; 207  :     bandwidth = pKsd_t->uiSampleRate >> 2;

  00149	c1 e9 02	 shr	 ecx, 2
$L71373:

; 208  :   }
; 209  : 
; 210  :   /********************************************************************/
; 211  :   /*  calculate radius = exp( -pi * T * bandwidth ).                  */
; 212  :   /********************************************************************/
; 213  : 
; 214  :   radius = radius_table[bandwidth >> 3];

  0014c	0f bf c9	 movsx	 ecx, cx

; 215  : 
; 216  :   /********************************************************************/
; 217  :   /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )               */
; 218  :   /********************************************************************/
; 219  : 
; 220  :   *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  0014f	0f bf d0	 movsx	 edx, ax
  00152	c1 f9 03	 sar	 ecx, 3
  00155	c1 fa 03	 sar	 edx, 3
  00158	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00160	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  00168	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  0016f	8b 54 24 10	 mov	 edx, DWORD PTR _bcoef$[esp]
  00173	0f bf c9	 movsx	 ecx, cx
  00176	0f af c1	 imul	 eax, ecx
  00179	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0017c	66 89 02	 mov	 WORD PTR [edx], ax

; 221  : 
; 222  :   /********************************************************************/
; 223  :   /*  Let ccoef = - r^2                                               */
; 224  :   /********************************************************************/
; 225  : 
; 226  :   *ccoef = - frac4mul( radius, radius );

  0017f	8b 4c 24 14	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00183	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0018a	0f af c0	 imul	 eax, eax
  0018d	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00190	f7 d8		 neg	 eax
  00192	66 89 01	 mov	 WORD PTR [ecx], ax

; 227  : 
; 228  :   /********************************************************************/
; 229  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 230  :   /********************************************************************/
; 231  : 
; 232  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  00195	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  00199	66 2b 0a	 sub	 cx, WORD PTR [edx]

; 233  :   
; 234  :   /********************************************************************/
; 235  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 236  :   /*  resonator in the high-order bits.                               */
; 237  :   /********************************************************************/
; 238  : 
; 239  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 240  : 
; 241  :   return( acoef );

  0019c	0f bf 54 24 20	 movsx	 edx, WORD PTR _gain$[esp]
  001a1	2b c8		 sub	 ecx, eax
  001a3	0f bf c1	 movsx	 eax, cx
  001a6	0f af c2	 imul	 eax, edx
  001a9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  001ac	66 89 8e 0e 02
	00 00		 mov	 WORD PTR [esi+526], cx
  001b3	24 fe		 and	 al, -2			; fffffffeH
  001b5	5e		 pop	 esi

; 242  : }

  001b6	c3		 ret	 0
_d2pole_cf123 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_pf
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_pf PROC NEAR

; 265  :   S16 acoef;
; 266  : 
; 267  :   /********************************************************************/
; 268  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 269  :   /*  10 KHz.                                                         */
; 270  :   /********************************************************************/
; 271  : 
; 272  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  001c0	8b 54 24 04	 mov	 edx, DWORD PTR _pVtm_t$[esp-4]
  001c4	56		 push	 esi
  001c5	8b 02		 mov	 eax, DWORD PTR [edx]
  001c7	83 f8 01	 cmp	 eax, 1
  001ca	75 21		 jne	 SHORT $L71392

; 273  :   {
; 274  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  001cc	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001d0	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 275  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  001d5	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001da	0f af c6	 imul	 eax, esi
  001dd	0f af ce	 imul	 ecx, esi
  001e0	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  001e3	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  001e6	24 fe		 and	 al, -2			; fffffffeH
  001e8	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 276  :   }
; 277  :   else

  001eb	eb 28		 jmp	 SHORT $L71396
$L71392:

; 278  :   {
; 279  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  001ed	85 c0		 test	 eax, eax
  001ef	75 1c		 jne	 SHORT $L71794

; 280  :     {
; 281  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  001f1	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001f5	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 282  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  001fa	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001ff	0f af c6	 imul	 eax, esi
  00202	0f af ce	 imul	 ecx, esi
  00205	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00208	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0020b	eb 08		 jmp	 SHORT $L71396
$L71794:
  0020d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00211	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71396:

; 283  :     }
; 284  :   }
; 285  : 
; 286  :   /********************************************************************/
; 287  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 288  :   /********************************************************************/
; 289  : 
; 290  :   if ( frequency >= 4500 )

  00215	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00219	7c 16		 jl	 SHORT $L71399

; 291  :   {
; 292  :     *bcoef = 0;

  0021b	8b 44 24 0c	 mov	 eax, DWORD PTR _bcoef$[esp]

; 293  :     *ccoef = 0;

  0021f	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00223	5e		 pop	 esi
  00224	66 c7 00 00 00	 mov	 WORD PTR [eax], 0
  00229	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 294  :     acoef = 0;

  0022e	33 c0		 xor	 eax, eax

; 328  :   }
; 329  :   return( acoef );
; 330  : }

  00230	c3		 ret	 0
$L71399:

; 295  :   }
; 296  :   else
; 297  :   {
; 298  :     /******************************************************************/
; 299  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 300  :     /******************************************************************/
; 301  : 
; 302  :     radius = radius_table[bandwidth >> 3];

  00231	0f bf c9	 movsx	 ecx, cx

; 303  : 
; 304  :     /******************************************************************/
; 305  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 306  :     /******************************************************************/
; 307  : 
; 308  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00234	0f bf c0	 movsx	 eax, ax
  00237	c1 f9 03	 sar	 ecx, 3
  0023a	c1 f8 03	 sar	 eax, 3
  0023d	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00245	8b 74 24 0c	 mov	 esi, DWORD PTR _bcoef$[esp]
  00249	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[eax*2]
  00251	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  00258	0f bf c9	 movsx	 ecx, cx
  0025b	0f af c1	 imul	 eax, ecx
  0025e	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00261	66 89 06	 mov	 WORD PTR [esi], ax

; 309  : 
; 310  :     /******************************************************************/
; 311  :     /*  Let ccoef = - r^2                                             */
; 312  :     /******************************************************************/
; 313  : 
; 314  :     *ccoef = - frac4mul( radius, radius );

  00264	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00268	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0026f	0f af c0	 imul	 eax, eax
  00272	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00275	f7 d8		 neg	 eax
  00277	66 89 01	 mov	 WORD PTR [ecx], ax

; 315  : 
; 316  :     /******************************************************************/
; 317  :     /*  Let acoef = 1.0 - bcoef - ccoef                               */
; 318  :     /******************************************************************/
; 319  : 
; 320  :     pVtm_t->temp = 4096 - *bcoef - *ccoef;

  0027a	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  0027e	66 2b 0e	 sub	 cx, WORD PTR [esi]
  00281	5e		 pop	 esi
  00282	2b c8		 sub	 ecx, eax
  00284	66 89 8a 0e 02
	00 00		 mov	 WORD PTR [edx+526], cx

; 321  :   
; 322  :     /******************************************************************/
; 323  :     /*  Adjust "acoef" by the gain term to keep output signal of the  */
; 324  :     /*  resonator in the high-order bits.                             */
; 325  :     /******************************************************************/
; 326  : 
; 327  :     acoef = frac4mul( gain, pVtm_t->temp ) << 1;

  0028b	0f bf 54 24 18	 movsx	 edx, WORD PTR _gain$[esp-4]
  00290	0f bf c1	 movsx	 eax, cx
  00293	0f af c2	 imul	 eax, edx
  00296	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  00299	24 fe		 and	 al, -2			; fffffffeH

; 328  :   }
; 329  :   return( acoef );
; 330  : }

  0029b	c3		 ret	 0
_d2pole_pf ENDP
_TEXT	ENDS
PUBLIC	_speech_waveform_generator
PUBLIC	_getmax
EXTRN	_noisec:WORD
EXTRN	_ranmul:DWORD
EXTRN	_ranadd:DWORD
_TEXT	SEGMENT
_phTTS$ = 8
_ns$ = -64
_ABlin$ = -4
_APlin$ = -28
_voice$ = -32
_noise$ = -92
_T0inS4$ = -88
_F1inHZ$ = -76
_F2inHZ$ = -40
_F3inHZ$ = -48
_FZinHZ$ = -84
_B1inHZ$ = -36
_B2inHZ$ = -44
_B3inHZ$ = -52
_AVinDB$ = -56
_TILTDB$ = -60
_r2pa$ = -8
_r2pb$ = -94
_r2pc$ = -96
_r3pa$ = -12
_r3pb$ = -98
_r3pc$ = 8
_r4pa$ = -16
_r5pa$ = -20
_r6pa$ = -24
_pKsd_t$ = -68
_speech_waveform_generator PROC NEAR

; 229  : {

  002a0	83 ec 64	 sub	 esp, 100		; 00000064H

; 230  :   S16 varcatch; /* eab 6/95 */
; 231  :   S16 *variabpars;
; 232  :   S32 temp0;       
; 233  :   S32 temp1;                                                     /* MVP MI moved from vtm.h */
; 234  :   S16 b2p;       /*  Bandwidth of parallel 2th formant *//* MVP MI moved from vtm.h */
; 235  :   S16 b3p;       /*  Bandwidth of parallel 3th formant *//* MVP MI moved from vtm.h */
; 236  :   S16 out;       /*  Output signal from the vocal tract model*/ 
; 237  :   S16 nsr4;      /*  Counter of 4 samples in glottal source loop        */ 
; 238  :   U32 ns;        /*  Number of samples into current frame            */
; 239  :   S16 r3pg;      /*  amp of parameter F3 for iir filter                 */
; 240  :   S16 r2pg;      /*  amp of parameter F2 for iir filter                 */
; 241  :   S16 ABlin;     /*  AB linear ampl. control                            */
; 242  :   S16 APlin;     /*  AP linear ampl. control                            */
; 243  :   S16 voice;     /*  Current sample of voicing waveform                 */ /*BILL*/
; 244  :   S16 noise;     /*  Output of random number generator                  */
; 245  : #ifdef NEW_NOISE
; 246  :   S16 noiseb;	//eab 10/12/98 New noise variables
; 247  :   S16 noisef;	
; 248  : #endif
; 249  :   S16 about;     /*  Output signal from bypass path                     */
; 250  :   S16 rnzout;    /*  Output signal from nasal zero                      */
; 251  :   S16 T0inS4;  /*  Voicing fund freq in Hz*10,      500 to 1650         */
; 252  : #ifdef NEW_VTM
; 253  :   S16 FNPinHZ;   /*Frequency of moveable nasal formant*/
; 254  :   S16 Glot_step;	/*step for voicing source to make almost sinusoidal for nasal variants*/
; 255  : //23  BATS 731 EAB 7/31/98 Init glotnoise
; 256  :   S16 glotnoise=0; /* eab new way of injecting noise pitch synchronously*/
; 257  :   S16 noiseac;
; 258  : #endif
; 259  :   S16 F1inHZ;  /*  First formant freq in Hz,        200 to 1300         */
; 260  :   S16 F2inHZ;  /*  Second formant freq in Hz,       550 to 3000         */
; 261  :   S16 F3inHZ;  /*  Third formant freq in Hz,       1200 to 4800         */
; 262  :   S16 FZinHZ;  /*  Nasal zero freq in Hz,           248 to  528         */
; 263  :   S16 B1inHZ;  /*  First formant bw in Hz,           40 to 1000         */
; 264  :   S16 B2inHZ;  /*  Second formant bw in Hz,          40 to 1000         */
; 265  :   S16 B3inHZ;  /*  Third formant bw in Hz,           40 to 1000         */
; 266  :   S16 AVinDB;  /*  Amp of voicing in dB,             0 to   70          */
; 267  :   S16 APinDB;  /*  Amp of aspiration in dB,          0 to   70          */
; 268  :   S16 A2inDB;  /*  Amp of F2 frication in dB,        0 to   80          */
; 269  :   S16 A3inDB;  /*  Amp of F3 frication in dB,        0 to   80          */
; 270  :   S16 A4inDB;  /*  Amp of F4 frication in dB,        0 to   80          */
; 271  :   S16 A5inDB;  /*  Amp of F5 frication in dB,        0 to   80          */
; 272  :   S16 A6inDB;  /*  Amp of F6                         0 to   80          */
; 273  :   S16 ABinDB;  /*  Amp of bypass fric. in dB,        0 to   80          */
; 274  :   S16 TILTDB;  /*  Voicing spectral tilt in dB,      0 to   24          */
; 275  : #ifndef OLD_TILT
; 276  :   S16 rtltg;    //10/13/98 Parameter for new tilt filter
; 277  :   S16 Ftilt;
; 278  :   S16 BWtilt;
; 279  : #endif
; 280  :   S16 r2pa;      /*  "a" coef for parallel 2nd formant                  */
; 281  :   S16 r2pb;      /*  "b" coefficient                                    */
; 282  :   S16 r2pc;      /*  "c" coefficient                                    */
; 283  : 
; 284  :   S16 r3pa;      /*  "a" coef for parallel 3rd formant                  */
; 285  :   S16 r3pb;      /*  "b" coefficient                                    */
; 286  :   S16 r3pc;      /*  "c" coefficient                                    */
; 287  :   S16 r4pa;      /*  "a" coef for parallel 4th formant                  */
; 288  :   S16 r5pa;      /*  "a" coef for parallel 5th formant                  */
; 289  :   S16 r6pa;      /*  "a" coef for parallel 6th formant                  */
; 290  :   S16 r6pb = -5702;      /*MVP : According to me it is a constant BILL /*  "b" coefficient*/
; 291  :   S16 r6pc = -1995;      /*MVP : According to me it is a constant BILL      /*  "c" coefficient */
; 292  : 
; 293  :   /* MVP MI */
; 294  :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  002a3	8b 44 24 68	 mov	 eax, DWORD PTR _phTTS$[esp+96]
  002a7	53		 push	 ebx
  002a8	55		 push	 ebp
  002a9	56		 push	 esi
  002aa	8b 70 14	 mov	 esi, DWORD PTR [eax+20]

; 295  :   PKSD_T pKsd_t = phTTS->pKernelShareData;

  002ad	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002b0	57		 push	 edi
  002b1	89 44 24 30	 mov	 DWORD PTR _pKsd_t$[esp+116], eax

; 296  : 
; 297  :   /********************************************************************/
; 298  :   /********************************************************************/
; 299  :   /*  READ VARIABLE PARAMETERS FOR ONE FRAME (64 SAMPLES) OF SPEECH   */
; 300  :   /*  Read 18 words of speech frame definition into temp store and    */
; 301  :   /*  move some parameters into active use immediately (voice-excited */
; 302  :   /*  ones are updated pitch synchronously to avoid waveform          */
; 303  :   /*  glitches ).                                                     */
; 304  :   /********************************************************************/
; 305  :   /********************************************************************/
; 306  : 
; 307  :   variabpars = &(pVtm_t->parambuff[1]);
; 308  : 
; 309  :   /*EAB If we just loaded a speaker def zero all vocal tract gains
; 310  : 		so that this looks like a silence packet (last packet of previous frame
; 311  : 		stuck here*/
; 312  : 
; 313  : /* EAB 26-MAY-1997 This code is for a problem of occasional popping. The problem was traced to two
; 314  : unrelated problems creating the same effect. First avlind was initalized but avlin was not. Depending
; 315  : on exactly when in the glotal phase and the present state of voicing the code was stopped it could 
; 316  : cause a non-zero value to propagate into the vocal tract during what should have been silence.
; 317  : The second bug is related to the smoothing variables not all be initalized properly so that it's 
; 318  : possible to smooth in a non-zero value into the silence packets that of necessity always follows a
; 319  : speaker definiton packet. To avoid this problem the code below forces the first two frames following
; 320  : a speaker definition back into being real silence frames(which they are suppose to be) with little 
; 321  : overhead fixing it here is just as functional as in PH but a lot safer and easier */
; 322  : 
; 323  :  
; 324  : 	  if(pVtm_t->icnt >= 2)

  002b5	66 83 be 18 02
	00 00 02	 cmp	 WORD PTR [esi+536], 2
  002bd	7c 0b		 jl	 SHORT $L71803

; 325  : 		  pVtm_t->icnt =0;

  002bf	33 d2		 xor	 edx, edx
  002c1	66 89 96 18 02
	00 00		 mov	 WORD PTR [esi+536], dx
  002c8	eb 02		 jmp	 SHORT $L71498
$L71803:
  002ca	33 d2		 xor	 edx, edx
$L71498:

; 326  : 
; 327  :    if(pVtm_t->ldspdef == 1  || pVtm_t->icnt == 1 )

  002cc	8b 8e 14 02 00
	00		 mov	 ecx, DWORD PTR [esi+532]
  002d2	b8 01 00 00 00	 mov	 eax, 1
  002d7	3b c8		 cmp	 ecx, eax
  002d9	74 09		 je	 SHORT $L71500
  002db	66 39 86 18 02
	00 00		 cmp	 WORD PTR [esi+536], ax
  002e2	75 4c		 jne	 SHORT $L71499
$L71500:

; 328  :   {
; 329  :    pVtm_t->icnt++;

  002e4	66 ff 86 18 02
	00 00		 inc	 WORD PTR [esi+536]

; 330  :    pVtm_t->ldspdef=0;

  002eb	89 96 14 02 00
	00		 mov	 DWORD PTR [esi+532], edx

; 331  :    variabpars[OUT_AV]=0;

  002f1	66 89 96 e6 00
	00 00		 mov	 WORD PTR [esi+230], dx

; 332  :    variabpars[OUT_AP]=0;

  002f8	66 89 96 d2 00
	00 00		 mov	 WORD PTR [esi+210], dx

; 333  :    variabpars[OUT_A2]=0;

  002ff	66 89 96 d6 00
	00 00		 mov	 WORD PTR [esi+214], dx

; 334  :    variabpars[OUT_A3]=0;

  00306	66 89 96 d8 00
	00 00		 mov	 WORD PTR [esi+216], dx

; 335  :    variabpars[OUT_A4]=0;

  0030d	66 89 96 da 00
	00 00		 mov	 WORD PTR [esi+218], dx

; 336  :    variabpars[OUT_A5]=0;

  00314	66 89 96 dc 00
	00 00		 mov	 WORD PTR [esi+220], dx

; 337  :    variabpars[OUT_A6]=0;

  0031b	66 89 96 de 00
	00 00		 mov	 WORD PTR [esi+222], dx

; 338  :    variabpars[OUT_AB]=0;

  00322	66 89 96 e0 00
	00 00		 mov	 WORD PTR [esi+224], dx

; 339  :     pVtm_t->avlin = 0;

  00329	66 89 96 f8 01
	00 00		 mov	 WORD PTR [esi+504], dx
$L71499:

; 340  :   }
; 341  : 
; 342  : 
; 343  :   /********************************************************************/
; 344  :   /********************************************************************/
; 345  :   /*                                                                  */
; 346  :   /*  Scaling for various sample rates is done in the following       */
; 347  :   /*  fashion.                                                        */
; 348  :   /*                                                                  */
; 349  :   /*  If the sample rate is modified then the formant frequencies,    */
; 350  :   /*  bandwidths, and the pitch period are all scaled. If the sample  */
; 351  :   /*  rate is decreased the fifth formant is eliminated, and the gain */
; 352  :   /*  r2pg is lowered to prevent overload.                            */
; 353  :   /*                                                                  */
; 354  :   /********************************************************************/
; 355  :   /********************************************************************/
; 356  : 
; 357  :   /********************************************************************/
; 358  :   /* T0inS4 is a time, so it should be scaled if fs != 10K.           */
; 359  :   /********************************************************************/
; 360  : 
; 361  :   T0inS4 = variabpars[OUT_T0];
; 362  : 
; 363  :   switch( pVtm_t->uiSampleRateChange )
; 364  :   {

  00330	8b 3e		 mov	 edi, DWORD PTR [esi]
  00332	66 8b 8e e4 00
	00 00		 mov	 cx, WORD PTR [esi+228]
  00339	8b c7		 mov	 eax, edi
  0033b	89 4c 24 1c	 mov	 DWORD PTR _T0inS4$[esp+116], ecx
  0033f	2b c2		 sub	 eax, edx
  00341	74 12		 je	 SHORT $L71505
  00343	48		 dec	 eax
  00344	75 23		 jne	 SHORT $L71502

; 368  :     break;
; 369  : 
; 370  :   case SAMPLE_RATE_DECREASE:
; 371  : 
; 372  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 );

  00346	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  0034a	0f bf c1	 movsx	 eax, cx
  0034d	0f af d0	 imul	 edx, eax
  00350	c1 fa 0f	 sar	 edx, 15			; 0000000fH

; 373  :     break;

  00353	eb 10		 jmp	 SHORT $L71806
$L71505:

; 365  :   case SAMPLE_RATE_INCREASE:
; 366  : 
; 367  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 ) << 1;

  00355	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  00359	0f bf c1	 movsx	 eax, cx
  0035c	0f af d0	 imul	 edx, eax
  0035f	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00362	83 e2 fe	 and	 edx, -2			; fffffffeH
$L71806:
  00365	89 54 24 1c	 mov	 DWORD PTR _T0inS4$[esp+116], edx
$L71502:

; 454  :   r5pa = frac1mul( r5pa, pVtm_t->AFgain );    /*  Scale A5 by spdef GF        */
; 455  :   r6pa = frac1mul( r6pa, pVtm_t->AFgain );    /*  Scale A6 by spdef GF        */
; 456  :   ABlin = frac4mul( ABlin, pVtm_t->AFgain );  /*  Scale AB by spdef GF        */
; 457  : #ifdef NEW_VTM
; 458  :   FNPinHZ= variabpars[OUT_FNP];
; 459  :   Glot_step = variabpars[OUT_GS];
; 460  : #endif
; 461  : 
; 462  :   /********************************************************************/
; 463  :   /*  Set coeficients of variable parallel resonator R2.              */
; 464  :   /********************************************************************/
; 465  : 
; 466  :   b2p = 210;
; 467  :   r2pa = d2pole_pf( pVtm_t,&r2pb, &r2pc, F2inHZ, b2p, r2pg );
; 468  : 
; 469  :   /********************************************************************/
; 470  :   /*  Set coeficients of variable parallel resonator R3.              */
; 471  :   /********************************************************************/
; 472  : 
; 473  :   b3p = 280;
; 474  :   r3pa = d2pole_pf( pVtm_t,&r3pb, &r3pc, F3inHZ, b3p, r3pg );
; 475  : 
; 476  :   /********************************************************************/
; 477  :   /********************************************************************/
; 478  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 479  :   /********************************************************************/
; 480  :   /********************************************************************/
; 481  : 
; 482  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  00369	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  00370	0f bf 96 d4 00
	00 00		 movsx	 edx, WORD PTR [esi+212]
  00377	0f af d1	 imul	 edx, ecx
  0037a	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0037f	2b c1		 sub	 eax, ecx
  00381	8b d8		 mov	 ebx, eax
  00383	0f bf ae ea 00
	00 00		 movsx	 ebp, WORD PTR [esi+234]
  0038a	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0038d	0f af e9	 imul	 ebp, ecx
  00390	c1 fb 04	 sar	 ebx, 4
  00393	03 d3		 add	 edx, ebx
  00395	0f bf 9e e8 00
	00 00		 movsx	 ebx, WORD PTR [esi+232]
  0039c	0f af d9	 imul	 ebx, ecx
  0039f	66 8b 8e ec 00
	00 00		 mov	 cx, WORD PTR [esi+236]
  003a6	89 54 24 28	 mov	 DWORD PTR _F1inHZ$[esp+116], edx
  003aa	c1 fb 0c	 sar	 ebx, 12			; 0000000cH
  003ad	c1 f8 03	 sar	 eax, 3
  003b0	03 d8		 add	 ebx, eax
  003b2	8b c7		 mov	 eax, edi
  003b4	c1 fd 0c	 sar	 ebp, 12			; 0000000cH
  003b7	83 e8 00	 sub	 eax, 0
  003ba	89 5c 24 4c	 mov	 DWORD PTR _F2inHZ$[esp+116], ebx
  003be	89 6c 24 44	 mov	 DWORD PTR _F3inHZ$[esp+116], ebp
  003c2	89 4c 24 20	 mov	 DWORD PTR _FZinHZ$[esp+116], ecx
  003c6	74 15		 je	 SHORT $L71520

; 374  : 
; 375  :   case NO_SAMPLE_RATE_CHANGE:
; 376  : 
; 377  :     break;
; 378  : 
; 379  :   default:
; 380  : 
; 381  :     break;
; 382  :   }
; 383  : 
; 384  :   /********************************************************************/
; 385  :   /*  Scale F1inHZ, F2inHZ, and F3inHZ up or down in frequency        */
; 386  :   /*  according to spdef fnscal. Use trick to reduce scaling          */
; 387  :   /*  performed if F1inHZ or F2inHZ is relatively low.                */
; 388  :   /********************************************************************/
; 389  : 
; 390  :   F1inHZ = variabpars[OUT_F1];
; 391  :   F1inHZ = frac4mul( F1inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 4);
; 392  :   F2inHZ = variabpars[OUT_F2];
; 393  :   F2inHZ = frac4mul( F2inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 3);
; 394  :   F3inHZ = variabpars[OUT_F3];
; 395  :   F3inHZ = frac4mul( F3inHZ, pVtm_t->fnscal );
; 396  : 
; 397  :   /********************************************************************/
; 398  :   /*  Scale the nasal anti-resonator frequency for the sample rate.   */
; 399  :   /********************************************************************/
; 400  : 
; 401  :   FZinHZ = variabpars[OUT_FZ];
; 402  : 
; 403  :   switch( pVtm_t->uiSampleRateChange )
; 404  :   {

  003c8	48		 dec	 eax
  003c9	75 23		 jne	 SHORT $L71517

; 408  :     break;
; 409  : 
; 410  :   case SAMPLE_RATE_DECREASE:
; 411  : 
; 412  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ ) << 1;

  003cb	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  003cf	0f bf c1	 movsx	 eax, cx
  003d2	0f af d0	 imul	 edx, eax
  003d5	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  003d8	83 e2 fe	 and	 edx, -2			; fffffffeH

; 413  :     break;

  003db	eb 0d		 jmp	 SHORT $L71807
$L71520:

; 405  :   case SAMPLE_RATE_INCREASE:
; 406  : 
; 407  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ );

  003dd	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  003e1	0f bf c1	 movsx	 eax, cx
  003e4	0f af d0	 imul	 edx, eax
  003e7	c1 fa 0f	 sar	 edx, 15			; 0000000fH
$L71807:
  003ea	89 54 24 20	 mov	 DWORD PTR _FZinHZ$[esp+116], edx
$L71517:

; 414  : 
; 415  :   case NO_SAMPLE_RATE_CHANGE:
; 416  : 
; 417  :     break;
; 418  : 
; 419  :   default:
; 420  : 
; 421  :     break;
; 422  :   }
; 423  : 
; 424  :   B1inHZ = variabpars[OUT_B1];
; 425  :   B2inHZ = variabpars[OUT_B2];

  003ee	66 8b 96 f0 00
	00 00		 mov	 dx, WORD PTR [esi+240]

; 426  :   B3inHZ = variabpars[OUT_B3];

  003f5	66 8b 86 f2 00
	00 00		 mov	 ax, WORD PTR [esi+242]
  003fc	66 8b 8e ee 00
	00 00		 mov	 cx, WORD PTR [esi+238]
  00403	66 89 54 24 48	 mov	 WORD PTR _B2inHZ$[esp+116], dx

; 427  :   AVinDB = variabpars[OUT_AV];
; 428  :   APinDB = variabpars[OUT_AP];
; 429  :   A2inDB = variabpars[OUT_A2];
; 430  :   A3inDB = variabpars[OUT_A3];
; 431  :   A4inDB = variabpars[OUT_A4];
; 432  :   A5inDB = variabpars[OUT_A5];
; 433  :   A6inDB = variabpars[OUT_A6];
; 434  :   ABinDB = variabpars[OUT_AB];
; 435  : 
; 436  : #ifdef OLD_TILT
; 437  :   TILTDB = variabpars[OUT_TLT] - 12;  /*  Tilt in dB at 3 kHz         */
; 438  : #else
; 439  :   TILTDB = variabpars[OUT_TLT];
; 440  : #endif
; 441  : 
; 442  :   APlin= amptable[APinDB + 10];      /*  Convert dB to linear        */
; 443  :   r2pg = amptable[A2inDB + 13];       /*  Convert dB to linear        */
; 444  :   r3pg = amptable[A3inDB + 10];       /*  Convert dB to linear        */
; 445  :   r4pa = amptable[A4inDB + 7];        /*  Convert dB to linear        */
; 446  :   r5pa = amptable[A5inDB + 6];        /*  Convert dB to linear        */
; 447  :   r6pa = amptable[A6inDB + 5];        /*  Convert dB to linear        */
; 448  :   ABlin= amptable[ABinDB + 5];       /*  Convert dB to linear        */
; 449  : 
; 450  :   APlin = frac4mul( APlin, pVtm_t->APgain );  /*  Scale asp by spdef GV       */

  00408	0f bf 96 d2 00
	00 00		 movsx	 edx, WORD PTR [esi+210]
  0040f	66 89 44 24 40	 mov	 WORD PTR _B3inHZ$[esp+116], ax
  00414	66 8b 86 e2 00
	00 00		 mov	 ax, WORD PTR [esi+226]
  0041b	66 89 4c 24 50	 mov	 WORD PTR _B1inHZ$[esp+116], cx
  00420	66 8b 8e e6 00
	00 00		 mov	 cx, WORD PTR [esi+230]
  00427	66 2d 0c 00	 sub	 ax, 12			; 0000000cH
  0042b	66 89 4c 24 3c	 mov	 WORD PTR _AVinDB$[esp+116], cx
  00430	0f bf 8e ee 01
	00 00		 movsx	 ecx, WORD PTR [esi+494]
  00437	89 44 24 38	 mov	 DWORD PTR _TILTDB$[esp+116], eax
  0043b	0f bf 04 55 14
	00 00 00	 movsx	 eax, WORD PTR _amptable[edx*2+20]

; 451  :   r2pg = frac1mul( r2pg, pVtm_t->AFgain );    /*  Scale A2 by spdef GF        */

  00443	0f bf 96 d6 00
	00 00		 movsx	 edx, WORD PTR [esi+214]
  0044a	0f af c1	 imul	 eax, ecx
  0044d	0f bf 0c 55 1a
	00 00 00	 movsx	 ecx, WORD PTR _amptable[edx*2+26]

; 452  :   r3pg = frac1mul( r3pg, pVtm_t->AFgain );    /*  Scale A3 by spdef GF        */

  00455	0f bf 96 d8 00
	00 00		 movsx	 edx, WORD PTR [esi+216]
  0045c	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0045f	0f bf 3c 55 14
	00 00 00	 movsx	 edi, WORD PTR _amptable[edx*2+20]

; 453  :   r4pa = frac1mul( r4pa, pVtm_t->AFgain );    /*  Scale A4 by spdef GF        */

  00467	0f bf 96 da 00
	00 00		 movsx	 edx, WORD PTR [esi+218]
  0046e	89 44 24 58	 mov	 DWORD PTR _APlin$[esp+116], eax

; 454  :   r5pa = frac1mul( r5pa, pVtm_t->AFgain );    /*  Scale A5 by spdef GF        */
; 455  :   r6pa = frac1mul( r6pa, pVtm_t->AFgain );    /*  Scale A6 by spdef GF        */
; 456  :   ABlin = frac4mul( ABlin, pVtm_t->AFgain );  /*  Scale AB by spdef GF        */
; 457  : #ifdef NEW_VTM
; 458  :   FNPinHZ= variabpars[OUT_FNP];
; 459  :   Glot_step = variabpars[OUT_GS];
; 460  : #endif
; 461  : 
; 462  :   /********************************************************************/
; 463  :   /*  Set coeficients of variable parallel resonator R2.              */
; 464  :   /********************************************************************/
; 465  : 
; 466  :   b2p = 210;
; 467  :   r2pa = d2pole_pf( pVtm_t,&r2pb, &r2pc, F2inHZ, b2p, r2pg );
; 468  : 
; 469  :   /********************************************************************/
; 470  :   /*  Set coeficients of variable parallel resonator R3.              */
; 471  :   /********************************************************************/
; 472  : 
; 473  :   b3p = 280;
; 474  :   r3pa = d2pole_pf( pVtm_t,&r3pb, &r3pc, F3inHZ, b3p, r3pg );
; 475  : 
; 476  :   /********************************************************************/
; 477  :   /********************************************************************/
; 478  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 479  :   /********************************************************************/
; 480  :   /********************************************************************/
; 481  : 
; 482  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  00472	0f bf 86 f0 01
	00 00		 movsx	 eax, WORD PTR [esi+496]
  00479	0f bf 14 55 0e
	00 00 00	 movsx	 edx, WORD PTR _amptable[edx*2+14]
  00481	0f af c8	 imul	 ecx, eax
  00484	0f af d0	 imul	 edx, eax
  00487	0f af f8	 imul	 edi, eax
  0048a	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0048d	89 54 24 64	 mov	 DWORD PTR _r4pa$[esp+116], edx
  00491	0f bf 96 dc 00
	00 00		 movsx	 edx, WORD PTR [esi+220]
  00498	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0049b	0f bf 14 55 0c
	00 00 00	 movsx	 edx, WORD PTR _amptable[edx*2+12]
  004a3	0f af d0	 imul	 edx, eax
  004a6	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  004a9	89 54 24 60	 mov	 DWORD PTR _r5pa$[esp+116], edx
  004ad	51		 push	 ecx
  004ae	0f bf 96 de 00
	00 00		 movsx	 edx, WORD PTR [esi+222]
  004b5	68 d2 00 00 00	 push	 210			; 000000d2H
  004ba	53		 push	 ebx
  004bb	0f bf 14 55 0a
	00 00 00	 movsx	 edx, WORD PTR _amptable[edx*2+10]
  004c3	0f af d0	 imul	 edx, eax
  004c6	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  004c9	89 54 24 68	 mov	 DWORD PTR _r6pa$[esp+128], edx
  004cd	8d 4c 24 22	 lea	 ecx, DWORD PTR _r2pb$[esp+128]
  004d1	0f bf 96 e0 00
	00 00		 movsx	 edx, WORD PTR [esi+224]
  004d8	c1 ff 0f	 sar	 edi, 15			; 0000000fH
  004db	0f bf 14 55 0a
	00 00 00	 movsx	 edx, WORD PTR _amptable[edx*2+10]
  004e3	0f af d0	 imul	 edx, eax
  004e6	8d 44 24 20	 lea	 eax, DWORD PTR _r2pc$[esp+128]
  004ea	50		 push	 eax
  004eb	51		 push	 ecx
  004ec	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  004ef	56		 push	 esi
  004f0	89 94 24 88 00
	00 00		 mov	 DWORD PTR _ABlin$[esp+140], edx
  004f7	e8 00 00 00 00	 call	 _d2pole_pf
  004fc	57		 push	 edi
  004fd	89 84 24 88 00
	00 00		 mov	 DWORD PTR _r2pa$[esp+144], eax
  00504	68 18 01 00 00	 push	 280			; 00000118H
  00509	8d 94 24 98 00
	00 00		 lea	 edx, DWORD PTR _r3pc$[esp+144]
  00510	55		 push	 ebp
  00511	8d 44 24 36	 lea	 eax, DWORD PTR _r3pb$[esp+152]
  00515	52		 push	 edx
  00516	50		 push	 eax
  00517	56		 push	 esi
  00518	e8 00 00 00 00	 call	 _d2pole_pf
  0051d	89 84 24 98 00
	00 00		 mov	 DWORD PTR _r3pa$[esp+164], eax
  00524	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]
  0052a	83 c4 30	 add	 esp, 48			; 00000030H
  0052d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _ns$[esp+116], 0
  00535	85 c0		 test	 eax, eax
  00537	0f 86 e3 0a 00
	00		 jbe	 $L71535
  0053d	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00540	89 4c 24 24	 mov	 DWORD PTR -80+[esp+116], ecx
$L71533:

; 483  :   {
; 484  :     /******************************************************************/
; 485  :     /******************************************************************/
; 486  :     /*  NOISE GENERATOR                                               */
; 487  :     /******************************************************************/
; 488  :     /******************************************************************/
; 489  : #ifndef ACI_LICENSE		//tscode 01may97 ...tek
; 490  : #ifdef NEW_NOISE
; 491  : 	  	 noisef = pVtm_t->randomx >> 2;
; 492  : /*      pVtm_t->randomx = (pVtm_t->randomx * ranmul) + ranadd;*/
; 493  : 	pVtm_t->randomx = (pVtm_t->randomx * 20077) + 12345;
; 494  : 	
; 495  : 
; 496  : 
; 497  : 
; 498  : 	/******************************************************************/
; 499  : 	/*  RANDOM NUMBER FOR FRICATION AND ASPIRATION                    */
; 500  : 	/*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 501  : 	/*  filtering. noise = 4. * (.25 * input) + 0.75 * last noise                  */
; 502  : 	/******************************************************************/
; 503  : 
; 504  : 
; 505  : 	noise = noisef + frac1mul( 24576, pVtm_t->noalast);
; 506  : 	pVtm_t->noalast = noisef;
; 507  : 	
; 508  : 
; 509  : 	
; 510  : 
; 511  : 
; 512  : 	/*  Random number for breathiness (first diff preemphasis) */
; 513  : 	noiseb = noise - pVtm_t->noblast;    /* BREATHINESS NOISE */
; 514  : 	pVtm_t->noblast = noise; 
; 515  : 
; 516  : 	/******************************************************************/
; 517  : 	/*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 518  : 	/*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 519  : 	/*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 520  : 	/******************************************************************/
; 521  : 
; 522  : 	if( pVtm_t->nper < pVtm_t->nmod )
; 523  : 		noise >>= 1;
; 524  : 
; 525  : #else
; 526  :     pVtm_t->randomx = pVtm_t->randomx * ranmul + ranadd;

  00544	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _ranmul
  0054b	a1 00 00 00 00	 mov	 eax, DWORD PTR _ranadd
  00550	66 0f af 96 10
	02 00 00	 imul	 dx, WORD PTR [esi+528]
  00558	03 c2		 add	 eax, edx
  0055a	66 89 86 10 02
	00 00		 mov	 WORD PTR [esi+528], ax

; 527  :     noise = pVtm_t->randomx >> 2;
; 528  : 
; 529  :     /******************************************************************/
; 530  :     /*  RANDOM NUMBER FOR FRICATION AND ASPIRATION                    */
; 531  :     /*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 532  :     /*  filtering. noise = noise + 0.75 * last noise                  */
; 533  :     /******************************************************************/
; 534  : 
; 535  :     noise += frac1mul( 24574, pVtm_t->nolast );

  00561	0f bf 8e a8 01
	00 00		 movsx	 ecx, WORD PTR [esi+424]
  00568	66 c1 f8 02	 sar	 ax, 2
  0056c	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  0056f	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  00572	2b d1		 sub	 edx, ecx
  00574	d1 e2		 shl	 edx, 1
  00576	8b ca		 mov	 ecx, edx
  00578	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0057b	03 c8		 add	 ecx, eax

; 536  :     pVtm_t->nolast = noise;

  0057d	66 8b f9	 mov	 di, cx
  00580	89 4c 24 18	 mov	 DWORD PTR _noise$[esp+116], ecx
  00584	66 89 be a8 01
	00 00		 mov	 WORD PTR [esi+424], di

; 537  : 
; 538  :     /******************************************************************/
; 539  :     /*                                                                */
; 540  :     /*  Filter with Pi-rotated antiresonator. (This is the same as an */
; 541  :     /*  ordinary antiresonator except for the b-coef has it's sign    */
; 542  :     /*  flipped). Frequency = 3500, Bandwidth = 1600.                 */
; 543  :     /*                                                                */
; 544  :     /*  This is a three zero filter, but is implemented as a special  */
; 545  :     /*  case because one of the multipliers is 1.0. The input and     */
; 546  :     /*  output variable is "noise".                                   */
; 547  :     /*                                                                */
; 548  :     /******************************************************************/
; 549  : 
; 550  :     two_zero_filter_2( noise, pVtm_t->ablas1, pVtm_t->ablas2, pVtm_t->noiseb, noisec );

  0058b	66 8b 96 5e 01
	00 00		 mov	 dx, WORD PTR [esi+350]
  00592	0f bf 86 60 01
	00 00		 movsx	 eax, WORD PTR [esi+352]
  00599	0f bf 1d 00 00
	00 00		 movsx	 ebx, WORD PTR _noisec
  005a0	0f bf ae e2 01
	00 00		 movsx	 ebp, WORD PTR [esi+482]
  005a7	0f af c3	 imul	 eax, ebx
  005aa	0f bf da	 movsx	 ebx, dx
  005ad	0f af dd	 imul	 ebx, ebp
  005b0	03 c3		 add	 eax, ebx
  005b2	66 89 96 60 01
	00 00		 mov	 WORD PTR [esi+352], dx
  005b9	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  005bc	66 89 be 5e 01
	00 00		 mov	 WORD PTR [esi+350], di
  005c3	03 c8		 add	 ecx, eax

; 551  : 
; 552  :     /******************************************************************/
; 553  :     /*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 554  :     /*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 555  :     /*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 556  :     /******************************************************************/
; 557  : 
; 558  :     if ( pVtm_t->nper < pVtm_t->nmod )

  005c5	66 8b 86 04 02
	00 00		 mov	 ax, WORD PTR [esi+516]
  005cc	89 4c 24 18	 mov	 DWORD PTR _noise$[esp+116], ecx
  005d0	66 3b 86 0c 02
	00 00		 cmp	 ax, WORD PTR [esi+524]
  005d7	7d 05		 jge	 SHORT $L71540

; 559  : 	noise >>= 1;

  005d9	66 d1 7c 24 18	 sar	 WORD PTR _noise$[esp+116], 1
$L71540:

; 560  : #endif //new_noise/else
; 561  : 
; 562  :     /******************************************************************/
; 563  :     /*  PERIODIC VOICING WAVEFORM                                     */
; 564  :     /*  A period has duration of T0 samples, nper is the counter of   */
; 565  :     /*  current time. During the first nper = 0 to ( T0 - nopen )     */
; 566  :     /*  samples, the glottis is closed. The glottis opens at time     */
; 567  :     /*  ( T0 - nopen ), and closes at time T0.                        */
; 568  :     /******************************************************************/
; 569  : 
; 570  : #ifndef LOWCOMPUTE
; 571  :     for ( nsr4 = 0; nsr4 < 4; nsr4++ )

  005de	8b 7c 24 30	 mov	 edi, DWORD PTR _pKsd_t$[esp+116]
  005e2	8b 4c 24 1c	 mov	 ecx, DWORD PTR _T0inS4$[esp+116]
  005e6	8b 5c 24 38	 mov	 ebx, DWORD PTR _TILTDB$[esp+116]
  005ea	c7 44 24 2c 04
	00 00 00	 mov	 DWORD PTR -72+[esp+116], 4
  005f2	33 d2		 xor	 edx, edx
  005f4	eb 06		 jmp	 SHORT $L71541
$L71805:
  005f6	8b 4c 24 1c	 mov	 ecx, DWORD PTR _T0inS4$[esp+116]
  005fa	33 d2		 xor	 edx, edx
$L71541:

; 572  :     {
; 573  : #endif
; 574  :       /****************************************************************/
; 575  :       /*  Compute next value of voicing wave. Calculate glottal pulse */
; 576  :       /*  at 4 times normal sample rate to minimize the quantization  */
; 577  :       /*  of the glottal period.                                      */
; 578  :       /****************************************************************/
; 579  : 
; 580  :       /****************************************************************/
; 581  :       /*  Future upgrade ?                                            */
; 582  :       /*  When glottis closes, reduce F1 and B1.                      */
; 583  :       /****************************************************************/
; 584  : 
; 585  : #if   F1_B1_UPGRADE
; 586  : 
; 587  :       f1_b1_down();
; 588  : #endif
; 589  : 
; 590  :       /****************************************************************/
; 591  :       /*  voicing has fixed waveshape, at**2 - bt**3                  */
; 592  :       /****************************************************************/
; 593  : 
; 594  :       if ( pVtm_t->nper > ( pVtm_t->T0 - pVtm_t->nopen ))

  005fc	0f bf 86 06 02
	00 00		 movsx	 eax, WORD PTR [esi+518]
  00603	0f bf ae 08 02
	00 00		 movsx	 ebp, WORD PTR [esi+520]
  0060a	2b c5		 sub	 eax, ebp
  0060c	0f bf ae 04 02
	00 00		 movsx	 ebp, WORD PTR [esi+516]
  00613	3b e8		 cmp	 ebp, eax
  00615	7e 30		 jle	 SHORT $L71544

; 595  :       {
; 596  : 		 
; 597  : 		(pVtm_t->a) -= pVtm_t->b;             /*  Fixed waveshape at**2 - bt**3         */

  00617	66 8b 86 fe 01
	00 00		 mov	 ax, WORD PTR [esi+510]
  0061e	66 29 86 fc 01
	00 00		 sub	 WORD PTR [esi+508], ax
  00625	66 8b 86 fc 01
	00 00		 mov	 ax, WORD PTR [esi+508]

; 598  : 		(pVtm_t->voice0) += pVtm_t->a >> 4;   /*  Differentiated glottal flow.          */

  0062c	66 c1 f8 04	 sar	 ax, 4
  00630	66 01 86 e8 01
	00 00		 add	 WORD PTR [esi+488], ax

; 599  : 		pVtm_t->avlind = pVtm_t->avlin;     /*  Delay action of "avlin" change.       */

  00637	66 8b 86 f8 01
	00 00		 mov	 ax, WORD PTR [esi+504]
  0063e	66 89 86 fa 01
	00 00		 mov	 WORD PTR [esi+506], ax

; 600  : #ifdef NEW_VTM
; 601  : 		if(pVtm_t->avlind > 40 && glotnoise == 0)
; 602  : 		 {
; 603  : 			glotnoise = frac1mul( pVtm_t->aturb1, 16000 );
; 604  : 		 }
; 605  : #endif
; 606  :       }
; 607  :       else

  00645	eb 07		 jmp	 SHORT $L71545
$L71544:

; 608  :       {
; 609  : #ifdef NEW_VTM
; 610  : 		  /* EAB 4/26/98 When glot_step is a big number, much greater then 10 it represents a more sinusoidal type of vocaliztion
; 611  : 		  and when it is 10 or less it represents an exponential decay which is similar to instantaneous closure in males
; 612  : 		  but with less high frequency energy as seen in many female voice and some males*/
; 613  : 
; 614  : 		  if(Glot_step)
; 615  : 			{
; 616  : 				if(pVtm_t->voice0 <Glot_step)
; 617  : 				{
; 618  : 					if (Glot_step < 4)
; 619  : 					{
; 620  : 						pVtm_t->voice0 -=(pVtm_t->voice0 >>Glot_step);
; 621  : 					}
; 622  : 					else
; 623  : 					{
; 624  : 					pVtm_t->voice0 =pVtm_t->voice0 + Glot_step;
; 625  : 					}
; 626  : 				}else 
; 627  : 					pVtm_t->voice0  = 0;
; 628  : 
; 629  : 			/* exponential decay could cause a long dc build up, beside I'm assuming physiologically
; 630  : 				that at some point the cords just collapse trying 2000 for that figure 4/27/98*/
; 631  : 
; 632  : 				if(pVtm_t->voice0 > -2000)
; 633  : 				{
; 634  : 					pVtm_t->voice0  = 0;
; 635  : 				}
; 636  : 
; 637  : 			}
; 638  : 			else 
; 639  : 
; 640  : 
; 641  : 				pVtm_t->voice0  = 0;
; 642  : 
; 643  : #ifndef OLD_TILT
; 644  : 	  /* Reset tilt filter at glottal open time (WHY NOT AT CLOSE TIME?) */
; 645  : 		if (pVtm_t->nper == (pVtm_t->topen)) 
; 646  : 			{
; 647  : 		/* BUG: Some kind of obscure overload if TILTDB==0,1 */
; 648  : 				TILTDB -=8; //EAB temp kludge until it's tuned				
; 649  : 				if (TILTDB < 2)    TILTDB = 2;
; 650  : 				if (TILTDB > 41)   TILTDB = 41;
; 651  : 				Ftilt = frac1mul(20000,tiltf[TILTDB]);  /* 0.6 (fold into table)*/
; 652  : 				BWtilt = tiltbw[TILTDB];
; 653  : 			/* need to add new spdef for rltlg*/
; 654  : 				rtltg=1096;      
; 655  : 			 
; 656  : /*                Make gain approx. constant at f=300 rather than at f=0 */
; 657  : /*                This results in boost of as much as 8 dB at f=100 fund comp */
; 658  : 				if (TILTDB > 10)   
; 659  : 					rtltg += ((TILTDB-10) * (TILTDB-10) * 4);
; 660  : 				/* eab had to drop correction at high tilts we were overeloading*/
; 661  : 		    /*    Set one-pole low-pass filter that tilts glottal source */
; 662  : 
; 663  :             setabc( Ftilt, BWtilt, &pVtm_t->rtca, &pVtm_t->rtcb, &pVtm_t->rtcc);
; 664  : 			pVtm_t->rtca = d2pole_pf( pVtm_t,&pVtm_t->rtcb, &pVtm_t->rtcc, Ftilt, BWtilt, rtltg);
; 665  : 			} 
; 666  : #endif
; 667  : 
; 668  : #else
; 669  : 				pVtm_t->voice0  = 0;

  00647	66 89 96 e8 01
	00 00		 mov	 WORD PTR [esi+488], dx
$L71545:

; 670  : 
; 671  : #endif /* NEW_VTM */
; 672  : 
; 673  :       }
; 674  : 
; 675  :     
; 676  : 
; 677  : 
; 678  :       /****************************************************************/
; 679  :       /*  Scale the glottal waveform using the speaker dependant      */
; 680  :       /*  parameter "avgain".                                         */
; 681  :       /****************************************************************/
; 682  : 
; 683  :       voice = frac4mul( pVtm_t->voice0, pVtm_t->avgain );

  0064e	0f bf ae e8 01
	00 00		 movsx	 ebp, WORD PTR [esi+488]
  00655	0f bf 86 ea 01
	00 00		 movsx	 eax, WORD PTR [esi+490]
  0065c	0f af e8	 imul	 ebp, eax

; 684  : 
; 685  :       /****************************************************************/
; 686  :       /*  SOME PARAMETERS ARE UPDATED PITCH SYNCHRONOUSLY             */
; 687  :       /*  (at sample before glottal close time)                       */
; 688  :       /****************************************************************/
; 689  : 
; 690  :       if ( pVtm_t->nper == pVtm_t->T0 )

  0065f	66 8b 86 04 02
	00 00		 mov	 ax, WORD PTR [esi+516]
  00666	c1 fd 0c	 sar	 ebp, 12			; 0000000cH
  00669	66 3b 86 06 02
	00 00		 cmp	 ax, WORD PTR [esi+518]
  00670	89 6c 24 54	 mov	 DWORD PTR _voice$[esp+116], ebp
  00674	0f 85 da 02 00
	00		 jne	 $L71547

; 691  :       {
; 692  : 	/**************************************************************/
; 693  : 	/*  Reset period when 'nper' reaches T0, glottis about to     */
; 694  : 	/*  open.                                                     */
; 695  : 	/**************************************************************/
; 696  : 
; 697  : 	pVtm_t->nper = 0;
; 698  : 
; 699  : 	/**************************************************************/
; 700  : 	/*  'avlin' moved to 'avlind' after half period.              */
; 701  : 	/**************************************************************/
; 702  : 
; 703  : 	pVtm_t->avlin = amptable[AVinDB + 4];  /*  Convert from dB to linear. */

  0067a	0f bf 44 24 3c	 movsx	 eax, WORD PTR _AVinDB$[esp+116]
  0067f	66 89 96 04 02
	00 00		 mov	 WORD PTR [esi+516], dx
  00686	66 8b 04 45 08
	00 00 00	 mov	 ax, WORD PTR _amptable[eax*2+8]
  0068e	66 89 86 f8 01
	00 00		 mov	 WORD PTR [esi+504], ax

; 704  : #ifdef LOWCOMPUTE
; 705  : 	pVtm_t->T0 = T0inS4>>2;          /*  T0inS4 remembers period in case     */
; 706  : #else
; 707  : 	pVtm_t->T0 = T0inS4;

  00695	66 89 8e 06 02
	00 00		 mov	 WORD PTR [esi+518], cx

; 708  : #endif
; 709  : 			      /*  more than 1 period in cur frame.    */
; 710  : 	pVtm_t->T0 += frac4mul( pVtm_t->t0jitr, pVtm_t->T0 ); /*  Add jitter, if any.        */

  0069c	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  006a3	0f bf e9	 movsx	 ebp, cx
  006a6	0f af c5	 imul	 eax, ebp
  006a9	c1 f8 0c	 sar	 eax, 12			; 0000000cH

; 711  : 	
; 712  : 	pVtm_t->t0jitr = -(pVtm_t->t0jitr);     /*  Change sign for alternating jitter. */
; 713  : 
; 714  : 	/**************************************************************/
; 715  : 	/*  aturb1 is the Speaker definition breathiness coeficient   */
; 716  : 	/**************************************************************/
; 717  : 
; 718  : 	pVtm_t->aturb1 = pVtm_t->Aturb ;
; 719  : 
; 720  : 	if ( F1inHZ < 250 )

  006ac	8b 6c 24 28	 mov	 ebp, DWORD PTR _F1inHZ$[esp+116]
  006b0	03 c1		 add	 eax, ecx
  006b2	66 89 86 06 02
	00 00		 mov	 WORD PTR [esi+518], ax
  006b9	66 8b 8e 24 01
	00 00		 mov	 cx, WORD PTR [esi+292]
  006c0	66 f7 d9	 neg	 cx
  006c3	66 89 8e 24 01
	00 00		 mov	 WORD PTR [esi+292], cx
  006ca	66 8b 86 28 01
	00 00		 mov	 ax, WORD PTR [esi+296]
  006d1	66 81 fd fa 00	 cmp	 bp, 250			; 000000faH
  006d6	66 89 86 ec 01
	00 00		 mov	 WORD PTR [esi+492], ax
  006dd	7d 09		 jge	 SHORT $L71549

; 721  : 	  F1inHZ = 250;

  006df	bd fa 00 00 00	 mov	 ebp, 250		; 000000faH
  006e4	89 6c 24 28	 mov	 DWORD PTR _F1inHZ$[esp+116], ebp
$L71549:

; 722  : 
; 723  : 	/**************************************************************/
; 724  : 	/*  Use a one pole iir filter to tilt the glottal source.     */
; 725  : 	/**************************************************************/
; 726  : 
; 727  : 	switch( pVtm_t->uiSampleRateChange )
; 728  : 	{

  006e8	8b 06		 mov	 eax, DWORD PTR [esi]
  006ea	2b c2		 sub	 eax, edx
  006ec	74 06		 je	 SHORT $L71554
  006ee	48		 dec	 eax
  006ef	74 37		 je	 SHORT $L71556
  006f1	48		 dec	 eax
  006f2	75 18		 jne	 SHORT $L71551
$L71554:

; 729  : 	case SAMPLE_RATE_INCREASE:
; 730  : 
; 731  : 	  pVtm_t->decay = 1094 * (S32)TILTDB;

  006f4	8b cb		 mov	 ecx, ebx
  006f6	c1 e1 04	 shl	 ecx, 4
  006f9	03 cb		 add	 ecx, ebx
  006fb	c1 e1 04	 shl	 ecx, 4
  006fe	03 cb		 add	 ecx, ebx
  00700	8d 04 4b	 lea	 eax, DWORD PTR [ebx+ecx*2]
  00703	d1 e0		 shl	 eax, 1
$L71808:
  00705	66 89 86 e4 01
	00 00		 mov	 WORD PTR [esi+484], ax
$L71551:

; 738  : 
; 739  : 	case NO_SAMPLE_RATE_CHANGE:
; 740  : 
; 741  : 	  pVtm_t->decay = 1094 * (S32)TILTDB;
; 742  : 	  break;
; 743  : 
; 744  : 	default:
; 745  : 
; 746  : 	  break;
; 747  : 	}
; 748  : 
; 749  : 	if ( pVtm_t->decay >= 0 )

  0070c	66 8b 86 e4 01
	00 00		 mov	 ax, WORD PTR [esi+484]
  00713	66 3b c2	 cmp	 ax, dx
  00716	7c 21		 jl	 SHORT $L71561

; 750  : 	  pVtm_t->one_minus_decay = 32767 - pVtm_t->decay;

  00718	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  0071d	2b c8		 sub	 ecx, eax
  0071f	66 89 8e e6 01
	00 00		 mov	 WORD PTR [esi+486], cx

; 751  : 	else

  00726	eb 1a		 jmp	 SHORT $L71562
$L71556:

; 732  : 	  break;
; 733  : 
; 734  : 	case SAMPLE_RATE_DECREASE:
; 735  : 
; 736  : 	  pVtm_t->decay = 1073 * (S32)TILTDB;

  00728	8b cb		 mov	 ecx, ebx
  0072a	c1 e1 05	 shl	 ecx, 5
  0072d	03 cb		 add	 ecx, ebx
  0072f	8d 04 4b	 lea	 eax, DWORD PTR [ebx+ecx*2]
  00732	c1 e0 04	 shl	 eax, 4
  00735	03 c3		 add	 eax, ebx

; 737  : 	  break;

  00737	eb cc		 jmp	 SHORT $L71808
$L71561:

; 752  : 	  pVtm_t->one_minus_decay = 32767;

  00739	66 c7 86 e6 01
	00 00 ff 7f	 mov	 WORD PTR [esi+486], 32767 ; 00007fffH
$L71562:

; 753  : 
; 754  : 	/**************************************************************/
; 755  : 	/*  Set to "nmod" during the first half of the period.        */
; 756  : 	/*  Modulate the amplitude of the noise if "avlin" > 0, i.e.  */
; 757  : 	/*  the glottal source is enabled.                            */
; 758  : 	/**************************************************************/
; 759  : 
; 760  : 	pVtm_t->nmod = 0;

  00742	66 89 96 0c 02
	00 00		 mov	 WORD PTR [esi+524], dx

; 761  : 
; 762  : 	if ( pVtm_t->avlin > 0 )

  00749	66 39 96 f8 01
	00 00		 cmp	 WORD PTR [esi+504], dx
  00750	7e 11		 jle	 SHORT $L71563

; 763  : 	  pVtm_t->nmod = pVtm_t->T0 >> 1;

  00752	66 8b 96 06 02
	00 00		 mov	 dx, WORD PTR [esi+518]
  00759	66 d1 fa	 sar	 dx, 1
  0075c	66 89 96 0c 02
	00 00		 mov	 WORD PTR [esi+524], dx
$L71563:

; 764  : #ifdef LOWCOMPUTE
; 765  : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + (pVtm_t->k2>>1);   /*  in open part of period */
; 766  : #else
; 767  : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + pVtm_t->k2;   /*  in open part of period */
; 768  : #endif
; 769  : 
; 770  : 
; 771  : 	
; 772  : #ifndef LOWCOMPUTE
; 773  : 	pVtm_t->nopen += ( TILTDB<<2  );      /*  Longer if TILTDB increases */

  00763	0f bf 86 00 02
	00 00		 movsx	 eax, WORD PTR [esi+512]
  0076a	0f bf 8e 06 02
	00 00		 movsx	 ecx, WORD PTR [esi+518]
  00771	0f af c1	 imul	 eax, ecx
  00774	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00777	66 03 86 02 02
	00 00		 add	 ax, WORD PTR [esi+514]
  0077e	8d 14 9d 00 00
	00 00		 lea	 edx, DWORD PTR [ebx*4]
  00785	03 c2		 add	 eax, edx

; 774  : 	if ( pVtm_t->nopen < 40 )

  00787	66 3d 28 00	 cmp	 ax, 40			; 00000028H
  0078b	66 89 86 08 02
	00 00		 mov	 WORD PTR [esi+520], ax
  00792	7d 0b		 jge	 SHORT $L71565

; 775  : 	  pVtm_t->nopen = 40;        /*  Min is 40                            */

  00794	66 c7 86 08 02
	00 00 28 00	 mov	 WORD PTR [esi+520], 40	; 00000028H

; 776  : 	else

  0079d	eb 0f		 jmp	 SHORT $L71567
$L71565:

; 777  : 	  if ( pVtm_t->nopen > 263 )

  0079f	66 3d 07 01	 cmp	 ax, 263			; 00000107H
  007a3	7e 09		 jle	 SHORT $L71567

; 778  : 	    pVtm_t->nopen = 263;     /*  Max is 263                           */

  007a5	66 c7 86 08 02
	00 00 07 01	 mov	 WORD PTR [esi+520], 263	; 00000107H
$L71567:

; 779  : 
; 780  : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))

  007ae	0f bf 86 06 02
	00 00		 movsx	 eax, WORD PTR [esi+518]
  007b5	0f bf 8e 08 02
	00 00		 movsx	 ecx, WORD PTR [esi+520]
  007bc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  007bf	c1 f8 02	 sar	 eax, 2
  007c2	3b c8		 cmp	 ecx, eax
  007c4	7c 07		 jl	 SHORT $L71568

; 781  : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */

  007c6	66 89 86 08 02
	00 00		 mov	 WORD PTR [esi+520], ax
$L71568:

; 782  : #else
; 783  : 	
; 784  : 	pVtm_t->nopen += ( TILTDB  );      /*  Longer if TILTDB increases */
; 785  : 	if ( pVtm_t->nopen < 10 )
; 786  : 	  pVtm_t->nopen = 10;        /*  Min is 40                            */
; 787  : 	else
; 788  : 	  if ( pVtm_t->nopen > (263>>2) )
; 789  : 	    pVtm_t->nopen = (263>>2);     /*  Max is 263                           */
; 790  : 
; 791  : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))
; 792  : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */
; 793  : #endif
; 794  : 	
; 795  : #ifndef OLD_TILT
; 796  : 	pVtm_t->topen=  pVtm_t->T0-pVtm_t->nopen;
; 797  : #endif
; 798  : 
; 799  : 	/**************************************************************/
; 800  : 	/*  Reset a & b, which determine shape of glottal waveform.   */
; 801  : 	/*  Let a = (b * nopen) / 3 without doing the divide.         */
; 802  : 	/**************************************************************/
; 803  : #ifdef LOWCOMPUTE
; 804  : 	pVtm_t->b = B0[(pVtm_t->nopen<<2)-40];
; 805  : #else
; 806  : 	pVtm_t->b = B0[pVtm_t->nopen-40];

  007cd	0f bf 96 08 02
	00 00		 movsx	 edx, WORD PTR [esi+520]
  007d4	66 8b 0c 55 b0
	ff ff ff	 mov	 cx, WORD PTR _B0[edx*2-80]
  007dc	66 89 8e fe 01
	00 00		 mov	 WORD PTR [esi+510], cx

; 807  : #endif
; 808  : 
; 809  : 	pVtm_t->temp = pVtm_t->b +1;

  007e3	41		 inc	 ecx
  007e4	66 89 8e 0e 02
	00 00		 mov	 WORD PTR [esi+526], cx

; 810  : #ifndef LOWCOMPUTE
; 811  : 	if ( pVtm_t->nopen > 95 )

  007eb	66 8b 86 08 02
	00 00		 mov	 ax, WORD PTR [esi+520]
  007f2	66 3d 5f 00	 cmp	 ax, 95			; 0000005fH
  007f6	7e 24		 jle	 SHORT $L71569

; 812  : 	{
; 813  : 	  pVtm_t->temp = (S32)pVtm_t->temp * pVtm_t->nopen;

  007f8	0f af c1	 imul	 eax, ecx
  007fb	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax

; 814  : 	  pVtm_t->a = frac1mul( 10923, pVtm_t->temp );

  00802	0f bf c0	 movsx	 eax, ax
  00805	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00808	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  0080b	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0080e	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00811	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  00814	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00817	c1 f8 0f	 sar	 eax, 15			; 0000000fH

; 815  : 	}
; 816  : 	else

  0081a	eb 27		 jmp	 SHORT $L71809
$L71569:

; 817  : 	{
; 818  : 	  pVtm_t->temp = frac1mul( 10923, pVtm_t->temp );

  0081c	0f bf c1	 movsx	 eax, cx
  0081f	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00822	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  00825	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00828	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  0082b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  0082e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00831	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00834	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax

; 819  : 	  pVtm_t->a = (S32)pVtm_t->temp * pVtm_t->nopen;

  0083b	66 0f af 86 08
	02 00 00	 imul	 ax, WORD PTR [esi+520]
$L71809:

; 820  : 	}
; 821  : #else
; 822  : 	if ( pVtm_t->nopen > (95>>2) )
; 823  : 	{
; 824  : 	  pVtm_t->temp = (S32)pVtm_t->temp * (pVtm_t->nopen<<2);
; 825  : 	  pVtm_t->a = frac1mul( 10923, pVtm_t->temp );
; 826  : 	}
; 827  : 	else
; 828  : 	{
; 829  : 	  pVtm_t->temp = frac1mul( 10923, pVtm_t->temp );
; 830  : 	  pVtm_t->a = (S32)pVtm_t->temp * (pVtm_t->nopen<<2);
; 831  : 	}
; 832  : #endif
; 833  : 
; 834  : 	/**************************************************************/
; 835  : 	/*  Set coeficients of variable cascade resonators.           */
; 836  : 	/**************************************************************/
; 837  : #ifdef NEW_VTM
; 838  :     d2pole_pf( pVtm_t,&pVtm_t->rnpb, &pVtm_t->rnpc, FNPinHZ, 120, 0 );
; 839  : #endif
; 840  : 	pVtm_t->R3ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r3cb, &pVtm_t->r3cc, F3inHZ, B3inHZ, pVtm_t->r3cg );

  00843	8b 4c 24 40	 mov	 ecx, DWORD PTR _B3inHZ$[esp+116]
  00847	8b 54 24 44	 mov	 edx, DWORD PTR _F3inHZ$[esp+116]
  0084b	66 89 86 fc 01
	00 00		 mov	 WORD PTR [esi+508], ax
  00852	66 8b 86 f2 01
	00 00		 mov	 ax, WORD PTR [esi+498]
  00859	50		 push	 eax
  0085a	51		 push	 ecx
  0085b	8d 86 c2 01 00
	00		 lea	 eax, DWORD PTR [esi+450]
  00861	52		 push	 edx
  00862	8d 8e c0 01 00
	00		 lea	 ecx, DWORD PTR [esi+448]
  00868	50		 push	 eax
  00869	51		 push	 ecx
  0086a	57		 push	 edi
  0086b	56		 push	 esi
  0086c	e8 00 00 00 00	 call	 _d2pole_cf123

; 841  : 	pVtm_t->R2ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r2cb, &pVtm_t->r2cc, F2inHZ, B2inHZ, pVtm_t->r2cg );

  00871	8b 4c 24 68	 mov	 ecx, DWORD PTR _F2inHZ$[esp+144]
  00875	66 89 86 be 01
	00 00		 mov	 WORD PTR [esi+446], ax
  0087c	66 8b 96 f4 01
	00 00		 mov	 dx, WORD PTR [esi+500]
  00883	8b 44 24 64	 mov	 eax, DWORD PTR _B2inHZ$[esp+144]
  00887	52		 push	 edx
  00888	50		 push	 eax
  00889	8d 96 bc 01 00
	00		 lea	 edx, DWORD PTR [esi+444]
  0088f	51		 push	 ecx
  00890	8d 86 ba 01 00
	00		 lea	 eax, DWORD PTR [esi+442]
  00896	52		 push	 edx
  00897	50		 push	 eax
  00898	57		 push	 edi
  00899	56		 push	 esi
  0089a	e8 00 00 00 00	 call	 _d2pole_cf123

; 842  : 	pVtm_t->R1ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r1cb, &pVtm_t->r1cc, F1inHZ, B1inHZ, pVtm_t->r1cg );

  0089f	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR _B1inHZ$[esp+172]
  008a6	66 89 86 b8 01
	00 00		 mov	 WORD PTR [esi+440], ax
  008ad	66 8b 8e f6 01
	00 00		 mov	 cx, WORD PTR [esi+502]
  008b4	8d 86 b6 01 00
	00		 lea	 eax, DWORD PTR [esi+438]
  008ba	51		 push	 ecx
  008bb	52		 push	 edx
  008bc	55		 push	 ebp
  008bd	8d 8e b4 01 00
	00		 lea	 ecx, DWORD PTR [esi+436]
  008c3	50		 push	 eax
  008c4	51		 push	 ecx
  008c5	57		 push	 edi
  008c6	56		 push	 esi
  008c7	e8 00 00 00 00	 call	 _d2pole_cf123
  008cc	83 c4 54	 add	 esp, 84			; 00000054H

; 843  : 
; 844  : 	/**************************************************************/
; 845  : 	/*  Scale up R1 gain here.                                    */
; 846  : 	/**************************************************************/
; 847  : 
; 848  : 	if ( pVtm_t->R1ca > 16383 )

  008cf	66 3d ff 3f	 cmp	 ax, 16383		; 00003fffH
  008d3	66 89 86 b2 01
	00 00		 mov	 WORD PTR [esi+434], ax
  008da	7e 09		 jle	 SHORT $L71575

; 849  : 	  pVtm_t->R1ca = 16383;

  008dc	66 c7 86 b2 01
	00 00 ff 3f	 mov	 WORD PTR [esi+434], 16383 ; 00003fffH
$L71575:

; 850  : 
; 851  : 	pVtm_t->R1ca = pVtm_t->R1ca << 1;
; 852  : #ifdef COMPRESSION
; 853  : 	// tek 29oct98 if this is a silence phoneme, cut the gain back 
; 854  : 	// to make sure we really end up with silence. 
; 855  : 	if (variabpars[OUT_PH] == 0)
; 856  : 	{
; 857  : 		pVtm_t->R3ca = pVtm_t->R3ca >> 1;
; 858  : 		pVtm_t->R2ca = pVtm_t->R2ca >> 1;
; 859  : 		pVtm_t->R1ca = pVtm_t->R1ca >> 1;
; 860  : 	}
; 861  : #endif //COMPRESSION
; 862  : 
; 863  : 	/**************************************************************/
; 864  : 	/*  Future upgrade ?                                          */
; 865  : 	/*  Set pitch-synchronous changes to F1.                      */
; 866  : 	/**************************************************************/
; 867  : 
; 868  : #if     F1_B1_UPGRADE
; 869  : 
; 870  : 	f1_b1_up();
; 871  : #endif
; 872  : 
; 873  : #ifndef NEW_VTM
; 874  : 	/**************************************************************/
; 875  : 	/*  Set coeficients of nasal zero antiresonator by table      */
; 876  : 	/*  lookup.                                                   */
; 877  : 	/**************************************************************/
; 878  : 	pVtm_t->temp =FZinHZ;
; 879  : 
; 880  : 	pVtm_t->temp = ( FZinHZ >> 3 ) - 31;

  008e5	66 8b 54 24 20	 mov	 dx, WORD PTR _FZinHZ$[esp+116]
  008ea	66 d1 a6 b2 01
	00 00		 shl	 WORD PTR [esi+434], 1
  008f1	66 c1 fa 03	 sar	 dx, 3
  008f5	8d 42 e1	 lea	 eax, DWORD PTR [edx-31]

; 881  : 
; 882  : 	if ( pVtm_t->temp > 34 )

  008f8	66 3d 22 00	 cmp	 ax, 34			; 00000022H
  008fc	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax
  00903	7e 09		 jle	 SHORT $L71576

; 883  : 	  pVtm_t->temp = 34;

  00905	66 c7 86 0e 02
	00 00 22 00	 mov	 WORD PTR [esi+526], 34	; 00000022H
$L71576:

; 884  : 
; 885  : 	pVtm_t->rnza = azero_tab[pVtm_t->temp];

  0090e	0f bf 86 0e 02
	00 00		 movsx	 eax, WORD PTR [esi+526]

; 886  : 	pVtm_t->rnzb = bzero_tab[pVtm_t->temp];
; 887  : 	pVtm_t->rnzc = czero_tab[pVtm_t->temp];

  00915	8b 6c 24 54	 mov	 ebp, DWORD PTR _voice$[esp+116]
  00919	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _azero_tab[eax*2]
  00921	66 89 8e d6 01
	00 00		 mov	 WORD PTR [esi+470], cx
  00928	0f bf 96 0e 02
	00 00		 movsx	 edx, WORD PTR [esi+526]
  0092f	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _bzero_tab[edx*2]
  00937	66 89 86 d8 01
	00 00		 mov	 WORD PTR [esi+472], ax
  0093e	0f bf 8e 0e 02
	00 00		 movsx	 ecx, WORD PTR [esi+526]
  00945	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _czero_tab[ecx*2]
  0094d	66 89 96 da 01
	00 00		 mov	 WORD PTR [esi+474], dx
$L71547:

; 888  :       } 
; 889  : #else
; 890  : 	  //temporary until I implement new nasal control--just for test*/
; 891  : 	  
; 892  : 	  	setzeroabc( FZinHZ, 120, 100, &pVtm_t->rnza, &pVtm_t->rnzb, &pVtm_t->rnzc);
; 893  : 		}	
; 894  : #endif /*NEW_VTM*/
; 895  : 		
; 896  : 
; 897  : #ifndef LOWCOMPUTE
; 898  : 		
; 899  :       /****************************************************************/
; 900  :       /*  Downsampling low-pass filter.                               */
; 901  :       /*  Decimate the glottal pulse from a 40 KHz rate to 10 KHz.    */
; 902  :       /*  The variable 'rlpd1' is the output of downsampling low-pass */
; 903  :       /*  filter and is copied back to the variable 'voice'. 'nper'   */
; 904  :       /*  is the 40 KHz sample counter.                               */
; 905  :       /****************************************************************/
; 906  : 
; 907  :       two_pole_filter( voice, pVtm_t->rlpd1, pVtm_t->rlpd2, pVtm_t->rlpa, pVtm_t->rlpb, pVtm_t->rlpc );

  00954	0f bf 86 e0 01
	00 00		 movsx	 eax, WORD PTR [esi+480]
  0095b	0f bf 8e 5c 01
	00 00		 movsx	 ecx, WORD PTR [esi+348]
  00962	66 8b 96 5a 01
	00 00		 mov	 dx, WORD PTR [esi+346]
  00969	0f af c1	 imul	 eax, ecx
  0096c	66 89 96 5c 01
	00 00		 mov	 WORD PTR [esi+348], dx
  00973	0f bf 96 5a 01
	00 00		 movsx	 edx, WORD PTR [esi+346]
  0097a	0f bf 8e de 01
	00 00		 movsx	 ecx, WORD PTR [esi+478]
  00981	0f af d1	 imul	 edx, ecx
  00984	0f bf cd	 movsx	 ecx, bp
  00987	0f bf ae dc 01
	00 00		 movsx	 ebp, WORD PTR [esi+476]
  0098e	0f af cd	 imul	 ecx, ebp
  00991	03 c2		 add	 eax, edx
  00993	03 c8		 add	 ecx, eax
  00995	8b 44 24 2c	 mov	 eax, DWORD PTR -72+[esp+116]
  00999	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  0099c	66 89 8e 5a 01
	00 00		 mov	 WORD PTR [esi+346], cx

; 908  : 
; 909  :       voice = pVtm_t->rlpd1;
; 910  : 
; 911  :       pVtm_t->nper++;

  009a3	66 ff 86 04 02
	00 00		 inc	 WORD PTR [esi+516]
  009aa	48		 dec	 eax
  009ab	89 44 24 2c	 mov	 DWORD PTR -72+[esp+116], eax
  009af	0f 85 41 fc ff
	ff		 jne	 $L71805

; 912  :     }
; 913  : #else
; 914  : 	
; 915  : 	voice=voice<<1; //eab very crude gain adjust for testing 10/12/98
; 916  :     pVtm_t->rlpd1 = voice;	// for getmax
; 917  : 	pVtm_t->nper++;
; 918  : 	
; 919  : #endif
; 920  : 
; 921  :     /******************************************************************/
; 922  :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 923  :     /*  use 1-pole iir filter.                                        */
; 924  :     /******************************************************************/
; 925  : #else	//ACI_LICENSE
; 926  : 
; 927  : 		doit();
; 928  : #endif
; 929  : 
; 930  :     
; 931  : #ifdef OLD_TILT
; 932  : 	voice = frac1mul( pVtm_t->one_minus_decay, voice )
; 933  : 		  + frac1mul( pVtm_t->decay, pVtm_t->vlast );

  009b5	0f bf 86 e4 01
	00 00		 movsx	 eax, WORD PTR [esi+484]
  009bc	0f bf 96 6c 01
	00 00		 movsx	 edx, WORD PTR [esi+364]
  009c3	0f af c2	 imul	 eax, edx
  009c6	0f bf 96 e6 01
	00 00		 movsx	 edx, WORD PTR [esi+486]
  009cd	0f bf c9	 movsx	 ecx, cx
  009d0	0f af d1	 imul	 edx, ecx
  009d3	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  009d6	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  009d9	03 c2		 add	 eax, edx
  009db	0f bf 54 24 18	 movsx	 edx, WORD PTR _noise$[esp+116]

; 934  : 	pVtm_t->vlast = voice;

  009e0	66 89 86 6c 01
	00 00		 mov	 WORD PTR [esi+364], ax

; 935  : #else
; 936  : 	
; 937  : /*    Tilt spectrum of voicing source down by soft low-pass filtering, amount
; 938  :  *    of tilt determined by TL which determines additional dB down at 3 kHz */
; 939  : 
; 940  :    
; 941  : two_pole_filter( voice, pVtm_t->rtd1, pVtm_t->rtd2, pVtm_t->rtca, pVtm_t->rtcb, pVtm_t->rtcc );
; 942  : voice=pVtm_t->rtd1;
; 943  :    // pVtm_t->iwave[ns] = voice ;
; 944  : #endif
; 945  :     /******************************************************************/
; 946  :     /*  Add breathiness to voicing. Increase noise if Aspiration.     */
; 947  :     /******************************************************************/
; 948  : 	/* new pitch sync breathiness */
; 949  : 
; 950  :     
; 951  : #ifdef NEW_VTM
; 952  : 	/* eab 4/14/98 glotnoise nissing clear to zero to reset*/
; 953  : 	 if(glotnoise > 300)
; 954  : 		 glotnoise -= 300;
; 955  : 	else if(glotnoise > 0)/* eab 4/16/98 for debug kater can be just else*/
; 956  : 		glotnoise = 0;
; 957  : 	noiseac = frac1mul( (glotnoise ), noise  );
; 958  : 	voice += noiseac;
; 959  : #else
; 960  : 	voice += frac1mul( pVtm_t->aturb1, noise );
; 961  : #endif	
; 962  : 
; 963  :     /******************************************************************/
; 964  :     /*  Set variable gain of voicing.                                 */
; 965  :     /*  24-Jul-85  "avlin" moved to "avlind" after half a period.     */
; 966  :     /******************************************************************/
; 967  : 
; 968  :     voice = frac4mul( pVtm_t->avlind, voice );
; 969  : 
; 970  :     /******************************************************************/
; 971  :     /*  Add aspiration to voicing.                                    */
; 972  :     /******************************************************************/
; 973  : 
; 974  :     voice += frac1mul( APlin, noise );
; 975  : 	
; 976  :     /******************************************************************/
; 977  :     /******************************************************************/
; 978  :     /*                                                                */
; 979  :     /*  CASCADE VOCAL TRACT, EXCITED BY LARYNGEAL SOURCES             */
; 980  :     /*                                                                */
; 981  :     /*  Nasal antiresonator, then formants fnp, f5c, f4c, F3inHZ      */
; 982  :     /*  F2inHZ, and F1inHZ                                            */
; 983  :     /*                                                                */
; 984  :     /******************************************************************/
; 985  :     /******************************************************************/
; 986  : 
; 987  :     /******************************************************************/
; 988  :     /*  Nasal Antiresonator of Cascade Vocal Tract:                   */
; 989  :     /*  rnzout = (rnza * voice) + (rnzb * rnzd1) + (rnzc * rnzd2)     */
; 990  :     /******************************************************************/
; 991  : 
; 992  :     two_zero_filter( voice, rnzout, pVtm_t->rnzd1, pVtm_t->rnzd2, pVtm_t->rnza, pVtm_t->rnzb, pVtm_t->rnzc );

  009e7	66 8b be 56 01
	00 00		 mov	 di, WORD PTR [esi+342]
  009ee	0f bf 8e ec 01
	00 00		 movsx	 ecx, WORD PTR [esi+492]
  009f5	0f af ca	 imul	 ecx, edx
  009f8	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  009fb	03 c8		 add	 ecx, eax
  009fd	0f bf 86 fa 01
	00 00		 movsx	 eax, WORD PTR [esi+506]
  00a04	0f bf c9	 movsx	 ecx, cx
  00a07	0f af c8	 imul	 ecx, eax
  00a0a	0f bf 44 24 58	 movsx	 eax, WORD PTR _APlin$[esp+116]
  00a0f	0f af c2	 imul	 eax, edx
  00a12	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00a15	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00a18	0f bf ae 58 01
	00 00		 movsx	 ebp, WORD PTR [esi+344]
  00a1f	03 c8		 add	 ecx, eax
  00a21	0f bf 86 d8 01
	00 00		 movsx	 eax, WORD PTR [esi+472]
  00a28	0f bf df	 movsx	 ebx, di
  00a2b	0f af c3	 imul	 eax, ebx
  00a2e	0f bf 9e da 01
	00 00		 movsx	 ebx, WORD PTR [esi+474]
  00a35	0f af dd	 imul	 ebx, ebp
  00a38	03 c3		 add	 eax, ebx
  00a3a	0f bf 9e d6 01
	00 00		 movsx	 ebx, WORD PTR [esi+470]
  00a41	0f bf e9	 movsx	 ebp, cx
  00a44	0f af dd	 imul	 ebx, ebp
  00a47	66 89 be 58 01
	00 00		 mov	 WORD PTR [esi+344], di
  00a4e	66 89 8e 56 01
	00 00		 mov	 WORD PTR [esi+342], cx

; 993  : 
; 994  :     /******************************************************************/
; 995  :     /*  Nasal Resonator of Cascade Vocal Tract                        */
; 996  :     /*  output is rnpd1.                                              */
; 997  :     /******************************************************************/
; 998  : 
; 999  :     two_pole_filter( rnzout, pVtm_t->rnpd1, pVtm_t->rnpd2, pVtm_t->rnpa, pVtm_t->rnpb, pVtm_t->rnpc );

  00a55	0f bf 8e d4 01
	00 00		 movsx	 ecx, WORD PTR [esi+468]
  00a5c	0f bf be 54 01
	00 00		 movsx	 edi, WORD PTR [esi+340]
  00a63	03 c3		 add	 eax, ebx
  00a65	0f af cf	 imul	 ecx, edi
  00a68	66 8b be 52 01
	00 00		 mov	 di, WORD PTR [esi+338]

; 1000 : 
; 1001 : 
; 1002 : #ifdef LOWER_YET
; 1003 : 		pVtm_t->r4cd1= pVtm_t->rnpd1>>3;
; 1004 : #else
; 1005 :     /******************************************************************/
; 1006 :     /*  Fifth Formant                                                 */
; 1007 :     /*  output is r5cd1.                                              */
; 1008 :     /******************************************************************/
; 1009 : 
; 1010 :     if ( pKsd_t->uiSampleRate > 9500 )

  00a6f	8b 6c 24 30	 mov	 ebp, DWORD PTR _pKsd_t$[esp+116]
  00a73	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00a76	66 89 be 54 01
	00 00		 mov	 WORD PTR [esi+340], di
  00a7d	0f bf be d0 01
	00 00		 movsx	 edi, WORD PTR [esi+464]
  00a84	0f bf 9e 52 01
	00 00		 movsx	 ebx, WORD PTR [esi+338]
  00a8b	0f bf c0	 movsx	 eax, ax
  00a8e	0f af f8	 imul	 edi, eax
  00a91	0f bf 86 d2 01
	00 00		 movsx	 eax, WORD PTR [esi+466]
  00a98	0f af c3	 imul	 eax, ebx
  00a9b	03 cf		 add	 ecx, edi
  00a9d	03 c1		 add	 eax, ecx
  00a9f	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00aa2	66 89 86 52 01
	00 00		 mov	 WORD PTR [esi+338], ax
  00aa9	8b 8d 2c 02 00
	00		 mov	 ecx, DWORD PTR [ebp+556]
  00aaf	81 f9 1c 25 00
	00		 cmp	 ecx, 9500		; 0000251cH
  00ab5	76 51		 jbe	 SHORT $L71594

; 1011 :     {
; 1012 :       two_pole_filter( pVtm_t->rnpd1, pVtm_t->r5cd1, pVtm_t->r5cd2, pVtm_t->R5ca, pVtm_t->R5cb, pVtm_t->R5cc );

  00ab7	0f bf 86 ce 01
	00 00		 movsx	 eax, WORD PTR [esi+462]
  00abe	0f bf 8e 50 01
	00 00		 movsx	 ecx, WORD PTR [esi+336]
  00ac5	0f af c1	 imul	 eax, ecx
  00ac8	66 8b 8e 4e 01
	00 00		 mov	 cx, WORD PTR [esi+334]
  00acf	66 89 8e 50 01
	00 00		 mov	 WORD PTR [esi+336], cx
  00ad6	0f bf 8e cc 01
	00 00		 movsx	 ecx, WORD PTR [esi+460]
  00add	0f bf be 4e 01
	00 00		 movsx	 edi, WORD PTR [esi+334]
  00ae4	0f bf 9e 52 01
	00 00		 movsx	 ebx, WORD PTR [esi+338]
  00aeb	0f af cf	 imul	 ecx, edi
  00aee	0f bf be ca 01
	00 00		 movsx	 edi, WORD PTR [esi+458]
  00af5	0f af fb	 imul	 edi, ebx
  00af8	03 c1		 add	 eax, ecx
  00afa	03 f8		 add	 edi, eax
  00afc	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00aff	66 89 be 4e 01
	00 00		 mov	 WORD PTR [esi+334], di

; 1013 :     }
; 1014 :     else

  00b06	eb 17		 jmp	 SHORT $L71599
$L71594:

; 1015 :     {
; 1016 :       pVtm_t->r5cd1 = frac4mul( pVtm_t->R5ca, pVtm_t->rnpd1 ) >> 1;

  00b08	0f bf 8e ca 01
	00 00		 movsx	 ecx, WORD PTR [esi+458]
  00b0f	0f bf c0	 movsx	 eax, ax
  00b12	0f af c8	 imul	 ecx, eax
  00b15	c1 f9 0d	 sar	 ecx, 13			; 0000000dH
  00b18	66 89 8e 4e 01
	00 00		 mov	 WORD PTR [esi+334], cx
$L71599:

; 1017 :     }
; 1018 : 
; 1019 :     /******************************************************************/
; 1020 :     /*  Fourth Formant                                                */
; 1021 :     /*  output is r4cd1.                                              */
; 1022 :     /******************************************************************/
; 1023 : 
; 1024 :     two_pole_filter( pVtm_t->r5cd1, pVtm_t->r4cd1, pVtm_t->r4cd2, pVtm_t->R4ca, pVtm_t->R4cb, pVtm_t->R4cc );

  00b1f	0f bf 86 c8 01
	00 00		 movsx	 eax, WORD PTR [esi+456]
  00b26	0f bf 8e 4c 01
	00 00		 movsx	 ecx, WORD PTR [esi+332]
  00b2d	0f af c1	 imul	 eax, ecx
  00b30	66 8b 8e 4a 01
	00 00		 mov	 cx, WORD PTR [esi+330]
  00b37	66 89 8e 4c 01
	00 00		 mov	 WORD PTR [esi+332], cx
  00b3e	0f bf 8e c4 01
	00 00		 movsx	 ecx, WORD PTR [esi+452]
  00b45	0f bf be 4e 01
	00 00		 movsx	 edi, WORD PTR [esi+334]
  00b4c	0f bf 9e 4a 01
	00 00		 movsx	 ebx, WORD PTR [esi+330]
  00b53	0f af cf	 imul	 ecx, edi
  00b56	0f bf be c6 01
	00 00		 movsx	 edi, WORD PTR [esi+454]
  00b5d	0f af fb	 imul	 edi, ebx
  00b60	03 c1		 add	 eax, ecx

; 1025 : 
; 1026 : 
; 1027 : #endif
; 1028 :     /******************************************************************/
; 1029 :     /*  Third Formant                                                 */
; 1030 :     /*  output is r3cd1.                                              */
; 1031 :     /******************************************************************/
; 1032 : 
; 1033 :     two_pole_filter( pVtm_t->r4cd1, pVtm_t->r3cd1, pVtm_t->r3cd2, pVtm_t->R3ca, pVtm_t->r3cb, pVtm_t->r3cc );

  00b62	0f bf 8e 48 01
	00 00		 movsx	 ecx, WORD PTR [esi+328]
  00b69	03 f8		 add	 edi, eax
  00b6b	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00b6e	66 89 be 4a 01
	00 00		 mov	 WORD PTR [esi+330], di
  00b75	0f bf 86 c2 01
	00 00		 movsx	 eax, WORD PTR [esi+450]
  00b7c	0f bf be c0 01
	00 00		 movsx	 edi, WORD PTR [esi+448]
  00b83	0f af c1	 imul	 eax, ecx
  00b86	66 8b 8e 46 01
	00 00		 mov	 cx, WORD PTR [esi+326]
  00b8d	0f bf 9e 4a 01
	00 00		 movsx	 ebx, WORD PTR [esi+330]
  00b94	66 89 8e 48 01
	00 00		 mov	 WORD PTR [esi+328], cx
  00b9b	0f bf c9	 movsx	 ecx, cx
  00b9e	0f af f9	 imul	 edi, ecx
  00ba1	0f bf 8e be 01
	00 00		 movsx	 ecx, WORD PTR [esi+446]
  00ba8	0f af cb	 imul	 ecx, ebx
  00bab	03 c7		 add	 eax, edi
  00bad	03 c8		 add	 ecx, eax

; 1034 : 
; 1035 : 
; 1036 :     /******************************************************************/
; 1037 :     /*  Second Formant                                                */
; 1038 :     /*  output is r2cd1.                                              */
; 1039 :     /******************************************************************/
; 1040 : 
; 1041 :     two_pole_filter( pVtm_t->r3cd1, pVtm_t->r2cd1, pVtm_t->r2cd2, pVtm_t->R2ca, pVtm_t->r2cb, pVtm_t->r2cc );

  00baf	0f bf 86 bc 01
	00 00		 movsx	 eax, WORD PTR [esi+444]
  00bb6	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00bb9	66 89 8e 46 01
	00 00		 mov	 WORD PTR [esi+326], cx
  00bc0	0f bf 8e 44 01
	00 00		 movsx	 ecx, WORD PTR [esi+324]
  00bc7	0f bf be ba 01
	00 00		 movsx	 edi, WORD PTR [esi+442]
  00bce	0f af c1	 imul	 eax, ecx
  00bd1	66 8b 8e 42 01
	00 00		 mov	 cx, WORD PTR [esi+322]
  00bd8	0f bf 9e 46 01
	00 00		 movsx	 ebx, WORD PTR [esi+326]
  00bdf	66 89 8e 44 01
	00 00		 mov	 WORD PTR [esi+324], cx
  00be6	0f bf c9	 movsx	 ecx, cx
  00be9	0f af f9	 imul	 edi, ecx
  00bec	0f bf 8e b8 01
	00 00		 movsx	 ecx, WORD PTR [esi+440]
  00bf3	0f af cb	 imul	 ecx, ebx
  00bf6	03 c7		 add	 eax, edi
  00bf8	03 c8		 add	 ecx, eax

; 1042 : 
; 1043 :     /******************************************************************/
; 1044 :     /*  First Formant of Cascade Vocal Tract                          */
; 1045 :     /*  output is r1cd1.                                              */
; 1046 :     /******************************************************************/
; 1047 : 
; 1048 :     two_pole_filter( pVtm_t->r2cd1, pVtm_t->r1cd1, pVtm_t->r1cd2, pVtm_t->R1ca, pVtm_t->r1cb, pVtm_t->r1cc );

  00bfa	0f bf 86 b6 01
	00 00		 movsx	 eax, WORD PTR [esi+438]
  00c01	0f bf be b2 01
	00 00		 movsx	 edi, WORD PTR [esi+434]
  00c08	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00c0b	66 89 8e 42 01
	00 00		 mov	 WORD PTR [esi+322], cx
  00c12	0f bf 8e 40 01
	00 00		 movsx	 ecx, WORD PTR [esi+320]
  00c19	0f bf 9e 42 01
	00 00		 movsx	 ebx, WORD PTR [esi+322]
  00c20	0f af c1	 imul	 eax, ecx
  00c23	66 8b 8e 3e 01
	00 00		 mov	 cx, WORD PTR [esi+318]
  00c2a	0f af fb	 imul	 edi, ebx
  00c2d	0f bf 9e b4 01
	00 00		 movsx	 ebx, WORD PTR [esi+436]
  00c34	66 89 8e 40 01
	00 00		 mov	 WORD PTR [esi+320], cx
  00c3b	03 c7		 add	 eax, edi
  00c3d	0f bf c9	 movsx	 ecx, cx
  00c40	0f af d9	 imul	 ebx, ecx

; 1049 :     out = pVtm_t->r1cd1;
; 1050 : 
; 1051 :     /******************************************************************/
; 1052 :     /******************************************************************/
; 1053 :     /*                                                                */
; 1054 :     /*  PARALLEL VOCAL TRACT                                          */
; 1055 :     /*                                                                */
; 1056 :     /*  Excited by frication noise source. Uses formant frequencies   */
; 1057 :     /*  f6p, f5p, f4p, F3inHz, F2inHz and bypass path, outputs added  */
; 1058 :     /*  with alternating sign to prevent overflow.                    */
; 1059 :     /*                                                                */
; 1060 :     /******************************************************************/
; 1061 :     /******************************************************************/
; 1062 : 
; 1063 :     /******************************************************************/
; 1064 :     /*  Sixth Formant of Parallel Vocal Tract                         */
; 1065 :     /******************************************************************/
; 1066 : 
; 1067 :     two_pole_filter( noise, pVtm_t->r6pd1, pVtm_t->r6pd2, r6pa,r6pb, r6pc );

  00c43	0f bf 8e 3c 01
	00 00		 movsx	 ecx, WORD PTR [esi+316]
  00c4a	03 d8		 add	 ebx, eax
  00c4c	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00c4f	c1 fb 0c	 sar	 ebx, 12			; 0000000cH
  00c52	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00c55	66 89 9e 3e 01
	00 00		 mov	 WORD PTR [esi+318], bx
  00c5c	c1 e0 04	 shl	 eax, 4
  00c5f	2b c1		 sub	 eax, ecx
  00c61	66 8b 8e 3a 01
	00 00		 mov	 cx, WORD PTR [esi+314]
  00c68	0f bf f9	 movsx	 edi, cx
  00c6b	f7 d8		 neg	 eax
  00c6d	66 89 8e 3c 01
	00 00		 mov	 WORD PTR [esi+316], cx
  00c74	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00c77	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
  00c7a	0f bf 44 24 5c	 movsx	 eax, WORD PTR _r6pa$[esp+116]
  00c7f	c1 e1 05	 shl	 ecx, 5
  00c82	0f af c2	 imul	 eax, edx
  00c85	2b cf		 sub	 ecx, edi
  00c87	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00c8a	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00c8d	8d 0c 4f	 lea	 ecx, DWORD PTR [edi+ecx*2]
  00c90	d1 e1		 shl	 ecx, 1
  00c92	2b c1		 sub	 eax, ecx
  00c94	03 c3		 add	 eax, ebx
  00c96	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00c99	66 89 86 3a 01
	00 00		 mov	 WORD PTR [esi+314], ax

; 1068 : 
; 1069 :     out = pVtm_t->r6pd1 - out;
; 1070 : #ifndef LOWEST
; 1071 :     /******************************************************************/
; 1072 :     /*  Fifth Formant of Parallel Vocal Tract                         */
; 1073 :     /*  Fifth parallel formant effectively out of circuit if the      */
; 1074 :     /*  sample rate is low enough.                                    */
; 1075 :     /******************************************************************/
; 1076 : 
; 1077 :     if ( pKsd_t->uiSampleRate > 9600 )

  00ca0	8b 8d 2c 02 00
	00		 mov	 ecx, DWORD PTR [ebp+556]
  00ca6	66 2b 86 3e 01
	00 00		 sub	 ax, WORD PTR [esi+318]
  00cad	81 f9 80 25 00
	00		 cmp	 ecx, 9600		; 00002580H
  00cb3	76 44		 jbe	 SHORT $L71621

; 1078 :     {
; 1079 :       two_pole_filter( noise, pVtm_t->r5pd1, pVtm_t->r5pd2, r5pa, pVtm_t->R5pb, pVtm_t->r5pc );

  00cb5	0f bf 8e b0 01
	00 00		 movsx	 ecx, WORD PTR [esi+432]
  00cbc	0f bf be 38 01
	00 00		 movsx	 edi, WORD PTR [esi+312]
  00cc3	0f bf 9e ae 01
	00 00		 movsx	 ebx, WORD PTR [esi+430]
  00cca	0f af cf	 imul	 ecx, edi
  00ccd	66 8b be 36 01
	00 00		 mov	 di, WORD PTR [esi+310]
  00cd4	66 89 be 38 01
	00 00		 mov	 WORD PTR [esi+312], di
  00cdb	0f bf ff	 movsx	 edi, di
  00cde	0f af df	 imul	 ebx, edi
  00ce1	0f bf 7c 24 60	 movsx	 edi, WORD PTR _r5pa$[esp+116]
  00ce6	0f af fa	 imul	 edi, edx
  00ce9	03 cb		 add	 ecx, ebx
  00ceb	03 f9		 add	 edi, ecx
  00ced	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00cf0	66 89 be 36 01
	00 00		 mov	 WORD PTR [esi+310], di

; 1080 :     }
; 1081 :     else

  00cf7	eb 09		 jmp	 SHORT $L71626
$L71621:

; 1082 :     {
; 1083 :       pVtm_t->r5pd1 = 0;

  00cf9	66 c7 86 36 01
	00 00 00 00	 mov	 WORD PTR [esi+310], 0
$L71626:

; 1084 :     }
; 1085 : 
; 1086 :     out = pVtm_t->r5pd1 - out;
; 1087 : 
; 1088 :     /******************************************************************/
; 1089 :     /*  Fourth Formant of Parallel Vocal Tract                        */
; 1090 :     /******************************************************************/
; 1091 : 
; 1092 :     two_pole_filter( noise, pVtm_t->r4pd1, pVtm_t->r4pd2, r4pa, pVtm_t->R4pb, pVtm_t->r4pc );

  00d02	0f bf 8e ac 01
	00 00		 movsx	 ecx, WORD PTR [esi+428]
  00d09	0f bf be 34 01
	00 00		 movsx	 edi, WORD PTR [esi+308]
  00d10	0f bf 9e aa 01
	00 00		 movsx	 ebx, WORD PTR [esi+426]
  00d17	0f af cf	 imul	 ecx, edi
  00d1a	66 8b be 32 01
	00 00		 mov	 di, WORD PTR [esi+306]
  00d21	66 89 be 34 01
	00 00		 mov	 WORD PTR [esi+308], di
  00d28	0f bf ff	 movsx	 edi, di
  00d2b	0f af df	 imul	 ebx, edi
  00d2e	0f bf 7c 24 64	 movsx	 edi, WORD PTR _r4pa$[esp+116]
  00d33	0f af fa	 imul	 edi, edx
  00d36	03 cb		 add	 ecx, ebx
  00d38	03 f9		 add	 edi, ecx

; 1093 : 
; 1094 :     out = pVtm_t->r4pd1 - out;
; 1095 : #endif
; 1096 :     /******************************************************************/
; 1097 :     /*  Third Formant of Parallel Vocal Tract                         */
; 1098 :     /******************************************************************/
; 1099 : 
; 1100 :     two_pole_filter( noise, pVtm_t->r3pd1, pVtm_t->r3pd2, r3pa, r3pb, r3pc );

  00d3a	0f bf 8e 30 01
	00 00		 movsx	 ecx, WORD PTR [esi+304]
  00d41	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00d44	66 89 be 32 01
	00 00		 mov	 WORD PTR [esi+306], di
  00d4b	0f bf 7c 24 78	 movsx	 edi, WORD PTR _r3pc$[esp+112]
  00d50	0f af cf	 imul	 ecx, edi
  00d53	66 8b be 2e 01
	00 00		 mov	 di, WORD PTR [esi+302]
  00d5a	66 89 be 30 01
	00 00		 mov	 WORD PTR [esi+304], di
  00d61	0f bf 5c 24 12	 movsx	 ebx, WORD PTR _r3pb$[esp+116]
  00d66	0f bf ff	 movsx	 edi, di
  00d69	0f af df	 imul	 ebx, edi
  00d6c	0f bf 7c 24 68	 movsx	 edi, WORD PTR _r3pa$[esp+116]
  00d71	0f af fa	 imul	 edi, edx
  00d74	03 cb		 add	 ecx, ebx
  00d76	03 f9		 add	 edi, ecx

; 1101 : 
; 1102 :     out = pVtm_t->r3pd1 - out;
; 1103 : 
; 1104 :     /******************************************************************/
; 1105 :     /*  Second Formant of Parallel Vocal Tract                        */
; 1106 :     /******************************************************************/
; 1107 : 
; 1108 :     two_pole_filter( noise, pVtm_t->r2pd1, pVtm_t->r2pd2, r2pa, r2pb, r2pc );

  00d78	0f bf 8e 2c 01
	00 00		 movsx	 ecx, WORD PTR [esi+300]
  00d7f	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00d82	66 89 be 2e 01
	00 00		 mov	 WORD PTR [esi+302], di
  00d89	0f bf 7c 24 14	 movsx	 edi, WORD PTR _r2pc$[esp+116]
  00d8e	0f af cf	 imul	 ecx, edi
  00d91	66 8b be 2a 01
	00 00		 mov	 di, WORD PTR [esi+298]
  00d98	66 89 be 2c 01
	00 00		 mov	 WORD PTR [esi+300], di
  00d9f	0f bf 5c 24 16	 movsx	 ebx, WORD PTR _r2pb$[esp+116]
  00da4	0f bf ff	 movsx	 edi, di
  00da7	0f af df	 imul	 ebx, edi
  00daa	0f bf 7c 24 6c	 movsx	 edi, WORD PTR _r2pa$[esp+116]
  00daf	0f af fa	 imul	 edi, edx
  00db2	03 cb		 add	 ecx, ebx
  00db4	03 f9		 add	 edi, ecx

; 1109 : 
; 1110 :     out = pVtm_t->r2pd1 - out;
; 1111 : 
; 1112 :     about = frac1mul( ABlin, noise );  /*  Output of bypass path      */
; 1113 : 
; 1114 :     out = about - out;

  00db6	0f bf 4c 24 70	 movsx	 ecx, WORD PTR _ABlin$[esp+116]
  00dbb	0f af ca	 imul	 ecx, edx
  00dbe	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  00dc1	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00dc4	2b cf		 sub	 ecx, edi
  00dc6	66 89 be 2a 01
	00 00		 mov	 WORD PTR [esi+298], di
  00dcd	66 2b 8e 32 01
	00 00		 sub	 cx, WORD PTR [esi+306]
  00dd4	2b c8		 sub	 ecx, eax
  00dd6	66 03 8e 2e 01
	00 00		 add	 cx, WORD PTR [esi+302]
  00ddd	66 03 8e 36 01
	00 00		 add	 cx, WORD PTR [esi+310]

; 1115 : 
; 1116 :     /******************************************************************/
; 1117 :     /*  Bring the signal level up near +/-32767.                      */
; 1118 :     /*  If the sample rate is 8000 Hz. then the peak signal level is  */
; 1119 :     /*  approximately 8000. This is because of the parameters in file */
; 1120 :     /*  phvdef.c for a sample rate of 8000 Hz.                        */
; 1121 :     /*                                                                */
; 1122 :     /*  Very occasionaly a large impulse will be generated. Clip it.  */
; 1123 :     /*  This allows running the volume level much higher.             */
; 1124 :     /******************************************************************/
; 1125 : 
; 1126 : 
; 1127 : /* EAB BATS #491 && 554 1/28/98 The statement that the 8K was tuned to +-8000 was 
; 1128 : probably correct but it wasn't supose to be tuned to those levels it was also
; 1129 : suppose to be +-32767- when the vdef got retuned to hotter levels then the compressor
; 1130 : was clipping too much which when fed into a mu-law compressor further degraded the signal
; 1131 : causing it to sound bad. The follwoing code is a simple compressor to raise the average signal level
; 1132 : by 3 db by simply limiting peak excursions whwen they occur */
; 1133 : #ifdef COMPRESSION
; 1134 : 	// tek 29oct98 do a simple bit of compression. 
; 1135 : 	// This algorithm uses a look-up table to quickly 
; 1136 : 	// find the maximum gain for a sample (to avoid having to 
; 1137 : 	// do a calculation for each).
; 1138 : 	{
; 1139 : 		S16 sabs = out;
; 1140 : 		S16 stGain;
; 1141 : 
; 1142 : 		// get absolute value..
; 1143 : 		if (sabs<0)
; 1144 : 			sabs = -sabs;
; 1145 : 
; 1146 : 		pVtm_t->sGain += CompGainIncrement;
; 1147 : 
; 1148 : 
; 1149 : 		// get the gain from the lookup table
; 1150 : 		// shift by 9 gives us six bits of index,
; 1151 : 		// because the sign bit is always 0.
; 1152 : 		stGain = CompGainTable[(sabs)>>9];
; 1153 : 		if (stGain<pVtm_t->sGain)
; 1154 : 		{
; 1155 : 			// reduce gain
; 1156 : 			pVtm_t->sGain = stGain;
; 1157 : 		}
; 1158 : 		// scale the sample
; 1159 : 		// this is probably frac4mul.. at any rate, it's 
; 1160 : 		// Q0*Q12
; 1161 : 		sabs = (S16)(((S32)sabs * (S32)pVtm_t->sGain)>>12);
; 1162 : 		// put it back, with the correct sign
; 1163 : 		if (out<0)
; 1164 : 		{
; 1165 : 	    pVtm_t->iwave[ns] = -sabs;
; 1166 : 		}
; 1167 : 		else
; 1168 : 		{
; 1169 : 	    pVtm_t->iwave[ns] = sabs;
; 1170 : 		}
; 1171 : 	}
; 1172 : #else //COMPRESSION
; 1173 :     if ( out > 16383 )

  00de4	66 81 f9 ff 3f	 cmp	 cx, 16383		; 00003fffH
  00de9	7e 07		 jle	 SHORT $L71640

; 1174 : 		out = 16383;

  00deb	b9 ff 3f 00 00	 mov	 ecx, 16383		; 00003fffH

; 1175 :      else if ( out < -16384 )

  00df0	eb 0c		 jmp	 SHORT $L71642
$L71640:
  00df2	66 81 f9 00 c0	 cmp	 cx, -16384		; ffffc000H
  00df7	7d 05		 jge	 SHORT $L71642

; 1176 : 	  out = -16384;

  00df9	b9 00 c0 ff ff	 mov	 ecx, -16384		; ffffc000H
$L71642:

; 1177 :     pVtm_t->iwave[ns] = out << 1;

  00dfe	8b 44 24 24	 mov	 eax, DWORD PTR -80+[esp+116]
  00e02	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00e05	66 89 10	 mov	 WORD PTR [eax], dx

; 1178 : #endif //COMPRESSION
; 1179 : 
; 1180 : 	// tek 28oct98 move all the tuning pickups here, so that we can turn them on/off
; 1181 : 	// with just one if statement
; 1182 : 	if (pVtm_t->bDoTuning)

  00e08	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  00e0e	85 c0		 test	 eax, eax
  00e10	0f 84 e8 01 00
	00		 je	 $L71534

; 1183 : 	{
; 1184 : 		BOOL bOverloaded = FALSE;
; 1185 : 		DWORD dwPhoneme = variabpars[OUT_PH];

  00e16	0f bf 86 f4 00
	00 00		 movsx	 eax, WORD PTR [esi+244]

; 1186 : 
; 1187 : 		// keep track of the phonemes..
; 1188 : 		if (dwPhoneme != pVtm_t->vtdTuneResults.dwThisPhoneme)

  00e1d	8b 8e 8c 01 00
	00		 mov	 ecx, DWORD PTR [esi+396]
  00e23	3b c1		 cmp	 eax, ecx
  00e25	74 0c		 je	 SHORT $L71646

; 1189 : 		{
; 1190 : 			pVtm_t->vtdTuneResults.dwLastPhoneme = pVtm_t->vtdTuneResults.dwThisPhoneme;

  00e27	89 8e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ecx

; 1191 : 			pVtm_t->vtdTuneResults.dwThisPhoneme = dwPhoneme;

  00e2d	89 86 8c 01 00
	00		 mov	 DWORD PTR [esi+396], eax
$L71646:

; 1192 : 		}
; 1193 : 
; 1194 : 		getmax(pVtm_t->rlpd1,&pVtm_t->vtdTuneResults.purevmax);

  00e33	66 8b 8e 5a 01
	00 00		 mov	 cx, WORD PTR [esi+346]
  00e3a	8d be 7e 01 00
	00		 lea	 edi, DWORD PTR [esi+382]
  00e40	57		 push	 edi
  00e41	51		 push	 ecx
  00e42	e8 00 00 00 00	 call	 _getmax

; 1195 : 		getmax(pVtm_t->rnzd1,&pVtm_t->vtdTuneResults.rnzmax);

  00e47	66 8b 96 56 01
	00 00		 mov	 dx, WORD PTR [esi+342]
  00e4e	8d 9e 72 01 00
	00		 lea	 ebx, DWORD PTR [esi+370]
  00e54	53		 push	 ebx
  00e55	52		 push	 edx
  00e56	e8 00 00 00 00	 call	 _getmax

; 1196 : 		getmax(pVtm_t->rnpd1,&pVtm_t->vtdTuneResults.rnpmax);

  00e5b	66 8b 86 52 01
	00 00		 mov	 ax, WORD PTR [esi+338]
  00e62	8d ae 70 01 00
	00		 lea	 ebp, DWORD PTR [esi+368]
  00e68	55		 push	 ebp
  00e69	50		 push	 eax
  00e6a	e8 00 00 00 00	 call	 _getmax

; 1197 : 		getmax(pVtm_t->r5cd1,&pVtm_t->vtdTuneResults.c5max);

  00e6f	66 8b 8e 4e 01
	00 00		 mov	 cx, WORD PTR [esi+334]
  00e76	8d 86 7c 01 00
	00		 lea	 eax, DWORD PTR [esi+380]
  00e7c	50		 push	 eax
  00e7d	51		 push	 ecx
  00e7e	e8 00 00 00 00	 call	 _getmax

; 1198 : 		getmax(pVtm_t->r4cd1,&pVtm_t->vtdTuneResults.c4max);

  00e83	66 8b 96 4a 01
	00 00		 mov	 dx, WORD PTR [esi+330]
  00e8a	8d 86 7a 01 00
	00		 lea	 eax, DWORD PTR [esi+378]
  00e90	50		 push	 eax
  00e91	52		 push	 edx
  00e92	e8 00 00 00 00	 call	 _getmax

; 1199 : 		getmax(pVtm_t->r3cd1,&pVtm_t->vtdTuneResults.c3max);

  00e97	8d 86 78 01 00
	00		 lea	 eax, DWORD PTR [esi+376]
  00e9d	50		 push	 eax
  00e9e	66 8b 86 46 01
	00 00		 mov	 ax, WORD PTR [esi+326]
  00ea5	50		 push	 eax
  00ea6	e8 00 00 00 00	 call	 _getmax

; 1200 : 		getmax(pVtm_t->r2cd1,&pVtm_t->vtdTuneResults.c2max);

  00eab	66 8b 8e 42 01
	00 00		 mov	 cx, WORD PTR [esi+322]
  00eb2	8d 86 76 01 00
	00		 lea	 eax, DWORD PTR [esi+374]
  00eb8	50		 push	 eax
  00eb9	51		 push	 ecx
  00eba	e8 00 00 00 00	 call	 _getmax

; 1201 : 		getmax(pVtm_t->r1cd1,&pVtm_t->vtdTuneResults.c1max);

  00ebf	66 8b 96 3e 01
	00 00		 mov	 dx, WORD PTR [esi+318]
  00ec6	8d 86 74 01 00
	00		 lea	 eax, DWORD PTR [esi+372]
  00ecc	50		 push	 eax
  00ecd	52		 push	 edx
  00ece	e8 00 00 00 00	 call	 _getmax

; 1202 : 		getmax(pVtm_t->r2pd1,&pVtm_t->vtdTuneResults.r2pd1);

  00ed3	66 8b 8e 2a 01
	00 00		 mov	 cx, WORD PTR [esi+298]
  00eda	83 c4 40	 add	 esp, 64			; 00000040H
  00edd	8d 86 80 01 00
	00		 lea	 eax, DWORD PTR [esi+384]
  00ee3	50		 push	 eax
  00ee4	51		 push	 ecx
  00ee5	e8 00 00 00 00	 call	 _getmax

; 1203 : 		getmax(pVtm_t->r3pd1,&pVtm_t->vtdTuneResults.r3pd1);

  00eea	66 8b 86 2e 01
	00 00		 mov	 ax, WORD PTR [esi+302]
  00ef1	8d 96 82 01 00
	00		 lea	 edx, DWORD PTR [esi+386]
  00ef7	52		 push	 edx
  00ef8	50		 push	 eax
  00ef9	e8 00 00 00 00	 call	 _getmax

; 1204 : 		getmax(pVtm_t->r4pd1,&pVtm_t->vtdTuneResults.r4pd1);

  00efe	66 8b 96 32 01
	00 00		 mov	 dx, WORD PTR [esi+306]
  00f05	8d 8e 84 01 00
	00		 lea	 ecx, DWORD PTR [esi+388]
  00f0b	51		 push	 ecx
  00f0c	52		 push	 edx
  00f0d	e8 00 00 00 00	 call	 _getmax

; 1205 : 		getmax(pVtm_t->r5pd1,&pVtm_t->vtdTuneResults.r5pd1);

  00f12	66 8b 8e 36 01
	00 00		 mov	 cx, WORD PTR [esi+310]
  00f19	8d 86 86 01 00
	00		 lea	 eax, DWORD PTR [esi+390]
  00f1f	50		 push	 eax
  00f20	51		 push	 ecx
  00f21	e8 00 00 00 00	 call	 _getmax
  00f26	83 c4 20	 add	 esp, 32			; 00000020H

; 1206 : 
; 1207 : 		if (  (pVtm_t->vtdTuneResults.purevmax > MAX_TRIGGER)
; 1208 : 			||(pVtm_t->vtdTuneResults.rnzmax > MAX_TRIGGER)
; 1209 : 			||(pVtm_t->vtdTuneResults.rnpmax > MAX_TRIGGER)
; 1210 : 			||(pVtm_t->vtdTuneResults.c5max > MAX_TRIGGER)
; 1211 : 			||(pVtm_t->vtdTuneResults.c4max > MAX_TRIGGER)
; 1212 : 			||(pVtm_t->vtdTuneResults.c3max > MAX_TRIGGER)
; 1213 : 			||(pVtm_t->vtdTuneResults.c2max > MAX_TRIGGER)
; 1214 : 			||(pVtm_t->vtdTuneResults.c1max > MAX_TRIGGER)
; 1215 : 			)

  00f29	66 81 3f 60 6d	 cmp	 WORD PTR [edi], 28000	; 00006d60H
  00f2e	7f 4a		 jg	 SHORT $L71648
  00f30	66 81 3b 60 6d	 cmp	 WORD PTR [ebx], 28000	; 00006d60H
  00f35	7f 43		 jg	 SHORT $L71648
  00f37	66 81 7d 00 60
	6d		 cmp	 WORD PTR [ebp], 28000	; 00006d60H
  00f3d	7f 3b		 jg	 SHORT $L71648
  00f3f	66 81 be 7c 01
	00 00 60 6d	 cmp	 WORD PTR [esi+380], 28000 ; 00006d60H
  00f48	7f 30		 jg	 SHORT $L71648
  00f4a	66 81 be 7a 01
	00 00 60 6d	 cmp	 WORD PTR [esi+378], 28000 ; 00006d60H
  00f53	7f 25		 jg	 SHORT $L71648
  00f55	66 81 be 78 01
	00 00 60 6d	 cmp	 WORD PTR [esi+376], 28000 ; 00006d60H
  00f5e	7f 1a		 jg	 SHORT $L71648
  00f60	66 81 be 76 01
	00 00 60 6d	 cmp	 WORD PTR [esi+374], 28000 ; 00006d60H
  00f69	7f 0f		 jg	 SHORT $L71648
  00f6b	66 81 be 74 01
	00 00 60 6d	 cmp	 WORD PTR [esi+372], 28000 ; 00006d60H
  00f74	0f 8e 84 00 00
	00		 jle	 $L71534
$L71648:

; 1216 : 		{
; 1217 : 			bOverloaded=TRUE;
; 1218 : 		}
; 1219 : 
; 1220 : 		
; 1221 : 		if (bOverloaded)
; 1222 : 		{
; 1223 : 			// stop tracing
; 1224 : 			pVtm_t->bDoTuning = FALSE;

  00f7a	c7 86 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+540], 0

; 1225 : 			pVtm_t->vtdTuneResults.bDidOverload = TRUE;

  00f84	c7 86 88 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+392], 1

; 1226 : 			pVtm_t->vtdTuneResults.r1cd2 = pVtm_t->r1cd2;

  00f8e	66 8b 96 40 01
	00 00		 mov	 dx, WORD PTR [esi+320]
  00f95	66 89 96 94 01
	00 00		 mov	 WORD PTR [esi+404], dx

; 1227 : 			pVtm_t->vtdTuneResults.r2cd2 = pVtm_t->r2cd2;

  00f9c	66 8b 86 44 01
	00 00		 mov	 ax, WORD PTR [esi+324]
  00fa3	66 89 86 96 01
	00 00		 mov	 WORD PTR [esi+406], ax

; 1228 : 			pVtm_t->vtdTuneResults.r3cd2 = pVtm_t->r3cd2;

  00faa	66 8b 8e 48 01
	00 00		 mov	 cx, WORD PTR [esi+328]
  00fb1	66 89 8e 98 01
	00 00		 mov	 WORD PTR [esi+408], cx

; 1229 : 			pVtm_t->vtdTuneResults.r4cd2 = pVtm_t->r4cd2;

  00fb8	66 8b 96 4c 01
	00 00		 mov	 dx, WORD PTR [esi+332]
  00fbf	66 89 96 9a 01
	00 00		 mov	 WORD PTR [esi+410], dx

; 1230 : 			pVtm_t->vtdTuneResults.r5cd2 = pVtm_t->r5cd2;

  00fc6	66 8b 86 50 01
	00 00		 mov	 ax, WORD PTR [esi+336]
  00fcd	66 89 86 9c 01
	00 00		 mov	 WORD PTR [esi+412], ax

; 1231 : 			pVtm_t->vtdTuneResults.rnpd2 = pVtm_t->rnpd2;

  00fd4	66 8b 8e 54 01
	00 00		 mov	 cx, WORD PTR [esi+340]
  00fdb	66 89 8e 9e 01
	00 00		 mov	 WORD PTR [esi+414], cx

; 1232 : 			pVtm_t->vtdTuneResults.rnzd2 = pVtm_t->rnzd2;

  00fe2	66 8b 96 58 01
	00 00		 mov	 dx, WORD PTR [esi+344]
  00fe9	66 89 96 a0 01
	00 00		 mov	 WORD PTR [esi+416], dx

; 1233 : 			pVtm_t->vtdTuneResults.rlpd2 = pVtm_t->rlpd2;

  00ff0	66 8b 86 5c 01
	00 00		 mov	 ax, WORD PTR [esi+348]
  00ff7	66 89 86 a2 01
	00 00		 mov	 WORD PTR [esi+418], ax
$L71534:
  00ffe	8b 44 24 34	 mov	 eax, DWORD PTR _ns$[esp+116]
  01002	8b 54 24 24	 mov	 edx, DWORD PTR -80+[esp+116]
  01006	8b 8e 14 01 00
	00		 mov	 ecx, DWORD PTR [esi+276]
  0100c	40		 inc	 eax
  0100d	83 c2 02	 add	 edx, 2
  01010	3b c1		 cmp	 eax, ecx
  01012	89 44 24 34	 mov	 DWORD PTR _ns$[esp+116], eax
  01016	89 54 24 24	 mov	 DWORD PTR -80+[esp+116], edx
  0101a	0f 82 24 f5 ff
	ff		 jb	 $L71533
$L71535:
  01020	5f		 pop	 edi
  01021	5e		 pop	 esi
  01022	5d		 pop	 ebp
  01023	5b		 pop	 ebx

; 1234 : 		}
; 1235 : 	}
; 1236 : 
; 1237 : 	
; 1238 : 
; 1239 :   }
; 1240 :   return;
; 1241 : }

  01024	83 c4 64	 add	 esp, 100		; 00000064H
  01027	c3		 ret	 0
_speech_waveform_generator ENDP
_TEXT	ENDS
PUBLIC	_read_speaker_definition
_TEXT	SEGMENT
_phTTS$ = 8
_flp$ = 8
_blp$ = 8
_rlpg$ = 8
_read_speaker_definition PROC NEAR

; 1251 : {

  01030	53		 push	 ebx

; 1252 :   S16 *spdeftochip;
; 1253 :   S16 f4c;       /*  Frequency of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1254 :   S16 b4c;       /*  Bandwidth of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1255 :   S16 f5c;       /*  Frequency of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1256 :   S16 b5c;       /*  Bandwidth of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1257 :   S16 f4p;       /*  Frequency of fixed parallel 4th formant*//* MVP : Moved from vtm.h*/
; 1258 :   S16 b4p;       /*  Bandwidth of fixed parallel 4th formant*/
; 1259 :   S16 f5p;       /*  Frequency of fixed parallel 5th formant            */
; 1260 :   S16 b5p;       /*  Bandwidth of fixed parallel 5th formant            */
; 1261 :   S16 fnp;       /*  Frequency of fixed nasal formant                   */
; 1262 :   S16 bnp;       /*  Bandwidth of fixed nasal formant                   */
; 1263 :   S16 flp;       /*  Frequency of fixed glottal decimating filter       */
; 1264 :   S16 blp;       /*  Bandwidth of fixed glottal decimating filter       */
; 1265 :   S16 rlpg;      /*  Gain of down-sampling low-pass resonator           */
; 1266 :   S16 avg;       /*  Gain factor for voicing                            */
; 1267 :   S16 apg;       /*  Gain factor for aspiration                         */
; 1268 :   S16 afg;       /*  Gain factor for frication                          */
; 1269 :   S16 rnpg;      /*  Gain factor for nasal pole resonator               */
; 1270 :   S16 a5gain;    /*  Gain in dB for the 5th cascade resonator.          */
; 1271 :   S16 a4gain;    /*  Gain in dB for the 4th cascade resonator.          */
; 1272 :   S16 a3gain;    /*  Gain in dB for the 3rd cascade resonator.          */
; 1273 :   S16 a2gain;    /*  Gain in dB for the 2nd cascade resonator.          */
; 1274 :   S16 a1gain;    /*  Gain in dB for the 1st cascade resonator.          */
; 1275 : 
; 1276 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  01031	8b 5c 24 08	 mov	 ebx, DWORD PTR _phTTS$[esp]
  01035	56		 push	 esi
  01036	57		 push	 edi
  01037	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 1277 : 
; 1278 :     /********************************************************************/
; 1279 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 1280 :   /********************************************************************/
; 1281 : 	pVtm_t->ldspdef=1;	 /* flag that we loaded a speaker def eab 10/96*/
; 1282 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  0103a	33 ff		 xor	 edi, edi
  0103c	c7 86 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+532], 1
  01046	66 89 be 2a 01
	00 00		 mov	 WORD PTR [esi+298], di

; 1283 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  0104d	66 89 be 2c 01
	00 00		 mov	 WORD PTR [esi+300], di

; 1284 : 
; 1285 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  01054	66 89 be 2e 01
	00 00		 mov	 WORD PTR [esi+302], di

; 1286 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  0105b	66 89 be 30 01
	00 00		 mov	 WORD PTR [esi+304], di

; 1287 : 
; 1288 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  01062	66 89 be 32 01
	00 00		 mov	 WORD PTR [esi+306], di

; 1289 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  01069	66 89 be 34 01
	00 00		 mov	 WORD PTR [esi+308], di

; 1290 : 	
; 1291 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  01070	66 89 be 36 01
	00 00		 mov	 WORD PTR [esi+310], di

; 1292 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  01077	66 89 be 38 01
	00 00		 mov	 WORD PTR [esi+312], di

; 1293 : 
; 1294 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  0107e	66 89 be 3a 01
	00 00		 mov	 WORD PTR [esi+314], di

; 1295 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  01085	66 89 be 3c 01
	00 00		 mov	 WORD PTR [esi+316], di

; 1296 : 
; 1297 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  0108c	66 89 be 3e 01
	00 00		 mov	 WORD PTR [esi+318], di

; 1298 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  01093	66 89 be 40 01
	00 00		 mov	 WORD PTR [esi+320], di

; 1299 : 
; 1300 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  0109a	66 89 be 42 01
	00 00		 mov	 WORD PTR [esi+322], di

; 1301 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  010a1	66 89 be 44 01
	00 00		 mov	 WORD PTR [esi+324], di

; 1302 : 
; 1303 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */

  010a8	66 89 be 46 01
	00 00		 mov	 WORD PTR [esi+326], di

; 1304 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */
; 1305 : 
; 1306 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */
; 1307 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */
; 1308 : 
; 1309 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */
; 1310 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */
; 1311 : 
; 1312 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */
; 1313 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */
; 1314 : 
; 1315 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */
; 1316 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */
; 1317 : 
; 1318 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */
; 1319 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */
; 1320 : 
; 1321 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */
; 1322 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */
; 1323 : 
; 1324 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */
; 1325 : 
; 1326 : 	/* Second sample of the tilt filter. 
; 1327 : 	   10/96 eab this filter parameter needs to be zeroed also */
; 1328 : 	pVtm_t->one_minus_decay = 0;
; 1329 : 
; 1330 : 	pVtm_t->avlind = 0;		// tek 08oct96
; 1331 : 	pVtm_t->voice0 = 0;		// tek 08oct96
; 1332 : 
; 1333 :   pVtm_t->vtdTuneResults.purevmax = 0;    /*maximum value within filter of casade rnz*/
; 1334 :   pVtm_t->vtdTuneResults.rnzmax = 0;       /* maximum value within filter of casade rnz */
; 1335 :   pVtm_t->vtdTuneResults.rnpmax = 0;       /* maximum value within filter of casade rnp */
; 1336 :   pVtm_t->vtdTuneResults.c4max = 0;        /* maximum value within filter of casade 4 */
; 1337 :   pVtm_t->vtdTuneResults.c3max = 0;        /* maximum value within filter of casade 3 */
; 1338 :   pVtm_t->vtdTuneResults.c2max = 0;        /* maximum value within filter of casade 3 */
; 1339 :   pVtm_t->vtdTuneResults.c1max = 0;        /* maximum value within filter of casade 3 */
; 1340 : 
; 1341 : 
; 1342 :   spdeftochip = &(pVtm_t->parambuff[1]);
; 1343 : 
; 1344 :   /********************************************************************/
; 1345 :   /*  Constants used in random number generation.                     */
; 1346 :   /********************************************************************/
; 1347 :   /*
; 1348 :   ranmul = 20077;
; 1349 :   ranadd = 12345;
; 1350 :   */
; 1351 :   /********************************************************************/
; 1352 :   /*  Constants used to filter the noise.                             */
; 1353 :   /********************************************************************/
; 1354 : 
; 1355 :   switch( pVtm_t->uiSampleRateChange )
; 1356 :   {

  010af	8b 06		 mov	 eax, DWORD PTR [esi]
  010b1	66 89 be 48 01
	00 00		 mov	 WORD PTR [esi+328], di
  010b8	66 89 be 4a 01
	00 00		 mov	 WORD PTR [esi+330], di
  010bf	66 89 be 4c 01
	00 00		 mov	 WORD PTR [esi+332], di
  010c6	66 89 be 4e 01
	00 00		 mov	 WORD PTR [esi+334], di
  010cd	66 89 be 50 01
	00 00		 mov	 WORD PTR [esi+336], di
  010d4	66 89 be 52 01
	00 00		 mov	 WORD PTR [esi+338], di
  010db	66 89 be 54 01
	00 00		 mov	 WORD PTR [esi+340], di
  010e2	66 89 be 56 01
	00 00		 mov	 WORD PTR [esi+342], di
  010e9	66 89 be 58 01
	00 00		 mov	 WORD PTR [esi+344], di
  010f0	66 89 be 5a 01
	00 00		 mov	 WORD PTR [esi+346], di
  010f7	2b c7		 sub	 eax, edi
  010f9	66 89 be 5c 01
	00 00		 mov	 WORD PTR [esi+348], di
  01100	66 89 be 5e 01
	00 00		 mov	 WORD PTR [esi+350], di
  01107	66 89 be 60 01
	00 00		 mov	 WORD PTR [esi+352], di
  0110e	66 89 be 6c 01
	00 00		 mov	 WORD PTR [esi+364], di
  01115	66 89 be e6 01
	00 00		 mov	 WORD PTR [esi+486], di
  0111c	66 89 be fa 01
	00 00		 mov	 WORD PTR [esi+506], di
  01123	66 89 be e8 01
	00 00		 mov	 WORD PTR [esi+488], di
  0112a	66 89 be 7e 01
	00 00		 mov	 WORD PTR [esi+382], di
  01131	66 89 be 72 01
	00 00		 mov	 WORD PTR [esi+370], di
  01138	66 89 be 70 01
	00 00		 mov	 WORD PTR [esi+368], di
  0113f	66 89 be 7a 01
	00 00		 mov	 WORD PTR [esi+378], di
  01146	66 89 be 78 01
	00 00		 mov	 WORD PTR [esi+376], di
  0114d	66 89 be 76 01
	00 00		 mov	 WORD PTR [esi+374], di
  01154	66 89 be 74 01
	00 00		 mov	 WORD PTR [esi+372], di
  0115b	74 06		 je	 SHORT $L71681
  0115d	48		 dec	 eax
  0115e	74 48		 je	 SHORT $L71682
  01160	48		 dec	 eax
  01161	75 09		 jne	 SHORT $L71678
$L71681:

; 1357 :   case SAMPLE_RATE_INCREASE:
; 1358 : 
; 1359 :     pVtm_t->noiseb = -2913;

  01163	66 c7 86 e2 01
	00 00 9f f4	 mov	 WORD PTR [esi+482], -2913 ; fffff49fH
$L71678:

; 1368 : 
; 1369 :   case NO_SAMPLE_RATE_CHANGE:
; 1370 : 
; 1371 :     pVtm_t->noiseb = -2913;
; 1372 :     /*noisec = 1499;*/
; 1373 :     break;
; 1374 : 
; 1375 :   default:
; 1376 : 
; 1377 :     break;
; 1378 :   }
; 1379 : 
; 1380 :   /********************************************************************/
; 1381 :   /*  Parallel 6th formant                                            */
; 1382 :   /*  Resonator constant "r6pa" is set elsewhere from A6inDB.         */
; 1383 :   /********************************************************************/
; 1384 : 
; 1385 :   /*pVtm_t->r6pb = -5702;*/     /* MVP : moved as a local constant */
; 1386 :   /*r6pc = -1995;                */     /* MVP : moved as a local constant */
; 1387 : 
; 1388 :   /********************************************************************/
; 1389 :   /*  Coefficients for fixed nasal formant.                           */
; 1390 :   /*  Gain parameter "rnpa" is set below by speaker definition        */
; 1391 :   /*  parameter "rnpg". Note possible future change, this could vary  */
; 1392 :   /*  from speaker to speaker.                                        */
; 1393 :   /********************************************************************/
; 1394 : 
; 1395 :   fnp = 290;
; 1396 : 
; 1397 :   bnp = 70;
; 1398 :   d2pole_pf( pVtm_t,&pVtm_t->rnpb, &pVtm_t->rnpc, fnp, bnp, 0 );

  0116c	57		 push	 edi
  0116d	6a 46		 push	 70			; 00000046H
  0116f	8d 86 d4 01 00
	00		 lea	 eax, DWORD PTR [esi+468]
  01175	68 22 01 00 00	 push	 290			; 00000122H
  0117a	8d 8e d2 01 00
	00		 lea	 ecx, DWORD PTR [esi+466]
  01180	50		 push	 eax
  01181	51		 push	 ecx
  01182	56		 push	 esi
  01183	e8 00 00 00 00	 call	 _d2pole_pf

; 1399 : 
; 1400 :   /********************************************************************/
; 1401 :   /*  Coefficients for fixed downsampling low-pass filter             */
; 1402 :   /********************************************************************/
; 1403 : 
; 1404 :   switch( pVtm_t->uiSampleRateChange )
; 1405 :   {

  01188	8b 06		 mov	 eax, DWORD PTR [esi]
  0118a	83 c4 18	 add	 esp, 24			; 00000018H
  0118d	2b c7		 sub	 eax, edi
  0118f	74 33		 je	 SHORT $L71689
  01191	48		 dec	 eax
  01192	74 1f		 je	 SHORT $L71690
  01194	48		 dec	 eax
  01195	75 3e		 jne	 SHORT $L71811

; 1419 : 
; 1420 :   case NO_SAMPLE_RATE_CHANGE:
; 1421 : 
; 1422 :     flp = 860;

  01197	ba 5c 03 00 00	 mov	 edx, 860		; 0000035cH

; 1423 :     blp = 558;

  0119c	b9 2e 02 00 00	 mov	 ecx, 558		; 0000022eH

; 1424 :     rlpg = 2400;

  011a1	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H

; 1425 :     break;

  011a6	eb 39		 jmp	 SHORT $L71686
$L71682:

; 1360 :     /*noisec = 1499; */
; 1361 :     break;
; 1362 : 
; 1363 :   case SAMPLE_RATE_DECREASE:
; 1364 : 
; 1365 :     pVtm_t->noiseb = -1873;

  011a8	66 c7 86 e2 01
	00 00 af f8	 mov	 WORD PTR [esi+482], -1873 ; fffff8afH

; 1366 :     /*noisec = 1499;*/
; 1367 :     break;

  011b1	eb b9		 jmp	 SHORT $L71678
$L71690:

; 1411 :     break;
; 1412 : 
; 1413 :   case SAMPLE_RATE_DECREASE:
; 1414 : 
; 1415 :     flp = 698;

  011b3	ba ba 02 00 00	 mov	 edx, 698		; 000002baH

; 1416 :     blp = 453;

  011b8	b9 c5 01 00 00	 mov	 ecx, 453		; 000001c5H

; 1417 :     rlpg = 2400;

  011bd	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H

; 1418 :     break;

  011c2	eb 1d		 jmp	 SHORT $L71686
$L71689:

; 1406 :   case SAMPLE_RATE_INCREASE:
; 1407 : 
; 1408 :     flp = 948;

  011c4	ba b4 03 00 00	 mov	 edx, 948		; 000003b4H

; 1409 :     blp = 615;

  011c9	b9 67 02 00 00	 mov	 ecx, 615		; 00000267H

; 1410 :     rlpg = 2400;

  011ce	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H
  011d3	eb 0c		 jmp	 SHORT $L71686
$L71811:
  011d5	8b 44 24 10	 mov	 eax, DWORD PTR _rlpg$[esp+8]
  011d9	8b 4c 24 10	 mov	 ecx, DWORD PTR _blp$[esp+8]
  011dd	8b 54 24 10	 mov	 edx, DWORD PTR _flp$[esp+8]
$L71686:

; 1426 : 
; 1427 :   default:
; 1428 : 
; 1429 :     break;
; 1430 :   }
; 1431 : 
; 1432 :   pVtm_t->rlpa = d2pole_pf( pVtm_t,&pVtm_t->rlpb, &pVtm_t->rlpc, flp, blp, rlpg );

  011e1	50		 push	 eax
  011e2	51		 push	 ecx
  011e3	52		 push	 edx
  011e4	8d 96 e0 01 00
	00		 lea	 edx, DWORD PTR [esi+480]
  011ea	8d 86 de 01 00
	00		 lea	 eax, DWORD PTR [esi+478]
  011f0	52		 push	 edx
  011f1	50		 push	 eax
  011f2	56		 push	 esi
  011f3	e8 00 00 00 00	 call	 _d2pole_pf
  011f8	66 89 86 dc 01
	00 00		 mov	 WORD PTR [esi+476], ax

; 1433 : 
; 1434 :   /********************************************************************/
; 1435 :   /*  Begin set coeficients of speaker-def controlled resonators.     */
; 1436 :   /*  Cascade fourth formant                                          */
; 1437 :   /********************************************************************/
; 1438 : 
; 1439 :   f4c = ((SP_CHIP *)spdeftochip)->r4cb;   /*  1                       */
; 1440 :   b4c = ((SP_CHIP *)spdeftochip)->r4cc;   /*  2                       */
; 1441 : 
; 1442 :   d2pole_cf45( pVtm_t,&pVtm_t->R4cb, &pVtm_t->R4cc, f4c, b4c, 0 );

  011ff	66 8b 8e d4 00
	00 00		 mov	 cx, WORD PTR [esi+212]
  01206	66 8b 96 d2 00
	00 00		 mov	 dx, WORD PTR [esi+210]
  0120d	57		 push	 edi
  0120e	51		 push	 ecx
  0120f	8d 86 c8 01 00
	00		 lea	 eax, DWORD PTR [esi+456]
  01215	52		 push	 edx
  01216	8d 8e c6 01 00
	00		 lea	 ecx, DWORD PTR [esi+454]
  0121c	50		 push	 eax
  0121d	51		 push	 ecx
  0121e	56		 push	 esi
  0121f	e8 00 00 00 00	 call	 _d2pole_cf45

; 1443 : 
; 1444 :   /********************************************************************/
; 1445 :   /*  Cascade fifth formant                                           */
; 1446 :   /********************************************************************/
; 1447 : 
; 1448 :   f5c = ((SP_CHIP *)spdeftochip)->r5cb;   /*  3                       */
; 1449 :   b5c = ((SP_CHIP *)spdeftochip)->r5cc;   /*  4                       */
; 1450 : 
; 1451 :   d2pole_cf45(pVtm_t,&pVtm_t->R5cb, &pVtm_t->R5cc, f5c, b5c, 0 );

  01224	66 8b 96 d8 00
	00 00		 mov	 dx, WORD PTR [esi+216]
  0122b	66 8b 86 d6 00
	00 00		 mov	 ax, WORD PTR [esi+214]
  01232	57		 push	 edi
  01233	52		 push	 edx
  01234	8d 8e ce 01 00
	00		 lea	 ecx, DWORD PTR [esi+462]
  0123a	50		 push	 eax
  0123b	8d 96 cc 01 00
	00		 lea	 edx, DWORD PTR [esi+460]
  01241	51		 push	 ecx
  01242	52		 push	 edx
  01243	56		 push	 esi
  01244	e8 00 00 00 00	 call	 _d2pole_cf45

; 1452 : 
; 1453 :   /********************************************************************/
; 1454 :   /*  Parallel fourth formant                                         */
; 1455 :   /********************************************************************/
; 1456 : 
; 1457 :   f4p = ((SP_CHIP *)spdeftochip)->r4pb;   /*  5                       */
; 1458 :   b4p = 400;
; 1459 : 
; 1460 :   d2pole_pf( pVtm_t,&pVtm_t->R4pb, &pVtm_t->r4pc, f4p, b4p, 0 );

  01249	66 8b 86 da 00
	00 00		 mov	 ax, WORD PTR [esi+218]
  01250	83 c4 48	 add	 esp, 72			; 00000048H
  01253	8d 8e ac 01 00
	00		 lea	 ecx, DWORD PTR [esi+428]
  01259	8d 96 aa 01 00
	00		 lea	 edx, DWORD PTR [esi+426]
  0125f	57		 push	 edi
  01260	68 90 01 00 00	 push	 400			; 00000190H
  01265	50		 push	 eax
  01266	51		 push	 ecx
  01267	52		 push	 edx
  01268	56		 push	 esi
  01269	e8 00 00 00 00	 call	 _d2pole_pf

; 1461 : 
; 1462 :   /********************************************************************/
; 1463 :   /*  Parallel fifth formant                                          */
; 1464 :   /********************************************************************/
; 1465 : 
; 1466 :   f5p = ((SP_CHIP *)spdeftochip)->r5pb;    /*  6                      */
; 1467 :   b5p = 500;
; 1468 : 
; 1469 :   d2pole_pf( pVtm_t,&pVtm_t->R5pb, &pVtm_t->r5pc, f5p, b5p, 0 );

  0126e	66 8b 86 dc 00
	00 00		 mov	 ax, WORD PTR [esi+220]
  01275	57		 push	 edi
  01276	68 f4 01 00 00	 push	 500			; 000001f4H
  0127b	8d 8e b0 01 00
	00		 lea	 ecx, DWORD PTR [esi+432]
  01281	50		 push	 eax
  01282	8d 96 ae 01 00
	00		 lea	 edx, DWORD PTR [esi+430]
  01288	51		 push	 ecx
  01289	52		 push	 edx
  0128a	56		 push	 esi
  0128b	e8 00 00 00 00	 call	 _d2pole_pf
  01290	83 c4 30	 add	 esp, 48			; 00000030H

; 1470 : 
; 1471 :   /********************************************************************/
; 1472 :   /*  End of set coeficients of speaker definition controlled         */
; 1473 :   /*  resonators.                                                     */
; 1474 :   /********************************************************************/
; 1475 : 
; 1476 :   /********************************************************************/
; 1477 :   /*  The following parameter deleted 12-JUL-85                       */
; 1478 :   /*  TLToff = ((SP_CHIP *)spdeftochip)->tltoff;      7               */
; 1479 :   /********************************************************************/
; 1480 : 
; 1481 :   /********************************************************************/
; 1482 :   /*  Jitter parameter has it's sign flipped from the current value.  */
; 1483 :   /*  t0jitr is a time, so it should be scaled if fs != 10K.          */
; 1484 :   /********************************************************************/
; 1485 : 
; 1486 :   if ( pVtm_t->t0jitr < 0 )

  01293	66 39 be 24 01
	00 00		 cmp	 WORD PTR [esi+292], di
  0129a	7d 13		 jge	 SHORT $L71699

; 1487 :     pVtm_t->t0jitr = -((SP_CHIP *)spdeftochip)->t0jit;    /*  8               */

  0129c	66 8b 86 de 00
	00 00		 mov	 ax, WORD PTR [esi+222]
  012a3	66 f7 d8	 neg	 ax
  012a6	66 89 86 24 01
	00 00		 mov	 WORD PTR [esi+292], ax

; 1488 :   else

  012ad	eb 0e		 jmp	 SHORT $L71701
$L71699:

; 1489 :     pVtm_t->t0jitr = ((SP_CHIP *)spdeftochip)->t0jit;

  012af	66 8b 8e de 00
	00 00		 mov	 cx, WORD PTR [esi+222]
  012b6	66 89 8e 24 01
	00 00		 mov	 WORD PTR [esi+292], cx
$L71701:

; 1490 : 
; 1491 :   switch( pVtm_t->uiSampleRateChange )
; 1492 :   {

  012bd	8b 06		 mov	 eax, DWORD PTR [esi]
  012bf	2b c7		 sub	 eax, edi
  012c1	74 1d		 je	 SHORT $L71707
  012c3	48		 dec	 eax
  012c4	75 35		 jne	 SHORT $L71704

; 1496 :     break;
; 1497 : 
; 1498 :   case SAMPLE_RATE_DECREASE:
; 1499 : 
; 1500 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr );

  012c6	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  012ca	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  012d1	0f af d0	 imul	 edx, eax
  012d4	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  012d7	66 89 96 24 01
	00 00		 mov	 WORD PTR [esi+292], dx

; 1501 :     break;

  012de	eb 1b		 jmp	 SHORT $L71704
$L71707:

; 1493 :   case SAMPLE_RATE_INCREASE:
; 1494 : 
; 1495 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr ) << 1;

  012e0	0f bf 4e 04	 movsx	 ecx, WORD PTR [esi+4]
  012e4	0f bf 96 24 01
	00 00		 movsx	 edx, WORD PTR [esi+292]
  012eb	0f af ca	 imul	 ecx, edx
  012ee	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  012f1	83 e1 fe	 and	 ecx, -2			; fffffffeH
  012f4	66 89 8e 24 01
	00 00		 mov	 WORD PTR [esi+292], cx
$L71704:

; 1502 : 
; 1503 :   case NO_SAMPLE_RATE_CHANGE:
; 1504 : 
; 1505 :     break;
; 1506 : 
; 1507 :   default:
; 1508 : 
; 1509 :     break;
; 1510 :   }
; 1511 : 
; 1512 :   /********************************************************************/
; 1513 :   /*  Gains of cascade resonators (used to keep signal in high order  */
; 1514 :   /*  bits).                                                          */
; 1515 :   /********************************************************************/
; 1516 : 
; 1517 :   a5gain = ((SP_CHIP *)spdeftochip)->r5ca;    /*  9                   */
; 1518 :   pVtm_t->R5ca = amptable[a5gain];

  012fb	0f bf 86 e0 00
	00 00		 movsx	 eax, WORD PTR [esi+224]
  01302	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  0130a	66 89 8e ca 01
	00 00		 mov	 WORD PTR [esi+458], cx

; 1519 :   a4gain = ((SP_CHIP *)spdeftochip)->r4ca;    /*  10                  */
; 1520 :   pVtm_t->R4ca = amptable[a4gain];

  01311	0f bf 96 e2 00
	00 00		 movsx	 edx, WORD PTR [esi+226]
  01318	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  01320	66 89 86 c4 01
	00 00		 mov	 WORD PTR [esi+452], ax

; 1521 :   a3gain = ((SP_CHIP *)spdeftochip)->r3ca;    /*  11                  */
; 1522 :   pVtm_t->r3cg = amptable[a3gain];

  01327	0f bf 8e e4 00
	00 00		 movsx	 ecx, WORD PTR [esi+228]
  0132e	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01336	66 89 96 f2 01
	00 00		 mov	 WORD PTR [esi+498], dx

; 1523 :   a2gain = ((SP_CHIP *)spdeftochip)->r2ca;    /*  12                  */
; 1524 :   pVtm_t->r2cg = amptable[a2gain];

  0133d	0f bf 86 e6 00
	00 00		 movsx	 eax, WORD PTR [esi+230]
  01344	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  0134c	66 89 8e f4 01
	00 00		 mov	 WORD PTR [esi+500], cx

; 1525 :   a1gain = ((SP_CHIP *)spdeftochip)->r1ca;    /*  13                  */
; 1526 :   pVtm_t->r1cg = amptable[a1gain];

  01353	0f bf 96 e8 00
	00 00		 movsx	 edx, WORD PTR [esi+232]
  0135a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  01362	66 89 86 f6 01
	00 00		 mov	 WORD PTR [esi+502], ax

; 1527 : 
; 1528 :   /********************************************************************/
; 1529 :   /*  Constants that determine the duration of the open phase of the  */
; 1530 :   /*  glottal period.                                                 */
; 1531 :   /********************************************************************/
; 1532 : 
; 1533 :   pVtm_t->k1 = ((SP_CHIP *)spdeftochip)->nopen1;      /* 14                   */

  01369	66 8b 8e ea 00
	00 00		 mov	 cx, WORD PTR [esi+234]
  01370	66 89 8e 00 02
	00 00		 mov	 WORD PTR [esi+512], cx

; 1534 :   pVtm_t->k2 = ((SP_CHIP *)spdeftochip)->nopen2;      /* 15                   */

  01377	66 8b 96 ec 00
	00 00		 mov	 dx, WORD PTR [esi+236]
  0137e	66 89 96 02 02
	00 00		 mov	 WORD PTR [esi+514], dx

; 1535 : 
; 1536 :   /********************************************************************/
; 1537 :   /*  Breathiness coefficient.                                        */
; 1538 :   /********************************************************************/
; 1539 : 
; 1540 :   pVtm_t->Aturb = ((SP_CHIP *)spdeftochip)->aturb;    /*  16                  */

  01385	66 8b 86 ee 00
	00 00		 mov	 ax, WORD PTR [esi+238]
  0138c	66 89 86 28 01
	00 00		 mov	 WORD PTR [esi+296], ax

; 1541 :   pVtm_t->Aturb = amptable[pVtm_t->Aturb];

  01393	0f bf c0	 movsx	 eax, ax
  01396	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  0139e	66 89 8e 28 01
	00 00		 mov	 WORD PTR [esi+296], cx

; 1542 : 
; 1543 :   /********************************************************************/
; 1544 :   /*  T0range = ((SP_CHIP *)spdeftochip)->f0scale;  17  (Not used)    */
; 1545 :   /********************************************************************/
; 1546 : 
; 1547 :   /********************************************************************/
; 1548 :   /*  Scale factor for variable formants F1inHZ, F2inHZ, and F3inHZ.  */
; 1549 :   /********************************************************************/
; 1550 : 
; 1551 :   pVtm_t->fnscal = ((SP_CHIP *)spdeftochip)->fnscale;     /*  18              */

  013a5	66 8b 96 f0 00
	00 00		 mov	 dx, WORD PTR [esi+240]
  013ac	66 89 96 26 01
	00 00		 mov	 WORD PTR [esi+294], dx

; 1552 : 
; 1553 :   /********************************************************************/
; 1554 :   /*  Overall gain of frication source re other sources               */
; 1555 :   /********************************************************************/
; 1556 : 
; 1557 :   afg = ((SP_CHIP *)spdeftochip)->afgain;     /*  19                  */
; 1558 :   pVtm_t->AFgain = amptable[afg];

  013b3	0f bf 86 f2 00
	00 00		 movsx	 eax, WORD PTR [esi+242]
  013ba	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  013c2	66 89 8e f0 01
	00 00		 mov	 WORD PTR [esi+496], cx

; 1559 : 
; 1560 :   /********************************************************************/
; 1561 :   /*  Gain of the nasal pole resonator of cascade filter section.     */
; 1562 :   /********************************************************************/
; 1563 : 
; 1564 :   rnpg = ((SP_CHIP *)spdeftochip)->rnpgain;   /*  20                  */
; 1565 :   pVtm_t->rnpa = amptable[rnpg];

  013c9	0f bf 96 f4 00
	00 00		 movsx	 edx, WORD PTR [esi+244]
  013d0	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  013d8	66 89 86 d0 01
	00 00		 mov	 WORD PTR [esi+464], ax

; 1566 : 
; 1567 :   /********************************************************************/
; 1568 :   /*  Overall gain of voicing source relative to other sources        */
; 1569 :   /********************************************************************/
; 1570 : 
; 1571 :   avg = ((SP_CHIP *)spdeftochip)->azgain-2;     /*  21                  */

  013df	66 8b 86 f6 00
	00 00		 mov	 ax, WORD PTR [esi+246]
  013e6	66 2d 02 00	 sub	 ax, 2

; 1572 :   if (avg<0) avg=0;

  013ea	66 3b c7	 cmp	 ax, di
  013ed	7d 02		 jge	 SHORT $L71725
  013ef	33 c0		 xor	 eax, eax
$L71725:

; 1573 :   pVtm_t->avgain = amptable[avg];

  013f1	0f bf c8	 movsx	 ecx, ax
  013f4	5f		 pop	 edi
  013f5	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  013fd	66 89 96 ea 01
	00 00		 mov	 WORD PTR [esi+490], dx

; 1574 : 
; 1575 :   /********************************************************************/
; 1576 :   /*  Overall gain of aspiration source relative to other sources     */
; 1577 :   /********************************************************************/
; 1578 : 
; 1579 :   apg = ((SP_CHIP *)spdeftochip)->apgain;     /*  22                  */
; 1580 :   pVtm_t->APgain = amptable[apg];

  01404	0f bf 86 f8 00
	00 00		 movsx	 eax, WORD PTR [esi+248]
  0140b	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  01413	66 89 8e ee 01
	00 00		 mov	 WORD PTR [esi+494], cx

; 1581 : 
; 1582 :   phTTS->pKernelShareData->uiCurrentSpeaker = (DWORD)((SP_CHIP *)spdeftochip)->speaker;

  0141a	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  0141d	66 8b 86 fe 00
	00 00		 mov	 ax, WORD PTR [esi+254]
  01424	5e		 pop	 esi
  01425	66 89 82 24 02
	00 00		 mov	 WORD PTR [edx+548], ax
  0142c	5b		 pop	 ebx

; 1583 : #ifdef COMPRESSION
; 1584 :   // set the initial gain fairly low, it will quickly set itself.
; 1585 :   pVtm_t->sGain = CompGainTable[COMPRESSION_GAIN_TABLE_SIZE/2];
; 1586 : #endif //COMPRESSION
; 1587 : 
; 1588 : }

  0142d	c3		 ret	 0
_read_speaker_definition ENDP
_TEXT	ENDS
PUBLIC	_InitializeVTM
_TEXT	SEGMENT
_phTTS$ = 8
_InitializeVTM PROC NEAR

; 1604 : 	PVTM_T pVtm_t =phTTS->pVTMThreadData;

  01430	8b 44 24 04	 mov	 eax, DWORD PTR _phTTS$[esp-4]

; 1605 : 
; 1606 :   /********************************************************************/
; 1607 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 1608 :   /********************************************************************/
; 1609 : 
; 1610 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  01434	33 c9		 xor	 ecx, ecx
  01436	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  01439	66 89 88 2a 01
	00 00		 mov	 WORD PTR [eax+298], cx

; 1611 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  01440	66 89 88 2c 01
	00 00		 mov	 WORD PTR [eax+300], cx

; 1612 : 
; 1613 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  01447	66 89 88 2e 01
	00 00		 mov	 WORD PTR [eax+302], cx

; 1614 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  0144e	66 89 88 30 01
	00 00		 mov	 WORD PTR [eax+304], cx

; 1615 : 
; 1616 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  01455	66 89 88 32 01
	00 00		 mov	 WORD PTR [eax+306], cx

; 1617 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  0145c	66 89 88 34 01
	00 00		 mov	 WORD PTR [eax+308], cx

; 1618 : 	
; 1619 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  01463	66 89 88 36 01
	00 00		 mov	 WORD PTR [eax+310], cx

; 1620 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  0146a	66 89 88 38 01
	00 00		 mov	 WORD PTR [eax+312], cx

; 1621 : 
; 1622 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  01471	66 89 88 3a 01
	00 00		 mov	 WORD PTR [eax+314], cx

; 1623 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  01478	66 89 88 3c 01
	00 00		 mov	 WORD PTR [eax+316], cx

; 1624 : 
; 1625 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  0147f	66 89 88 3e 01
	00 00		 mov	 WORD PTR [eax+318], cx

; 1626 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  01486	66 89 88 40 01
	00 00		 mov	 WORD PTR [eax+320], cx

; 1627 : 
; 1628 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  0148d	66 89 88 42 01
	00 00		 mov	 WORD PTR [eax+322], cx

; 1629 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  01494	66 89 88 44 01
	00 00		 mov	 WORD PTR [eax+324], cx

; 1630 : 
; 1631 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */

  0149b	66 89 88 46 01
	00 00		 mov	 WORD PTR [eax+326], cx

; 1632 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */

  014a2	66 89 88 48 01
	00 00		 mov	 WORD PTR [eax+328], cx

; 1633 : 
; 1634 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */

  014a9	66 89 88 4a 01
	00 00		 mov	 WORD PTR [eax+330], cx

; 1635 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */

  014b0	66 89 88 4c 01
	00 00		 mov	 WORD PTR [eax+332], cx

; 1636 : 
; 1637 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */

  014b7	66 89 88 4e 01
	00 00		 mov	 WORD PTR [eax+334], cx

; 1638 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */

  014be	66 89 88 50 01
	00 00		 mov	 WORD PTR [eax+336], cx

; 1639 : 
; 1640 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */

  014c5	66 89 88 52 01
	00 00		 mov	 WORD PTR [eax+338], cx

; 1641 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */

  014cc	66 89 88 54 01
	00 00		 mov	 WORD PTR [eax+340], cx

; 1642 : 
; 1643 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */

  014d3	66 89 88 56 01
	00 00		 mov	 WORD PTR [eax+342], cx

; 1644 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */

  014da	66 89 88 58 01
	00 00		 mov	 WORD PTR [eax+344], cx

; 1645 : 
; 1646 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */

  014e1	66 89 88 5a 01
	00 00		 mov	 WORD PTR [eax+346], cx

; 1647 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */

  014e8	66 89 88 5c 01
	00 00		 mov	 WORD PTR [eax+348], cx

; 1648 : 
; 1649 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */

  014ef	66 89 88 5e 01
	00 00		 mov	 WORD PTR [eax+350], cx

; 1650 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */

  014f6	66 89 88 60 01
	00 00		 mov	 WORD PTR [eax+352], cx

; 1651 : 
; 1652 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */

  014fd	66 89 88 6c 01
	00 00		 mov	 WORD PTR [eax+364], cx

; 1653 : 
; 1654 : 	pVtm_t->one_minus_decay = 0;    /* Second sample of the tilt filter.          */

  01504	66 89 88 e6 01
	00 00		 mov	 WORD PTR [eax+486], cx

; 1655 : }

  0150b	c3		 ret	 0
_InitializeVTM ENDP
_TEXT	ENDS
PUBLIC	__real@8@3fff8000000000000000
PUBLIC	_SetSampleRate
EXTRN	__fltused:NEAR
;	COMDAT __real@8@3fff8000000000000000
; File D:\work\product\dapi\src\Vtm\vtm.c
CONST	SEGMENT
__real@8@3fff8000000000000000 DQ 03ff0000000000000r ; 1
CONST	ENDS
_TEXT	SEGMENT
_phTTS$ = 8
_uiSampRate$ = 12
_SetSampleRate PROC NEAR

; 1711 : {

  01510	83 ec 08	 sub	 esp, 8

; 1712 :   /********************************************************************/
; 1713 :   /*  Set the global sample rate dependant parameters.                */
; 1714 :   /*  Some day these should be moved into the TTS handle.             */
; 1715 :   /********************************************************************/
; 1716 :   PKSD_T pKsd_t = phTTS->pKernelShareData;
; 1717 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;
; 1718 : 
; 1719 :   pKsd_t->uiSampleRate = uiSampRate;

  01513	8b 54 24 10	 mov	 edx, DWORD PTR _uiSampRate$[esp+4]
  01517	8b 44 24 0c	 mov	 eax, DWORD PTR _phTTS$[esp+4]

; 1720 :   pVtm_t->SampleRate = (double)pKsd_t->uiSampleRate;

  0151b	89 54 24 00	 mov	 DWORD PTR -8+[esp+8], edx
  0151f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR -8+[esp+12], 0
  01527	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0152a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0152d	df 6c 24 00	 fild	 QWORD PTR -8+[esp+8]
  01531	89 91 2c 02 00
	00		 mov	 DWORD PTR [ecx+556], edx
  01537	dd 90 18 01 00
	00		 fst	 QWORD PTR [eax+280]

; 1721 :    //pVtm_t->SampleRate = 8000; /* for 8khz tune eab 1/15/98 */
; 1722 :   //pKsd_t->uiSampleRate = 8000; 
; 1723 :   pKsd_t->SamplePeriod = 1.0 / pVtm_t->SampleRate;

  0153d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@8@3fff8000000000000000
  01543	d8 f1		 fdiv	 ST(0), ST(1)

; 1724 : 
; 1725 :   /********************************************************************/
; 1726 :   /*  Setup for either 8, 10, or 11.025 kHz.                          */
; 1727 :   /********************************************************************/
; 1728 : 
; 1729 :   if ( pKsd_t->uiSampleRate == PC_SAMPLE_RATE )

  01545	8b 91 2c 02 00
	00		 mov	 edx, DWORD PTR [ecx+556]
  0154b	81 fa 11 2b 00
	00		 cmp	 edx, 11025		; 00002b11H
  01551	dd 99 30 02 00
	00		 fstp	 QWORD PTR [ecx+560]
  01557	dd d8		 fstp	 ST(0)
  01559	75 28		 jne	 SHORT $L71741

; 1730 :   {
; 1731 :     pVtm_t->bEightKHz = FALSE;

  0155b	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 1732 : 
; 1733 :     /******************************************************************/
; 1734 :     /*  Set the vocal tract model to 11 KHz.                          */
; 1735 :     /******************************************************************/
; 1736 : 
; 1737 :     pVtm_t->uiSampleRateChange = SAMPLE_RATE_INCREASE;

  01565	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1738 :     pVtm_t->rate_scale = 18063;   /*  Equals 1.1 in Q14 format for 11 KHz.    */

  0156b	66 c7 40 04 8f
	46		 mov	 WORD PTR [eax+4], 18063	; 0000468fH

; 1739 :     pVtm_t->inv_rate_scale = 29722;    /*  Equals 0.909 in Q15 format.        */

  01571	66 c7 40 06 1a
	74		 mov	 WORD PTR [eax+6], 29722	; 0000741aH

; 1740 :     pVtm_t->uiNumberOfSamplesPerFrame = 71;

  01577	c7 80 14 01 00
	00 47 00 00 00	 mov	 DWORD PTR [eax+276], 71	; 00000047H

; 1741 :   }
; 1742 :   else

  01581	eb 36		 jmp	 SHORT $L71744
$L71741:

; 1743 :   {
; 1744 :     if ( pKsd_t->uiSampleRate == MULAW_SAMPLE_RATE )

  01583	81 fa 40 1f 00
	00		 cmp	 edx, 8000		; 00001f40H
  01589	75 28		 jne	 SHORT $L71743

; 1745 :    {
; 1746 :       pVtm_t->bEightKHz = TRUE;

  0158b	c7 80 20 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+288], 1

; 1747 : 
; 1748 :       /****************************************************************/
; 1749 :       /*  Set the vocal tract model to 8 KHz.                         */
; 1750 :       /****************************************************************/
; 1751 : 
; 1752 :       pVtm_t->uiSampleRateChange = SAMPLE_RATE_DECREASE;

  01595	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1753 :       pVtm_t->rate_scale = 26214;    /*  Equals 0.8 in Q15 format for 8 KHz */

  0159b	66 c7 40 04 66
	66		 mov	 WORD PTR [eax+4], 26214	; 00006666H

; 1754 :       pVtm_t->inv_rate_scale = 20480;    /*  Equals 1.25 in Q14 format.     */

  015a1	66 c7 40 06 00
	50		 mov	 WORD PTR [eax+6], 20480	; 00005000H

; 1755 :       pVtm_t->uiNumberOfSamplesPerFrame = 51;

  015a7	c7 80 14 01 00
	00 33 00 00 00	 mov	 DWORD PTR [eax+276], 51	; 00000033H

; 1756 :     }
; 1757 :     else

  015b1	eb 06		 jmp	 SHORT $L71744
$L71743:

; 1758 :     {
; 1759 :       pVtm_t->uiSampleRateChange = NO_SAMPLE_RATE_CHANGE;

  015b3	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$L71744:

; 1760 :     }
; 1761 :   }
; 1762 : 
; 1763 :   /********************************************************************/
; 1764 :   /*  Update the speaker definition for the new sample rate.          */
; 1765 :   /********************************************************************/
; 1766 : 
; 1767 :   pKsd_t->async_voice = pKsd_t->last_voice ;

  015b9	0f bf 81 20 02
	00 00		 movsx	 eax, WORD PTR [ecx+544]
  015c0	89 81 3c 02 00
	00		 mov	 DWORD PTR [ecx+572], eax

; 1768 :   pKsd_t->async_change |= ASYNC_voice;

  015c6	8b 81 38 02 00
	00		 mov	 eax, DWORD PTR [ecx+568]
  015cc	0c 01		 or	 al, 1
  015ce	89 81 38 02 00
	00		 mov	 DWORD PTR [ecx+568], eax

; 1769 : 
; 1770 :   return;
; 1771 : }

  015d4	83 c4 08	 add	 esp, 8
  015d7	c3		 ret	 0
_SetSampleRate ENDP
_value$ = 8
_maxval$ = 12
_getmax	PROC NEAR

; 1775 : 	if (value <0)

  015e0	8b 44 24 04	 mov	 eax, DWORD PTR _value$[esp-4]
  015e4	66 85 c0	 test	 ax, ax
  015e7	7d 02		 jge	 SHORT $L71750

; 1776 : 		value = -value;

  015e9	f7 d8		 neg	 eax
$L71750:

; 1777 : 
; 1778 : 	if (value > *maxval)	*maxval=value;

  015eb	8b 4c 24 08	 mov	 ecx, DWORD PTR _maxval$[esp-4]
  015ef	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  015f2	7e 03		 jle	 SHORT $L71751
  015f4	66 89 01	 mov	 WORD PTR [ecx], ax
$L71751:

; 1779 : 	return;
; 1780 : }

  015f7	c3		 ret	 0
_getmax	ENDP
_TEXT	ENDS
PUBLIC	_setzeroabc
_TEXT	SEGMENT
_f$ = 8
_bw$ = 12
_rnzg$ = 16
_sacoef$ = 20
_sbcoef$ = 24
_sccoef$ = 28
_setzeroabc PROC NEAR

; 1799 : int acoef;
; 1800 : int bcoef;
; 1801 : int ccoef;
; 1802 : 
; 1803 : int r;
; 1804 : 
; 1805 : 
; 1806 : /*    First compute ordinary resonator coefficients */
; 1807 : /*    Let r  =  exp(-pi bw t) */
; 1808 : /*    To get rid of transcendentals for chip implementation, see above: */
; 1809 : 
; 1810 : 		r = radius_table[bw >> 3];

  01600	8b 44 24 08	 mov	 eax, DWORD PTR _bw$[esp-4]

; 1811 : 		
; 1812 : 
; 1813 :     
; 1814 : 
; 1815 : 
; 1816 : /*    Let c  =  -r**2 */
; 1817 : 
; 1818 : 	 ccoef = -frac4mul(r,r);
; 1819 : 		
; 1820 : 
; 1821 : /*    Let b = r * 2*cos(2 pi f t) */
; 1822 : /*    To get rid of transcendentals for chip implementation, see above: */
; 1823 : 
; 1824 : 		 bcoef = frac4mul( r, cosine_table[ f >> 3 ] );

  01604	8b 54 24 04	 mov	 edx, DWORD PTR _f$[esp-4]
  01608	c1 f8 03	 sar	 eax, 3
  0160b	c1 fa 03	 sar	 edx, 3
  0160e	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _radius_table[eax*2]
  01616	53		 push	 ebx
  01617	56		 push	 esi
  01618	0f bf 34 55 00
	00 00 00	 movsx	 esi, WORD PTR _cosine_table[edx*2]
  01620	8b c8		 mov	 ecx, eax
  01622	0f af f0	 imul	 esi, eax
  01625	0f af c8	 imul	 ecx, eax

; 1825 : 
; 1826 : /*    Let a = 1.0 - b - c */
; 1827 : 
; 1828 : 	 acoef = 4096 - bcoef - ccoef;
; 1829 : 
; 1830 : /* Now convert to antiresonator coefficients (a'=1/a, b'=-b/a, c'=-c/a) */
; 1831 : /* It would be desirable to turn these divides into tables for chip impl. */
; 1832 : 	  
; 1833 : 	*sacoef = ( (4096*rnzg )/acoef);

  01628	8b 5c 24 14	 mov	 ebx, DWORD PTR _rnzg$[esp+4]
  0162c	57		 push	 edi
  0162d	8b c3		 mov	 eax, ebx
  0162f	bf 00 10 00 00	 mov	 edi, 4096		; 00001000H
  01634	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  01637	c1 fe 0c	 sar	 esi, 12			; 0000000cH
  0163a	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0163d	f7 d9		 neg	 ecx
  0163f	2b fe		 sub	 edi, esi
  01641	99		 cdq
  01642	2b f9		 sub	 edi, ecx
  01644	f7 ff		 idiv	 edi
  01646	8b 54 24 1c	 mov	 edx, DWORD PTR _sacoef$[esp+8]
  0164a	66 89 02	 mov	 WORD PTR [edx], ax

; 1834 : 	*sbcoef = -((bcoef*rnzg)/acoef);

  0164d	8b c6		 mov	 eax, esi
  0164f	0f af c3	 imul	 eax, ebx
  01652	99		 cdq
  01653	f7 ff		 idiv	 edi
  01655	8b 54 24 20	 mov	 edx, DWORD PTR _sbcoef$[esp+8]
  01659	f7 d8		 neg	 eax
  0165b	66 89 02	 mov	 WORD PTR [edx], ax

; 1835 : 	*sccoef = -((ccoef*rnzg)/acoef);

  0165e	8b c1		 mov	 eax, ecx
  01660	0f af c3	 imul	 eax, ebx
  01663	99		 cdq
  01664	f7 ff		 idiv	 edi
  01666	8b 4c 24 24	 mov	 ecx, DWORD PTR _sccoef$[esp+8]
  0166a	5f		 pop	 edi
  0166b	5e		 pop	 esi
  0166c	5b		 pop	 ebx
  0166d	f7 d8		 neg	 eax
  0166f	66 89 01	 mov	 WORD PTR [ecx], ax

; 1836 : 
; 1837 : 	
; 1838 : 	
; 1839 : 	/*    Debugging printout *
; 1840 :       printf("fz=%3d bw=%3d acoef=%8.5f bcoef=%8.5f ccoef=%8.5f\n",
; 1841 : 	  f, bw, *acoef, *bcoef, *ccoef);
; 1842 : */
; 1843 : }

  01672	c3		 ret	 0
_setzeroabc ENDP
_TEXT	ENDS
PUBLIC	_setabc
_TEXT	SEGMENT
_f$ = 8
_bw$ = 12
_acoef$ = 16
_bcoef$ = 20
_ccoef$ = 24
_setabc	PROC NEAR

; 1846 : 
; 1847 : int r;
; 1848 : double exp(),cos();
; 1849 : 
; 1850 : 
; 1851 : /*    First compute ordinary resonator coefficients */
; 1852 : /*    Let r  =  exp(-pi bw t) */
; 1853 : /*    To get rid of transcendentals for chip implementation, see above: */
; 1854 : 
; 1855 : 		r = radius_table[bw >> 3];

  01680	8b 44 24 08	 mov	 eax, DWORD PTR _bw$[esp-4]

; 1856 : 		
; 1857 : 
; 1858 :     
; 1859 : 
; 1860 : 
; 1861 : /*    Let c  =  -r**2 */
; 1862 : 
; 1863 : 	 *ccoef = -frac4mul(r,r);

  01684	8b 54 24 14	 mov	 edx, DWORD PTR _ccoef$[esp-4]
  01688	c1 f8 03	 sar	 eax, 3
  0168b	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _radius_table[eax*2]
  01693	8b c1		 mov	 eax, ecx
  01695	0f af c1	 imul	 eax, ecx
  01698	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0169b	f7 d8		 neg	 eax
  0169d	66 89 02	 mov	 WORD PTR [edx], ax

; 1864 : 		
; 1865 : 
; 1866 : /*    Let b = r * 2*cos(2 pi f t) */
; 1867 : /*    To get rid of transcendentals for chip implementation, see above: */
; 1868 : 
; 1869 : 		 *bcoef = frac4mul( r, cosine_table[ f >> 3 ] );

  016a0	8b 44 24 04	 mov	 eax, DWORD PTR _f$[esp-4]
  016a4	c1 f8 03	 sar	 eax, 3
  016a7	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[eax*2]
  016af	0f af c1	 imul	 eax, ecx
  016b2	8b 4c 24 10	 mov	 ecx, DWORD PTR _bcoef$[esp-4]
  016b6	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  016b9	66 89 01	 mov	 WORD PTR [ecx], ax

; 1870 : 
; 1871 : /*    Let a = 1.0 - b - c */
; 1872 : 
; 1873 : 	 *acoef = 4096 - *bcoef -*ccoef;

  016bc	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  016c0	66 2b 0a	 sub	 cx, WORD PTR [edx]
  016c3	8b 54 24 0c	 mov	 edx, DWORD PTR _acoef$[esp-4]
  016c7	2b c8		 sub	 ecx, eax
  016c9	66 89 0a	 mov	 WORD PTR [edx], cx

; 1874 : }

  016cc	c3		 ret	 0
_setabc	ENDP
_TEXT	ENDS
END
