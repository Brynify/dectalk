	TITLE	D:\work\Product\dapi\src\Vtm\vtm.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT _getmax
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _checkmax
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_B0
PUBLIC	_azero_tab
PUBLIC	_bzero_tab
PUBLIC	_czero_tab
PUBLIC	_amptable
PUBLIC	_cosine_table
PUBLIC	_radius_table
PUBLIC	_tiltf
PUBLIC	_tiltbw
PUBLIC	_logtab
PUBLIC	_loginv
PUBLIC	_int_volume_table
_DATA	SEGMENT
COMM	_radius:WORD
_B0	DW	04b0H
	DW	0476H
	DW	0440H
	DW	040eH
	DW	03dfH
	DW	03b4H
	DW	038bH
	DW	0365H
	DW	0341H
	DW	031fH
	DW	0300H
	DW	02e2H
	DW	02c6H
	DW	02abH
	DW	0292H
	DW	027aH
	DW	0264H
	DW	024eH
	DW	023aH
	DW	0227H
	DW	0215H
	DW	0203H
	DW	01f3H
	DW	01e3H
	DW	01d4H
	DW	01c6H
	DW	01b8H
	DW	01abH
	DW	019fH
	DW	0193H
	DW	0187H
	DW	017cH
	DW	0172H
	DW	0168H
	DW	015eH
	DW	0155H
	DW	014cH
	DW	0143H
	DW	013bH
	DW	0133H
	DW	012cH
	DW	0124H
	DW	011dH
	DW	0116H
	DW	0110H
	DW	0109H
	DW	0103H
	DW	0fdH
	DW	0f7H
	DW	0f2H
	DW	0edH
	DW	0e7H
	DW	0e2H
	DW	0ddH
	DW	0d9H
	DW	0d4H
	DW	0d0H
	DW	0ccH
	DW	0c7H
	DW	0c3H
	DW	0c0H
	DW	0bcH
	DW	0b8H
	DW	0b4H
	DW	0b1H
	DW	0aeH
	DW	0aaH
	DW	0a7H
	DW	0a4H
	DW	0a1H
	DW	09eH
	DW	09bH
	DW	099H
	DW	096H
	DW	093H
	DW	091H
	DW	08eH
	DW	08cH
	DW	089H
	DW	087H
	DW	085H
	DW	083H
	DW	080H
	DW	07eH
	DW	07cH
	DW	07aH
	DW	078H
	DW	077H
	DW	075H
	DW	073H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	06aH
	DW	069H
	DW	067H
	DW	066H
	DW	064H
	DW	063H
	DW	061H
	DW	060H
	DW	05fH
	DW	05dH
	DW	05cH
	DW	05bH
	DW	05aH
	DW	058H
	DW	057H
	DW	056H
	DW	055H
	DW	054H
	DW	053H
	DW	052H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04bH
	DW	04aH
	DW	049H
	DW	048H
	DW	047H
	DW	046H
	DW	045H
	DW	044H
	DW	044H
	DW	043H
	DW	042H
	DW	041H
	DW	040H
	DW	040H
	DW	03fH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03cH
	DW	03bH
	DW	03bH
	DW	03aH
	DW	039H
	DW	039H
	DW	038H
	DW	038H
	DW	037H
	DW	037H
	DW	036H
	DW	036H
	DW	035H
	DW	035H
	DW	034H
	DW	034H
	DW	033H
	DW	033H
	DW	032H
	DW	032H
	DW	031H
	DW	031H
	DW	030H
	DW	030H
	DW	02fH
	DW	02fH
	DW	02eH
	DW	02eH
	DW	02dH
	DW	02dH
	DW	02cH
	DW	02cH
	DW	02bH
	DW	02bH
	DW	02aH
	DW	02aH
	DW	029H
	DW	029H
	DW	029H
	DW	029H
	DW	028H
	DW	028H
	DW	027H
	DW	027H
	DW	026H
	DW	026H
	DW	026H
	DW	026H
	DW	025H
	DW	025H
	DW	024H
	DW	024H
	DW	024H
	DW	024H
	DW	023H
	DW	023H
	DW	023H
	DW	023H
	DW	022H
	DW	022H
	DW	021H
	DW	021H
	DW	021H
	DW	021H
	DW	020H
	DW	020H
	DW	020H
	DW	020H
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01bH
	DW	01bH
_azero_tab DW	0f18H
	DW	0e1bH
	DW	0d4dH
	DW	0c87H
	DW	0bcaH
	DW	0b2dH
	DW	0a8cH
	DW	09fbH
	DW	0982H
	DW	0905H
	DW	0893H
	DW	082dH
	DW	07caH
	DW	0770H
	DW	071eH
	DW	06ceH
	DW	0685H
	DW	063eH
	DW	05fdH
	DW	05c1H
	DW	0587H
	DW	0551H
	DW	0520H
	DW	04efH
	DW	04c0H
	DW	0494H
	DW	046bH
	DW	0446H
	DW	0420H
	DW	03fcH
	DW	03dcH
	DW	03c3H
	DW	039eH
	DW	0381H
	DW	0365H
	ORG $+2
_bzero_tab DW	0e2e3H
	DW	0e4d0H
	DW	0e662H
	DW	0e7e5H
	DW	0e956H
	DW	0ea88H
	DW	0ebc3H
	DW	0ecddH
	DW	0edcaH
	DW	0eebeH
	DW	0ef9bH
	DW	0f064H
	DW	0f125H
	DW	0f1d4H
	DW	0f275H
	DW	0f310H
	DW	0f39fH
	DW	0f429H
	DW	0f4a7H
	DW	0f51cH
	DW	0f58eH
	DW	0f5f7H
	DW	0f658H
	DW	0f6b7H
	DW	0f713H
	DW	0f768H
	DW	0f7b8H
	DW	0f802H
	DW	0f84aH
	DW	0f891H
	DW	0f8d0H
	DW	0f90eH
	DW	0f949H
	DW	0f982H
	DW	0f9b7H
	ORG $+2
_czero_tab DW	0e5dH
	DW	0d6dH
	DW	0ca9H
	DW	0becH
	DW	0b38H
	DW	0aa3H
	DW	0a09H
	DW	0980H
	DW	090cH
	DW	0895H
	DW	0829H
	DW	07c8H
	DW	0769H
	DW	0714H
	DW	06c6H
	DW	067aH
	DW	0634H
	DW	05f1H
	DW	05b3H
	DW	057aH
	DW	0543H
	DW	0510H
	DW	04e0H
	DW	04b2H
	DW	0485H
	DW	045bH
	DW	0435H
	DW	0411H
	DW	03edH
	DW	03cbH
	DW	03acH
	DW	038eH
	DW	0371H
	DW	0355H
	DW	033bH
	ORG $+2
_amptable DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0eH
	DW	010H
	DW	012H
	DW	014H
	DW	016H
	DW	019H
	DW	01cH
	DW	020H
	DW	023H
	DW	028H
	DW	02dH
	DW	033H
	DW	039H
	DW	040H
	DW	047H
	DW	050H
	DW	05aH
	DW	065H
	DW	072H
	DW	080H
	DW	08eH
	DW	09fH
	DW	0b3H
	DW	0caH
	DW	0e3H
	DW	0100H
	DW	011cH
	DW	013eH
	DW	0167H
	DW	0195H
	DW	01c7H
	DW	0200H
	DW	0238H
	DW	027eH
	DW	02cfH
	DW	032bH
	DW	038fH
	DW	0400H
	DW	0471H
	DW	04fcH
	DW	059eH
	DW	0656H
	DW	071fH
	DW	0800H
	DW	08e1H
	DW	09f8H
	DW	0b3bH
	DW	0cacH
	DW	0e3dH
	DW	01000H
	DW	011c3H
	DW	013f0H
	DW	01677H
	DW	01958H
	DW	01c7bH
	DW	02000H
	DW	02385H
	DW	027dfH
	DW	02ceeH
	DW	032b0H
	DW	038f6H
	DW	04000H
	DW	047aeH
	DW	050a4H
	DW	05b85H
	DW	06666H
	DW	07333H
	DW	07fffH
_cosine_table DW 02000H
	DW	01fffH
	DW	01fffH
	DW	01fffH
	DW	01ffeH
	DW	01ffdH
	DW	01ffcH
	DW	01ffaH
	DW	01ff9H
	DW	01ff7H
	DW	01ff5H
	DW	01ff3H
	DW	01ff1H
	DW	01feeH
	DW	01febH
	DW	01fe8H
	DW	01fe5H
	DW	01fe2H
	DW	01fdeH
	DW	01fdaH
	DW	01fd6H
	DW	01fd2H
	DW	01fcdH
	DW	01fc9H
	DW	01fc4H
	DW	01fbfH
	DW	01fbaH
	DW	01fb4H
	DW	01faeH
	DW	01fa9H
	DW	01fa3H
	DW	01f9cH
	DW	01f96H
	DW	01f8fH
	DW	01f88H
	DW	01f81H
	DW	01f7aH
	DW	01f72H
	DW	01f6bH
	DW	01f63H
	DW	01f5aH
	DW	01f52H
	DW	01f4aH
	DW	01f41H
	DW	01f38H
	DW	01f2fH
	DW	01f25H
	DW	01f1cH
	DW	01f12H
	DW	01f08H
	DW	01efeH
	DW	01ef4H
	DW	01ee9H
	DW	01edfH
	DW	01ed4H
	DW	01ec8H
	DW	01ebdH
	DW	01eb2H
	DW	01ea6H
	DW	01e9aH
	DW	01e8eH
	DW	01e81H
	DW	01e75H
	DW	01e68H
	DW	01e5bH
	DW	01e4eH
	DW	01e41H
	DW	01e33H
	DW	01e26H
	DW	01e18H
	DW	01e0aH
	DW	01dfbH
	DW	01dedH
	DW	01ddeH
	DW	01dcfH
	DW	01dc0H
	DW	01db1H
	DW	01da2H
	DW	01d92H
	DW	01d82H
	DW	01d72H
	DW	01d62H
	DW	01d51H
	DW	01d41H
	DW	01d30H
	DW	01d1fH
	DW	01d0eH
	DW	01cfdH
	DW	01cebH
	DW	01cd9H
	DW	01cc7H
	DW	01cb5H
	DW	01ca3H
	DW	01c91H
	DW	01c7eH
	DW	01c6bH
	DW	01c58H
	DW	01c45H
	DW	01c32H
	DW	01c1eH
	DW	01c0aH
	DW	01bf6H
	DW	01be2H
	DW	01bceH
	DW	01bb9H
	DW	01ba5H
	DW	01b90H
	DW	01b7bH
	DW	01b66H
	DW	01b50H
	DW	01b3bH
	DW	01b25H
	DW	01b0fH
	DW	01af9H
	DW	01ae3H
	DW	01acdH
	DW	01ab6H
	DW	01a9fH
	DW	01a88H
	DW	01a71H
	DW	01a5aH
	DW	01a42H
	DW	01a2bH
	DW	01a13H
	DW	019fbH
	DW	019e3H
	DW	019cbH
	DW	019b2H
	DW	0199aH
	DW	01981H
	DW	01968H
	DW	0194fH
	DW	01935H
	DW	0191cH
	DW	01902H
	DW	018e9H
	DW	018cfH
	DW	018b5H
	DW	0189aH
	DW	01880H
	DW	01865H
	DW	0184bH
	DW	01830H
	DW	01815H
	DW	017faH
	DW	017deH
	DW	017c3H
	DW	017a7H
	DW	0178bH
	DW	0176fH
	DW	01753H
	DW	01737H
	DW	0171bH
	DW	016feH
	DW	016e1H
	DW	016c4H
	DW	016a7H
	DW	0168aH
	DW	0166dH
	DW	01650H
	DW	01632H
	DW	01614H
	DW	015f6H
	DW	015d8H
	DW	015baH
	DW	0159cH
	DW	0157dH
	DW	0155fH
	DW	01540H
	DW	01521H
	DW	01502H
	DW	014e3H
	DW	014c4H
	DW	014a4H
	DW	01485H
	DW	01465H
	DW	01445H
	DW	01426H
	DW	01406H
	DW	013e5H
	DW	013c5H
	DW	013a5H
	DW	01384H
	DW	01363H
	DW	01342H
	DW	01322H
	DW	01300H
	DW	012dfH
	DW	012beH
	DW	0129dH
	DW	0127bH
	DW	01259H
	DW	01238H
	DW	01216H
	DW	011f4H
	DW	011d1H
	DW	011afH
	DW	0118dH
	DW	0116aH
	DW	01148H
	DW	01125H
	DW	01102H
	DW	010dfH
	DW	010bcH
	DW	01099H
	DW	01076H
	DW	01052H
	DW	0102fH
	DW	0100bH
	DW	0fe8H
	DW	0fc4H
	DW	0fa0H
	DW	0f7cH
	DW	0f58H
	DW	0f34H
	DW	0f10H
	DW	0eebH
	DW	0ec7H
	DW	0ea2H
	DW	0e7dH
	DW	0e59H
	DW	0e34H
	DW	0e0fH
	DW	0deaH
	DW	0dc5H
	DW	0d9fH
	DW	0d7aH
	DW	0d55H
	DW	0d2fH
	DW	0d0aH
	DW	0ce4H
	DW	0cbeH
	DW	0c99H
	DW	0c73H
	DW	0c4dH
	DW	0c27H
	DW	0c01H
	DW	0bdaH
	DW	0bb4H
	DW	0b8eH
	DW	0b67H
	DW	0b41H
	DW	0b1aH
	DW	0af3H
	DW	0acdH
	DW	0aa6H
	DW	0a7fH
	DW	0a58H
	DW	0a31H
	DW	0a0aH
	DW	09e3H
	DW	09bcH
	DW	0995H
	DW	096dH
	DW	0946H
	DW	091eH
	DW	08f7H
	DW	08cfH
	DW	08a8H
	DW	0880H
	DW	0858H
	DW	0831H
	DW	0809H
	DW	07e1H
	DW	07b9H
	DW	0791H
	DW	0769H
	DW	0741H
	DW	0719H
	DW	06f0H
	DW	06c8H
	DW	06a0H
	DW	0678H
	DW	064fH
	DW	0627H
	DW	05ffH
	DW	05d6H
	DW	05aeH
	DW	0585H
	DW	055cH
	DW	0534H
	DW	050bH
	DW	04e3H
	DW	04baH
	DW	0491H
	DW	0468H
	DW	043fH
	DW	0417H
	DW	03eeH
	DW	03c5H
	DW	039cH
	DW	0373H
	DW	034aH
	DW	0321H
	DW	02f8H
	DW	02cfH
	DW	02a6H
	DW	027dH
	DW	0254H
	DW	022bH
	DW	0202H
	DW	01d9H
	DW	01b0H
	DW	0187H
	DW	015dH
	DW	0134H
	DW	010bH
	DW	0e2H
	DW	0b9H
	DW	090H
	DW	066H
	DW	03dH
	DW	014H
	DW	0ffecH
	DW	0ffc3H
	DW	0ff9aH
	DW	0ff70H
	DW	0ff47H
	DW	0ff1eH
	DW	0fef5H
	DW	0feccH
	DW	0fea3H
	DW	0fe79H
	DW	0fe50H
	DW	0fe27H
	DW	0fdfeH
	DW	0fdd5H
	DW	0fdacH
	DW	0fd83H
	DW	0fd5aH
	DW	0fd31H
	DW	0fd08H
	DW	0fcdfH
	DW	0fcb6H
	DW	0fc8dH
	DW	0fc64H
	DW	0fc3bH
	DW	0fc12H
	DW	0fbe9H
	DW	0fbc1H
	DW	0fb98H
	DW	0fb6fH
	DW	0fb46H
	DW	0fb1eH
	DW	0faf5H
	DW	0faccH
	DW	0faa4H
	DW	0fa7bH
	DW	0fa52H
	DW	0fa2aH
	DW	0fa01H
	DW	0f9d9H
	DW	0f9b1H
	DW	0f988H
	DW	0f960H
	DW	0f938H
	DW	0f910H
	DW	0f8e7H
	DW	0f8bfH
	DW	0f897H
	DW	0f86fH
	DW	0f847H
	DW	0f81fH
	DW	0f7f7H
	DW	0f7cfH
	DW	0f7a8H
	DW	0f780H
	DW	0f758H
	DW	0f731H
	DW	0f709H
	DW	0f6e2H
	DW	0f6baH
	DW	0f693H
	DW	0f66bH
	DW	0f644H
	DW	0f61dH
	DW	0f5f6H
	DW	0f5cfH
	DW	0f5a8H
	DW	0f581H
	DW	0f55aH
	DW	0f533H
	DW	0f50dH
	DW	0f4e6H
	DW	0f4bfH
	DW	0f499H
	DW	0f472H
	DW	0f44cH
	DW	0f426H
	DW	0f3ffH
	DW	0f3d9H
	DW	0f3b3H
	DW	0f38dH
	DW	0f367H
	DW	0f342H
	DW	0f31cH
	DW	0f2f6H
	DW	0f2d1H
	DW	0f2abH
	DW	0f286H
	DW	0f261H
	DW	0f23bH
	DW	0f216H
	DW	0f1f1H
	DW	0f1ccH
	DW	0f1a7H
	DW	0f183H
	DW	0f15eH
	DW	0f139H
	DW	0f115H
	DW	0f0f1H
	DW	0f0ccH
	DW	0f0a8H
	DW	0f084H
	DW	0f060H
	DW	0f03cH
	DW	0f018H
	DW	0eff5H
	DW	0efd1H
	DW	0efaeH
	DW	0ef8aH
	DW	0ef67H
	DW	0ef44H
	DW	0ef21H
	DW	0eefeH
	DW	0eedbH
	DW	0eeb8H
	DW	0ee96H
	DW	0ee73H
	DW	0ee51H
	DW	0ee2fH
	DW	0ee0cH
	DW	0edeaH
	DW	0edc9H
	DW	0eda7H
	DW	0ed85H
	DW	0ed63H
	DW	0ed42H
	DW	0ed21H
	DW	0ed00H
	DW	0ecdeH
	DW	0ecbeH
	DW	0ec9dH
	DW	0ec7cH
	DW	0ec5bH
	DW	0ec3bH
	DW	0ec1bH
	DW	0ebfbH
	DW	0ebdaH
	DW	0ebbbH
	DW	0eb9bH
	DW	0eb7bH
	DW	0eb5cH
	DW	0eb3cH
	DW	0eb1dH
	DW	0eafeH
	DW	0eadfH
	DW	0eac0H
	DW	0eaa1H
	DW	0ea83H
	DW	0ea64H
	DW	0ea46H
	DW	0ea28H
	DW	0ea0aH
	DW	0e9ecH
	DW	0e9ceH
	DW	0e9b1H
	DW	0e993H
	DW	0e976H
	DW	0e959H
	DW	0e93cH
	DW	0e91fH
	DW	0e902H
	DW	0e8e5H
	DW	0e8c9H
	DW	0e8adH
	DW	0e891H
	DW	0e875H
	DW	0e859H
	DW	0e83dH
	DW	0e822H
	DW	0e806H
	DW	0e7ebH
	DW	0e7d0H
	DW	0e7b5H
	DW	0e79bH
	DW	0e780H
	DW	0e766H
	DW	0e74bH
	DW	0e731H
	DW	0e717H
	DW	0e6feH
	DW	0e6e4H
	DW	0e6cbH
	DW	0e6b1H
	DW	0e698H
	DW	0e67fH
	DW	0e666H
	DW	0e64eH
	DW	0e635H
	DW	0e61dH
	DW	0e605H
	DW	0e5edH
	DW	0e5d5H
	DW	0e5beH
	DW	0e5a6H
	DW	0e58fH
	DW	0e578H
	DW	0e561H
	DW	0e54aH
	DW	0e533H
	DW	0e51dH
	DW	0e507H
	DW	0e4f1H
	DW	0e4dbH
	DW	0e4c5H
	DW	0e4b0H
	DW	0e49aH
	DW	0e485H
	DW	0e470H
	DW	0e45bH
	DW	0e447H
	DW	0e432H
	DW	0e41eH
	DW	0e40aH
	DW	0e3f6H
	DW	0e3e2H
	DW	0e3ceH
	DW	0e3bbH
	DW	0e3a8H
	DW	0e395H
	DW	0e382H
	DW	0e36fH
	DW	0e35dH
	DW	0e34bH
	DW	0e339H
	DW	0e327H
	DW	0e315H
	DW	0e303H
	DW	0e2f2H
	DW	0e2e1H
	DW	0e2d0H
	DW	0e2bfH
	DW	0e2afH
	DW	0e29eH
	DW	0e28eH
	DW	0e27eH
	DW	0e26eH
	DW	0e25eH
	DW	0e24fH
	DW	0e240H
	DW	0e231H
	DW	0e222H
	DW	0e213H
	DW	0e205H
	DW	0e1f6H
	DW	0e1e8H
	DW	0e1daH
	DW	0e1cdH
	DW	0e1bfH
	DW	0e1b2H
	DW	0e1a5H
	DW	0e198H
	DW	0e18bH
	DW	0e17fH
	DW	0e172H
	DW	0e166H
	DW	0e15aH
	DW	0e14eH
	DW	0e143H
	DW	0e138H
	DW	0e12cH
	DW	0e121H
	DW	0e117H
	DW	0e10cH
	DW	0e102H
	DW	0e0f8H
	DW	0e0eeH
	DW	0e0e4H
	DW	0e0dbH
	DW	0e0d1H
	DW	0e0c8H
	DW	0e0bfH
	DW	0e0b6H
	DW	0e0aeH
	DW	0e0a6H
	DW	0e09dH
	DW	0e095H
	DW	0e08eH
	DW	0e086H
	DW	0e07fH
	DW	0e078H
	DW	0e071H
	DW	0e06aH
	DW	0e064H
	DW	0e05dH
	DW	0e057H
	DW	0e052H
	DW	0e04cH
	DW	0e046H
	DW	0e041H
	DW	0e03cH
	DW	0e037H
	DW	0e033H
	DW	0e02eH
	DW	0e02aH
	DW	0e026H
	DW	0e022H
	DW	0e01eH
	DW	0e01bH
	DW	0e018H
	DW	0e015H
	DW	0e012H
	DW	0e00fH
	DW	0e00dH
	DW	0e00bH
	DW	0e009H
	DW	0e007H
	DW	0e006H
	DW	0e004H
	DW	0e003H
	DW	0e002H
	DW	0e001H
	DW	0e001H
	DW	0e001H
	DW	0e001H
_radius_table DW 01000H
	DW	0ff5H
	DW	0febH
	DW	0fe1H
	DW	0fd7H
	DW	0fccH
	DW	0fc2H
	DW	0fb8H
	DW	0faeH
	DW	0fa4H
	DW	0f9aH
	DW	0f90H
	DW	0f86H
	DW	0f7cH
	DW	0f72H
	DW	0f68H
	DW	0f5eH
	DW	0f54H
	DW	0f4aH
	DW	0f41H
	DW	0f37H
	DW	0f2dH
	DW	0f23H
	DW	0f19H
	DW	0f10H
	DW	0f06H
	DW	0efcH
	DW	0ef3H
	DW	0ee9H
	DW	0ee0H
	DW	0ed6H
	DW	0eccH
	DW	0ec3H
	DW	0eb9H
	DW	0eb0H
	DW	0ea7H
	DW	0e9dH
	DW	0e94H
	DW	0e8aH
	DW	0e81H
	DW	0e78H
	DW	0e6eH
	DW	0e65H
	DW	0e5cH
	DW	0e53H
	DW	0e49H
	DW	0e40H
	DW	0e37H
	DW	0e2eH
	DW	0e25H
	DW	0e1cH
	DW	0e13H
	DW	0e0aH
	DW	0e01H
	DW	0df8H
	DW	0defH
	DW	0de6H
	DW	0dddH
	DW	0dd4H
	DW	0dcbH
	DW	0dc2H
	DW	0db9H
	DW	0db0H
	DW	0da8H
	DW	0d9fH
	DW	0d96H
	DW	0d8dH
	DW	0d85H
	DW	0d7cH
	DW	0d73H
	DW	0d6bH
	DW	0d62H
	DW	0d59H
	DW	0d51H
	DW	0d48H
	DW	0d40H
	DW	0d37H
	DW	0d2fH
	DW	0d26H
	DW	0d1eH
	DW	0d15H
	DW	0d0dH
	DW	0d05H
	DW	0cfcH
	DW	0cf4H
	DW	0cecH
	DW	0ce3H
	DW	0cdbH
	DW	0cd3H
	DW	0ccbH
	DW	0cc2H
	DW	0cbaH
	DW	0cb2H
	DW	0caaH
	DW	0ca2H
	DW	0c9aH
	DW	0c91H
	DW	0c89H
	DW	0c81H
	DW	0c79H
	DW	0c71H
	DW	0c69H
	DW	0c61H
	DW	0c59H
	DW	0c51H
	DW	0c49H
	DW	0c42H
	DW	0c3aH
	DW	0c32H
	DW	0c2aH
	DW	0c22H
	DW	0c1aH
	DW	0c13H
	DW	0c0bH
	DW	0c03H
	DW	0bfbH
	DW	0bf4H
	DW	0becH
	DW	0be4H
	DW	0bddH
	DW	0bd5H
	DW	0bcdH
	DW	0bc6H
	DW	0bbeH
	DW	0bb7H
	DW	0bafH
	DW	0ba8H
	DW	0ba0H
	DW	0b99H
	DW	0b91H
	DW	0b8aH
	DW	0b82H
	DW	0b7bH
	DW	0b74H
	DW	0b6cH
	DW	0b65H
	DW	0b5eH
	DW	0b56H
	DW	0b4fH
	DW	0b48H
	DW	0b41H
	DW	0b39H
	DW	0b32H
	DW	0b2bH
	DW	0b24H
	DW	0b1dH
	DW	0b15H
	DW	0b0eH
	DW	0b07H
	DW	0b00H
	DW	0af9H
	DW	0af2H
	DW	0aebH
	DW	0ae4H
	DW	0addH
	DW	0ad6H
	DW	0acfH
	DW	0ac8H
	DW	0ac1H
	DW	0abaH
	DW	0ab3H
	DW	0aacH
	DW	0aa6H
	DW	0a9fH
	DW	0a98H
	DW	0a91H
	DW	0a8aH
	DW	0a84H
	DW	0a7dH
	DW	0a76H
	DW	0a6fH
	DW	0a69H
	DW	0a62H
	DW	0a5bH
	DW	0a55H
	DW	0a4eH
	DW	0a47H
	DW	0a41H
	DW	0a3aH
	DW	0a34H
	DW	0a2dH
	DW	0a26H
	DW	0a20H
	DW	0a19H
	DW	0a13H
	DW	0a0cH
	DW	0a06H
	DW	0a00H
	DW	09f9H
	DW	09f3H
	DW	09ecH
	DW	09e6H
	DW	09e0H
	DW	09d9H
	DW	09d3H
	DW	09cdH
	DW	09c6H
	DW	09c0H
	DW	09baH
	DW	09b3H
	DW	09adH
	DW	09a7H
	DW	09a1H
	DW	099bH
	DW	0994H
	DW	098eH
	DW	0988H
	DW	0982H
	DW	097cH
	DW	0976H
	DW	0970H
	DW	096aH
	DW	0964H
	DW	095eH
	DW	0958H
	DW	0952H
	DW	094cH
	DW	0946H
	DW	0940H
	DW	093aH
	DW	0934H
	DW	092eH
	DW	0928H
	DW	0922H
	DW	091cH
	DW	0916H
	DW	0911H
	DW	090bH
	DW	0905H
	DW	08ffH
	DW	08f9H
	DW	08f4H
	DW	08eeH
	DW	08e8H
	DW	08e2H
	DW	08ddH
	DW	08d7H
	DW	08d1H
	DW	08ccH
	DW	08c6H
	DW	08c0H
	DW	08bbH
	DW	08b5H
	DW	08afH
	DW	08aaH
	DW	08a4H
	DW	089fH
	DW	0899H
	DW	0894H
	DW	088eH
	DW	0889H
	DW	0883H
	DW	087eH
	DW	0878H
	DW	0873H
	DW	086dH
	DW	0868H
	DW	0863H
	DW	085dH
	DW	0858H
	DW	0852H
	DW	084dH
	DW	0848H
	DW	0842H
	DW	083dH
	DW	0838H
	DW	0833H
	DW	082dH
	DW	0828H
	DW	0823H
	DW	081eH
	DW	0818H
	DW	0813H
	DW	080eH
	DW	0809H
	DW	0804H
	DW	07feH
	DW	07f9H
	DW	07f4H
	DW	07efH
	DW	07eaH
	DW	07e5H
	DW	07e0H
	DW	07dbH
	DW	07d6H
	DW	07d1H
	DW	07ccH
	DW	07c7H
	DW	07c2H
	DW	07bdH
	DW	07b8H
	DW	07b3H
	DW	07aeH
	DW	07a9H
	DW	07a4H
	DW	079fH
	DW	079aH
	DW	0795H
	DW	0790H
	DW	078bH
	DW	0787H
	DW	0782H
	DW	077dH
	DW	0778H
	DW	0773H
	DW	076fH
	DW	076aH
	DW	0765H
	DW	0760H
	DW	075cH
	DW	0757H
	DW	0752H
	DW	074dH
	DW	0749H
	DW	0744H
	DW	073fH
	DW	073bH
	DW	0736H
	DW	0731H
	DW	072dH
	DW	0728H
	DW	0724H
	DW	071fH
	DW	071aH
	DW	0716H
	DW	0711H
	DW	070dH
	DW	0708H
	DW	0704H
	DW	06ffH
	DW	06fbH
	DW	06f6H
	DW	06f2H
	DW	06edH
	DW	06e9H
	DW	06e4H
	DW	06e0H
	DW	06dbH
	DW	06d7H
	DW	06d3H
	DW	06ceH
	DW	06caH
	DW	06c6H
	DW	06c1H
	DW	06bdH
	DW	06b9H
	DW	06b4H
	DW	06b0H
	DW	06acH
	DW	06a7H
	DW	06a3H
	DW	069fH
	DW	069bH
	DW	0696H
	DW	0692H
	DW	068eH
	DW	068aH
	DW	0685H
	DW	0681H
	DW	067dH
	DW	0679H
	DW	0675H
	DW	0671H
	DW	066cH
	DW	0668H
	DW	0664H
	DW	0660H
	DW	065cH
	DW	0658H
	DW	0654H
	DW	0650H
	DW	064cH
	DW	0648H
	DW	0644H
	DW	0640H
	DW	063cH
	DW	0638H
	DW	0634H
	DW	0630H
	DW	062cH
	DW	0628H
	DW	0624H
	DW	0620H
	DW	061cH
	DW	0618H
	DW	0614H
	DW	0610H
	DW	060cH
	DW	0608H
	DW	0604H
	DW	0601H
	DW	05fdH
	DW	05f9H
	DW	05f5H
	DW	05f1H
	DW	05edH
	DW	05e9H
	DW	05e6H
	DW	05e2H
	DW	05deH
	DW	05daH
	DW	05d7H
	DW	05d3H
	DW	05cfH
	DW	05cbH
	DW	05c8H
	DW	05c4H
	DW	05c0H
	DW	05bdH
	DW	05b9H
	DW	05b5H
	DW	05b1H
	DW	05aeH
	DW	05aaH
	DW	05a7H
	DW	05a3H
	DW	059fH
	DW	059cH
	DW	0598H
	DW	0594H
	DW	0591H
	DW	058dH
	DW	058aH
	DW	0586H
	DW	0583H
	DW	057fH
	DW	057cH
	DW	0578H
	DW	0575H
	DW	0571H
	DW	056dH
	DW	056aH
	DW	0567H
	DW	0563H
	DW	0560H
	DW	055cH
	DW	0559H
	DW	0555H
	DW	0552H
	DW	054eH
	DW	054bH
	DW	0548H
	DW	0544H
	DW	0541H
	DW	053dH
	DW	053aH
	DW	0537H
	DW	0533H
	DW	0530H
	DW	052dH
	DW	0529H
	DW	0526H
	DW	0523H
	DW	051fH
	DW	051cH
	DW	0519H
	DW	0516H
	DW	0512H
	DW	050fH
	DW	050cH
	DW	0509H
	DW	0505H
	DW	0502H
	DW	04ffH
	DW	04fcH
	DW	04f8H
	DW	04f5H
	DW	04f2H
	DW	04efH
	DW	04ecH
	DW	04e9H
	DW	04e5H
	DW	04e2H
	DW	04dfH
	DW	04dcH
	DW	04d9H
	DW	04d6H
	DW	04d3H
	DW	04d0H
	DW	04ccH
	DW	04c9H
	DW	04c6H
	DW	04c3H
	DW	04c0H
	DW	04bdH
	DW	04baH
	DW	04b7H
	DW	04b4H
	DW	04b1H
	DW	04aeH
	DW	04abH
	DW	04a8H
	DW	04a5H
	DW	04a2H
	DW	049fH
	DW	049cH
	DW	0499H
	DW	0496H
	DW	0493H
	DW	0490H
	DW	048dH
	DW	048aH
	DW	0487H
	DW	0485H
	DW	0482H
	DW	047fH
	DW	047cH
	DW	0479H
	DW	0476H
	DW	0473H
	DW	0470H
	DW	046dH
	DW	046bH
	DW	0468H
	DW	0465H
	DW	0462H
	DW	045fH
	DW	045dH
	DW	045aH
	DW	0457H
	DW	0454H
	DW	0451H
	DW	044fH
	DW	044cH
	DW	0449H
	DW	0446H
	DW	0444H
	DW	0441H
	DW	043eH
	DW	043bH
	DW	0439H
	DW	0436H
	DW	0433H
	DW	0430H
	DW	042eH
	DW	042bH
	DW	0428H
	DW	0426H
	DW	0423H
	DW	0420H
	DW	041eH
	DW	041bH
	DW	0418H
	DW	0416H
	DW	0413H
	DW	0411H
	DW	040eH
	DW	040bH
	DW	0409H
	DW	0406H
	DW	0404H
	DW	0401H
	DW	03feH
	DW	03fcH
	DW	03f9H
	DW	03f7H
	DW	03f4H
	DW	03f2H
	DW	03efH
	DW	03edH
	DW	03eaH
	DW	03e8H
	DW	03e5H
	DW	03e3H
	DW	03e0H
	DW	03deH
	DW	03dbH
	DW	03d9H
	DW	03d6H
	DW	03d4H
	DW	03d1H
	DW	03cfH
	DW	03ccH
	DW	03caH
	DW	03c7H
	DW	03c5H
	DW	03c3H
	DW	03c0H
	DW	03beH
	DW	03bbH
	DW	03b9H
	DW	03b7H
	DW	03b4H
	DW	03b2H
	DW	03afH
	DW	03adH
	DW	03abH
	DW	03a8H
	DW	03a6H
	DW	03a4H
	DW	03a1H
	DW	039fH
	DW	039dH
	DW	039aH
	DW	0398H
	DW	0396H
	DW	0393H
	DW	0391H
	DW	038fH
	DW	038cH
	DW	038aH
	DW	0388H
	DW	0386H
	DW	0383H
	DW	0381H
	DW	037fH
	DW	037dH
	DW	037aH
	DW	0378H
	DW	0376H
	DW	0374H
	DW	0371H
	DW	036fH
	DW	036dH
	DW	036bH
	DW	0369H
	DW	0366H
	DW	0364H
	DW	0362H
	DW	0360H
	DW	035eH
	DW	035cH
	DW	0359H
	DW	0357H
	DW	0355H
	ORG $+2
_tiltf	DW	01130H
	DW	010eaH
	DW	0ea6H
	DW	0cc6H
	DW	0b22H
	DW	09c4H
	DW	095aH
	DW	08f1H
	DW	0888H
	DW	0820H
	DW	07b9H
	DW	0753H
	DW	06eaH
	DW	0682H
	DW	061aH
	DW	05b2H
	DW	054aH
	DW	04e2H
	DW	04adH
	DW	0479H
	DW	0445H
	DW	0411H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_tiltbw	DW	0762H
	DW	0754H
	DW	0708H
	DW	06c4H
	DW	0688H
	DW	0656H
	DW	062cH
	DW	0602H
	DW	05d2H
	DW	05a6H
	DW	057bH
	DW	0550H
	DW	0526H
	DW	04fcH
	DW	04d3H
	DW	04abH
	DW	0482H
	DW	045aH
	DW	0441H
	DW	0427H
	DW	040eH
	DW	03f6H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_logtab	DW	00H
	DW	05aH
	DW	078H
	DW	08aH
	DW	096H
	DW	0a0H
	DW	0a8H
	DW	0aeH
	DW	0b4H
	DW	0b9H
	DW	0beH
	DW	0c2H
	DW	0c6H
	DW	0c9H
	DW	0ccH
	DW	0cfH
	DW	0d2H
	DW	0d5H
	DW	0d7H
	DW	0daH
	DW	0dcH
	DW	0deH
	DW	0e0H
	DW	0e2H
	DW	0e4H
	DW	0e6H
	DW	0e7H
	DW	0e9H
	DW	0ebH
	DW	0ecH
	DW	0eeH
	DW	0efH
	DW	0f0H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	0109H
	DW	010aH
	DW	010bH
	DW	010cH
	DW	010cH
	DW	010dH
	DW	010eH
	DW	010eH
	DW	010fH
	DW	0110H
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0114H
	DW	0115H
	DW	0115H
	DW	0116H
	DW	0116H
	DW	0117H
	DW	0118H
	DW	0118H
	DW	0119H
	DW	0119H
	DW	011aH
	DW	011aH
	DW	011bH
	DW	011bH
	DW	011cH
	DW	011cH
	DW	011dH
	DW	011dH
	DW	011eH
	DW	011eH
	DW	011fH
	DW	011fH
	DW	0120H
	DW	0120H
	DW	0120H
	DW	0121H
	DW	0121H
	DW	0122H
	DW	0122H
	DW	0123H
	DW	0123H
	DW	0124H
	DW	0124H
	DW	0124H
	DW	0125H
	DW	0125H
	DW	0126H
	DW	0126H
	DW	0126H
	DW	0127H
	DW	0127H
	DW	0127H
	DW	0128H
	DW	0128H
	DW	0129H
	DW	0129H
	DW	0129H
	DW	012aH
	DW	012aH
	DW	012aH
	DW	012bH
	DW	012bH
	DW	012cH
	DW	012cH
	DW	012cH
	DW	012dH
	DW	012dH
	DW	012dH
	DW	012eH
	DW	012eH
	DW	012eH
	DW	012fH
	DW	012fH
	DW	012fH
	DW	012fH
	DW	0130H
	DW	0130H
	DW	0130H
	DW	0131H
	DW	0131H
	DW	0131H
	DW	0132H
	DW	0132H
	DW	0132H
	DW	0133H
	DW	0133H
	DW	0133H
	DW	0133H
	DW	0134H
	DW	0134H
	DW	0134H
	DW	0135H
	DW	0135H
	DW	0135H
	DW	0135H
	DW	0136H
	DW	0136H
	DW	0136H
	DW	0136H
	DW	0137H
	DW	0137H
	DW	0137H
	DW	0138H
	DW	0138H
	DW	0138H
	DW	0138H
	DW	0139H
	DW	0139H
	DW	0139H
	DW	0139H
	DW	013aH
	DW	013aH
	DW	013aH
	DW	013aH
	DW	013bH
	DW	013bH
	DW	013bH
	DW	013bH
	DW	013cH
	DW	013cH
	DW	013cH
	DW	013cH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013eH
	DW	013eH
	DW	013eH
	DW	013eH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	0140H
	DW	0140H
	DW	0140H
	DW	0140H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0172H
	DW	0172H
	DW	0172H
_loginv	DW	07fffH
	DW	07d13H
	DW	07a38H
	DW	0776eH
	DW	074b3H
	DW	07209H
	DW	06f6fH
	DW	06ce3H
	DW	06a67H
	DW	067f9H
	DW	06599H
	DW	06347H
	DW	06102H
	DW	05ecbH
	DW	05ca1H
	DW	05a84H
	DW	05873H
	DW	0566dH
	DW	05474H
	DW	05287H
	DW	050a4H
	DW	04ecdH
	DW	04d00H
	DW	04b3eH
	DW	04986H
	DW	047d8H
	DW	04634H
	DW	0449aH
	DW	04309H
	DW	04181H
	DW	04002H
	DW	03e8cH
	DW	03d1eH
	DW	03bb9H
	DW	03a5cH
	DW	03906H
	DW	037b9H
	DW	03673H
	DW	03535H
	DW	033feH
	DW	032ceH
	DW	031a5H
	DW	03083H
	DW	02f67H
	DW	02e52H
	DW	02d43H
	DW	02c3bH
	DW	02b38H
	DW	02a3bH
	DW	02945H
	DW	02853H
	DW	02768H
	DW	02681H
	DW	025a0H
	DW	024c4H
	DW	023edH
	DW	0231bH
	DW	0224eH
	DW	02185H
	DW	020c1H
	DW	02002H
	DW	01f47H
	DW	01e90H
	DW	01dddH
	DW	01d2fH
	DW	01c84H
	DW	01bddH
	DW	01b3aH
	DW	01a9bH
	DW	01a00H
	DW	01968H
	DW	018d3H
	DW	01842H
	DW	017b4H
	DW	0172aH
	DW	016a2H
	DW	0161eH
	DW	0159dH
	DW	0151eH
	DW	014a3H
	DW	0142aH
	DW	013b4H
	DW	01341H
	DW	012d1H
	DW	01263H
	DW	011f7H
	DW	0118eH
	DW	01127H
	DW	010c3H
	DW	01061H
	DW	01001H
	DW	0fa4H
	DW	0f48H
	DW	0eefH
	DW	0e98H
	DW	0e42H
	DW	0defH
	DW	0d9dH
	DW	0d4eH
	DW	0d00H
	DW	0cb4H
	DW	0c6aH
	DW	0c21H
	DW	0bdaH
	DW	0b95H
	DW	0b51H
	DW	0b0fH
	DW	0aceH
	DW	0a8fH
	DW	0a52H
	DW	0a15H
	DW	09daH
	DW	09a1H
	DW	0968H
	DW	0931H
	DW	08fcH
	DW	08c7H
	DW	0894H
	DW	0862H
	DW	0831H
	DW	0801H
	DW	07d2H
	DW	07a4H
	DW	0778H
	DW	074cH
	DW	0721H
	DW	06f7H
	DW	06cfH
	DW	06a7H
	DW	0680H
	DW	065aH
	DW	0635H
	DW	0611H
	DW	05edH
	DW	05caH
	DW	05a9H
	DW	0588H
	DW	0567H
	DW	0548H
	DW	0529H
	DW	050bH
	DW	04edH
	DW	04d0H
	DW	04b4H
	DW	0499H
	DW	047eH
	DW	0463H
	DW	044aH
	DW	0431H
	DW	0418H
	DW	0400H
	DW	03e9H
	DW	03d2H
	DW	03bcH
	DW	03a6H
	DW	0390H
	DW	037cH
	DW	0367H
	DW	0353H
	DW	0340H
	DW	032dH
	DW	031aH
	DW	0308H
	DW	02f6H
	DW	02e5H
	DW	02d4H
	DW	02c4H
	DW	02b3H
	DW	02a4H
	DW	0294H
	DW	0285H
	DW	0276H
	DW	0268H
	DW	025aH
	DW	024cH
	DW	023fH
	DW	0232H
	DW	0225H
	DW	0218H
	DW	020cH
	DW	0200H
	DW	01f4H
	DW	01e9H
	DW	01deH
	DW	01d3H
	DW	01c8H
	DW	01beH
	DW	01b3H
	DW	01a9H
	DW	01a0H
	DW	0196H
	DW	018dH
	DW	0184H
	DW	017bH
	DW	0172H
	DW	016aH
	DW	0162H
	DW	015aH
	DW	0152H
	DW	014aH
_DATA	ENDS
CONST	SEGMENT
_int_volume_table DD 00H
	DD	042fH
	DD	0456H
	DD	047dH
	DD	04a5H
	DD	04cfH
	DD	04faH
	DD	0527H
	DD	0555H
	DD	0585H
	DD	05b7H
	DD	05ebH
	DD	0620H
	DD	0657H
	DD	0690H
	DD	06cbH
	DD	0708H
	DD	0747H
	DD	0789H
	DD	07cdH
	DD	0813H
	DD	085cH
	DD	08a7H
	DD	08f5H
	DD	0945H
	DD	0999H
	DD	09efH
	DD	0a48H
	DD	0aa5H
	DD	0b05H
	DD	0b68H
	DD	0bcfH
	DD	0c39H
	DD	0ca7H
	DD	0d19H
	DD	0d8eH
	DD	0e08H
	DD	0e87H
	DD	0f09H
	DD	0f91H
	DD	0101dH
	DD	010aeH
	DD	01144H
	DD	011dfH
	DD	01280H
	DD	01326H
	DD	013d3H
	DD	01485H
	DD	0153eH
	DD	015fdH
	DD	016c2H
	DD	0178fH
	DD	01863H
	DD	0193fH
	DD	01a22H
	DD	01b0dH
	DD	01c00H
	DD	01cfcH
	DD	01e01H
	DD	01f0fH
	DD	02026H
	DD	02148H
	DD	02273H
	DD	023a9H
	DD	024eaH
	DD	02636H
	DD	0278eH
	DD	028f1H
	DD	02a62H
	DD	02bdfH
	DD	02d6aH
	DD	02f02H
	DD	030a9H
	DD	0325fH
	DD	03424H
	DD	035f9H
	DD	037dfH
	DD	039d6H
	DD	03bdeH
	DD	03df9H
	DD	04026H
	DD	04267H
	DD	044bdH
	DD	04727H
	DD	049a7H
	DD	04c3eH
	DD	04eecH
	DD	051b2H
	DD	05491H
	DD	0578aH
	DD	05a9dH
	DD	05dccH
	DD	06118H
	DD	06482H
	DD	0680aH
	DD	06bb2H
	DD	06f7bH
	DD	07366H
	DD	07774H
	DD	07ba7H
	DD	07fffH
	DD	0847dH
	DD	08923H
	DD	08df3H
	DD	092efH
	DD	09817H
	DD	09d6eH
	DD	0a2f4H
	DD	0a8adH
	DD	0ae98H
	DD	0b4b9H
	DD	0bb11H
	DD	0c1a2H
	DD	0c86eH
	DD	0cf77H
	DD	0d6bfH
	DD	0de49H
	DD	0e616H
	DD	0ee2aH
	DD	0f686H
	DD	0ffffH
	DD	010822H
	DD	011167H
	DD	011b00H
	DD	0124efH
	DD	012f37H
	DD	0139dcH
	DD	0144e0H
	DD	015047H
	DD	015c15H
	DD	01684dH
	DD	0174f2H
	DD	018209H
	DD	018f96H
	DD	019d9dH
	DD	01ac21H
	DD	01bb28H
	DD	01cab6H
	DD	01dad0H
	DD	01eb7bH
	DD	01ffffH
CONST	ENDS
PUBLIC	_d2pole_cf45
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_cf45 PROC NEAR

; 112  : {

  00000	56		 push	 esi

; 113  :   S16 acoef;
; 114  : 
; 115  :   /********************************************************************/
; 116  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 117  :   /*  10 KHz.                                                         */
; 118  :   /********************************************************************/
; 119  : 
; 120  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	83 f8 01	 cmp	 eax, 1
  0000a	75 21		 jne	 SHORT $L71497

; 121  :   {
; 122  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  0000c	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00010	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 123  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  00015	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0001a	0f af c2	 imul	 eax, edx
  0001d	0f af ca	 imul	 ecx, edx
  00020	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00023	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00026	24 fe		 and	 al, -2			; fffffffeH
  00028	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 124  :   }
; 125  :   else

  0002b	eb 28		 jmp	 SHORT $L71501
$L71497:

; 126  :   {
; 127  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $L71990

; 128  :     {
; 129  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00031	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00035	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 130  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0003a	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0003f	0f af c2	 imul	 eax, edx
  00042	0f af ca	 imul	 ecx, edx
  00045	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00048	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0004b	eb 08		 jmp	 SHORT $L71501
$L71990:
  0004d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00051	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71501:

; 131  :     }
; 132  :   }
; 133  : 
; 134  :   /********************************************************************/
; 135  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 136  :   /********************************************************************/
; 137  : 
; 138  :   if ( frequency >= 4500 )

  00055	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00059	7c 14		 jl	 SHORT $L71504

; 139  :   {
; 140  :     *bcoef = 0;

  0005b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _bcoef$[esp]

; 141  :     *ccoef = 0;

  0005f	8b 54 24 10	 mov	 edx, DWORD PTR _ccoef$[esp]
  00063	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00068	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 142  :   }
; 143  :   else

  0006d	eb 4d		 jmp	 SHORT $L71505
$L71504:

; 144  :   {
; 145  :     /******************************************************************/
; 146  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 147  :     /******************************************************************/
; 148  : 
; 149  :     radius = radius_table[bandwidth >> 3];

  0006f	0f bf c9	 movsx	 ecx, cx

; 150  : 
; 151  :     /******************************************************************/
; 152  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 153  :     /******************************************************************/
; 154  : 
; 155  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00072	0f bf d0	 movsx	 edx, ax
  00075	c1 f9 03	 sar	 ecx, 3
  00078	c1 fa 03	 sar	 edx, 3
  0007b	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00083	57		 push	 edi
  00084	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  0008c	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx

; 156  : 
; 157  :     /******************************************************************/
; 158  :     /*  Let ccoef = - r^2                                             */
; 159  :     /******************************************************************/
; 160  : 
; 161  :     *ccoef = - frac4mul( radius, radius );

  00093	8b 54 24 14	 mov	 edx, DWORD PTR _ccoef$[esp+4]
  00097	0f bf c9	 movsx	 ecx, cx
  0009a	0f af c1	 imul	 eax, ecx
  0009d	8b 4c 24 10	 mov	 ecx, DWORD PTR _bcoef$[esp+4]
  000a1	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax
  000a7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  000ae	8b f8		 mov	 edi, eax
  000b0	0f af f8	 imul	 edi, eax
  000b3	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  000b6	f7 df		 neg	 edi
  000b8	66 89 3a	 mov	 WORD PTR [edx], di
  000bb	5f		 pop	 edi
$L71505:

; 162  :   }
; 163  : 
; 164  :   /********************************************************************/
; 165  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 166  :   /********************************************************************/
; 167  : 
; 168  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  000bc	66 b8 00 10	 mov	 ax, 4096		; 00001000H
  000c0	66 2b 01	 sub	 ax, WORD PTR [ecx]
  000c3	66 2b 02	 sub	 ax, WORD PTR [edx]

; 169  :   
; 170  :   /********************************************************************/
; 171  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 172  :   /*  resonator in the high-order bits.                               */
; 173  :   /********************************************************************/
; 174  : 
; 175  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 176  : 
; 177  :   return( acoef );

  000c6	0f bf 54 24 1c	 movsx	 edx, WORD PTR _gain$[esp]
  000cb	66 89 86 28 02
	00 00		 mov	 WORD PTR [esi+552], ax
  000d2	5e		 pop	 esi
  000d3	0f bf c0	 movsx	 eax, ax
  000d6	0f af c2	 imul	 eax, edx
  000d9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  000dc	24 fe		 and	 al, -2			; fffffffeH

; 178  : }

  000de	c3		 ret	 0
_d2pole_cf45 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_cf123
_TEXT	SEGMENT
_pVtm_t$ = 8
_pKsd_t$ = 12
_bcoef$ = 16
_ccoef$ = 20
_frequency$ = 24
_bandwidth$ = 28
_gain$ = 32
_d2pole_cf123 PROC NEAR

; 203  : {

  000e0	56		 push	 esi

; 204  :   S16 acoef;
; 205  : 
; 206  :   /********************************************************************/
; 207  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 208  :   /*  10 KHz.                                                         */
; 209  :   /********************************************************************/
; 210  : 
; 211  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  000e1	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  000e5	8b 06		 mov	 eax, DWORD PTR [esi]
  000e7	83 f8 01	 cmp	 eax, 1
  000ea	75 21		 jne	 SHORT $L71526

; 212  :   {
; 213  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  000ec	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  000f0	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 214  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  000f5	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  000fa	0f af c2	 imul	 eax, edx
  000fd	0f af ca	 imul	 ecx, edx
  00100	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00103	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00106	24 fe		 and	 al, -2			; fffffffeH
  00108	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 215  :   }
; 216  :   else

  0010b	eb 28		 jmp	 SHORT $L71530
$L71526:

; 217  :   {
; 218  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0010d	85 c0		 test	 eax, eax
  0010f	75 1c		 jne	 SHORT $L71992

; 219  :     {
; 220  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00111	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00115	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 221  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0011a	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0011f	0f af c2	 imul	 eax, edx
  00122	0f af ca	 imul	 ecx, edx
  00125	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00128	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0012b	eb 08		 jmp	 SHORT $L71530
$L71992:
  0012d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00131	8b 44 24 18	 mov	 eax, DWORD PTR _frequency$[esp]
$L71530:

; 222  :     }
; 223  :   }
; 224  : 
; 225  :   /********************************************************************/
; 226  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 227  :   /********************************************************************/
; 228  : 
; 229  :   if ( frequency >= 4500 )

  00135	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00139	7c 11		 jl	 SHORT $L71533

; 230  :   {
; 231  :     frequency = pKsd_t->uiSampleRate >> 1;

  0013b	8b 44 24 0c	 mov	 eax, DWORD PTR _pKsd_t$[esp]
  0013f	8b 88 f0 03 00
	00		 mov	 ecx, DWORD PTR [eax+1008]
  00145	8b c1		 mov	 eax, ecx
  00147	d1 e8		 shr	 eax, 1

; 232  :     bandwidth = pKsd_t->uiSampleRate >> 2;

  00149	c1 e9 02	 shr	 ecx, 2
$L71533:

; 233  :   }
; 234  : 
; 235  :   /********************************************************************/
; 236  :   /*  calculate radius = exp( -pi * T * bandwidth ).                  */
; 237  :   /********************************************************************/
; 238  : 
; 239  :   radius = radius_table[bandwidth >> 3];

  0014c	0f bf c9	 movsx	 ecx, cx

; 240  : 
; 241  :   /********************************************************************/
; 242  :   /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )               */
; 243  :   /********************************************************************/
; 244  : 
; 245  :   *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  0014f	0f bf d0	 movsx	 edx, ax
  00152	c1 f9 03	 sar	 ecx, 3
  00155	c1 fa 03	 sar	 edx, 3
  00158	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00160	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  00168	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  0016f	8b 54 24 10	 mov	 edx, DWORD PTR _bcoef$[esp]
  00173	0f bf c9	 movsx	 ecx, cx
  00176	0f af c1	 imul	 eax, ecx
  00179	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0017c	66 89 02	 mov	 WORD PTR [edx], ax

; 246  : 
; 247  :   /********************************************************************/
; 248  :   /*  Let ccoef = - r^2                                               */
; 249  :   /********************************************************************/
; 250  : 
; 251  :   *ccoef = - frac4mul( radius, radius );

  0017f	8b 4c 24 14	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00183	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0018a	0f af c0	 imul	 eax, eax
  0018d	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00190	f7 d8		 neg	 eax
  00192	66 89 01	 mov	 WORD PTR [ecx], ax

; 252  : 
; 253  :   /********************************************************************/
; 254  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 255  :   /********************************************************************/
; 256  : 
; 257  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  00195	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  00199	66 2b 0a	 sub	 cx, WORD PTR [edx]

; 258  :   
; 259  :   /********************************************************************/
; 260  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 261  :   /*  resonator in the high-order bits.                               */
; 262  :   /********************************************************************/
; 263  : 
; 264  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 265  :   
; 266  :   return( acoef );

  0019c	0f bf 54 24 20	 movsx	 edx, WORD PTR _gain$[esp]
  001a1	2b c8		 sub	 ecx, eax
  001a3	0f bf c1	 movsx	 eax, cx
  001a6	0f af c2	 imul	 eax, edx
  001a9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  001ac	66 89 8e 28 02
	00 00		 mov	 WORD PTR [esi+552], cx
  001b3	24 fe		 and	 al, -2			; fffffffeH
  001b5	5e		 pop	 esi

; 267  : }

  001b6	c3		 ret	 0
_d2pole_cf123 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_pf
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_pf PROC NEAR

; 290  :   S16 acoef;
; 291  : 
; 292  :   /********************************************************************/
; 293  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 294  :   /*  10 KHz.                                                         */
; 295  :   /********************************************************************/
; 296  : 
; 297  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  001c0	8b 54 24 04	 mov	 edx, DWORD PTR _pVtm_t$[esp-4]
  001c4	56		 push	 esi
  001c5	8b 02		 mov	 eax, DWORD PTR [edx]
  001c7	83 f8 01	 cmp	 eax, 1
  001ca	75 21		 jne	 SHORT $L71552

; 298  :   {
; 299  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  001cc	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001d0	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 300  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  001d5	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001da	0f af c6	 imul	 eax, esi
  001dd	0f af ce	 imul	 ecx, esi
  001e0	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  001e3	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  001e6	24 fe		 and	 al, -2			; fffffffeH
  001e8	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 301  :   }
; 302  :   else

  001eb	eb 28		 jmp	 SHORT $L71556
$L71552:

; 303  :   {
; 304  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  001ed	85 c0		 test	 eax, eax
  001ef	75 1c		 jne	 SHORT $L71994

; 305  :     {
; 306  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  001f1	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001f5	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 307  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  001fa	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001ff	0f af c6	 imul	 eax, esi
  00202	0f af ce	 imul	 ecx, esi
  00205	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00208	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0020b	eb 08		 jmp	 SHORT $L71556
$L71994:
  0020d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00211	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71556:

; 308  :     }
; 309  :   }
; 310  : 
; 311  :   /********************************************************************/
; 312  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 313  :   /********************************************************************/
; 314  : 
; 315  :   if ( frequency >= 4500 )

  00215	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00219	7c 16		 jl	 SHORT $L71559

; 316  :   {
; 317  :     *bcoef = 0;

  0021b	8b 44 24 0c	 mov	 eax, DWORD PTR _bcoef$[esp]

; 318  :     *ccoef = 0;

  0021f	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00223	5e		 pop	 esi
  00224	66 c7 00 00 00	 mov	 WORD PTR [eax], 0
  00229	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 319  :     acoef = 0;

  0022e	33 c0		 xor	 eax, eax

; 353  :   }
; 354  :   return( acoef );
; 355  : }

  00230	c3		 ret	 0
$L71559:

; 320  :   }
; 321  :   else
; 322  :   {
; 323  :     /******************************************************************/
; 324  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 325  :     /******************************************************************/
; 326  : 
; 327  :     radius = radius_table[bandwidth >> 3];

  00231	0f bf c9	 movsx	 ecx, cx

; 328  : 
; 329  :     /******************************************************************/
; 330  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 331  :     /******************************************************************/
; 332  : 
; 333  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00234	0f bf c0	 movsx	 eax, ax
  00237	c1 f9 03	 sar	 ecx, 3
  0023a	c1 f8 03	 sar	 eax, 3
  0023d	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00245	8b 74 24 0c	 mov	 esi, DWORD PTR _bcoef$[esp]
  00249	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[eax*2]
  00251	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  00258	0f bf c9	 movsx	 ecx, cx
  0025b	0f af c1	 imul	 eax, ecx
  0025e	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00261	66 89 06	 mov	 WORD PTR [esi], ax

; 334  : 
; 335  :     /******************************************************************/
; 336  :     /*  Let ccoef = - r^2                                             */
; 337  :     /******************************************************************/
; 338  : 
; 339  :     *ccoef = - frac4mul( radius, radius );

  00264	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00268	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0026f	0f af c0	 imul	 eax, eax
  00272	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00275	f7 d8		 neg	 eax
  00277	66 89 01	 mov	 WORD PTR [ecx], ax

; 340  : 
; 341  :     /******************************************************************/
; 342  :     /*  Let acoef = 1.0 - bcoef - ccoef                               */
; 343  :     /******************************************************************/
; 344  : 
; 345  :     pVtm_t->temp = 4096 - *bcoef - *ccoef;

  0027a	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  0027e	66 2b 0e	 sub	 cx, WORD PTR [esi]
  00281	5e		 pop	 esi
  00282	2b c8		 sub	 ecx, eax
  00284	66 89 8a 28 02
	00 00		 mov	 WORD PTR [edx+552], cx

; 346  :   
; 347  :     /******************************************************************/
; 348  :     /*  Adjust "acoef" by the gain term to keep output signal of the  */
; 349  :     /*  resonator in the high-order bits.                             */
; 350  :     /******************************************************************/
; 351  : 
; 352  :     acoef = frac4mul( gain, pVtm_t->temp ) << 1;

  0028b	0f bf 54 24 18	 movsx	 edx, WORD PTR _gain$[esp-4]
  00290	0f bf c1	 movsx	 eax, cx
  00293	0f af c2	 imul	 eax, edx
  00296	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  00299	24 fe		 and	 al, -2			; fffffffeH

; 353  :   }
; 354  :   return( acoef );
; 355  : }

  0029b	c3		 ret	 0
_d2pole_pf ENDP
_TEXT	ENDS
PUBLIC	_Notch_fc
_TEXT	SEGMENT
_bcoef$ = 12
_ccoef$ = 16
_acoef$ = 20
_frequency$ = 24
_bandwidth$ = 28
_gain$ = 32
_Notch_fc PROC NEAR

; 367  :     
; 368  :     /******************************************************************/
; 369  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 370  :     /******************************************************************/
; 371  : 
; 372  :     radius = radius_table[bandwidth >> 3];

  002a0	0f bf 44 24 18	 movsx	 eax, WORD PTR _bandwidth$[esp-4]

; 373  : 
; 374  :     /******************************************************************/
; 375  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 376  :     /******************************************************************/
; 377  : 
; 378  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  002a5	0f bf 54 24 14	 movsx	 edx, WORD PTR _frequency$[esp-4]
  002aa	c1 f8 03	 sar	 eax, 3
  002ad	c1 fa 03	 sar	 edx, 3
  002b0	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[eax*2]
  002b8	8d 04 55 00 00
	00 00		 lea	 eax, DWORD PTR _cosine_table[edx*2]
  002bf	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  002c6	0f bf c9	 movsx	 ecx, cx
  002c9	0f bf 10	 movsx	 edx, WORD PTR [eax]
  002cc	0f af d1	 imul	 edx, ecx
  002cf	8b 4c 24 08	 mov	 ecx, DWORD PTR _bcoef$[esp-4]
  002d3	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  002d6	66 89 11	 mov	 WORD PTR [ecx], dx

; 379  : 
; 380  :     /******************************************************************/
; 381  :     /*  Let ccoef = - r^2                                             */
; 382  :     /******************************************************************/
; 383  : 
; 384  :     *ccoef = - frac4mul( radius, radius );

  002d9	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _radius
  002e0	8b d1		 mov	 edx, ecx
  002e2	0f af d1	 imul	 edx, ecx
  002e5	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ccoef$[esp-4]
  002e9	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  002ec	f7 da		 neg	 edx
  002ee	66 89 11	 mov	 WORD PTR [ecx], dx

; 385  : 
; 386  :     /******************************************************************/
; 387  :     /*  Let acoef = 1.0 - bcoef - ccoef                               */
; 388  :     /******************************************************************/
; 389  : 
; 390  :     *acoef = - frac4mul(gain,cosine_table[ frequency >> 3 ]);

  002f1	8b 4c 24 10	 mov	 ecx, DWORD PTR _acoef$[esp-4]
  002f5	0f bf 10	 movsx	 edx, WORD PTR [eax]
  002f8	0f bf 44 24 1c	 movsx	 eax, WORD PTR _gain$[esp-4]
  002fd	0f af d0	 imul	 edx, eax
  00300	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00303	f7 da		 neg	 edx
  00305	66 89 11	 mov	 WORD PTR [ecx], dx

; 391  :   
; 392  :    
; 393  : }

  00308	c3		 ret	 0
_Notch_fc ENDP
_TEXT	ENDS
PUBLIC	_speech_waveform_generator
EXTRN	_noisec:WORD
EXTRN	_ranmul:DWORD
EXTRN	_ranadd:DWORD
EXTRN	_OP_SetEvent:NEAR
EXTRN	_OP_Sleep:NEAR
_TEXT	SEGMENT
_vol_att$ = -4
_phTTS$ = 8
_ns$ = -48
_r3pg$ = -32
_r2pg$ = -80
_ABlin$ = -52
_APlin$ = -48
_noise$ = -80
_T0inS4$ = -76
_F1inHZ$ = -44
_F2inHZ$ = -36
_F3inHZ$ = -40
_FZinHZ$ = -72
_B1inHZ$ = -16
_B2inHZ$ = -20
_B3inHZ$ = -24
_AVinDB$ = -28
_TILTDB$ = -84
_r2pa$ = -8
_r2pb$ = -86
_r2pc$ = -88
_r3pa$ = -12
_r3pb$ = -90
_r3pc$ = -92
_r4pa$ = -56
_r5pa$ = -60
_r6pa$ = -68
_speech_waveform_generator PROC NEAR

; 445  : {

  00310	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 446  :   
; 447  :   S16 *variabpars;
; 448  : 
; 449  :   S32 temp0;
; 450  :   S32 temp1;
; 451  :   S16 b2p;       /*  Bandwidth of parallel 2th formant *//* MVP MI moved from vtm.h */
; 452  :   S16 b3p;       /*  Bandwidth of parallel 3th formant *//* MVP MI moved from vtm.h */
; 453  :   S16 out;       /*  Output signal from the vocal tract model*/ 
; 454  : #ifndef LOWCOMPUTE // NAL warning removal
; 455  :   S16 nsr4;      /*  Counter of 4 samples in glottal source loop        */ 
; 456  : #endif
; 457  :   U32 ns;        /*  Number of samples into current frame            */
; 458  :   S16 r3pg;      /*  amp of parameter F3 for iir filter                 */
; 459  :   S16 r2pg;      /*  amp of parameter F2 for iir filter                 */
; 460  :   S16 ABlin;     /*  AB linear ampl. control                            */
; 461  :   S16 APlin;     /*  AP linear ampl. control                            */
; 462  :   S16 voice;     /*  Current sample of voicing waveform                 */ 
; 463  :   S16 noise;     /*  Output of random number generator                  */
; 464  :   S16 fnp;
; 465  :   S16 bnp;
; 466  : 
; 467  : #ifdef NEW_NOISE
; 468  :   S16 noiseb;	//eab 10/12/98 New noise variable
; 469  :   S16 noisef;
; 470  : #endif
; 471  :   S16 about;     /*  Output signal from bypass path                     */
; 472  :   S16 rnzout;    /*  Output signal from nasal zero                      */
; 473  :   S16 T0inS4;  /*  Voicing fund freq in Hz*10,      500 to 1650         */
; 474  : #ifdef NEW_VTM
; 475  :   S16 FNPinHZ;   /*Frequency of moveable nasal formant*/
; 476  :   S16 Glot_step;	/*step for voicing source to make almost sinusoidal for nasal variants*/
; 477  : //23  BATS 731 EAB 7/31/98 Init glotnoise
; 478  :   S16 FpBw=80;
; 479  :   S16 FzBw=80;
; 480  :   
; 481  :   
; 482  : #endif
; 483  : 
; 484  :   S16 F1inHZ;  /*  First formant freq in Hz,        200 to 1300         */
; 485  :   S16 F2inHZ;  /*  Second formant freq in Hz,       550 to 3000         */
; 486  :   S16 F3inHZ;  /*  Third formant freq in Hz,       1200 to 4800         */
; 487  :   S16 FZinHZ;  /*  Nasal zero freq in Hz,           248 to  528         */
; 488  :   S16 fzgaina[20] ={
; 489  : 		200,200,200,200,200,200,800,800,800,800,
; 490  : 			1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
; 491  :   S16 B1inHZ;  /*  First formant bw in Hz,           40 to 1000         */
; 492  :   S16 B2inHZ;  /*  Second formant bw in Hz,          40 to 1000         */
; 493  :   S16 B3inHZ;  /*  Third formant bw in Hz,           40 to 1000         */
; 494  :   S16 AVinDB;  /*  Amp of voicing in dB,             0 to   70          */
; 495  :   S16 APinDB;  /*  Amp of aspiration in dB,          0 to   70          */
; 496  :   S16 A2inDB;  /*  Amp of F2 frication in dB,        0 to   80          */
; 497  :   S16 A3inDB;  /*  Amp of F3 frication in dB,        0 to   80          */
; 498  :   S16 A4inDB;  /*  Amp of F4 frication in dB,        0 to   80          */
; 499  :   S16 A5inDB;  /*  Amp of F5 frication in dB,        0 to   80          */
; 500  :   S16 A6inDB;  /*  Amp of F6                         0 to   80          */
; 501  :   S16 ABinDB;  /*  Amp of bypass fric. in dB,        0 to   80          */
; 502  :   S16 TILTDB;  /*  Voicing spectral tilt in dB,      0 to   24          */
; 503  :   
; 504  : #ifdef NEW_TILT
; 505  :   S16 rtltg;    //10/13/98 Parameter for new tilt filter
; 506  :   S16 Ftilt;
; 507  :   S16 BWtilt;
; 508  : 
; 509  : #endif
; 510  : 
; 511  :   S16 r2pa;      /*  "a" coef for parallel 2nd formant                  */
; 512  :   S16 r2pb;      /*  "b" coefficient                                    */
; 513  :   S16 r2pc;      /*  "c" coefficient                                    */
; 514  : 
; 515  :   S16 r3pa;      /*  "a" coef for parallel 3rd formant                  */
; 516  :   S16 r3pb;      /*  "b" coefficient                                    */
; 517  :   S16 r3pc;      /*  "c" coefficient                                    */
; 518  :   S16 r4pa;      /*  "a" coef for parallel 4th formant                  */
; 519  :   S16 r5pa;      /*  "a" coef for parallel 5th formant                  */
; 520  :   S16 r6pa;      /*  "a" coef for parallel 6th formant                  */
; 521  :   S16 r6pb = -5702; //MVP : According to me it is a constant BILL       /*  "b" coefficient */
; 522  :   S16 r6pc = -1995; //MVP : According to me it is a constant BILL       /*  "c" coefficient */
; 523  : 
; 524  : 
; 525  : #ifdef NEW_VTM
; 526  : 
; 527  : //  S16 abreth;
; 528  :   int ftob=0; 
; 529  :   int area = 0;
; 530  : 
; 531  : 
; 532  : #endif
; 533  : 
; 534  : #ifndef LOWCOMPUTE
; 535  : #ifdef UPGRADES1999 // NAL warning removal
; 536  :   S16 temp3;
; 537  :   //S16 logf1;
; 538  : #endif
; 539  : #endif
; 540  : #ifdef LOWCOMPUTE
; 541  :   S16 tmp;
; 542  : #endif
; 543  : #if defined UPGRADES1999 || defined NEW_VTM
; 544  : 
; 545  : 	
; 546  : 	S16 ampsum=0; 
; 547  : 
; 548  : 
; 549  : //    S16 OPENQ;		/* Open quotient */
; 550  : 	
; 551  : 	///* dynamic breathiness related to open quoient */
; 552  :  		
; 553  : #endif
; 554  : 		
; 555  : 	int vol_att=32767;
; 556  :   
; 557  : #ifdef UPGRADES1999
; 558  :  
; 559  : #endif
; 560  : 
; 561  :   /* MVP MI */
; 562  :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  00313	8b 44 24 60	 mov	 eax, DWORD PTR _phTTS$[esp+88]
  00317	53		 push	 ebx
  00318	55		 push	 ebp
  00319	56		 push	 esi
  0031a	8b 70 14	 mov	 esi, DWORD PTR [eax+20]

; 563  :   PKSD_T pKsd_t = phTTS->pKernelShareData;

  0031d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00320	57		 push	 edi
  00321	89 44 24 2c	 mov	 DWORD PTR -64+[esp+108], eax

; 564  : 
; 565  : 
; 566  :   /********************************************************************/
; 567  :   /********************************************************************/
; 568  :   /*  READ VARIABLE PARAMETERS FOR ONE FRAME (64 SAMPLES) OF SPEECH   */
; 569  :   /*  Read 18 words of speech frame definition into temp store and    */
; 570  :   /*  move some parameters into active use immediately (voice-excited */
; 571  :   /*  ones are updated pitch synchronously to avoid waveform          */
; 572  :   /*  glitches ).                                                     */
; 573  :   /********************************************************************/
; 574  :   /********************************************************************/
; 575  : 
; 576  :   variabpars = &(pVtm_t->parambuff[1]);
; 577  : 
; 578  :   /*EAB If we just loaded a speaker def zero all vocal tract gains
; 579  : 		so that this looks like a silence packet (last packet of previous frame
; 580  : 		stuck here*/
; 581  : 
; 582  : /* EAB 26-MAY-1997 This code is for a problem of occasional popping. The problem was traced to two
; 583  : unrelated problems creating the same effect. First avlind was initalized but avlin was not. Depending
; 584  : on exactly when in the glotal phase and the present state of voicing the code was stopped it could 
; 585  : cause a non-zero value to propagate into the vocal tract during what should have been silence.
; 586  : The second bug is related to the smoothing variables not all be initalized properly so that it's 
; 587  : possible to smooth in a non-zero value into the silence packets that of necessity always follows a
; 588  : speaker definiton packet. To avoid this problem the code below forces the first two frames following
; 589  : a speaker definition back into being real silence frames(which they are suppose to be) with little 
; 590  : overhead fixing it here is just as functional as in PH but a lot safer and easier */
; 591  : 
; 592  : 	pKsd_t->vol_att = phTTS->pKernelShareData->vol_att;

  00325	8b 88 e0 03 00
	00		 mov	 ecx, DWORD PTR [eax+992]

; 593  : 	if (pKsd_t->vol_att>141)

  0032b	81 f9 8d 00 00
	00		 cmp	 ecx, 141		; 0000008dH
  00331	89 88 e0 03 00
	00		 mov	 DWORD PTR [eax+992], ecx
  00337	7e 0a		 jle	 SHORT $L71685

; 594  : 		pKsd_t->vol_att = 141;

  00339	c7 80 e0 03 00
	00 8d 00 00 00	 mov	 DWORD PTR [eax+992], 141 ; 0000008dH
$L71685:

; 595  : 	if (pKsd_t->vol_att <= 0)

  00343	8b 88 e0 03 00
	00		 mov	 ecx, DWORD PTR [eax+992]
  00349	33 d2		 xor	 edx, edx
  0034b	3b ca		 cmp	 ecx, edx
  0034d	7f 06		 jg	 SHORT $L71686

; 596  : 		pKsd_t->vol_att=0;

  0034f	89 90 e0 03 00
	00		 mov	 DWORD PTR [eax+992], edx
$L71686:

; 597  : 	
; 598  : 	vol_att=int_volume_table[pKsd_t->vol_att];

  00355	8b 80 e0 03 00
	00		 mov	 eax, DWORD PTR [eax+992]
  0035b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _int_volume_table[eax*4]

; 599  : 
; 600  :   if(pVtm_t->ldspdef == 1 )

  00362	8b 86 2c 02 00
	00		 mov	 eax, DWORD PTR [esi+556]
  00368	83 f8 01	 cmp	 eax, 1
  0036b	89 4c 24 68	 mov	 DWORD PTR _vol_att$[esp+108], ecx
  0036f	75 49		 jne	 SHORT $L71687

; 601  :   {
; 602  :    pVtm_t->ldspdef++;

  00371	c7 86 2c 02 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+556], 2

; 603  :    variabpars[OUT_AV]=0;

  0037b	66 89 96 e6 00
	00 00		 mov	 WORD PTR [esi+230], dx

; 604  :    variabpars[OUT_AP]=0;

  00382	66 89 96 d2 00
	00 00		 mov	 WORD PTR [esi+210], dx

; 605  :    variabpars[OUT_A2]=0;

  00389	66 89 96 d6 00
	00 00		 mov	 WORD PTR [esi+214], dx

; 606  :    variabpars[OUT_A3]=0;

  00390	66 89 96 d8 00
	00 00		 mov	 WORD PTR [esi+216], dx

; 607  :    variabpars[OUT_A4]=0;

  00397	66 89 96 da 00
	00 00		 mov	 WORD PTR [esi+218], dx

; 608  :    variabpars[OUT_A5]=0;

  0039e	66 89 96 dc 00
	00 00		 mov	 WORD PTR [esi+220], dx

; 609  :    variabpars[OUT_A6]=0;

  003a5	66 89 96 de 00
	00 00		 mov	 WORD PTR [esi+222], dx

; 610  :    variabpars[OUT_AB]=0;

  003ac	66 89 96 e0 00
	00 00		 mov	 WORD PTR [esi+224], dx

; 611  :    pVtm_t->avlin = 0;

  003b3	66 89 96 0a 02
	00 00		 mov	 WORD PTR [esi+522], dx
$L71687:

; 612  :   }
; 613  : 
; 614  :    if(pVtm_t->ldspdef >= 3)

  003ba	8b 86 2c 02 00
	00		 mov	 eax, DWORD PTR [esi+556]
  003c0	83 f8 03	 cmp	 eax, 3
  003c3	7c 07		 jl	 SHORT $L71688

; 615  : 	   pVtm_t->ldspdef --;

  003c5	48		 dec	 eax
  003c6	89 86 2c 02 00
	00		 mov	 DWORD PTR [esi+556], eax
$L71688:

; 616  :   /********************************************************************/
; 617  :   /********************************************************************/
; 618  :   /*                                                                  */
; 619  :   /*  Scaling for various sample rates is done in the following       */
; 620  :   /*  fashion.                                                        */
; 621  :   /*                                                                  */
; 622  :   /*  If the sample rate is modified then the formant frequencies,    */
; 623  :   /*  bandwidths, and the pitch period are all scaled. If the sample  */
; 624  :   /*  rate is decreased the fifth formant is eliminated, and the gain */
; 625  :   /*  r2pg is lowered to prevent overload.                            */
; 626  :   /*                                                                  */
; 627  :   /********************************************************************/
; 628  :   /********************************************************************/
; 629  : 
; 630  :   /********************************************************************/
; 631  :   /* T0inS4 is a time, so it should be scaled if fs != 10K.           */
; 632  :   /********************************************************************/
; 633  :   //variabpars[OUT_T0] =(short) (400000.0/variabpars[OUT_T0]);
; 634  :   T0inS4 = variabpars[OUT_T0];
; 635  : 
; 636  :   switch( pVtm_t->uiSampleRateChange )
; 637  :   {

  003cc	8b 06		 mov	 eax, DWORD PTR [esi]
  003ce	66 8b 8e e4 00
	00 00		 mov	 cx, WORD PTR [esi+228]
  003d5	2b c2		 sub	 eax, edx
  003d7	89 4c 24 20	 mov	 DWORD PTR _T0inS4$[esp+108], ecx
  003db	74 12		 je	 SHORT $L71693
  003dd	48		 dec	 eax
  003de	75 23		 jne	 SHORT $L71690

; 641  :     break;
; 642  : 
; 643  :   case SAMPLE_RATE_DECREASE:
; 644  : 
; 645  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 );

  003e0	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  003e4	0f bf c1	 movsx	 eax, cx
  003e7	0f af d0	 imul	 edx, eax
  003ea	c1 fa 0f	 sar	 edx, 15			; 0000000fH

; 646  :     break;

  003ed	eb 10		 jmp	 SHORT $L72168
$L71693:

; 638  :   case SAMPLE_RATE_INCREASE:
; 639  : 
; 640  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 ) << 1;

  003ef	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  003f3	0f bf c1	 movsx	 eax, cx
  003f6	0f af d0	 imul	 edx, eax
  003f9	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  003fc	83 e2 fe	 and	 edx, -2			; fffffffeH
$L72168:
  003ff	89 54 24 20	 mov	 DWORD PTR _T0inS4$[esp+108], edx
$L71690:

; 895  : 
; 896  :   /********************************************************************/
; 897  :   /********************************************************************/
; 898  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 899  :   /********************************************************************/
; 900  :   /********************************************************************/
; 901  : 
; 902  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  00403	0f bf 8e 22 01
	00 00		 movsx	 ecx, WORD PTR [esi+290]
  0040a	0f bf 96 d4 00
	00 00		 movsx	 edx, WORD PTR [esi+212]
  00411	0f af d1	 imul	 edx, ecx
  00414	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  00419	66 8b ae e2 00
	00 00		 mov	 bp, WORD PTR [esi+226]
  00420	2b c1		 sub	 eax, ecx
  00422	66 8b 9e de 00
	00 00		 mov	 bx, WORD PTR [esi+222]
  00429	8b f8		 mov	 edi, eax
  0042b	89 6c 24 18	 mov	 DWORD PTR _TILTDB$[esp+108], ebp
  0042f	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00432	c1 ff 04	 sar	 edi, 4
  00435	03 d7		 add	 edx, edi
  00437	66 8b be dc 00
	00 00		 mov	 di, WORD PTR [esi+220]
  0043e	89 54 24 40	 mov	 DWORD PTR _F1inHZ$[esp+108], edx
  00442	0f bf 96 e8 00
	00 00		 movsx	 edx, WORD PTR [esi+232]
  00449	0f af d1	 imul	 edx, ecx
  0044c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0044f	c1 f8 03	 sar	 eax, 3
  00452	03 d0		 add	 edx, eax
  00454	0f bf 86 ea 00
	00 00		 movsx	 eax, WORD PTR [esi+234]
  0045b	0f af c1	 imul	 eax, ecx
  0045e	66 8b 8e ee 00
	00 00		 mov	 cx, WORD PTR [esi+238]
  00465	89 54 24 48	 mov	 DWORD PTR _F2inHZ$[esp+108], edx
  00469	66 8b 96 f0 00
	00 00		 mov	 dx, WORD PTR [esi+240]
  00470	66 89 4c 24 5c	 mov	 WORD PTR _B1inHZ$[esp+108], cx
  00475	66 8b 8e e6 00
	00 00		 mov	 cx, WORD PTR [esi+230]
  0047c	66 89 54 24 58	 mov	 WORD PTR _B2inHZ$[esp+108], dx
  00481	66 8b 96 da 00
	00 00		 mov	 dx, WORD PTR [esi+218]
  00488	66 89 4c 24 50	 mov	 WORD PTR _AVinDB$[esp+108], cx
  0048d	66 8b 8e d8 00
	00 00		 mov	 cx, WORD PTR [esi+216]
  00494	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00497	89 44 24 44	 mov	 DWORD PTR _F3inHZ$[esp+108], eax
  0049b	66 8b 86 f2 00
	00 00		 mov	 ax, WORD PTR [esi+242]
  004a2	66 89 44 24 54	 mov	 WORD PTR _B3inHZ$[esp+108], ax
  004a7	66 8b 86 d6 00
	00 00		 mov	 ax, WORD PTR [esi+214]
  004ae	66 85 ed	 test	 bp, bp
  004b1	7d 0a		 jge	 SHORT $L71704

; 647  : 
; 648  :   case NO_SAMPLE_RATE_CHANGE:
; 649  : 
; 650  :     break;
; 651  : 
; 652  :   default:
; 653  : 
; 654  :     break;
; 655  :   }
; 656  : 
; 657  :   /********************************************************************/
; 658  :   /*  Scale F1inHZ, F2inHZ, and F3inHZ up or down in frequency        */
; 659  :   /*  according to spdef fnscal. Use trick to reduce scaling          */
; 660  :   /*  performed if F1inHZ or F2inHZ is relatively low.                */
; 661  :   /********************************************************************/
; 662  : 
; 663  :   F1inHZ = variabpars[OUT_F1];
; 664  :   F1inHZ = frac4mul( F1inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 4);
; 665  :   F2inHZ = variabpars[OUT_F2];
; 666  :   F2inHZ = frac4mul( F2inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 3);
; 667  :   F3inHZ = variabpars[OUT_F3];
; 668  :   F3inHZ = frac4mul( F3inHZ, pVtm_t->fnscal );
; 669  : 
; 670  :   B1inHZ = variabpars[OUT_B1];
; 671  :   B2inHZ = variabpars[OUT_B2];
; 672  :   B3inHZ = variabpars[OUT_B3];
; 673  :   AVinDB = variabpars[OUT_AV];
; 674  :   APinDB = variabpars[OUT_AP];
; 675  :   A2inDB = variabpars[OUT_A2];
; 676  :   A3inDB = variabpars[OUT_A3];
; 677  :   A4inDB = variabpars[OUT_A4];
; 678  :   A5inDB = variabpars[OUT_A5];
; 679  :   A6inDB = variabpars[OUT_A6];
; 680  :   ABinDB = variabpars[OUT_AB];
; 681  : 
; 682  : #ifndef NEW_TILT
; 683  : 
; 684  :   TILTDB = variabpars[OUT_TLT] - 12;  /* Tilt in dB at 3 kHz */
; 685  : 	
; 686  : #else
; 687  : 
; 688  :   TILTDB = variabpars[OUT_TLT];
; 689  :   if(TILTDB < 0)
; 690  : 	  TILTDB= 1;	  

  004b3	c7 44 24 18 01
	00 00 00	 mov	 DWORD PTR _TILTDB$[esp+108], 1

; 691  :   if(TILTDB >= 40)

  004bb	eb 0e		 jmp	 SHORT $L71705
$L71704:
  004bd	66 83 fd 28	 cmp	 bp, 40			; 00000028H
  004c1	7c 08		 jl	 SHORT $L71705

; 692  : 	  TILTDB = 40;

  004c3	c7 44 24 18 28
	00 00 00	 mov	 DWORD PTR _TILTDB$[esp+108], 40 ; 00000028H
$L71705:

; 693  :   
; 694  : #endif
; 695  : #ifdef NEW_NOISE
; 696  :   APlin= amptable[APinDB ]; /*  Convert dB to linear        */
; 697  : #else
; 698  : 	APlin= amptable[APinDB + 10]; /*  Convert dB to linear        */

  004cb	0f bf ae d2 00
	00 00		 movsx	 ebp, WORD PTR [esi+210]
  004d2	66 8b 2c 6d 14
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+20]
  004da	66 89 6c 24 3c	 mov	 WORD PTR _APlin$[esp+108], bp

; 699  : #endif
; 700  : 
; 701  :   r2pg = amptable[A2inDB + 13]; /*  Convert dB to linear        */

  004df	0f bf e8	 movsx	 ebp, ax
  004e2	66 8b 2c 6d 1a
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+26]
  004ea	66 89 6c 24 1c	 mov	 WORD PTR _r2pg$[esp+108], bp

; 702  :   r3pg = amptable[A3inDB + 10]; /*  Convert dB to linear        */

  004ef	0f bf e9	 movsx	 ebp, cx
  004f2	66 8b 2c 6d 14
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+20]
  004fa	66 89 6c 24 4c	 mov	 WORD PTR _r3pg$[esp+108], bp

; 703  :   r4pa = amptable[A4inDB + 7];  /*  Convert dB to linear        */

  004ff	0f bf ea	 movsx	 ebp, dx
  00502	66 8b 2c 6d 0e
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+14]
  0050a	66 89 6c 24 34	 mov	 WORD PTR _r4pa$[esp+108], bp

; 704  :   r5pa = amptable[A5inDB + 6];  /*  Convert dB to linear        */

  0050f	0f bf ef	 movsx	 ebp, di
  00512	66 8b 2c 6d 0c
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+12]
  0051a	66 89 6c 24 30	 mov	 WORD PTR _r5pa$[esp+108], bp

; 705  :   r6pa = amptable[A6inDB + 5];  /*  Convert dB to linear        */

  0051f	0f bf eb	 movsx	 ebp, bx
  00522	66 8b 2c 6d 0a
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+10]
  0052a	66 89 6c 24 28	 mov	 WORD PTR _r6pa$[esp+108], bp

; 706  :   ABlin= amptable[ABinDB + 5];  /*  Convert dB to linear        */

  0052f	0f bf ae e0 00
	00 00		 movsx	 ebp, WORD PTR [esi+224]
  00536	66 8b 2c 6d 0a
	00 00 00	 mov	 bp, WORD PTR _amptable[ebp*2+10]
  0053e	66 89 6c 24 38	 mov	 WORD PTR _ABlin$[esp+108], bp

; 895  : 
; 896  :   /********************************************************************/
; 897  :   /********************************************************************/
; 898  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 899  :   /********************************************************************/
; 900  :   /********************************************************************/
; 901  : 
; 902  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  00543	66 8b ae e0 00
	00 00		 mov	 bp, WORD PTR [esi+224]
  0054a	03 eb		 add	 ebp, ebx
  0054c	03 ef		 add	 ebp, edi
  0054e	03 ea		 add	 ebp, edx
  00550	03 e9		 add	 ebp, ecx
  00552	03 e8		 add	 ebp, eax
  00554	66 85 ed	 test	 bp, bp
  00557	74 0c		 je	 SHORT $L71706

; 707  : 
; 708  :   ampsum = A2inDB + A3inDB + A4inDB + A5inDB + A6inDB + ABinDB;
; 709  :   if(ampsum)
; 710  : 	  pVtm_t->par_count=5;

  00559	c7 86 18 02 00
	00 05 00 00 00	 mov	 DWORD PTR [esi+536], 5

; 711  :   else

  00563	eb 11		 jmp	 SHORT $L71708
$L71706:

; 712  : 	  if(pVtm_t->par_count)

  00565	8b 86 18 02 00
	00		 mov	 eax, DWORD PTR [esi+536]
  0056b	85 c0		 test	 eax, eax
  0056d	74 07		 je	 SHORT $L71708

; 713  : 		  pVtm_t->par_count--;

  0056f	48		 dec	 eax
  00570	89 86 18 02 00
	00		 mov	 DWORD PTR [esi+536], eax
$L71708:

; 714  :  
; 715  : 
; 716  : #ifdef UPGRADES1999_OUT //EAB Cause's a re-init during breathiness which has ampsum=0
; 717  :   ampsum = A2inDB + A3inDB + A4inDB + A5inDB + A6inDB + ABinDB + APinDB + pVtm_t->avlind;
; 718  :  
; 719  : 	if (ampsum == 0) 
; 720  : 	{	
; 721  : 
; 722  : 		/* Always start plosive burst with */
; 723  : 		pVtm_t->randomx = 9;  /* same random sequence */
; 724  : 		/* random = 026541;  Set random number to initial seed */
; 725  : 	}
; 726  : #endif
; 727  : 
; 728  :   /********************************************************************/
; 729  :   /*  Scale the nasal anti-resonator frequency for the sample rate.   */
; 730  :   /********************************************************************/
; 731  : 
; 732  :   FZinHZ = variabpars[OUT_FZ];

  00576	66 8b 86 ec 00
	00 00		 mov	 ax, WORD PTR [esi+236]

; 733  : 
; 734  : #ifdef NEW_NASAL
; 735  : //	FNPinHZ= variabpars[OUT_FNP];
; 736  :   // 4/15/00 New code to control the nasal pole zero pair based on the area of opening
; 737  :   /* per the new stuff by Ken Stephens, Since the equaiotns are too diificult to type
; 738  :   see notes staring pg 122 in enginering notebook Force1 We will do this by sucessive approx
; 739  :   to deterimne how detailed the table needs to be
; 740  :   the area table is refernece by the area in cm2 tiems 10 *2 where the even numbers are the
; 741  :   FZ and the odd nymbers are the corresponding FNP's and by an index from 1 to 5
; 742  :   meaning from front to back*/
; 743  : 	
; 744  : 	ftob = 4;
; 745  : 	area = 8;
; 746  : 	FNPinHZ = 290;
; 747  : 	//FZinHZ = 500;
; 748  : 	FpBw = 80;
; 749  : 	FzBw = 80;
; 750  : 	Glot_step = 0;
; 751  : 	//B1inHZ = ;
; 752  : 	//B2inHZ = ;
; 753  : 	//B3inHZ = ;
; 754  : 
; 755  : #endif 
; 756  : 
; 757  :  
; 758  : 		fnp = 1250;
; 759  : 	
; 760  :  
; 761  : 
; 762  :   bnp = 120;
; 763  : 
; 764  :   pVtm_t->rnppa = (FZinHZ-290)>>1;
; 765  :     if(pVtm_t->rnppa)

  0057d	33 db		 xor	 ebx, ebx
  0057f	0f bf f8	 movsx	 edi, ax
  00582	89 44 24 24	 mov	 DWORD PTR _FZinHZ$[esp+108], eax
  00586	8d 87 de fe ff
	ff		 lea	 eax, DWORD PTR [edi-290]
  0058c	d1 f8		 sar	 eax, 1
  0058e	66 3b c3	 cmp	 ax, bx
  00591	66 89 86 e2 01
	00 00		 mov	 WORD PTR [esi+482], ax
  00598	74 1c		 je	 SHORT $L71710

; 766  : 	{
; 767  : 			pVtm_t->rnppa = pVtm_t->rnppa - (pVtm_t->rnppa >>2);

  0059a	66 8b d0	 mov	 dx, ax
  0059d	66 c1 fa 02	 sar	 dx, 2
  005a1	2b c2		 sub	 eax, edx

; 768  : 			
; 769  : 			if(pVtm_t->rnppa < 0)

  005a3	66 3b c3	 cmp	 ax, bx
  005a6	66 89 86 e2 01
	00 00		 mov	 WORD PTR [esi+482], ax
  005ad	7d 07		 jge	 SHORT $L71710

; 770  : 				pVtm_t->rnppa =0;

  005af	66 89 9e e2 01
	00 00		 mov	 WORD PTR [esi+482], bx
$L71710:

; 771  : 	}
; 772  : 
; 773  :   
; 774  :   d2pole_pf( pVtm_t,&pVtm_t->rnppb, &pVtm_t->rnppc, fnp, bnp, 0 );

  005b6	53		 push	 ebx
  005b7	6a 78		 push	 120			; 00000078H
  005b9	8d 86 e6 01 00
	00		 lea	 eax, DWORD PTR [esi+486]
  005bf	68 e2 04 00 00	 push	 1250			; 000004e2H
  005c4	8d 8e e4 01 00
	00		 lea	 ecx, DWORD PTR [esi+484]
  005ca	50		 push	 eax
  005cb	51		 push	 ecx
  005cc	56		 push	 esi
  005cd	e8 00 00 00 00	 call	 _d2pole_pf

; 775  : 
; 776  : 
; 777  : 
; 778  :   switch( pVtm_t->uiSampleRateChange )
; 779  :   {

  005d2	8b 06		 mov	 eax, DWORD PTR [esi]
  005d4	83 c4 18	 add	 esp, 24			; 00000018H
  005d7	2b c3		 sub	 eax, ebx
  005d9	74 11		 je	 SHORT $L71715
  005db	48		 dec	 eax
  005dc	75 1c		 jne	 SHORT $L71712

; 783  :     break;
; 784  : 
; 785  :   case SAMPLE_RATE_DECREASE:
; 786  : 
; 787  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ ) << 1;

  005de	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  005e2	0f af c7	 imul	 eax, edi
  005e5	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  005e8	24 fe		 and	 al, -2			; fffffffeH

; 788  :     break;

  005ea	eb 0a		 jmp	 SHORT $L72169
$L71715:

; 780  :   case SAMPLE_RATE_INCREASE:
; 781  : 
; 782  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ );

  005ec	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  005f0	0f af c7	 imul	 eax, edi
  005f3	c1 f8 0f	 sar	 eax, 15			; 0000000fH
$L72169:
  005f6	89 44 24 24	 mov	 DWORD PTR _FZinHZ$[esp+108], eax
$L71712:

; 789  : 
; 790  :   case NO_SAMPLE_RATE_CHANGE:
; 791  : 
; 792  :     break;
; 793  : 
; 794  :   default:
; 795  : 
; 796  :     break;
; 797  :   }
; 798  : 
; 799  : 
; 800  : #ifdef NEW_VTM_notopenq //DOn't mess with this as we're going to hlsyn
; 801  : 
; 802  :   OPENQ = variabpars[OUT_OQ];		/* Open quotient */
; 803  :   
; 804  :   
; 805  :   //Glot_step = variabpars[OUT_GS];
; 806  :   
; 807  : 
; 808  : 
; 809  : #endif
; 810  : #ifdef NEW_VTM_notopenq //DOn't mess with this as we're going to hlsyn
; 811  : 
; 812  : 	
; 813  : 
; 814  : 
; 815  : 	/* TEMPORARY */
; 816  : 
; 817  : 	if (OPENQ > 95)    
; 818  : 		OPENQ = 95;
; 819  : 
; 820  : /*	  This new control variable modifies nopen, abreth, TILTDB, and B1.
; 821  :  *
; 822  :  *		 OPENQ		Perceived voice quality
; 823  :  *		-------		-----------------------
; 824  :  *		 0 - 30		creaky, pressed voice
; 825  :  *		35 - 65		normal voice
; 826  :  *		70 - 85		Breathy voice
; 827  :  *		90 - 100	whisper
; 828  :  *
; 829  :  *	   Within the range 10 to 75, OPENQ sets nopen =
; 830  :  *	    (OPENQ*T0)/100.  Actually use frac4mul(3200,(OPENQ*T0))>>7).
; 831  :  *	    Outside this range, nopen is truncted
; 832  :  *	    to a min of 0.1 * T0 and a max of 0.75 * T0.
; 833  :  *	   Within the range 0 to 100, OPENQ resets TILTDB =
; 834  :  *	    max[TILTDB,OPENQ-KZ].
; 835  :  *	    e.g. if KZ=60, TILTDB reaches max of 40 at OPENQ=100
; 836  :  *	   Within the range 0 to 100, OPENQ resets abreth =
; 837  :  *	    amptable[max{abrg,OPENQ-KX}].  Arg is truncated if above KY dB
; 838  :  *	    e.g. if KX=15 and KY = 60, abreth becomes 60 when OPENQ=75
; 839  :  *	   Within the range 70 to 100, OPENQ resets B1inHZ =
; 840  :  *	    B1inHZ + (OPENQ-70) * 10
; 841  :  */
; 842  : 
; 843  : 
; 844  : 	temp = OPENQ - 15;	/* 10 determines OPENQ value at */
; 845  : 
; 846  : 	if (temp < 0)    
; 847  : 		temp = 0;	/*  which attain max breathiness */
; 848  : 
; 849  : 	if (temp > 55)  
; 850  : 		temp = 55;	/* Max breathiness is 55 dB */
; 851  : 
; 852  : 		//EAB Reduce further for release 3/00
; 853  : 	if (temp < pVtm_t->Aturb)    
; 854  : 		temp = pVtm_t->Aturb;
; 855  : 
; 856  : 	abreth = amptable[temp];
; 857  : 
; 858  : 
; 859  : 	
; 860  : 	temp = OPENQ - 60;		/* 0 <= OPENQ <= 100 */
; 861  : 
; 862  : 	if (temp > TILTDB)   
; 863  : 		TILTDB = temp;	/* Up to 40 dB of tilt */
; 864  : 	
; 865  : 	if (OPENQ >= 70) 
; 866  : 	{
; 867  : 	    B1inHZ += (OPENQ-65) * 5;
; 868  : 	    B2inHZ += (OPENQ-65) * 2;
; 869  : 	}
; 870  : 
; 871  : #endif
; 872  : 
; 873  :   APlin = frac4mul( APlin, pVtm_t->APgain );  /*  Scale asp by spdef GV       */

  005fa	0f bf ae 00 02
	00 00		 movsx	 ebp, WORD PTR [esi+512]
  00601	0f bf 54 24 3c	 movsx	 edx, WORD PTR _APlin$[esp+108]

; 874  :   r2pg = frac1mul( r2pg, pVtm_t->AFgain );    /*  Scale A2 by spdef GF        */

  00606	0f bf 86 02 02
	00 00		 movsx	 eax, WORD PTR [esi+514]
  0060d	0f af ea	 imul	 ebp, edx

; 875  :   r3pg = frac1mul( r3pg, pVtm_t->AFgain );    /*  Scale A3 by spdef GF        */
; 876  :   r4pa = frac1mul( r4pa, pVtm_t->AFgain );    /*  Scale A4 by spdef GF        */

  00610	0f bf 54 24 34	 movsx	 edx, WORD PTR _r4pa$[esp+108]
  00615	0f af d0	 imul	 edx, eax
  00618	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0061b	89 54 24 34	 mov	 DWORD PTR _r4pa$[esp+108], edx

; 877  :   r5pa = frac1mul( r5pa, pVtm_t->AFgain );    /*  Scale A5 by spdef GF        */

  0061f	0f bf 54 24 30	 movsx	 edx, WORD PTR _r5pa$[esp+108]
  00624	0f af d0	 imul	 edx, eax
  00627	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0062a	89 54 24 30	 mov	 DWORD PTR _r5pa$[esp+108], edx

; 878  :   r6pa = frac1mul( r6pa, pVtm_t->AFgain );    /*  Scale A6 by spdef GF        */

  0062e	0f bf 54 24 28	 movsx	 edx, WORD PTR _r6pa$[esp+108]
  00633	0f af d0	 imul	 edx, eax
  00636	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _r2pg$[esp+108]
  0063b	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0063e	0f af c8	 imul	 ecx, eax
  00641	0f bf 7c 24 4c	 movsx	 edi, WORD PTR _r3pg$[esp+108]
  00646	89 54 24 28	 mov	 DWORD PTR _r6pa$[esp+108], edx
  0064a	0f af f8	 imul	 edi, eax

; 879  :   ABlin = frac4mul( ABlin, pVtm_t->AFgain );  /*  Scale AB by spdef GF        */

  0064d	0f bf 54 24 38	 movsx	 edx, WORD PTR _ABlin$[esp+108]
  00652	0f af d0	 imul	 edx, eax

; 880  : 
; 881  : 
; 882  :   /********************************************************************/
; 883  :   /*  Set coeficients of variable parallel resonator R2.              */
; 884  :   /********************************************************************/
; 885  : 
; 886  :   b2p = 210;
; 887  :   r2pa = d2pole_pf( pVtm_t,&r2pb, &r2pc, F2inHZ, b2p, r2pg );

  00655	8b 44 24 48	 mov	 eax, DWORD PTR _F2inHZ$[esp+108]
  00659	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0065c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0065f	51		 push	 ecx
  00660	89 54 24 3c	 mov	 DWORD PTR _ABlin$[esp+112], edx
  00664	68 d2 00 00 00	 push	 210			; 000000d2H
  00669	8d 4c 24 1c	 lea	 ecx, DWORD PTR _r2pc$[esp+116]
  0066d	50		 push	 eax
  0066e	8d 54 24 22	 lea	 edx, DWORD PTR _r2pb$[esp+120]
  00672	51		 push	 ecx
  00673	52		 push	 edx
  00674	56		 push	 esi
  00675	c1 fd 0c	 sar	 ebp, 12			; 0000000cH
  00678	c1 ff 0f	 sar	 edi, 15			; 0000000fH
  0067b	e8 00 00 00 00	 call	 _d2pole_pf
  00680	89 44 24 7c	 mov	 DWORD PTR _r2pa$[esp+132], eax

; 888  : 
; 889  :   /********************************************************************/
; 890  :   /*  Set coeficients of variable parallel resonator R3.              */
; 891  :   /********************************************************************/
; 892  : 
; 893  :   b3p = 280;
; 894  :   r3pa = d2pole_pf( pVtm_t,&r3pb, &r3pc, F3inHZ, b3p, r3pg );

  00684	8b 44 24 5c	 mov	 eax, DWORD PTR _F3inHZ$[esp+132]
  00688	57		 push	 edi
  00689	68 18 01 00 00	 push	 280			; 00000118H
  0068e	8d 4c 24 30	 lea	 ecx, DWORD PTR _r3pc$[esp+140]
  00692	50		 push	 eax
  00693	8d 54 24 36	 lea	 edx, DWORD PTR _r3pb$[esp+144]
  00697	51		 push	 ecx
  00698	52		 push	 edx
  00699	56		 push	 esi
  0069a	e8 00 00 00 00	 call	 _d2pole_pf
  0069f	89 84 24 90 00
	00 00		 mov	 DWORD PTR _r3pa$[esp+156], eax

; 895  : 
; 896  :   /********************************************************************/
; 897  :   /********************************************************************/
; 898  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 899  :   /********************************************************************/
; 900  :   /********************************************************************/
; 901  : 
; 902  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  006a6	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]
  006ac	83 c4 30	 add	 esp, 48			; 00000030H
  006af	3b c3		 cmp	 eax, ebx
  006b1	89 5c 24 3c	 mov	 DWORD PTR _ns$[esp+108], ebx
  006b5	0f 86 a7 0e 00
	00		 jbe	 $L71730

; 1395 :       } 
; 1396 : #else
; 1397 : 
; 1398 : #ifdef NEW_TEST
; 1399 : /*  Adjust memory variables to have proper levels for a given sudden
; 1400 :               change to F1inHZ.
; 1401 : 	      Approximate r1c_n' = r1c_n * sqrt(r1ca/r1calast)
; 1402 : 	      by r1c_n' = r1c_n * (F1hz/F1hzlast) */
; 1403 : 		pVtm_t->logz1 = logtab[FZinHZ>>3];
; 1404 : 	     if ( FZinHZ < pVtm_t->fzlast) 
; 1405 : 			{
; 1406 : 			 pVtm_t->aznorm = loginv[pVtm_t->logz1l-pVtm_t->logz1];  
; 1407 : 			 /* anorm = Fx / Fxlast; */
; 1408 : /*	      For reasons that I don't understand, amplitude compensation
; 1409 :               seems to be needed only when a formant goes down in frequency */
; 1410 : 		    pVtm_t->rnzd1 = frac1mul(pVtm_t->rnzd1,pVtm_t->aznorm);
; 1411 : 		    pVtm_t->rnzd2 = frac1mul(pVtm_t->rnzd2,pVtm_t->aznorm);
; 1412 : 		}
; 1413 : 		pVtm_t->fzlast = FZinHZ;
; 1414 : 		pVtm_t->logz1l = pVtm_t->logz1;	/* Save to use next time */
; 1415 : #endif
; 1416 : 
; 1417 : 
; 1418 : 
; 1419 : 
; 1420 : 
; 1421 : 	setzeroabc( FZinHZ,200, 93, &pVtm_t->rnza, &pVtm_t->rnzb, &pVtm_t->rnzc);
; 1422 : 	  }
; 1423 : 
; 1424 : #endif /*NEW_VTM*/
; 1425 : 		//pVtm_t->iwave[ns] = voice;
; 1426 : 
; 1427 : #ifndef LOWCOMPUTE
; 1428 : 		
; 1429 :       /****************************************************************/
; 1430 :       /*  Downsampling low-pass filter.                               */
; 1431 :       /*  Decimate the glottal pulse from a 40 KHz rate to 10 KHz.    */
; 1432 :       /*  The variable 'rlpd1' is the output of downsampling low-pass */
; 1433 :       /*  filter and is copied back to the variable 'voice'. 'nper'   */
; 1434 :       /*  is the 40 KHz sample counter.                               */
; 1435 :       /****************************************************************/
; 1436 : 
; 1437 :       two_pole_filter( voice, pVtm_t->rlpd1, pVtm_t->rlpd2, pVtm_t->rlpa, pVtm_t->rlpb, pVtm_t->rlpc );
; 1438 : 
; 1439 :       voice = pVtm_t->rlpd1;
; 1440 : 
; 1441 :       pVtm_t->nper++;
; 1442 :     }
; 1443 : #else
; 1444 : 	
; 1445 :     pVtm_t->rlpd1 = voice;	// for getmax
; 1446 : 	pVtm_t->nper++;
; 1447 : 	
; 1448 : #endif
; 1449 : 
; 1450 :     /******************************************************************/
; 1451 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1452 :     /*  use 1-pole iir filter.                                        */
; 1453 :     /******************************************************************/
; 1454 : #else	//ACI_LICENSE
; 1455 : 
; 1456 : 		doit();
; 1457 : #endif
; 1458 :    /******************************************************************/
; 1459 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1460 :     /*  use 1-pole iir filter.                                        */
; 1461 :     /******************************************************************/
; 1462 : 
; 1463 :   if ( (pVtm_t->avlind + pVtm_t->avlin + APlin ))

  006bb	0f bf c5	 movsx	 eax, bp
  006be	89 44 24 4c	 mov	 DWORD PTR -32+[esp+108], eax
$L71728:
  006c2	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR _ranmul
  006c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _ranadd
  006cf	66 0f af 8e 2a
	02 00 00	 imul	 cx, WORD PTR [esi+554]
  006d7	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  006da	66 89 86 2a 02
	00 00		 mov	 WORD PTR [esi+554], ax
  006e1	0f bf 8e b0 01
	00 00		 movsx	 ecx, WORD PTR [esi+432]
  006e8	66 c1 f8 02	 sar	 ax, 2
  006ec	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]
  006ef	c1 e2 0c	 shl	 edx, 12			; 0000000cH
  006f2	2b d1		 sub	 edx, ecx
  006f4	d1 e2		 shl	 edx, 1
  006f6	8b ca		 mov	 ecx, edx
  006f8	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  006fb	03 c8		 add	 ecx, eax
  006fd	66 8b f9	 mov	 di, cx
  00700	89 4c 24 1c	 mov	 DWORD PTR _noise$[esp+108], ecx
  00704	66 89 be b0 01
	00 00		 mov	 WORD PTR [esi+432], di
  0070b	66 8b 96 5e 01
	00 00		 mov	 dx, WORD PTR [esi+350]
  00712	0f bf 86 60 01
	00 00		 movsx	 eax, WORD PTR [esi+352]
  00719	0f bf 1d 00 00
	00 00		 movsx	 ebx, WORD PTR _noisec
  00720	0f af c3	 imul	 eax, ebx
  00723	0f bf 9e f4 01
	00 00		 movsx	 ebx, WORD PTR [esi+500]
  0072a	0f bf ea	 movsx	 ebp, dx
  0072d	0f af dd	 imul	 ebx, ebp
  00730	03 c3		 add	 eax, ebx
  00732	66 89 96 60 01
	00 00		 mov	 WORD PTR [esi+352], dx
  00739	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0073c	66 89 be 5e 01
	00 00		 mov	 WORD PTR [esi+350], di
  00743	03 c8		 add	 ecx, eax
  00745	66 8b 86 16 02
	00 00		 mov	 ax, WORD PTR [esi+534]
  0074c	89 4c 24 1c	 mov	 DWORD PTR _noise$[esp+108], ecx
  00750	66 3b 86 26 02
	00 00		 cmp	 ax, WORD PTR [esi+550]
  00757	7d 05		 jge	 SHORT $L71735

; 903  :   {
; 904  :     /******************************************************************/
; 905  :     /******************************************************************/
; 906  :     /*  NOISE GENERATOR                                               */
; 907  :     /******************************************************************/
; 908  :     /******************************************************************/
; 909  : #ifndef ACI_LICENSE		//tscode 01may97 ...tek
; 910  : #ifdef NEW_NOISE
; 911  : 	  	 noisef = pVtm_t->randomx >> 2;
; 912  : /*      pVtm_t->randomx = (pVtm_t->randomx * ranmul) + ranadd;*/
; 913  : 	pVtm_t->randomx = (pVtm_t->randomx * 20077) + 12345;
; 914  : 	
; 915  : 
; 916  : 
; 917  : 
; 918  : 	/******************************************************************/
; 919  : 	/*  RANDOM NUMBER FOR FRICATION                    */
; 920  : 	/*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 921  : 	/*  filtering. noise = 4. * (.25 * input) + 0.75 * last noise                  */
; 922  : 	/******************************************************************/
; 923  : 
; 924  : 
; 925  : 	noise = noisef + frac1mul( 24576, pVtm_t->nolast);
; 926  : 	pVtm_t->nolast = noisef;
; 927  : 	
; 928  : 
; 929  : 	
; 930  : 
; 931  : 
; 932  : 	/******************************************************************/
; 933  : 	/*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 934  : 	/*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 935  : 	/*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 936  : 	/******************************************************************/
; 937  : 
; 938  : 	if( pVtm_t->nper < pVtm_t->nmod )
; 939  : 		noise >>= 1;
; 940  : 
; 941  : 			/*  Random number for breathiness (first diff preemphasis) */
; 942  : 	noiseb = noise - pVtm_t->noblast;    /* BREATHINESS NOISE */
; 943  : 	pVtm_t->noblast = noise; 
; 944  : 
; 945  : #else
; 946  :     pVtm_t->randomx = pVtm_t->randomx * ranmul + ranadd;
; 947  :     noise = pVtm_t->randomx >> 2;
; 948  : 
; 949  :     /******************************************************************/
; 950  :     /*  RANDOM NUMBER FOR FRICATION AND ASPIRATION                    */
; 951  :     /*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 952  :     /*  filtering. noise = noise + 0.75 * last noise                  */
; 953  :     /******************************************************************/
; 954  : 
; 955  :     noise += frac1mul( 24574, pVtm_t->nolast );
; 956  :     pVtm_t->nolast = noise;
; 957  : 
; 958  :     /******************************************************************/
; 959  :     /*                                                                */
; 960  :     /*  Filter with Pi-rotated antiresonator. (This is the same as an */
; 961  :     /*  ordinary antiresonator except for the b-coef has it's sign    */
; 962  :     /*  flipped). Frequency = 3500, Bandwidth = 1600.                 */
; 963  :     /*                                                                */
; 964  :     /*  This is a three zero filter, but is implemented as a special  */
; 965  :     /*  case because one of the multipliers is 1.0. The input and     */
; 966  :     /*  output variable is "noise".                                   */
; 967  :     /*                                                                */
; 968  :     /******************************************************************/
; 969  : 
; 970  :     two_zero_filter_2( noise, pVtm_t->ablas1, pVtm_t->ablas2, pVtm_t->noiseb, noisec );
; 971  : 
; 972  :     /******************************************************************/
; 973  :     /*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 974  :     /*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 975  :     /*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 976  :     /******************************************************************/
; 977  : 
; 978  :     if ( pVtm_t->nper < pVtm_t->nmod )
; 979  : 	noise >>= 1;

  00759	66 d1 7c 24 1c	 sar	 WORD PTR _noise$[esp+108], 1
$L71735:

; 980  : #endif //new_noise/else
; 981  : 
; 982  :     /******************************************************************/
; 983  :     /*  PERIODIC VOICING WAVEFORM                                     */
; 984  :     /*  A period has duration of T0 samples, nper is the counter of   */
; 985  :     /*  current time. During the first nper = 0 to ( T0 - nopen )     */
; 986  :     /*  samples, the glottis is closed. The glottis opens at time     */
; 987  :     /*  ( T0 - nopen ), and closes at time T0.                        */
; 988  :     /******************************************************************/
; 989  : 
; 990  : #ifndef LOWCOMPUTE
; 991  :     for ( nsr4 = 0; nsr4 < 4; nsr4++ )
; 992  :     {
; 993  : #endif
; 994  :       /****************************************************************/
; 995  :       /*  Compute next value of voicing wave. Calculate glottal pulse */
; 996  :       /*  at 4 times normal sample rate to minimize the quantization  */
; 997  :       /*  of the glottal period.                                      */
; 998  :       /****************************************************************/
; 999  : 
; 1000 :       /****************************************************************/
; 1001 :       /*  Future upgrade ?                                            */
; 1002 :       /*  When glottis closes, reduce F1 and B1.                      */
; 1003 :       /****************************************************************/
; 1004 : 
; 1005 : #ifdef   F1_B1_UPGRADE
; 1006 : 	if(pVtm_t->Up_Down_Flag == 0)
; 1007 :     { 
; 1008 : 		//f1_b1_down(F1inHZ);
; 1009 : 	  pVtm_t->r1cc -= (F1inHZ);
; 1010 : 	  pVtm_t->r1cb += (pVtm_t->delr1b + (F1inHZ));
; 1011 : 
; 1012 : 	  pVtm_t->Up_Down_Flag=1;
; 1013 : 	}
; 1014 : #endif
; 1015 : 
; 1016 :       /****************************************************************/
; 1017 :       /*  voicing has fixed waveshape, at**2 - bt**3                  */
; 1018 :       /****************************************************************/
; 1019 : 
; 1020 : 
; 1021 :       if ( pVtm_t->nper > ( pVtm_t->T0 - pVtm_t->nopen ))

  0075e	0f bf 8e 20 02
	00 00		 movsx	 ecx, WORD PTR [esi+544]
  00765	0f bf 96 22 02
	00 00		 movsx	 edx, WORD PTR [esi+546]
  0076c	0f bf c0	 movsx	 eax, ax
  0076f	2b ca		 sub	 ecx, edx
  00771	3b c1		 cmp	 eax, ecx
  00773	0f 8e 01 01 00
	00		 jle	 $L71738

; 1022 :       {
; 1023 : 		 
; 1024 : 		(pVtm_t->a) -= pVtm_t->b;             /*  Fixed waveshape at**2 - bt**3         */

  00779	66 8b 8e 10 02
	00 00		 mov	 cx, WORD PTR [esi+528]
  00780	66 29 8e 0e 02
	00 00		 sub	 WORD PTR [esi+526], cx
  00787	66 8b 86 0e 02
	00 00		 mov	 ax, WORD PTR [esi+526]

; 1025 : 
; 1026 : 		(pVtm_t->voice0) += pVtm_t->a>>4;       /*  Differentiated glottal flow.          */

  0078e	66 c1 f8 04	 sar	 ax, 4
  00792	66 01 86 fa 01
	00 00		 add	 WORD PTR [esi+506], ax

; 1027 : 		pVtm_t->avlind = pVtm_t->avlin;     /*  Delay action of "avlin" change.       */

  00799	66 8b 96 0a 02
	00 00		 mov	 dx, WORD PTR [esi+522]
  007a0	66 89 96 0c 02
	00 00		 mov	 WORD PTR [esi+524], dx
$L72165:

; 1084 : 				/* eab had to drop correction at high tilts we were overeloading*/
; 1085 : 		    /*    Set one-pole low-pass filter that tilts glottal source */
; 1086 : 
; 1087 :             //setabc( Ftilt, BWtilt, &pVtm_t->rtca, &pVtm_t->rtcb, &pVtm_t->rtcc);
; 1088 : 			pVtm_t->rtca = d2pole_pf( pVtm_t,&pVtm_t->rtcb, &pVtm_t->rtcc, Ftilt, BWtilt, rtltg);

  007a7	8b 5c 24 18	 mov	 ebx, DWORD PTR _TILTDB$[esp+108]
$L71745:

; 1089 : 			} 
; 1090 : 
; 1091 : #endif //NEW_TILT
; 1092 : 
; 1093 : #else
; 1094 : 				pVtm_t->voice0  = 0;
; 1095 : 
; 1096 : #endif /* NEW_VTM */
; 1097 : 
; 1098 :       }
; 1099 : 
; 1100 :     
; 1101 : 
; 1102 :       /****************************************************************/
; 1103 :       /*  Scale the glottal waveform using the speaker dependant      */
; 1104 :       /*  parameter "avgain".                                         */
; 1105 :       /****************************************************************/
; 1106 : 	  /* EAB 6/9/99 It was necessary to move things because otherwise the 
; 1107 : 	  average level of the phrom base is not properly normalized while tuning
; 1108 : 	  and tuning it later causes overload problems. */
; 1109 : 
; 1110 : 	  voice = frac4mul( pVtm_t->avlind, pVtm_t->voice0 );
; 1111 : 
; 1112 : 
; 1113 :       voice = frac4mul( voice, pVtm_t->avgain );

  007ab	0f bf 86 0c 02
	00 00		 movsx	 eax, WORD PTR [esi+524]
  007b2	0f bf 8e fa 01
	00 00		 movsx	 ecx, WORD PTR [esi+506]
  007b9	0f af c1	 imul	 eax, ecx
  007bc	0f bf 96 fc 01
	00 00		 movsx	 edx, WORD PTR [esi+508]
  007c3	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  007c6	0f bf f8	 movsx	 edi, ax
  007c9	0f af fa	 imul	 edi, edx

; 1114 : 	  
; 1115 : 
; 1116 :       /****************************************************************/
; 1117 :       /*  SOME PARAMETERS ARE UPDATED PITCH SYNCHRONOUSLY             */
; 1118 :       /*  (at sample before glottal close time)                       */
; 1119 :       /****************************************************************/
; 1120 : 
; 1121 :       if ( pVtm_t->nper == pVtm_t->T0 )

  007cc	66 8b 86 16 02
	00 00		 mov	 ax, WORD PTR [esi+534]
  007d3	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  007d6	66 3b 86 20 02
	00 00		 cmp	 ax, WORD PTR [esi+544]
  007dd	0f 85 61 04 00
	00		 jne	 $L72166

; 1122 :       {
; 1123 : 	/**************************************************************/
; 1124 : 	/*  Reset period when 'nper' reaches T0, glottis about to     */
; 1125 : 	/*  open.                                                     */
; 1126 : 	/**************************************************************/
; 1127 : 
; 1128 : 	pVtm_t->nper = 0;
; 1129 : 
; 1130 : 	/**************************************************************/
; 1131 : 	/*  'avlin' moved to 'avlind' after half period.              */
; 1132 : 	/**************************************************************/
; 1133 : 
; 1134 : 	pVtm_t->avlin = amptable[AVinDB + 4];  /*  Convert from dB to linear. */

  007e3	0f bf 54 24 50	 movsx	 edx, WORD PTR _AVinDB$[esp+108]
  007e8	33 c9		 xor	 ecx, ecx

; 1135 : #ifdef LOWCOMPUTE
; 1136 : 	pVtm_t->T0 = T0inS4;          /*  T0inS4 remembers period in case     */
; 1137 : 	      /*  more than 1 period in cur frame.    */
; 1138 : 	tmp = frac4mul( pVtm_t->t0jitr, T0inS4 ); /*  Add jitter, if any.        */
; 1139 : 	pVtm_t->T0 = (tmp+T0inS4)>>2;
; 1140 : #else
; 1141 : 
; 1142 : 	pVtm_t->T0 = T0inS4;
; 1143 : 	      /*  more than 1 period in cur frame.    */
; 1144 : 	pVtm_t->T0 += frac4mul( pVtm_t->t0jitr, pVtm_t->T0 ); /*  Add jitter, if any.        */
; 1145 : 	
; 1146 : #endif
; 1147 : 			
; 1148 : 	pVtm_t->t0jitr = -(pVtm_t->t0jitr);     /*  Change sign for alternating jitter. */
; 1149 : 
; 1150 : 	/**************************************************************/
; 1151 : 	/*  \1 is the Speaker definition breathiness coeficient   */
; 1152 : 	/**************************************************************/
; 1153 : 
; 1154 : 	pVtm_t->aturb1 = pVtm_t->Aturb;
; 1155 : 
; 1156 : 	if ( F1inHZ < 250 )

  007ea	8b 6c 24 40	 mov	 ebp, DWORD PTR _F1inHZ$[esp+108]
  007ee	66 89 8e 16 02
	00 00		 mov	 WORD PTR [esi+534], cx
  007f5	66 8b 04 55 08
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2+8]
  007fd	66 89 86 0a 02
	00 00		 mov	 WORD PTR [esi+522], ax
  00804	8b 44 24 20	 mov	 eax, DWORD PTR _T0inS4$[esp+108]
  00808	66 89 86 20 02
	00 00		 mov	 WORD PTR [esi+544], ax
  0080f	0f bf 96 20 01
	00 00		 movsx	 edx, WORD PTR [esi+288]
  00816	0f bf c0	 movsx	 eax, ax
  00819	0f af d0	 imul	 edx, eax
  0081c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0081f	0f bf d2	 movsx	 edx, dx
  00822	03 d0		 add	 edx, eax
  00824	c1 fa 02	 sar	 edx, 2
  00827	66 89 96 20 02
	00 00		 mov	 WORD PTR [esi+544], dx
  0082e	66 8b 86 20 01
	00 00		 mov	 ax, WORD PTR [esi+288]
  00835	66 f7 d8	 neg	 ax
  00838	66 89 86 20 01
	00 00		 mov	 WORD PTR [esi+288], ax
  0083f	66 8b 96 24 01
	00 00		 mov	 dx, WORD PTR [esi+292]
  00846	66 81 fd fa 00	 cmp	 bp, 250			; 000000faH
  0084b	66 89 96 fe 01
	00 00		 mov	 WORD PTR [esi+510], dx
  00852	7d 09		 jge	 SHORT $L71754

; 1157 : 	  F1inHZ = 250;

  00854	bd fa 00 00 00	 mov	 ebp, 250		; 000000faH
  00859	89 6c 24 40	 mov	 DWORD PTR _F1inHZ$[esp+108], ebp
$L71754:

; 1158 : 
; 1159 : 	/**************************************************************/
; 1160 : 	/*  Use a one pole iir filter to tilt the glottal source.     */
; 1161 : 	/**************************************************************/
; 1162 : 
; 1163 : 	switch( pVtm_t->uiSampleRateChange )
; 1164 : 	{

  0085d	8b 06		 mov	 eax, DWORD PTR [esi]
  0085f	2b c1		 sub	 eax, ecx
  00861	0f 84 c6 00 00
	00		 je	 $L71759
  00867	48		 dec	 eax
  00868	0f 84 ae 00 00
	00		 je	 $L71761
  0086e	48		 dec	 eax
  0086f	0f 85 d0 00 00
	00		 jne	 $L71756

; 1174 : 
; 1175 : 	case NO_SAMPLE_RATE_CHANGE:
; 1176 : 
; 1177 : 	  pVtm_t->decay = 1094 * (S32)TILTDB;
; 1178 : 	  break;

  00875	e9 b3 00 00 00	 jmp	 $L71759
$L71738:

; 1028 :       }
; 1029 :       else
; 1030 :       {
; 1031 : #ifdef NEW_VTM
; 1032 : 		  /* EAB 4/26/98 When glot_step is a big number, much greater then 10 it represents a more sinusoidal type of vocaliztion
; 1033 : 		  and when it is 10 or less it represents an exponential decay which is similar to instantaneous closure in males
; 1034 : 		  but with less high frequency energy as seen in many female voice and some males*/
; 1035 : 
; 1036 : 		  if(Glot_step)
; 1037 : 			{
; 1038 : 				if(pVtm_t->voice0 < 0 && pVtm_t->voice0 < Glot_step)
; 1039 : 				{
; 1040 : 					if (Glot_step <= 4)
; 1041 : 					{
; 1042 : 						pVtm_t->voice0 -=(pVtm_t->voice0 >>Glot_step);
; 1043 : 					}
; 1044 : 					else
; 1045 : 					{
; 1046 : 					pVtm_t->voice0 =pVtm_t->voice0 + Glot_step;
; 1047 : 					}
; 1048 : 				}else 
; 1049 : 					pVtm_t->voice0  = 0;
; 1050 : 
; 1051 : 			/* exponential decay could cause a long dc build up, beside I'm assuming physiologically
; 1052 : 				that at some point the cords just collapse trying 2000 for that figure 4/27/98*/
; 1053 : 
; 1054 : 				if(pVtm_t->voice0 > -2000)
; 1055 : 				{
; 1056 : 					pVtm_t->voice0  = 0;
; 1057 : 				}
; 1058 : 
; 1059 : 			}
; 1060 : 			else 
; 1061 : 				pVtm_t->voice0  = 0;

  0087a	66 c7 86 fa 01
	00 00 00 00	 mov	 WORD PTR [esi+506], 0

; 1062 : 
; 1063 : #ifdef NEW_TILT
; 1064 : 
; 1065 : 	  /* Reset tilt filter at glottal open time (WHY NOT AT CLOSE TIME?) */
; 1066 : 		if (pVtm_t->nper == (pVtm_t->topen)) 

  00883	66 8b 86 16 02
	00 00		 mov	 ax, WORD PTR [esi+534]
  0088a	66 3b 86 24 02
	00 00		 cmp	 ax, WORD PTR [esi+548]
  00891	0f 85 10 ff ff
	ff		 jne	 $L72165

; 1067 : 			{
; 1068 : 		/* BUG: Some kind of obscure overload if TILTDB == 0,1 */
; 1069 : 				
; 1070 : 				if (TILTDB < 2)    TILTDB = 1;

  00897	8b 5c 24 18	 mov	 ebx, DWORD PTR _TILTDB$[esp+108]
  0089b	66 83 fb 02	 cmp	 bx, 2
  0089f	7d 07		 jge	 SHORT $L71746
  008a1	bb 01 00 00 00	 mov	 ebx, 1

; 1071 : 				if (TILTDB > 41)  

  008a6	eb 0b		 jmp	 SHORT $L72170
$L71746:
  008a8	66 83 fb 29	 cmp	 bx, 41			; 00000029H
  008ac	7e 09		 jle	 SHORT $L71747

; 1072 : 					TILTDB = 41;

  008ae	bb 29 00 00 00	 mov	 ebx, 41			; 00000029H
$L72170:
  008b3	89 5c 24 18	 mov	 DWORD PTR _TILTDB$[esp+108], ebx
$L71747:

; 1073 : 
; 1074 : 				Ftilt = frac1mul(20000,tiltf[TILTDB]);  

  008b7	0f bf c3	 movsx	 eax, bx
  008ba	d1 e0		 shl	 eax, 1

; 1075 : 				/* 0.6 (fold into table)*/
; 1076 : 				BWtilt = tiltbw[TILTDB];
; 1077 : 			/* need to add new spdef for rltlg*/
; 1078 : 				rtltg=2048;   

  008bc	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  008c1	0f bf 88 00 00
	00 00		 movsx	 ecx, WORD PTR _tiltf[eax]
  008c8	66 8b 80 00 00
	00 00		 mov	 ax, WORD PTR _tiltbw[eax]
  008cf	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  008d2	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  008d5	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  008d8	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  008db	c1 e1 05	 shl	 ecx, 5
  008de	c1 f9 0f	 sar	 ecx, 15			; 0000000fH

; 1079 : 			 
; 1080 : /*                Make gain approx. constant at f=300 rather than at f=0 */
; 1081 : /*                This results in boost of as much as 8 dB at f=100 fund comp */
; 1082 : 				if (TILTDB > 10)   

  008e1	66 83 fb 0a	 cmp	 bx, 10			; 0000000aH
  008e5	7e 0f		 jle	 SHORT $L71749

; 1083 : 					rtltg += ((TILTDB-10) * (TILTDB-10) * 4);

  008e7	8d 53 f6	 lea	 edx, DWORD PTR [ebx-10]
  008ea	8b fa		 mov	 edi, edx
  008ec	0f af fa	 imul	 edi, edx
  008ef	8d 14 bd 00 08
	00 00		 lea	 edx, DWORD PTR [edi*4+2048]
$L71749:

; 1084 : 				/* eab had to drop correction at high tilts we were overeloading*/
; 1085 : 		    /*    Set one-pole low-pass filter that tilts glottal source */
; 1086 : 
; 1087 :             //setabc( Ftilt, BWtilt, &pVtm_t->rtca, &pVtm_t->rtcb, &pVtm_t->rtcc);
; 1088 : 			pVtm_t->rtca = d2pole_pf( pVtm_t,&pVtm_t->rtcb, &pVtm_t->rtcc, Ftilt, BWtilt, rtltg);

  008f6	52		 push	 edx
  008f7	50		 push	 eax
  008f8	51		 push	 ecx
  008f9	8d 8e 62 01 00
	00		 lea	 ecx, DWORD PTR [esi+354]
  008ff	8d 96 64 01 00
	00		 lea	 edx, DWORD PTR [esi+356]
  00905	51		 push	 ecx
  00906	52		 push	 edx
  00907	56		 push	 esi
  00908	e8 00 00 00 00	 call	 _d2pole_pf
  0090d	83 c4 18	 add	 esp, 24			; 00000018H
  00910	66 89 86 66 01
	00 00		 mov	 WORD PTR [esi+358], ax
  00917	e9 8f fe ff ff	 jmp	 $L71745
$L71761:

; 1168 : 	  break;
; 1169 : 
; 1170 : 	case SAMPLE_RATE_DECREASE:
; 1171 : 
; 1172 : 	  pVtm_t->decay = 1073 * (S32)TILTDB;

  0091c	8b c3		 mov	 eax, ebx
  0091e	c1 e0 05	 shl	 eax, 5
  00921	03 c3		 add	 eax, ebx
  00923	8d 14 43	 lea	 edx, DWORD PTR [ebx+eax*2]
  00926	c1 e2 04	 shl	 edx, 4
  00929	03 d3		 add	 edx, ebx

; 1173 : 	  break;

  0092b	eb 11		 jmp	 SHORT $L72171
$L71759:

; 1165 : 	case SAMPLE_RATE_INCREASE:
; 1166 : 
; 1167 : 	  pVtm_t->decay = 1094 * (S32)TILTDB;

  0092d	8b c3		 mov	 eax, ebx
  0092f	c1 e0 04	 shl	 eax, 4
  00932	03 c3		 add	 eax, ebx
  00934	c1 e0 04	 shl	 eax, 4
  00937	03 c3		 add	 eax, ebx
  00939	8d 14 43	 lea	 edx, DWORD PTR [ebx+eax*2]
  0093c	d1 e2		 shl	 edx, 1
$L72171:
  0093e	66 89 96 f6 01
	00 00		 mov	 WORD PTR [esi+502], dx
$L71756:

; 1179 : 
; 1180 : 	default:
; 1181 : 
; 1182 : 	  break;
; 1183 : 	}
; 1184 : 
; 1185 : 	if ( pVtm_t->decay >= 0 )

  00945	66 8b 86 f6 01
	00 00		 mov	 ax, WORD PTR [esi+502]
  0094c	66 3b c1	 cmp	 ax, cx
  0094f	7c 10		 jl	 SHORT $L71766

; 1186 : 	  pVtm_t->one_minus_decay = 32767 - pVtm_t->decay;

  00951	ba ff 7f 00 00	 mov	 edx, 32767		; 00007fffH
  00956	2b d0		 sub	 edx, eax
  00958	66 89 96 f8 01
	00 00		 mov	 WORD PTR [esi+504], dx

; 1187 : 	else

  0095f	eb 09		 jmp	 SHORT $L71767
$L71766:

; 1188 : 	  pVtm_t->one_minus_decay = 32767;

  00961	66 c7 86 f8 01
	00 00 ff 7f	 mov	 WORD PTR [esi+504], 32767 ; 00007fffH
$L71767:

; 1189 : 
; 1190 : 	/**************************************************************/
; 1191 : 	/*  Set to "nmod" during the first half of the period.        */
; 1192 : 	/*  Modulate the amplitude of the noise if "avlin" > 0, i.e.  */
; 1193 : 	/*  the glottal source is enabled.                            */
; 1194 : 	/**************************************************************/
; 1195 : 
; 1196 : 	pVtm_t->nmod = 0;

  0096a	66 89 8e 26 02
	00 00		 mov	 WORD PTR [esi+550], cx

; 1197 : 	//Eab Improvement 9/12/00
; 1198 : 	if ( pVtm_t->avlin > 0 )

  00971	66 39 8e 0a 02
	00 00		 cmp	 WORD PTR [esi+522], cx
  00978	7e 0e		 jle	 SHORT $L71768

; 1199 : 	  pVtm_t->nmod = pVtm_t->nopen;

  0097a	66 8b 86 22 02
	00 00		 mov	 ax, WORD PTR [esi+546]
  00981	66 89 86 26 02
	00 00		 mov	 WORD PTR [esi+550], ax
$L71768:

; 1200 : #ifdef LOWCOMPUTE
; 1201 : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + (pVtm_t->k2>>1);   /*  in open part of period */

  00988	0f bf 8e 12 02
	00 00		 movsx	 ecx, WORD PTR [esi+530]
  0098f	0f bf 96 20 02
	00 00		 movsx	 edx, WORD PTR [esi+544]
  00996	0f af ca	 imul	 ecx, edx
  00999	66 8b 86 14 02
	00 00		 mov	 ax, WORD PTR [esi+532]
  009a0	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  009a3	66 d1 f8	 sar	 ax, 1
  009a6	03 c1		 add	 eax, ecx

; 1202 : #else
; 1203 : #ifdef UPGRADES1999
; 1204 : 	/*spdef pars k1 & k2 NOT USED ANYMORE 
; 1205 : 	   nopen = frac1mul(k1,T0) + k2; */
; 1206 : 		temp3 = OPENQ;
; 1207 : 		if (temp3 < 10)    temp3 = 10;
; 1208 : 		if (temp3 > 75)    temp3 = 75;
; 1209 : 		temp = (temp3*pVtm_t->T0)>>6;
; 1210 : 		pVtm_t->nopen = frac4mul(2620,temp);
; 1211 : 
; 1212 : 		switch( pVtm_t->uiSampleRateChange )
; 1213 :   {
; 1214 :   case SAMPLE_RATE_INCREASE:
; 1215 : 
; 1216 :     pVtm_t->nopen = frac1mul( pVtm_t->rate_scale, pVtm_t->nopen ) << 1;
; 1217 :     break;
; 1218 : 
; 1219 :   case SAMPLE_RATE_DECREASE:
; 1220 : 
; 1221 :     pVtm_t->nopen = frac1mul( pVtm_t->rate_scale, pVtm_t->nopen );
; 1222 :     break;
; 1223 : 
; 1224 :   case NO_SAMPLE_RATE_CHANGE:
; 1225 : 
; 1226 :     break;
; 1227 : 
; 1228 :   default:
; 1229 : 
; 1230 :     break;
; 1231 :   }
; 1232 : #endif //UPGRADES1999
; 1233 : 
; 1234 : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + pVtm_t->k2;   /*  in open part of period */
; 1235 : #endif
; 1236 : 
; 1237 : 
; 1238 : 	
; 1239 : #ifndef LOWCOMPUTE
; 1240 : #ifndef NEW_TILT
; 1241 : 	pVtm_t->nopen += ( TILTDB<<2  );      /*  Longer if TILTDB increases */
; 1242 : #endif
; 1243 : 	if ( pVtm_t->nopen < 40 )
; 1244 : 	  pVtm_t->nopen = 40;        /*  Min is 40                            */
; 1245 : 	else
; 1246 : 	  if ( pVtm_t->nopen > 263 )
; 1247 : 	    pVtm_t->nopen = 263;     /*  Max is 263                           */
; 1248 : 
; 1249 : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))
; 1250 : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */
; 1251 : #else
; 1252 : #ifndef UPGRADES1999	
; 1253 : 	pVtm_t->nopen += ( TILTDB  );      /*  Longer if TILTDB increases */
; 1254 : #endif
; 1255 : 
; 1256 : 
; 1257 : 	if ( pVtm_t->nopen < 10 )

  009a8	66 3d 0a 00	 cmp	 ax, 10			; 0000000aH
  009ac	66 89 86 22 02
	00 00		 mov	 WORD PTR [esi+546], ax
  009b3	7d 0b		 jge	 SHORT $L71770

; 1258 : 	  pVtm_t->nopen = 10;        /*  Min is 40                            */

  009b5	66 c7 86 22 02
	00 00 0a 00	 mov	 WORD PTR [esi+546], 10	; 0000000aH

; 1259 : 	else

  009be	eb 0f		 jmp	 SHORT $L71772
$L71770:

; 1260 : 	  if ( pVtm_t->nopen > (263>>2) )

  009c0	66 3d 41 00	 cmp	 ax, 65			; 00000041H
  009c4	7e 09		 jle	 SHORT $L71772

; 1261 : 	    pVtm_t->nopen = (263>>2);     /*  Max is 263                           */

  009c6	66 c7 86 22 02
	00 00 41 00	 mov	 WORD PTR [esi+546], 65	; 00000041H
$L71772:

; 1262 : 
; 1263 : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))

  009cf	0f bf 86 20 02
	00 00		 movsx	 eax, WORD PTR [esi+544]
  009d6	0f bf 8e 22 02
	00 00		 movsx	 ecx, WORD PTR [esi+546]
  009dd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  009e0	c1 f8 02	 sar	 eax, 2
  009e3	3b c8		 cmp	 ecx, eax
  009e5	7c 07		 jl	 SHORT $L71773

; 1264 : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */

  009e7	66 89 86 22 02
	00 00		 mov	 WORD PTR [esi+546], ax
$L71773:

; 1265 : #ifdef NEW_TILT
; 1266 : 	pVtm_t->topen=  pVtm_t->T0-pVtm_t->nopen;

  009ee	66 8b 96 20 02
	00 00		 mov	 dx, WORD PTR [esi+544]
  009f5	66 2b 96 22 02
	00 00		 sub	 dx, WORD PTR [esi+546]
  009fc	66 89 96 24 02
	00 00		 mov	 WORD PTR [esi+548], dx

; 1267 : #endif
; 1268 : 
; 1269 : 
; 1270 : #endif
; 1271 : 	
; 1272 : 
; 1273 : 
; 1274 : 	/**************************************************************/
; 1275 : 	/*  Reset a & b, which determine shape of glottal waveform.   */
; 1276 : 	/*  Let a = (b * nopen) / 3 without doing the divide.         */
; 1277 : 	/**************************************************************/
; 1278 : #ifdef LOWCOMPUTE
; 1279 : 	//EAB minus 11 is to make sure we round down in lookup otherwise
; 1280 : 	//overflows are possible 1/11/99
; 1281 : 	// 1/17/99     BATS852 There was an error in the way nopen was calculated and the
; 1282 : 	//				boiler plate code was holding back the flood.
; 1283 : 	pVtm_t->b = B0[(pVtm_t->nopen-9)];

  00a03	0f bf 86 22 02
	00 00		 movsx	 eax, WORD PTR [esi+546]
  00a0a	66 8b 04 45 ee
	ff ff ff	 mov	 ax, WORD PTR _B0[eax*2-18]
  00a12	66 89 86 10 02
	00 00		 mov	 WORD PTR [esi+528], ax

; 1284 : #else
; 1285 : 	pVtm_t->b = B0[pVtm_t->nopen-40];
; 1286 : #endif
; 1287 : 
; 1288 : 
; 1289 : 	pVtm_t->temp = pVtm_t->b +1;

  00a19	40		 inc	 eax
  00a1a	66 89 86 28 02
	00 00		 mov	 WORD PTR [esi+552], ax

; 1290 : 
; 1291 : 
; 1292 : 
; 1293 : 	if ( pVtm_t->nopen > 95 )

  00a21	66 8b 8e 22 02
	00 00		 mov	 cx, WORD PTR [esi+546]
  00a28	66 83 f9 5f	 cmp	 cx, 95			; 0000005fH
  00a2c	7e 2b		 jle	 SHORT $L71774

; 1294 : 	{
; 1295 : 	  pVtm_t->temp = (S32)pVtm_t->temp * pVtm_t->nopen;

  00a2e	0f af c1	 imul	 eax, ecx
  00a31	66 89 86 28 02
	00 00		 mov	 WORD PTR [esi+552], ax

; 1296 : 	  pVtm_t->a = frac1mul(10923, pVtm_t->temp );

  00a38	0f bf c0	 movsx	 eax, ax
  00a3b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00a3e	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  00a41	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00a44	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00a47	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  00a4a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00a4d	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00a50	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax

; 1297 : 	}
; 1298 : 	else

  00a57	eb 31		 jmp	 SHORT $L71777
$L71774:

; 1299 : 	{
; 1300 : 	  pVtm_t->temp = frac1mul(10923, pVtm_t->temp );

  00a59	0f bf c0	 movsx	 eax, ax
  00a5c	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00a5f	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  00a62	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00a65	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00a68	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  00a6b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00a6e	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00a71	66 89 86 28 02
	00 00		 mov	 WORD PTR [esi+552], ax

; 1301 : 	  pVtm_t->a = (S32)pVtm_t->temp * pVtm_t->nopen;

  00a78	66 8b 8e 22 02
	00 00		 mov	 cx, WORD PTR [esi+546]
  00a7f	66 0f af c8	 imul	 cx, ax
  00a83	66 89 8e 0e 02
	00 00		 mov	 WORD PTR [esi+526], cx
$L71777:

; 1302 : 	}
; 1303 : 	//  1/17/99 BATS852 There was an error in the way nopen was calculated 
; 1304 : 	//	and the	boiler plate code was holding back the flood.
; 1305 : 
; 1306 : 
; 1307 : 
; 1308 : 	/**************************************************************/
; 1309 : 	/*  Set coeficients of variable cascade resonators.           */
; 1310 : 	/**************************************************************/
; 1311 : #ifdef NEW_VTM
; 1312 : 
; 1313 : 	d2pole_cf123( pVtm_t,pKsd_t, &pVtm_t->rnpb, &pVtm_t->rnpc,FNPinHZ , 200 ,0 );

  00a8a	8b 5c 24 2c	 mov	 ebx, DWORD PTR -64+[esp+108]
  00a8e	6a 00		 push	 0
  00a90	68 c8 00 00 00	 push	 200			; 000000c8H
  00a95	8d 96 e0 01 00
	00		 lea	 edx, DWORD PTR [esi+480]
  00a9b	68 22 01 00 00	 push	 290			; 00000122H
  00aa0	8d 86 de 01 00
	00		 lea	 eax, DWORD PTR [esi+478]
  00aa6	52		 push	 edx
  00aa7	50		 push	 eax
  00aa8	53		 push	 ebx
  00aa9	56		 push	 esi
  00aaa	e8 00 00 00 00	 call	 _d2pole_cf123

; 1314 : #endif
; 1315 : 	
; 1316 : 	pVtm_t->R3ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r3cb, &pVtm_t->r3cc, F3inHZ, B3inHZ, pVtm_t->r3cg );

  00aaf	66 8b 8e 04 02
	00 00		 mov	 cx, WORD PTR [esi+516]
  00ab6	8b 54 24 70	 mov	 edx, DWORD PTR _B3inHZ$[esp+136]
  00aba	8b 44 24 60	 mov	 eax, DWORD PTR _F3inHZ$[esp+136]
  00abe	51		 push	 ecx
  00abf	52		 push	 edx
  00ac0	8d 8e ce 01 00
	00		 lea	 ecx, DWORD PTR [esi+462]
  00ac6	50		 push	 eax
  00ac7	8d 96 cc 01 00
	00		 lea	 edx, DWORD PTR [esi+460]
  00acd	51		 push	 ecx
  00ace	52		 push	 edx
  00acf	53		 push	 ebx
  00ad0	56		 push	 esi
  00ad1	e8 00 00 00 00	 call	 _d2pole_cf123

; 1317 : 	pVtm_t->R2ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r2cb, &pVtm_t->r2cc, F2inHZ, B2inHZ, pVtm_t->r2cg );

  00ad6	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR _B2inHZ$[esp+164]
  00add	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR _F2inHZ$[esp+164]
  00ae4	66 89 86 ca 01
	00 00		 mov	 WORD PTR [esi+458], ax
  00aeb	66 8b 86 06 02
	00 00		 mov	 ax, WORD PTR [esi+518]
  00af2	50		 push	 eax
  00af3	51		 push	 ecx
  00af4	8d 86 c8 01 00
	00		 lea	 eax, DWORD PTR [esi+456]
  00afa	52		 push	 edx
  00afb	8d 8e c6 01 00
	00		 lea	 ecx, DWORD PTR [esi+454]
  00b01	50		 push	 eax
  00b02	51		 push	 ecx
  00b03	53		 push	 ebx
  00b04	56		 push	 esi
  00b05	e8 00 00 00 00	 call	 _d2pole_cf123
  00b0a	83 c4 54	 add	 esp, 84			; 00000054H
  00b0d	66 89 86 c4 01
	00 00		 mov	 WORD PTR [esi+452], ax

; 1318 : 	pVtm_t->R1ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r1cb, &pVtm_t->r1cc, F1inHZ, B1inHZ, pVtm_t->r1cg );

  00b14	66 8b 96 08 02
	00 00		 mov	 dx, WORD PTR [esi+520]
  00b1b	8b 44 24 5c	 mov	 eax, DWORD PTR _B1inHZ$[esp+108]
  00b1f	52		 push	 edx
  00b20	50		 push	 eax
  00b21	8d 8e be 01 00
	00		 lea	 ecx, DWORD PTR [esi+446]
  00b27	55		 push	 ebp
  00b28	8d 96 bc 01 00
	00		 lea	 edx, DWORD PTR [esi+444]
  00b2e	51		 push	 ecx
  00b2f	52		 push	 edx
  00b30	53		 push	 ebx
  00b31	56		 push	 esi
  00b32	e8 00 00 00 00	 call	 _d2pole_cf123
  00b37	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1319 : 
; 1320 : 	/**************************************************************/
; 1321 : 	/*  Scale up R1 gain here.                                    */
; 1322 : 	/**************************************************************/
; 1323 : 
; 1324 : 	if ( pVtm_t->R1ca > 16383 )

  00b3a	66 3d ff 3f	 cmp	 ax, 16383		; 00003fffH
  00b3e	66 89 86 ba 01
	00 00		 mov	 WORD PTR [esi+442], ax
  00b45	7e 09		 jle	 SHORT $L71780

; 1325 : 	  pVtm_t->R1ca = 16383;

  00b47	66 c7 86 ba 01
	00 00 ff 3f	 mov	 WORD PTR [esi+442], 16383 ; 00003fffH
$L71780:

; 1326 : 
; 1327 : 	pVtm_t->R1ca = pVtm_t->R1ca << 1;

  00b50	66 d1 a6 ba 01
	00 00		 shl	 WORD PTR [esi+442], 1

; 1328 : 
; 1329 : #ifdef UPGRADES1999
; 1330 : /*  Adjust memory variables to have proper levels for a given sudden
; 1331 :               change to F1inHZ.
; 1332 : 	      Approximate r1c_n' = r1c_n * sqrt(r1ca/r1calast)
; 1333 : 	      by r1c_n' = r1c_n * (F1hz/F1hzlast) */
; 1334 : 		pVtm_t->logf1 = logtab[F1inHZ>>3];

  00b57	0f bf c5	 movsx	 eax, bp
  00b5a	c1 f8 03	 sar	 eax, 3

; 1335 : 	     if ((F1inHZ < 200) && (F1inHZ < pVtm_t->f1last)) 

  00b5d	66 81 fd c8 00	 cmp	 bp, 200			; 000000c8H
  00b62	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _logtab[eax*2]
  00b6a	66 89 86 a8 01
	00 00		 mov	 WORD PTR [esi+424], ax
  00b71	7d 56		 jge	 SHORT $L71781
  00b73	66 3b ae a4 01
	00 00		 cmp	 bp, WORD PTR [esi+420]
  00b7a	7d 4d		 jge	 SHORT $L71781

; 1336 : 			{
; 1337 : 			 pVtm_t->anorm = loginv[pVtm_t->logf1l-pVtm_t->logf1];  

  00b7c	0f bf 8e aa 01
	00 00		 movsx	 ecx, WORD PTR [esi+426]
  00b83	0f bf d0	 movsx	 edx, ax
  00b86	2b ca		 sub	 ecx, edx
  00b88	66 8b 04 4d 00
	00 00 00	 mov	 ax, WORD PTR _loginv[ecx*2]
  00b90	66 89 86 a6 01
	00 00		 mov	 WORD PTR [esi+422], ax

; 1338 : 			 /* anorm = Fx / Fxlast; */
; 1339 : /*	      For reasons that I don't understand, amplitude compensation
; 1340 :               seems to be needed only when a formant goes down in frequency */
; 1341 : 		    pVtm_t->r1cd1 = frac1mul(pVtm_t->r1cd1,pVtm_t->anorm);

  00b97	0f bf 8e 3a 01
	00 00		 movsx	 ecx, WORD PTR [esi+314]
  00b9e	0f bf c0	 movsx	 eax, ax
  00ba1	0f af c1	 imul	 eax, ecx
  00ba4	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00ba7	66 89 86 3a 01
	00 00		 mov	 WORD PTR [esi+314], ax

; 1342 : 		    pVtm_t->r1cd2 = frac1mul(pVtm_t->r1cd2,pVtm_t->anorm);

  00bae	0f bf 96 a6 01
	00 00		 movsx	 edx, WORD PTR [esi+422]
  00bb5	0f bf 86 3c 01
	00 00		 movsx	 eax, WORD PTR [esi+316]
  00bbc	0f af d0	 imul	 edx, eax
  00bbf	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00bc2	66 89 96 3c 01
	00 00		 mov	 WORD PTR [esi+316], dx
$L71781:

; 1343 : 		}
; 1344 : 		pVtm_t->f1last = F1inHZ;
; 1345 : 		pVtm_t->logf1l = pVtm_t->logf1;	/* Save to use next time */
; 1346 : 
; 1347 : #endif //upgrades1999
; 1348 : 
; 1349 : 
; 1350 : #ifdef COMPRESSION
; 1351 : 	// tek 29oct98 if this is a silence phoneme, cut the gain back 
; 1352 : 	// to make sure we really end up with silence. 
; 1353 : 	if (variabpars[OUT_PH] == 0)
; 1354 : 	{
; 1355 : 		pVtm_t->R3ca = pVtm_t->R3ca >> 1;
; 1356 : 		pVtm_t->R2ca = pVtm_t->R2ca >> 1;
; 1357 : 		pVtm_t->R1ca = pVtm_t->R1ca >> 1;
; 1358 : 	}
; 1359 : #endif //COMPRESSION
; 1360 : 
; 1361 : 
; 1362 : 	/**************************************************************/
; 1363 : 	/*  Future upgrade ?                                          */
; 1364 : 	/*  Set pitch-synchronous changes to F1.                      */
; 1365 : 	/**************************************************************/
; 1366 : 
; 1367 : #ifdef F1_B1_UPGRADE
; 1368 : 
; 1369 : 	if(pVtm_t->Up_Down_Flag == 1)
; 1370 : 	{
; 1371 : 	//f1_b1_up(F1inHZ);
; 1372 : 	pVtm_t->delr1b = frac4mul( F1inHZ, F1inHZ ) >>1;
; 1373 : 	pVtm_t->r1cc += (F1inHZ);
; 1374 : 	pVtm_t->r1cb -= (pVtm_t->delr1b + (F1inHZ));
; 1375 : 	pVtm_t->Up_Down_Flag =0;
; 1376 : 	}
; 1377 : 
; 1378 : #endif
; 1379 : 
; 1380 : #ifndef NEW_VTMputthisbackfor 
; 1381 : 	/**************************************************************/
; 1382 : 	/*  Set coeficients of nasal zero antiresonator by table      */
; 1383 : 	/*  lookup.                                                   */
; 1384 : 	/**************************************************************/
; 1385 : 	pVtm_t->temp =FZinHZ;
; 1386 : 
; 1387 : 	pVtm_t->temp = ( FZinHZ >> 3 ) - 31;

  00bc9	66 8b 54 24 24	 mov	 dx, WORD PTR _FZinHZ$[esp+108]
  00bce	66 89 ae a4 01
	00 00		 mov	 WORD PTR [esi+420], bp
  00bd5	66 8b 8e a8 01
	00 00		 mov	 cx, WORD PTR [esi+424]
  00bdc	66 c1 fa 03	 sar	 dx, 3
  00be0	66 89 8e aa 01
	00 00		 mov	 WORD PTR [esi+426], cx
  00be7	8d 42 e1	 lea	 eax, DWORD PTR [edx-31]

; 1388 : 
; 1389 : 	if ( pVtm_t->temp > 34 )

  00bea	66 3d 22 00	 cmp	 ax, 34			; 00000022H
  00bee	66 89 86 28 02
	00 00		 mov	 WORD PTR [esi+552], ax
  00bf5	7e 09		 jle	 SHORT $L71784

; 1390 : 	  pVtm_t->temp = 34;

  00bf7	66 c7 86 28 02
	00 00 22 00	 mov	 WORD PTR [esi+552], 34	; 00000022H
$L71784:

; 1391 : 
; 1392 : 	pVtm_t->rnza = azero_tab[pVtm_t->temp];

  00c00	0f bf 86 28 02
	00 00		 movsx	 eax, WORD PTR [esi+552]
  00c07	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _azero_tab[eax*2]
  00c0f	66 89 8e e8 01
	00 00		 mov	 WORD PTR [esi+488], cx

; 1393 : 	pVtm_t->rnzb = bzero_tab[pVtm_t->temp];

  00c16	0f bf 96 28 02
	00 00		 movsx	 edx, WORD PTR [esi+552]
  00c1d	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _bzero_tab[edx*2]
  00c25	66 89 86 ea 01
	00 00		 mov	 WORD PTR [esi+490], ax

; 1394 : 	pVtm_t->rnzc = czero_tab[pVtm_t->temp];

  00c2c	0f bf 8e 28 02
	00 00		 movsx	 ecx, WORD PTR [esi+552]
  00c33	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _czero_tab[ecx*2]
  00c3b	66 89 96 ec 01
	00 00		 mov	 WORD PTR [esi+492], dx
  00c42	eb 04		 jmp	 SHORT $L71752
$L72166:
  00c44	8b 5c 24 2c	 mov	 ebx, DWORD PTR -64+[esp+108]
$L71752:

; 1395 :       } 
; 1396 : #else
; 1397 : 
; 1398 : #ifdef NEW_TEST
; 1399 : /*  Adjust memory variables to have proper levels for a given sudden
; 1400 :               change to F1inHZ.
; 1401 : 	      Approximate r1c_n' = r1c_n * sqrt(r1ca/r1calast)
; 1402 : 	      by r1c_n' = r1c_n * (F1hz/F1hzlast) */
; 1403 : 		pVtm_t->logz1 = logtab[FZinHZ>>3];
; 1404 : 	     if ( FZinHZ < pVtm_t->fzlast) 
; 1405 : 			{
; 1406 : 			 pVtm_t->aznorm = loginv[pVtm_t->logz1l-pVtm_t->logz1];  
; 1407 : 			 /* anorm = Fx / Fxlast; */
; 1408 : /*	      For reasons that I don't understand, amplitude compensation
; 1409 :               seems to be needed only when a formant goes down in frequency */
; 1410 : 		    pVtm_t->rnzd1 = frac1mul(pVtm_t->rnzd1,pVtm_t->aznorm);
; 1411 : 		    pVtm_t->rnzd2 = frac1mul(pVtm_t->rnzd2,pVtm_t->aznorm);
; 1412 : 		}
; 1413 : 		pVtm_t->fzlast = FZinHZ;
; 1414 : 		pVtm_t->logz1l = pVtm_t->logz1;	/* Save to use next time */
; 1415 : #endif
; 1416 : 
; 1417 : 
; 1418 : 
; 1419 : 
; 1420 : 
; 1421 : 	setzeroabc( FZinHZ,200, 93, &pVtm_t->rnza, &pVtm_t->rnzb, &pVtm_t->rnzc);
; 1422 : 	  }
; 1423 : 
; 1424 : #endif /*NEW_VTM*/
; 1425 : 		//pVtm_t->iwave[ns] = voice;
; 1426 : 
; 1427 : #ifndef LOWCOMPUTE
; 1428 : 		
; 1429 :       /****************************************************************/
; 1430 :       /*  Downsampling low-pass filter.                               */
; 1431 :       /*  Decimate the glottal pulse from a 40 KHz rate to 10 KHz.    */
; 1432 :       /*  The variable 'rlpd1' is the output of downsampling low-pass */
; 1433 :       /*  filter and is copied back to the variable 'voice'. 'nper'   */
; 1434 :       /*  is the 40 KHz sample counter.                               */
; 1435 :       /****************************************************************/
; 1436 : 
; 1437 :       two_pole_filter( voice, pVtm_t->rlpd1, pVtm_t->rlpd2, pVtm_t->rlpa, pVtm_t->rlpb, pVtm_t->rlpc );
; 1438 : 
; 1439 :       voice = pVtm_t->rlpd1;
; 1440 : 
; 1441 :       pVtm_t->nper++;
; 1442 :     }
; 1443 : #else
; 1444 : 	
; 1445 :     pVtm_t->rlpd1 = voice;	// for getmax
; 1446 : 	pVtm_t->nper++;
; 1447 : 	
; 1448 : #endif
; 1449 : 
; 1450 :     /******************************************************************/
; 1451 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1452 :     /*  use 1-pole iir filter.                                        */
; 1453 :     /******************************************************************/
; 1454 : #else	//ACI_LICENSE
; 1455 : 
; 1456 : 		doit();
; 1457 : #endif
; 1458 :    /******************************************************************/
; 1459 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1460 :     /*  use 1-pole iir filter.                                        */
; 1461 :     /******************************************************************/
; 1462 : 
; 1463 :   if ( (pVtm_t->avlind + pVtm_t->avlin + APlin ))

  00c48	8b 54 24 4c	 mov	 edx, DWORD PTR -32+[esp+108]
  00c4c	66 89 be 5a 01
	00 00		 mov	 WORD PTR [esi+346], di
  00c53	66 ff 86 16 02
	00 00		 inc	 WORD PTR [esi+534]
  00c5a	8b ea		 mov	 ebp, edx
  00c5c	0f bf 86 0a 02
	00 00		 movsx	 eax, WORD PTR [esi+522]
  00c63	0f bf 8e 0c 02
	00 00		 movsx	 ecx, WORD PTR [esi+524]
  00c6a	03 e8		 add	 ebp, eax
  00c6c	03 cd		 add	 ecx, ebp
  00c6e	74 0c		 je	 SHORT $L71785

; 1464 : 	  pVtm_t->cas_count = 20;

  00c70	c7 86 1c 02 00
	00 14 00 00 00	 mov	 DWORD PTR [esi+540], 20	; 00000014H

; 1465 :   else

  00c7a	eb 11		 jmp	 SHORT $L71787
$L71785:

; 1466 : 	  if(pVtm_t->cas_count)

  00c7c	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  00c82	85 c0		 test	 eax, eax
  00c84	74 07		 je	 SHORT $L71787

; 1467 : 		  pVtm_t->cas_count--;

  00c86	48		 dec	 eax
  00c87	89 86 1c 02 00
	00		 mov	 DWORD PTR [esi+540], eax
$L71787:

; 1468 : 
; 1469 : if(pVtm_t->cas_count == 0)

  00c8d	8b 86 1c 02 00
	00		 mov	 eax, DWORD PTR [esi+540]
  00c93	85 c0		 test	 eax, eax
  00c95	75 1e		 jne	 SHORT $L71788

; 1470 : {
; 1471 : 	
; 1472 : 	//eab 3/7/01 Compute save has a bug if somehitng nees to be initalized probably in the filters
; 1473 : 	//as a voiced cons such as [g] comes on wrong probably get "the dog" clean before re-implementaiton
; 1474 : 	  
; 1475 : 	  pVtm_t->rtca =0; 

  00c97	33 ff		 xor	 edi, edi

; 1476 : 	  pVtm_t->rtd1 =0;
; 1477 : 	  pVtm_t->rtd2 =0;
; 1478 : 		out=0;

  00c99	33 ed		 xor	 ebp, ebp
  00c9b	66 89 be 66 01
	00 00		 mov	 WORD PTR [esi+358], di
  00ca2	66 89 be 6a 01
	00 00		 mov	 WORD PTR [esi+362], di
  00ca9	66 89 be 68 01
	00 00		 mov	 WORD PTR [esi+360], di

; 1479 : 	  goto skip_cascade;

  00cb0	e9 b4 02 00 00	 jmp	 $skip_cascade$71789
$L71788:

; 1480 : 	  	
; 1481 : }
; 1482 : 	
; 1483 : #ifndef NEW_TILT
; 1484 : 
; 1485 : 	//pVtm_t->iwave[ns] = voice;
; 1486 : 	voice = frac1mul( pVtm_t->one_minus_decay, voice )
; 1487 : 		  + frac1mul( pVtm_t->decay, pVtm_t->vlast );
; 1488 : 	pVtm_t->vlast = voice;
; 1489 : 	
; 1490 : 	
; 1491 : #else
; 1492 :  	
; 1493 : /*    Tilt spectrum of voicing source down by soft low-pass filtering, amount
; 1494 :       of tilt determined by TL which determines additional dB down at 3 kHz */
; 1495 :   
; 1496 : 	two_pole_filter( voice, pVtm_t->rtd1, pVtm_t->rtd2, pVtm_t->rtca, pVtm_t->rtcb, pVtm_t->rtcc );

  00cb5	0f bf 8e 62 01
	00 00		 movsx	 ecx, WORD PTR [esi+354]
  00cbc	0f bf 86 68 01
	00 00		 movsx	 eax, WORD PTR [esi+360]
  00cc3	0f af c8	 imul	 ecx, eax
  00cc6	66 8b 86 6a 01
	00 00		 mov	 ax, WORD PTR [esi+362]
  00ccd	66 89 86 68 01
	00 00		 mov	 WORD PTR [esi+360], ax
  00cd4	0f bf ae 66 01
	00 00		 movsx	 ebp, WORD PTR [esi+358]
  00cdb	0f bf c7	 movsx	 eax, di
  00cde	0f bf be 6a 01
	00 00		 movsx	 edi, WORD PTR [esi+362]
  00ce5	0f af e8	 imul	 ebp, eax
  00ce8	0f bf 86 64 01
	00 00		 movsx	 eax, WORD PTR [esi+356]
  00cef	0f af c7	 imul	 eax, edi
  00cf2	03 cd		 add	 ecx, ebp
  00cf4	03 c1		 add	 eax, ecx
  00cf6	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _noise$[esp+108]
  00cfb	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00cfe	66 89 86 6a 01
	00 00		 mov	 WORD PTR [esi+362], ax

; 1497 : 	voice=pVtm_t->rtd1;
; 1498 : 	
; 1499 : #endif 
; 1500 : 
; 1501 :     /******************************************************************/
; 1502 :     /*  Add breathiness to voicing. Increase noise if Aspiration.     */
; 1503 :     /******************************************************************/
; 1504 : 	/*EAB With move of voicing gain noise aspiration to be gated by the fact that 
; 1505 : 	we're voicing for now anway */
; 1506 : 
; 1507 : #ifdef NEW_NOISE
; 1508 : 
; 1509 : 
; 1510 : 	temp =  frac1mul((abreth), noiseb  );
; 1511 : 	voice += frac4mul( pVtm_t->avlind, temp );
; 1512 : 
; 1513 : 	//voice += frac1mul((abreth), noiseb  );
; 1514 : #else
; 1515 : 	voice += frac1mul( pVtm_t->aturb1, noise );
; 1516 : #endif
; 1517 : 	
; 1518 : 
; 1519 : 
; 1520 : 
; 1521 : 	//pVtm_t->iwave[ns] = voice;
; 1522 : 
; 1523 : 
; 1524 :     /******************************************************************/
; 1525 :     /*  Add aspiration to voicing.                                    */
; 1526 :     /******************************************************************/
; 1527 : 
; 1528 : 
; 1529 : 
; 1530 : 
; 1531 :     voice += frac1mul( APlin, noise );

  00d05	0f bf be fe 01
	00 00		 movsx	 edi, WORD PTR [esi+510]
  00d0c	0f af f9	 imul	 edi, ecx
  00d0f	0f af ca	 imul	 ecx, edx

; 1532 : 
; 1533 : 	
; 1534 :     /******************************************************************/
; 1535 :     /******************************************************************/
; 1536 :     /*                                                                */
; 1537 :     /*  CASCADE VOCAL TRACT, EXCITED BY LARYNGEAL SOURCES             */
; 1538 :     /*                                                                */
; 1539 :     /*  Nasal antiresonator, then formants fnp, f5c, f4c, F3inHZ      */
; 1540 :     /*  F2inHZ, and F1inHZ                                            */
; 1541 :     /*                                                                */
; 1542 :     /******************************************************************/
; 1543 :     /******************************************************************/
; 1544 : 
; 1545 : 
; 1546 :     /******************************************************************/
; 1547 :     /*  Nasal Antiresonator of Cascade Vocal Tract:                   */
; 1548 :     /*  rnzout = (rnza * voice) + (rnzb * rnzd1) + (rnzc * rnzd2)     */
; 1549 :     /******************************************************************/
; 1550 : 
; 1551 : 	two_zero_filter( voice, rnzout, pVtm_t->rnzd1, pVtm_t->rnzd2, pVtm_t->rnza, pVtm_t->rnzb, pVtm_t->rnzc );

  00d12	66 8b 96 56 01
	00 00		 mov	 dx, WORD PTR [esi+342]
  00d19	c1 ff 0f	 sar	 edi, 15			; 0000000fH
  00d1c	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00d1f	03 c7		 add	 eax, edi
  00d21	03 c8		 add	 ecx, eax
  00d23	0f bf 86 ea 01
	00 00		 movsx	 eax, WORD PTR [esi+490]
  00d2a	0f bf fa	 movsx	 edi, dx
  00d2d	0f af c7	 imul	 eax, edi
  00d30	0f bf be e8 01
	00 00		 movsx	 edi, WORD PTR [esi+488]
  00d37	0f bf e9	 movsx	 ebp, cx
  00d3a	0f af fd	 imul	 edi, ebp
  00d3d	0f bf ae 58 01
	00 00		 movsx	 ebp, WORD PTR [esi+344]
  00d44	03 c7		 add	 eax, edi
  00d46	0f bf be ec 01
	00 00		 movsx	 edi, WORD PTR [esi+492]
  00d4d	0f af fd	 imul	 edi, ebp
  00d50	66 89 96 58 01
	00 00		 mov	 WORD PTR [esi+344], dx
  00d57	66 89 8e 56 01
	00 00		 mov	 WORD PTR [esi+342], cx

; 1552 : 
; 1553 : 	//pVtm_t->iwave[ns] = rnzout;
; 1554 :     /******************************************************************/
; 1555 :     /*  Nasal Resonator of Cascade Vocal Tract                        */
; 1556 :     /*  output is rnpd1.                                              */
; 1557 :     /******************************************************************/
; 1558 : //	pVtm_t->rnpa = pVtm_t->rnpa - ((FZinHZ-200)<<1);
; 1559 :     two_pole_filter( rnzout, pVtm_t->rnpd1, pVtm_t->rnpd2, pVtm_t->rnpa, pVtm_t->rnpb, pVtm_t->rnpc );

  00d5e	0f bf 8e e0 01
	00 00		 movsx	 ecx, WORD PTR [esi+480]
  00d65	0f bf 96 50 01
	00 00		 movsx	 edx, WORD PTR [esi+336]
  00d6c	03 c7		 add	 eax, edi
  00d6e	0f af ca	 imul	 ecx, edx
  00d71	66 8b 96 4e 01
	00 00		 mov	 dx, WORD PTR [esi+334]
  00d78	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00d7b	66 89 96 50 01
	00 00		 mov	 WORD PTR [esi+336], dx
  00d82	0f bf 96 dc 01
	00 00		 movsx	 edx, WORD PTR [esi+476]
  00d89	0f bf be 4e 01
	00 00		 movsx	 edi, WORD PTR [esi+334]
  00d90	0f bf c0	 movsx	 eax, ax
  00d93	0f af d0	 imul	 edx, eax
  00d96	0f bf 86 de 01
	00 00		 movsx	 eax, WORD PTR [esi+478]
  00d9d	0f af c7	 imul	 eax, edi
  00da0	03 ca		 add	 ecx, edx
  00da2	03 c1		 add	 eax, ecx
  00da4	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00da7	66 89 86 4e 01
	00 00		 mov	 WORD PTR [esi+334], ax

; 1560 : 
; 1561 : 
; 1562 : 	//pVtm_t->iwave[ns] = pVtm_t->rnpd1;
; 1563 : 
; 1564 : #ifndef LOWER_YET
; 1565 : 	
; 1566 : 
; 1567 : 
; 1568 : 		
; 1569 :     /******************************************************************/
; 1570 :     /*  Fifth Formant                                                 */
; 1571 :     /*  output is r5cd1.                                              */
; 1572 :     /******************************************************************/
; 1573 : 
; 1574 :     if ( pKsd_t->uiSampleRate > 9500 && ((pVtm_t->R5cb|pVtm_t->R5cc)!=0))

  00dae	8b 8b f0 03 00
	00		 mov	 ecx, DWORD PTR [ebx+1008]
  00db4	81 f9 1c 25 00
	00		 cmp	 ecx, 9500		; 0000251cH
  00dba	76 5c		 jbe	 SHORT $L71804
  00dbc	66 8b 96 d8 01
	00 00		 mov	 dx, WORD PTR [esi+472]
  00dc3	66 8b 8e da 01
	00 00		 mov	 cx, WORD PTR [esi+474]
  00dca	8b fa		 mov	 edi, edx
  00dcc	0b f9		 or	 edi, ecx
  00dce	66 85 ff	 test	 di, di
  00dd1	74 45		 je	 SHORT $L71804

; 1575 :     {
; 1576 : 	  two_pole_filter(pVtm_t->rnpd1, pVtm_t->r5cd1, pVtm_t->r5cd2, pVtm_t->R5ca, pVtm_t->R5cb, pVtm_t->R5cc );

  00dd3	0f bf 86 4c 01
	00 00		 movsx	 eax, WORD PTR [esi+332]
  00dda	0f bf be d6 01
	00 00		 movsx	 edi, WORD PTR [esi+470]
  00de1	0f bf 9e 4e 01
	00 00		 movsx	 ebx, WORD PTR [esi+334]
  00de8	0f bf c9	 movsx	 ecx, cx
  00deb	0f af fb	 imul	 edi, ebx
  00dee	0f af c1	 imul	 eax, ecx
  00df1	66 8b 8e 4a 01
	00 00		 mov	 cx, WORD PTR [esi+330]
  00df8	03 c7		 add	 eax, edi
  00dfa	66 89 8e 4c 01
	00 00		 mov	 WORD PTR [esi+332], cx
  00e01	0f bf c9	 movsx	 ecx, cx
  00e04	0f bf d2	 movsx	 edx, dx
  00e07	0f af ca	 imul	 ecx, edx
  00e0a	03 c8		 add	 ecx, eax
  00e0c	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00e0f	66 89 8e 4a 01
	00 00		 mov	 WORD PTR [esi+330], cx

; 1577 : 	}
; 1578 :     else

  00e16	eb 07		 jmp	 SHORT $L71809
$L71804:

; 1579 :     {
; 1580 :       pVtm_t->r5cd1 = pVtm_t->rnpd1;

  00e18	66 89 86 4a 01
	00 00		 mov	 WORD PTR [esi+330], ax
$L71809:

; 1581 :     }
; 1582 : #else
; 1583 : 		pVtm_t->r5cd1= pVtm_t->rnpd1;
; 1584 : #endif //lower_yet
; 1585 : 
; 1586 : 
; 1587 : 	/******************************************************************/
; 1588 :     /*  First Formant of Cascade Vocal Tract                          */
; 1589 :     /*  output is r1cd1.                                              */
; 1590 :     /******************************************************************/
; 1591 : 
; 1592 :     two_pole_filter( pVtm_t->r5cd1, pVtm_t->r1cd1, pVtm_t->r1cd2, pVtm_t->R1ca, pVtm_t->r1cb, pVtm_t->r1cc );

  00e1f	0f bf 8e be 01
	00 00		 movsx	 ecx, WORD PTR [esi+446]
  00e26	0f bf 86 3c 01
	00 00		 movsx	 eax, WORD PTR [esi+316]
  00e2d	66 8b 96 3a 01
	00 00		 mov	 dx, WORD PTR [esi+314]
  00e34	0f af c8	 imul	 ecx, eax
  00e37	0f bf 86 4a 01
	00 00		 movsx	 eax, WORD PTR [esi+330]
  00e3e	66 89 96 3c 01
	00 00		 mov	 WORD PTR [esi+316], dx
  00e45	0f bf 96 ba 01
	00 00		 movsx	 edx, WORD PTR [esi+442]
  00e4c	0f bf be 3a 01
	00 00		 movsx	 edi, WORD PTR [esi+314]
  00e53	0f af d0	 imul	 edx, eax
  00e56	0f bf 86 bc 01
	00 00		 movsx	 eax, WORD PTR [esi+444]
  00e5d	0f af c7	 imul	 eax, edi
  00e60	03 ca		 add	 ecx, edx

; 1593 : #ifndef lower_yet
; 1594 : 
; 1595 :     /******************************************************************/
; 1596 :     /*  Fourth Formant                                                */
; 1597 :     /*  output is r4cd1.                                              */
; 1598 :     /******************************************************************/
; 1599 : 	if ((pVtm_t->R4cb|pVtm_t->R4cc)!=0)

  00e62	66 8b 96 d2 01
	00 00		 mov	 dx, WORD PTR [esi+466]
  00e69	03 c1		 add	 eax, ecx
  00e6b	66 8b 8e d4 01
	00 00		 mov	 cx, WORD PTR [esi+468]
  00e72	8b fa		 mov	 edi, edx
  00e74	0b f9		 or	 edi, ecx
  00e76	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00e79	66 85 ff	 test	 di, di
  00e7c	66 89 86 3a 01
	00 00		 mov	 WORD PTR [esi+314], ax
  00e83	74 45		 je	 SHORT $L71814

; 1600 : 	{
; 1601 : 		two_pole_filter( pVtm_t->r1cd1, pVtm_t->r4cd1, pVtm_t->r4cd2, pVtm_t->R4ca, pVtm_t->R4cb, pVtm_t->R4cc );

  00e85	0f bf 86 48 01
	00 00		 movsx	 eax, WORD PTR [esi+328]
  00e8c	0f bf be d0 01
	00 00		 movsx	 edi, WORD PTR [esi+464]
  00e93	0f bf 9e 3a 01
	00 00		 movsx	 ebx, WORD PTR [esi+314]
  00e9a	0f bf c9	 movsx	 ecx, cx
  00e9d	0f af fb	 imul	 edi, ebx
  00ea0	0f af c1	 imul	 eax, ecx
  00ea3	66 8b 8e 46 01
	00 00		 mov	 cx, WORD PTR [esi+326]
  00eaa	03 c7		 add	 eax, edi
  00eac	66 89 8e 48 01
	00 00		 mov	 WORD PTR [esi+328], cx
  00eb3	0f bf c9	 movsx	 ecx, cx
  00eb6	0f bf d2	 movsx	 edx, dx
  00eb9	0f af ca	 imul	 ecx, edx
  00ebc	03 c8		 add	 ecx, eax
  00ebe	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00ec1	66 89 8e 46 01
	00 00		 mov	 WORD PTR [esi+326], cx

; 1602 : 	}
; 1603 : 	else

  00ec8	eb 07		 jmp	 SHORT $L71819
$L71814:

; 1604 : 	{
; 1605 : 		pVtm_t->r4cd1= pVtm_t->r1cd1;

  00eca	66 89 86 46 01
	00 00		 mov	 WORD PTR [esi+326], ax
$L71819:

; 1606 : 	}
; 1607 : #else 
; 1608 : 	pVtm_t->r4cd1= pVtm_t->r1cd1;
; 1609 : 
; 1610 : #endif //lower_yet
; 1611 : 
; 1612 :     /******************************************************************/
; 1613 :     /*  Third Formant                                                 */
; 1614 :     /*  output is r3cd1.                                              */
; 1615 :     /******************************************************************/
; 1616 : 
; 1617 :     two_pole_filter( pVtm_t->r4cd1, pVtm_t->r3cd1, pVtm_t->r3cd2, pVtm_t->R3ca, pVtm_t->r3cb, pVtm_t->r3cc );

  00ed1	0f bf 86 ce 01
	00 00		 movsx	 eax, WORD PTR [esi+462]
  00ed8	0f bf 8e 44 01
	00 00		 movsx	 ecx, WORD PTR [esi+324]
  00edf	0f bf 96 cc 01
	00 00		 movsx	 edx, WORD PTR [esi+460]
  00ee6	0f af c1	 imul	 eax, ecx
  00ee9	66 8b 8e 42 01
	00 00		 mov	 cx, WORD PTR [esi+322]
  00ef0	0f bf be 46 01
	00 00		 movsx	 edi, WORD PTR [esi+326]
  00ef7	66 89 8e 44 01
	00 00		 mov	 WORD PTR [esi+324], cx
  00efe	0f bf c9	 movsx	 ecx, cx
  00f01	0f af d1	 imul	 edx, ecx
  00f04	0f bf 8e ca 01
	00 00		 movsx	 ecx, WORD PTR [esi+458]
  00f0b	0f af cf	 imul	 ecx, edi
  00f0e	03 c2		 add	 eax, edx

; 1618 : 
; 1619 : 	//pVtm_t->iwave[ns] =  pVtm_t->r3cd1;
; 1620 :     /******************************************************************/
; 1621 :     /*  Second Formant                                                */
; 1622 :     /*  output is r2cd1.                                              */
; 1623 :     /******************************************************************/
; 1624 : 
; 1625 :     two_pole_filter( pVtm_t->r3cd1, pVtm_t->r2cd1, pVtm_t->r2cd2, pVtm_t->R2ca, pVtm_t->r2cb, pVtm_t->r2cc );

  00f10	0f bf 96 40 01
	00 00		 movsx	 edx, WORD PTR [esi+320]
  00f17	03 c8		 add	 ecx, eax
  00f19	0f bf 86 c8 01
	00 00		 movsx	 eax, WORD PTR [esi+456]
  00f20	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00f23	0f af c2	 imul	 eax, edx
  00f26	0f bf 96 c6 01
	00 00		 movsx	 edx, WORD PTR [esi+454]
  00f2d	66 89 8e 42 01
	00 00		 mov	 WORD PTR [esi+322], cx
  00f34	66 8b 8e 3e 01
	00 00		 mov	 cx, WORD PTR [esi+318]
  00f3b	0f bf ae c4 01
	00 00		 movsx	 ebp, WORD PTR [esi+452]
  00f42	66 89 8e 40 01
	00 00		 mov	 WORD PTR [esi+320], cx
  00f49	0f bf c9	 movsx	 ecx, cx
  00f4c	0f af d1	 imul	 edx, ecx
  00f4f	0f bf 8e 42 01
	00 00		 movsx	 ecx, WORD PTR [esi+322]
  00f56	0f af e9	 imul	 ebp, ecx
  00f59	03 c2		 add	 eax, edx
  00f5b	03 e8		 add	 ebp, eax
  00f5d	c1 fd 0c	 sar	 ebp, 12			; 0000000cH
  00f60	66 89 ae 3e 01
	00 00		 mov	 WORD PTR [esi+318], bp

; 1626 : //	pVtm_t->iwave[ns] = pVtm_t->r2cd1; 
; 1627 : 
; 1628 : 	
; 1629 : 
; 1630 : 	 out = pVtm_t->r2cd1;

  00f67	33 ff		 xor	 edi, edi
$skip_cascade$71789:

; 1631 : 
; 1632 : 	//pVtm_t->iwave[ns] =  pVtm_t->r2cd1;
; 1633 : skip_cascade:
; 1634 : 		
; 1635 :     
; 1636 :     /******************************************************************/
; 1637 :     /******************************************************************/
; 1638 :     /*                                                                */
; 1639 :     /*  PARALLEL VOCAL TRACT                                          */
; 1640 :     /*                                                                */
; 1641 :     /*  Excited by frication noise source. Uses formant frequencies   */
; 1642 :     /*  f6p, f5p, f4p, F3inHz, F2inHz and bypass path, outputs added  */
; 1643 :     /*  with alternating sign to prevent overflow.                    */
; 1644 :     /*                                                                */
; 1645 :     /******************************************************************/
; 1646 :     /******************************************************************/
; 1647 : 	
; 1648 :     /******************************************************************/
; 1649 :     /*  Sixth Formant of Parallel Vocal Tract                         */
; 1650 :     /******************************************************************/
; 1651 : #ifdef GERMAN
; 1652 : 	
; 1653 : 	two_pole_filter( voice, pVtm_t->rnppd1, pVtm_t->rnppd2, pVtm_t->rnppa,pVtm_t->rnppb, pVtm_t->rnppc );
; 1654 : 	out = pVtm_t->rnppd1 - out;
; 1655 : #endif
; 1656 : 	if(pVtm_t->par_count==0)

  00f69	39 be 18 02 00
	00		 cmp	 DWORD PTR [esi+536], edi
  00f6f	0f 84 cc 01 00
	00		 je	 $L72167

; 1657 : 		goto skip_parallel;
; 1658 : 
; 1659 :     two_pole_filter( noise, pVtm_t->r6pd1, pVtm_t->r6pd2, r6pa,r6pb, r6pc );

  00f75	0f bf 8e 38 01
	00 00		 movsx	 ecx, WORD PTR [esi+312]
  00f7c	0f bf 7c 24 1c	 movsx	 edi, WORD PTR _noise$[esp+108]
  00f81	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00f84	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00f87	c1 e0 04	 shl	 eax, 4
  00f8a	2b c1		 sub	 eax, ecx
  00f8c	66 8b 8e 36 01
	00 00		 mov	 cx, WORD PTR [esi+310]
  00f93	0f bf d1	 movsx	 edx, cx
  00f96	f7 d8		 neg	 eax
  00f98	66 89 8e 38 01
	00 00		 mov	 WORD PTR [esi+312], cx
  00f9f	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  00fa2	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
  00fa5	0f bf 44 24 28	 movsx	 eax, WORD PTR _r6pa$[esp+108]
  00faa	c1 e1 05	 shl	 ecx, 5
  00fad	0f af c7	 imul	 eax, edi
  00fb0	2b ca		 sub	 ecx, edx
  00fb2	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00fb5	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00fb8	8d 14 4a	 lea	 edx, DWORD PTR [edx+ecx*2]

; 1660 : 	
; 1661 :     out = pVtm_t->r6pd1 - out;
; 1662 : #ifndef LOWEST
; 1663 : 
; 1664 :     /******************************************************************/
; 1665 :     /*  Fifth Formant of Parallel Vocal Tract                         */
; 1666 :     /*  Fifth parallel formant effectively out of circuit if the      */
; 1667 :     /*  sample rate is low enough.                                    */
; 1668 :     /******************************************************************/
; 1669 : 
; 1670 :     if ( pKsd_t->uiSampleRate > 9600 && ((pVtm_t->R5pb|pVtm_t->r5pc)!=0) )

  00fbb	8b 4c 24 2c	 mov	 ecx, DWORD PTR -64+[esp+108]
  00fbf	d1 e2		 shl	 edx, 1
  00fc1	2b c2		 sub	 eax, edx
  00fc3	03 c3		 add	 eax, ebx
  00fc5	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00fc8	66 89 86 36 01
	00 00		 mov	 WORD PTR [esi+310], ax
  00fcf	8b 91 f0 03 00
	00		 mov	 edx, DWORD PTR [ecx+1008]
  00fd5	2b c5		 sub	 eax, ebp
  00fd7	81 fa 80 25 00
	00		 cmp	 edx, 9600		; 00002580H
  00fdd	76 53		 jbe	 SHORT $L71834
  00fdf	66 8b 9e b6 01
	00 00		 mov	 bx, WORD PTR [esi+438]
  00fe6	66 8b 8e b8 01
	00 00		 mov	 cx, WORD PTR [esi+440]
  00fed	8b d3		 mov	 edx, ebx
  00fef	0b d1		 or	 edx, ecx
  00ff1	66 85 d2	 test	 dx, dx
  00ff4	74 3c		 je	 SHORT $L71834

; 1671 :     {
; 1672 :       two_pole_filter( noise, pVtm_t->r5pd1, pVtm_t->r5pd2, r5pa, pVtm_t->R5pb, pVtm_t->r5pc );

  00ff6	0f bf 96 34 01
	00 00		 movsx	 edx, WORD PTR [esi+308]
  00ffd	0f bf c9	 movsx	 ecx, cx
  01000	0f af ca	 imul	 ecx, edx
  01003	66 8b 96 32 01
	00 00		 mov	 dx, WORD PTR [esi+306]
  0100a	66 89 96 34 01
	00 00		 mov	 WORD PTR [esi+308], dx
  01011	0f bf d2	 movsx	 edx, dx
  01014	0f bf db	 movsx	 ebx, bx
  01017	0f af d3	 imul	 edx, ebx
  0101a	0f bf 5c 24 30	 movsx	 ebx, WORD PTR _r5pa$[esp+108]
  0101f	0f af df	 imul	 ebx, edi
  01022	03 ca		 add	 ecx, edx
  01024	03 d9		 add	 ebx, ecx
  01026	c1 fb 0c	 sar	 ebx, 12			; 0000000cH
  01029	66 89 9e 32 01
	00 00		 mov	 WORD PTR [esi+306], bx

; 1673 :     }
; 1674 :     else

  01030	eb 09		 jmp	 SHORT $L71839
$L71834:

; 1675 :     {
; 1676 :       pVtm_t->r5pd1 = 0;

  01032	66 c7 86 32 01
	00 00 00 00	 mov	 WORD PTR [esi+306], 0
$L71839:

; 1677 :     }
; 1678 : 
; 1679 :     out = pVtm_t->r5pd1 - out;

  0103b	66 8b ae 32 01
	00 00		 mov	 bp, WORD PTR [esi+306]

; 1680 : 
; 1681 :     /******************************************************************/
; 1682 :     /*  Fourth Formant of Parallel Vocal Tract                        */
; 1683 :     /******************************************************************/
; 1684 : 
; 1685 : 	if ((pVtm_t->R4pb|pVtm_t->r4pc)!=0)

  01042	66 8b 96 b2 01
	00 00		 mov	 dx, WORD PTR [esi+434]
  01049	66 2b e8	 sub	 bp, ax
  0104c	66 8b 86 b4 01
	00 00		 mov	 ax, WORD PTR [esi+436]
  01053	8b ca		 mov	 ecx, edx
  01055	0b c8		 or	 ecx, eax
  01057	66 85 c9	 test	 cx, cx
  0105a	74 3c		 je	 SHORT $L71840

; 1686 : 	{
; 1687 : 		two_pole_filter( noise, pVtm_t->r4pd1, pVtm_t->r4pd2, r4pa, pVtm_t->R4pb, pVtm_t->r4pc );

  0105c	0f bf 8e 30 01
	00 00		 movsx	 ecx, WORD PTR [esi+304]
  01063	0f bf c0	 movsx	 eax, ax
  01066	0f af c1	 imul	 eax, ecx
  01069	66 8b 8e 2e 01
	00 00		 mov	 cx, WORD PTR [esi+302]
  01070	66 89 8e 30 01
	00 00		 mov	 WORD PTR [esi+304], cx
  01077	0f bf c9	 movsx	 ecx, cx
  0107a	0f bf d2	 movsx	 edx, dx
  0107d	0f af ca	 imul	 ecx, edx
  01080	0f bf 54 24 34	 movsx	 edx, WORD PTR _r4pa$[esp+108]
  01085	0f af d7	 imul	 edx, edi
  01088	03 c1		 add	 eax, ecx
  0108a	03 d0		 add	 edx, eax
  0108c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0108f	66 89 96 2e 01
	00 00		 mov	 WORD PTR [esi+302], dx

; 1688 : 	}
; 1689 : 	else

  01096	eb 09		 jmp	 SHORT $L71845
$L71840:

; 1690 : 	{
; 1691 : 		pVtm_t->r4pd1=0;

  01098	66 c7 86 2e 01
	00 00 00 00	 mov	 WORD PTR [esi+302], 0
$L71845:

; 1692 : 	}
; 1693 : 
; 1694 :     out = pVtm_t->r4pd1 - out;
; 1695 : #endif
; 1696 :     /******************************************************************/
; 1697 :     /*  Third Formant of Parallel Vocal Tract                         */
; 1698 :     /******************************************************************/
; 1699 : 
; 1700 :     two_pole_filter( noise, pVtm_t->r3pd1, pVtm_t->r3pd2, r3pa, r3pb, r3pc );

  010a1	0f bf 8e 2c 01
	00 00		 movsx	 ecx, WORD PTR [esi+300]
  010a8	0f bf 44 24 10	 movsx	 eax, WORD PTR _r3pc$[esp+108]
  010ad	66 8b 96 2a 01
	00 00		 mov	 dx, WORD PTR [esi+298]
  010b4	0f af c8	 imul	 ecx, eax
  010b7	66 89 96 2c 01
	00 00		 mov	 WORD PTR [esi+300], dx

; 1701 : 
; 1702 :     out = pVtm_t->r3pd1 - out;
; 1703 : 
; 1704 :     /******************************************************************/
; 1705 :     /*  Second Formant of Parallel Vocal Tract                        */
; 1706 :     /******************************************************************/
; 1707 : 
; 1708 :     two_pole_filter( noise, pVtm_t->r2pd1, pVtm_t->r2pd2, r2pa, r2pb, r2pc );
; 1709 : 
; 1710 :     out = pVtm_t->r2pd1 - out;
; 1711 : 
; 1712 :     about = frac1mul( ABlin, noise );  /*  Output of bypass path      */
; 1713 : 
; 1714 :     out = about - out;

  010be	8b 5c 24 3c	 mov	 ebx, DWORD PTR _ns$[esp+108]
  010c2	0f bf 44 24 12	 movsx	 eax, WORD PTR _r3pb$[esp+108]
  010c7	0f bf d2	 movsx	 edx, dx
  010ca	0f af d0	 imul	 edx, eax
  010cd	0f bf 44 24 60	 movsx	 eax, WORD PTR _r3pa$[esp+108]
  010d2	0f af c7	 imul	 eax, edi
  010d5	03 ca		 add	 ecx, edx
  010d7	0f bf 96 28 01
	00 00		 movsx	 edx, WORD PTR [esi+296]
  010de	03 c1		 add	 eax, ecx
  010e0	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  010e3	66 89 86 2a 01
	00 00		 mov	 WORD PTR [esi+298], ax
  010ea	66 2b 86 2e 01
	00 00		 sub	 ax, WORD PTR [esi+302]
  010f1	0f bf 4c 24 14	 movsx	 ecx, WORD PTR _r2pc$[esp+108]
  010f6	03 e8		 add	 ebp, eax
  010f8	66 8b 86 26 01
	00 00		 mov	 ax, WORD PTR [esi+294]
  010ff	0f af ca	 imul	 ecx, edx
  01102	66 89 86 28 01
	00 00		 mov	 WORD PTR [esi+296], ax
  01109	0f bf 96 26 01
	00 00		 movsx	 edx, WORD PTR [esi+294]
  01110	0f bf 44 24 16	 movsx	 eax, WORD PTR _r2pb$[esp+108]
  01115	0f af d0	 imul	 edx, eax
  01118	0f bf 44 24 64	 movsx	 eax, WORD PTR _r2pa$[esp+108]
  0111d	0f af c7	 imul	 eax, edi
  01120	03 ca		 add	 ecx, edx
  01122	03 c1		 add	 eax, ecx
  01124	0f bf 4c 24 38	 movsx	 ecx, WORD PTR _ABlin$[esp+108]
  01129	0f af cf	 imul	 ecx, edi
  0112c	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0112f	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  01132	2b c8		 sub	 ecx, eax
  01134	66 89 86 26 01
	00 00		 mov	 WORD PTR [esi+294], ax
  0113b	03 e9		 add	 ebp, ecx
  0113d	33 ff		 xor	 edi, edi
  0113f	eb 04		 jmp	 SHORT $skip_parallel$71829
$L72167:
  01141	8b 5c 24 3c	 mov	 ebx, DWORD PTR _ns$[esp+108]
$skip_parallel$71829:

; 1715 : 
; 1716 : 
; 1717 : 
; 1718 : skip_parallel:
; 1719 : 	
; 1720 : 		 //6/22/99 With the hotter tuning of the vocal tract the limit sycles are becoming very annoying
; 1721 : 	 //since we now pass phoneme information we can build a decayer to choke out he limit cycle
; 1722 : 	 //when we reach silence with av off we ramp down the gain....This also solves the problem of continues
; 1723 : 	 //noise with a breathy voice. 
; 1724 : 	 if (pVtm_t->avlind == 0 && (variabpars[OUT_PH] & PVALUE) == 0 )

  01145	66 39 be 0c 02
	00 00		 cmp	 WORD PTR [esi+524], di
  0114c	75 3e		 jne	 SHORT $L71855
  0114e	8a 86 f4 00 00
	00		 mov	 al, BYTE PTR [esi+244]
  01154	84 c0		 test	 al, al
  01156	75 34		 jne	 SHORT $L71855

; 1725 : 	 {
; 1726 : 		
; 1727 : 		 pVtm_t->rampdown += 200;

  01158	66 81 86 46 02
	00 00 c8 00	 add	 WORD PTR [esi+582], 200	; 000000c8H

; 1728 : 		  if (pVtm_t->rampdown >= 4096)

  01161	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  01166	66 39 86 46 02
	00 00		 cmp	 WORD PTR [esi+582], ax
  0116d	7c 07		 jl	 SHORT $L71856

; 1729 : 			 pVtm_t->rampdown = 4096;

  0116f	66 89 86 46 02
	00 00		 mov	 WORD PTR [esi+582], ax
$L71856:

; 1730 : 		  out = frac4mul( out,(4096 - pVtm_t->rampdown));

  01176	0f bf 96 46 02
	00 00		 movsx	 edx, WORD PTR [esi+582]
  0117d	0f bf cd	 movsx	 ecx, bp
  01180	2b c2		 sub	 eax, edx
  01182	0f af c1	 imul	 eax, ecx
  01185	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  01188	8b e8		 mov	 ebp, eax

; 1731 : 	 }
; 1732 : 	 else

  0118a	eb 07		 jmp	 SHORT $L71858
$L71855:

; 1733 : 
; 1734 : 		 pVtm_t->rampdown=0;

  0118c	66 89 be 46 02
	00 00		 mov	 WORD PTR [esi+582], di
$L71858:

; 1735 :     /******************************************************************/
; 1736 :     /*  Bring the signal level up near +/-32767.                      */
; 1737 :     /*  If the sample rate is 8000 Hz. then the peak signal level is  */
; 1738 :     /*  approximately 8000. This is because of the parameters in file */
; 1739 :     /*  phvdef.c for a sample rate of 8000 Hz.                        */
; 1740 :     /*                                                                */
; 1741 :     /*  Very occasionaly a large impulse will be generated. Clip it.  */
; 1742 :     /*  This allows running the volume level much higher.             */
; 1743 :     /******************************************************************/
; 1744 : 
; 1745 : 
; 1746 : /* EAB BATS #491 && 554 1/28/98 The statement that the 8K was tuned to +-8000 was 
; 1747 : probably correct but it wasn't supose to be tuned to those levels it was also
; 1748 : suppose to be +-32767- when the vdef got retuned to hotter levels then the compressor
; 1749 : was clipping too much which when fed into a mu-law compressor further degraded the signal
; 1750 : causing it to sound bad. The follwoing code is a simple compressor to raise the average signal level
; 1751 : by 3 db by simply limiting peak excursions whwen they occur */
; 1752 : #ifdef COMPRESSION
; 1753 : 	// tek 29oct98 do a simple bit of compression. 
; 1754 : 	// This algorithm uses a look-up table to quickly 
; 1755 : 	// find the maximum gain for a sample (to avoid having to 
; 1756 : 	// do a calculation for each).
; 1757 : 	if(!pVtm_t->bDoTuning)
; 1758 : 	{
; 1759 : 		S16 sabs = out;
; 1760 : 		S16 stGain;
; 1761 : 
; 1762 : 		// get absolute value..
; 1763 : 		if (sabs<0)
; 1764 : 			sabs = -sabs;
; 1765 : 
; 1766 : 		pVtm_t->sGain += CompGainIncrement;
; 1767 : 
; 1768 : 
; 1769 : 		// get the gain from the lookup table
; 1770 : 		// shift by 9 gives us six bits of index,
; 1771 : 		// because the sign bit is always 0.
; 1772 : 		stGain = CompGainTable[(sabs)>>9];
; 1773 : 		if (stGain<pVtm_t->sGain)
; 1774 : 		{
; 1775 : 			// reduce gain
; 1776 : 			pVtm_t->sGain = stGain;
; 1777 : 		}
; 1778 : 		// scale the sample
; 1779 : 		// this is probably frac4mul.. at any rate, it's 
; 1780 : 		// Q0*Q12
; 1781 : 		sabs = (S16)(((S32)sabs * (S32)pVtm_t->sGain)>>12);
; 1782 : 		// put it back, with the correct sign
; 1783 : 		if (out<0)
; 1784 : 		{
; 1785 : 	    pVtm_t->iwave[ns] = -sabs;
; 1786 : 		}
; 1787 : 		else
; 1788 : 		{
; 1789 : 	    pVtm_t->iwave[ns] = sabs;
; 1790 : 		}
; 1791 : 	}
; 1792 : #else //COMPRESSION
; 1793 : out= frac1mul(out, vol_att );

  01193	0f bf c5	 movsx	 eax, bp
  01196	0f af 44 24 68	 imul	 eax, DWORD PTR _vol_att$[esp+108]
  0119b	c1 f8 0f	 sar	 eax, 15			; 0000000fH

; 1794 :     if ( out > 16383 )

  0119e	66 3d ff 3f	 cmp	 ax, 16383		; 00003fffH
  011a2	7e 07		 jle	 SHORT $L71860

; 1795 : 		out = 16383;

  011a4	b8 ff 3f 00 00	 mov	 eax, 16383		; 00003fffH

; 1796 :      else if ( out < -16384 )

  011a9	eb 0b		 jmp	 SHORT $L71862
$L71860:
  011ab	66 3d 00 c0	 cmp	 ax, -16384		; ffffc000H
  011af	7d 05		 jge	 SHORT $L71862

; 1797 : 	  out = -16384;

  011b1	b8 00 c0 ff ff	 mov	 eax, -16384		; ffffc000H
$L71862:

; 1798 :       pVtm_t->iwave[ns] =  out << 1;

  011b6	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]
  011b9	66 89 54 5e 08	 mov	 WORD PTR [esi+ebx*2+8], dx

; 1799 : #endif //COMPRESSION
; 1800 : 
; 1801 : 	// tek 28oct98 move all the tuning pickups here, so that we can turn them on/off
; 1802 : 	// with just one if statement
; 1803 : 
; 1804 : 	if(pVtm_t->bDoTuning)

  011be	8b 86 34 02 00
	00		 mov	 eax, DWORD PTR [esi+564]
  011c4	3b c7		 cmp	 eax, edi
  011c6	0f 84 83 03 00
	00		 je	 $L71729

; 1805 : 	{
; 1806 : 		BOOL bOverloaded = FALSE;
; 1807 : 		DWORD dwPhoneme = variabpars[OUT_PH];

  011cc	0f bf 86 f4 00
	00 00		 movsx	 eax, WORD PTR [esi+244]

; 1808 : 
; 1809 : 		// keep track of the phonemes..
; 1810 : 		if (dwPhoneme != pVtm_t->vtdTuneResults.dwThisPhoneme)

  011d3	8b 8e 8c 01 00
	00		 mov	 ecx, DWORD PTR [esi+396]
  011d9	3b c1		 cmp	 eax, ecx
  011db	74 0c		 je	 SHORT $L71866

; 1811 : 		{
; 1812 : 			pVtm_t->vtdTuneResults.dwLastPhoneme = pVtm_t->vtdTuneResults.dwThisPhoneme;

  011dd	89 8e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ecx

; 1813 : 			pVtm_t->vtdTuneResults.dwThisPhoneme = dwPhoneme;

  011e3	89 86 8c 01 00
	00		 mov	 DWORD PTR [esi+396], eax
$L71866:

; 1814 : 		}
; 1815 : 
; 1816 : 
; 1817 : #if 1
; 1818 : 		getmax(pVtm_t->rlpd1,&pVtm_t->vtdTuneResults.purevmax);

  011e9	66 8b 86 5a 01
	00 00		 mov	 ax, WORD PTR [esi+346]
  011f0	66 3b c7	 cmp	 ax, di
  011f3	7d 02		 jge	 SHORT $L71999
  011f5	f7 d8		 neg	 eax
$L71999:
  011f7	66 3b 86 7e 01
	00 00		 cmp	 ax, WORD PTR [esi+382]
  011fe	7e 07		 jle	 SHORT $L72000
  01200	66 89 86 7e 01
	00 00		 mov	 WORD PTR [esi+382], ax
$L72000:

; 1819 : 		getmax(pVtm_t->rnzd1,&pVtm_t->vtdTuneResults.rnzmax);

  01207	66 8b 86 56 01
	00 00		 mov	 ax, WORD PTR [esi+342]
  0120e	66 3b c7	 cmp	 ax, di
  01211	7d 02		 jge	 SHORT $L72006
  01213	f7 d8		 neg	 eax
$L72006:
  01215	66 3b 86 72 01
	00 00		 cmp	 ax, WORD PTR [esi+370]
  0121c	7e 07		 jle	 SHORT $L72007
  0121e	66 89 86 72 01
	00 00		 mov	 WORD PTR [esi+370], ax
$L72007:

; 1820 : 		getmax(pVtm_t->rnpd1,&pVtm_t->vtdTuneResults.rnpmax);

  01225	66 8b 86 4e 01
	00 00		 mov	 ax, WORD PTR [esi+334]
  0122c	66 3b c7	 cmp	 ax, di
  0122f	7d 02		 jge	 SHORT $L72013
  01231	f7 d8		 neg	 eax
$L72013:
  01233	66 3b 86 70 01
	00 00		 cmp	 ax, WORD PTR [esi+368]
  0123a	7e 07		 jle	 SHORT $L72014
  0123c	66 89 86 70 01
	00 00		 mov	 WORD PTR [esi+368], ax
$L72014:

; 1821 : 		getmax(pVtm_t->r5cd1,&pVtm_t->vtdTuneResults.c5max);

  01243	66 8b 86 4a 01
	00 00		 mov	 ax, WORD PTR [esi+330]
  0124a	66 3b c7	 cmp	 ax, di
  0124d	7d 02		 jge	 SHORT $L72020
  0124f	f7 d8		 neg	 eax
$L72020:
  01251	66 3b 86 7c 01
	00 00		 cmp	 ax, WORD PTR [esi+380]
  01258	7e 07		 jle	 SHORT $L72021
  0125a	66 89 86 7c 01
	00 00		 mov	 WORD PTR [esi+380], ax
$L72021:

; 1822 : 		getmax(pVtm_t->r4cd1,&pVtm_t->vtdTuneResults.c4max);

  01261	66 8b 86 46 01
	00 00		 mov	 ax, WORD PTR [esi+326]
  01268	66 3b c7	 cmp	 ax, di
  0126b	7d 02		 jge	 SHORT $L72027
  0126d	f7 d8		 neg	 eax
$L72027:
  0126f	66 3b 86 7a 01
	00 00		 cmp	 ax, WORD PTR [esi+378]
  01276	7e 07		 jle	 SHORT $L72028
  01278	66 89 86 7a 01
	00 00		 mov	 WORD PTR [esi+378], ax
$L72028:

; 1823 : 		getmax(pVtm_t->r3cd1,&pVtm_t->vtdTuneResults.c3max);

  0127f	66 8b 86 42 01
	00 00		 mov	 ax, WORD PTR [esi+322]
  01286	66 3b c7	 cmp	 ax, di
  01289	7d 02		 jge	 SHORT $L72034
  0128b	f7 d8		 neg	 eax
$L72034:
  0128d	66 3b 86 78 01
	00 00		 cmp	 ax, WORD PTR [esi+376]
  01294	7e 07		 jle	 SHORT $L72035
  01296	66 89 86 78 01
	00 00		 mov	 WORD PTR [esi+376], ax
$L72035:

; 1824 : 		getmax(pVtm_t->r2cd1,&pVtm_t->vtdTuneResults.c2max);

  0129d	66 8b 86 3e 01
	00 00		 mov	 ax, WORD PTR [esi+318]
  012a4	66 3b c7	 cmp	 ax, di
  012a7	7d 02		 jge	 SHORT $L72041
  012a9	f7 d8		 neg	 eax
$L72041:
  012ab	66 3b 86 76 01
	00 00		 cmp	 ax, WORD PTR [esi+374]
  012b2	7e 07		 jle	 SHORT $L72042
  012b4	66 89 86 76 01
	00 00		 mov	 WORD PTR [esi+374], ax
$L72042:

; 1825 : 		getmax(pVtm_t->r1cd1,&pVtm_t->vtdTuneResults.c1max);

  012bb	66 8b 86 3a 01
	00 00		 mov	 ax, WORD PTR [esi+314]
  012c2	66 3b c7	 cmp	 ax, di
  012c5	7d 02		 jge	 SHORT $L72048
  012c7	f7 d8		 neg	 eax
$L72048:
  012c9	66 3b 86 74 01
	00 00		 cmp	 ax, WORD PTR [esi+372]
  012d0	7e 07		 jle	 SHORT $L72049
  012d2	66 89 86 74 01
	00 00		 mov	 WORD PTR [esi+372], ax
$L72049:

; 1826 : 		getmax(pVtm_t->r2pd1,&pVtm_t->vtdTuneResults.r2pd1);

  012d9	66 8b 86 26 01
	00 00		 mov	 ax, WORD PTR [esi+294]
  012e0	66 3b c7	 cmp	 ax, di
  012e3	7d 02		 jge	 SHORT $L72055
  012e5	f7 d8		 neg	 eax
$L72055:
  012e7	66 3b 86 80 01
	00 00		 cmp	 ax, WORD PTR [esi+384]
  012ee	7e 07		 jle	 SHORT $L72056
  012f0	66 89 86 80 01
	00 00		 mov	 WORD PTR [esi+384], ax
$L72056:

; 1827 : 		getmax(pVtm_t->r3pd1,&pVtm_t->vtdTuneResults.r3pd1);

  012f7	66 8b 86 2a 01
	00 00		 mov	 ax, WORD PTR [esi+298]
  012fe	66 3b c7	 cmp	 ax, di
  01301	7d 02		 jge	 SHORT $L72062
  01303	f7 d8		 neg	 eax
$L72062:
  01305	66 3b 86 82 01
	00 00		 cmp	 ax, WORD PTR [esi+386]
  0130c	7e 07		 jle	 SHORT $L72063
  0130e	66 89 86 82 01
	00 00		 mov	 WORD PTR [esi+386], ax
$L72063:

; 1828 : 		getmax(pVtm_t->r4pd1,&pVtm_t->vtdTuneResults.r4pd1);

  01315	66 8b 86 2e 01
	00 00		 mov	 ax, WORD PTR [esi+302]
  0131c	66 3b c7	 cmp	 ax, di
  0131f	7d 02		 jge	 SHORT $L72069
  01321	f7 d8		 neg	 eax
$L72069:
  01323	66 3b 86 84 01
	00 00		 cmp	 ax, WORD PTR [esi+388]
  0132a	7e 07		 jle	 SHORT $L72070
  0132c	66 89 86 84 01
	00 00		 mov	 WORD PTR [esi+388], ax
$L72070:

; 1829 : 		//getmax(pVtm_t->r5pd1,&pVtm_t->vtdTuneResults.r5pd1);
; 1830 : 		getmax(pVtm_t->iwave[ns],&pVtm_t->vtdTuneResults.r5pd1);

  01333	66 8b 44 5e 08	 mov	 ax, WORD PTR [esi+ebx*2+8]
  01338	66 3b c7	 cmp	 ax, di
  0133b	7d 02		 jge	 SHORT $L72076
  0133d	f7 d8		 neg	 eax
$L72076:
  0133f	66 3b 86 86 01
	00 00		 cmp	 ax, WORD PTR [esi+390]
  01346	7e 07		 jle	 SHORT $L72077
  01348	66 89 86 86 01
	00 00		 mov	 WORD PTR [esi+390], ax
$L72077:

; 1831 : #endif
; 1832 : 
; 1833 : 
; 1834 : #if 0
; 1835 : 
; 1836 : 		if ( (pVtm_t->vtdTuneResults.purevmax > MAX_TRIGGER)
; 1837 : 			||(pVtm_t->vtdTuneResults.rnzmax > MAX_TRIGGER)
; 1838 : 			||(pVtm_t->vtdTuneResults.rnpmax > MAX_TRIGGER)
; 1839 : 			||(pVtm_t->vtdTuneResults.c5max > MAX_TRIGGER)
; 1840 : 			||(pVtm_t->vtdTuneResults.c4max > MAX_TRIGGER)
; 1841 : 			||(pVtm_t->vtdTuneResults.c3max > MAX_TRIGGER)
; 1842 : 			||(pVtm_t->vtdTuneResults.c2max > 26000 /*MAX_TRIGGER*/)
; 1843 : 			||(pVtm_t->vtdTuneResults.c1max > MAX_TRIGGER) 
; 1844 : 			//eab 6/11/99 Also check output at end of parallel tract
; 1845 : 			//becuase we really don't want any overloads......
; 1846 : 			|| (pVtm_t->vtdTuneResults.r5pd1 > 28000)
; 1847 : 			)
; 1848 : #endif
; 1849 : 		if (checkmax(pVtm_t->rlpd1,MAX_TRIGGER) ||
; 1850 : 			checkmax(pVtm_t->rnzd1,MAX_TRIGGER) ||
; 1851 : 			checkmax(pVtm_t->rnpd1,MAX_TRIGGER) ||
; 1852 : 			checkmax(pVtm_t->r5cd1,MAX_TRIGGER) ||
; 1853 : 			checkmax(pVtm_t->r4cd1,MAX_TRIGGER) ||
; 1854 : 			checkmax(pVtm_t->r3cd1,MAX_TRIGGER) ||
; 1855 : 			checkmax(pVtm_t->r2cd1,26000) ||
; 1856 : 			checkmax(pVtm_t->r1cd1,MAX_TRIGGER) ||
; 1857 : 			checkmax(pVtm_t->iwave[ns],28000))

  0134f	66 8b 86 5a 01
	00 00		 mov	 ax, WORD PTR [esi+346]
  01356	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  0135a	0f 8f ac 00 00
	00		 jg	 $L72148
  01360	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  01364	0f 8c a2 00 00
	00		 jl	 $L72148
  0136a	66 8b 86 56 01
	00 00		 mov	 ax, WORD PTR [esi+342]
  01371	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  01375	0f 8f 91 00 00
	00		 jg	 $L72148
  0137b	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  0137f	0f 8c 87 00 00
	00		 jl	 $L72148
  01385	66 8b 86 4e 01
	00 00		 mov	 ax, WORD PTR [esi+334]
  0138c	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  01390	7f 7a		 jg	 SHORT $L72148
  01392	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  01396	7c 74		 jl	 SHORT $L72148
  01398	66 8b 86 4a 01
	00 00		 mov	 ax, WORD PTR [esi+330]
  0139f	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  013a3	7f 67		 jg	 SHORT $L72148
  013a5	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  013a9	7c 61		 jl	 SHORT $L72148
  013ab	66 8b 86 46 01
	00 00		 mov	 ax, WORD PTR [esi+326]
  013b2	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  013b6	7f 54		 jg	 SHORT $L72148
  013b8	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  013bc	7c 4e		 jl	 SHORT $L72148
  013be	66 8b 86 42 01
	00 00		 mov	 ax, WORD PTR [esi+322]
  013c5	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  013c9	7f 41		 jg	 SHORT $L72148
  013cb	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  013cf	7c 3b		 jl	 SHORT $L72148
  013d1	66 8b 86 3e 01
	00 00		 mov	 ax, WORD PTR [esi+318]
  013d8	66 3d 90 65	 cmp	 ax, 26000		; 00006590H
  013dc	7f 2e		 jg	 SHORT $L72148
  013de	66 3d 70 9a	 cmp	 ax, -26000		; ffff9a70H
  013e2	7c 28		 jl	 SHORT $L72148
  013e4	66 8b 86 3a 01
	00 00		 mov	 ax, WORD PTR [esi+314]
  013eb	66 3d 80 3e	 cmp	 ax, 16000		; 00003e80H
  013ef	7f 1b		 jg	 SHORT $L72148
  013f1	66 3d 80 c1	 cmp	 ax, -16000		; ffffc180H
  013f5	7c 15		 jl	 SHORT $L72148
  013f7	66 8b 44 5e 08	 mov	 ax, WORD PTR [esi+ebx*2+8]
  013fc	66 3d 60 6d	 cmp	 ax, 28000		; 00006d60H
  01400	7f 0a		 jg	 SHORT $L72148
  01402	66 3d a0 92	 cmp	 ax, -28000		; ffff92a0H
  01406	0f 8d 43 01 00
	00		 jge	 $L71729
$L72148:

; 1858 : 		{
; 1859 : 
; 1860 : 			bOverloaded=TRUE;
; 1861 : 			// stop tracing
; 1862 : 			pVtm_t->bDoTuning = FALSE;

  0140c	89 be 34 02 00
	00		 mov	 DWORD PTR [esi+564], edi

; 1863 : 			pVtm_t->vtdTuneResults.purevmax=pVtm_t->rlpd1;

  01412	66 8b 86 5a 01
	00 00		 mov	 ax, WORD PTR [esi+346]
  01419	66 89 86 7e 01
	00 00		 mov	 WORD PTR [esi+382], ax

; 1864 : 			pVtm_t->vtdTuneResults.rnzmax=pVtm_t->rnzd1;

  01420	66 8b 8e 56 01
	00 00		 mov	 cx, WORD PTR [esi+342]
  01427	66 89 8e 72 01
	00 00		 mov	 WORD PTR [esi+370], cx

; 1865 : 			pVtm_t->vtdTuneResults.rnpmax=pVtm_t->rnpd1;

  0142e	66 8b 96 4e 01
	00 00		 mov	 dx, WORD PTR [esi+334]
  01435	66 89 96 70 01
	00 00		 mov	 WORD PTR [esi+368], dx

; 1866 : 			pVtm_t->vtdTuneResults.c5max=pVtm_t->r5cd1;

  0143c	66 8b 86 4a 01
	00 00		 mov	 ax, WORD PTR [esi+330]
  01443	66 89 86 7c 01
	00 00		 mov	 WORD PTR [esi+380], ax

; 1867 : 			pVtm_t->vtdTuneResults.c4max=pVtm_t->r4cd1;

  0144a	66 8b 8e 46 01
	00 00		 mov	 cx, WORD PTR [esi+326]
  01451	66 89 8e 7a 01
	00 00		 mov	 WORD PTR [esi+378], cx

; 1868 : 			pVtm_t->vtdTuneResults.c3max=pVtm_t->r3cd1;

  01458	66 8b 96 42 01
	00 00		 mov	 dx, WORD PTR [esi+322]
  0145f	66 89 96 78 01
	00 00		 mov	 WORD PTR [esi+376], dx

; 1869 : 			pVtm_t->vtdTuneResults.c2max=pVtm_t->r2cd1;

  01466	66 8b 86 3e 01
	00 00		 mov	 ax, WORD PTR [esi+318]
  0146d	66 89 86 76 01
	00 00		 mov	 WORD PTR [esi+374], ax

; 1870 : 			pVtm_t->vtdTuneResults.c1max=pVtm_t->r1cd1;

  01474	66 8b 8e 3a 01
	00 00		 mov	 cx, WORD PTR [esi+314]
  0147b	66 89 8e 74 01
	00 00		 mov	 WORD PTR [esi+372], cx

; 1871 : 			pVtm_t->vtdTuneResults.r2pd1=pVtm_t->r2pd1;

  01482	66 8b 96 26 01
	00 00		 mov	 dx, WORD PTR [esi+294]
  01489	66 89 96 80 01
	00 00		 mov	 WORD PTR [esi+384], dx

; 1872 : 			pVtm_t->vtdTuneResults.r3pd1=pVtm_t->r3pd1;

  01490	66 8b 86 2a 01
	00 00		 mov	 ax, WORD PTR [esi+298]
  01497	66 89 86 82 01
	00 00		 mov	 WORD PTR [esi+386], ax

; 1873 : 			pVtm_t->vtdTuneResults.r4pd1=pVtm_t->r4pd1;

  0149e	66 8b 8e 2e 01
	00 00		 mov	 cx, WORD PTR [esi+302]
  014a5	66 89 8e 84 01
	00 00		 mov	 WORD PTR [esi+388], cx

; 1874 : 			pVtm_t->vtdTuneResults.r5pd1=pVtm_t->iwave[ns];

  014ac	66 8b 54 5e 08	 mov	 dx, WORD PTR [esi+ebx*2+8]
  014b1	66 89 96 86 01
	00 00		 mov	 WORD PTR [esi+390], dx

; 1875 : 
; 1876 : 			
; 1877 : 			pVtm_t->vtdTuneResults.bDidOverload = TRUE;

  014b8	c7 86 88 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+392], 1

; 1878 : 			pVtm_t->vtdTuneResults.r1cd2 = pVtm_t->r1cd2;

  014c2	66 8b 86 3c 01
	00 00		 mov	 ax, WORD PTR [esi+316]
  014c9	66 89 86 94 01
	00 00		 mov	 WORD PTR [esi+404], ax

; 1879 : 			pVtm_t->vtdTuneResults.r2cd2 = pVtm_t->r2cd2;

  014d0	66 8b 8e 40 01
	00 00		 mov	 cx, WORD PTR [esi+320]
  014d7	66 89 8e 96 01
	00 00		 mov	 WORD PTR [esi+406], cx

; 1880 : 			pVtm_t->vtdTuneResults.r3cd2 = pVtm_t->r3cd2;

  014de	66 8b 96 44 01
	00 00		 mov	 dx, WORD PTR [esi+324]
  014e5	66 89 96 98 01
	00 00		 mov	 WORD PTR [esi+408], dx

; 1881 : 			pVtm_t->vtdTuneResults.r4cd2 = pVtm_t->r4cd2;

  014ec	66 8b 86 48 01
	00 00		 mov	 ax, WORD PTR [esi+328]
  014f3	66 89 86 9a 01
	00 00		 mov	 WORD PTR [esi+410], ax

; 1882 : 			pVtm_t->vtdTuneResults.r5cd2 = pVtm_t->r5cd2;

  014fa	66 8b 8e 4c 01
	00 00		 mov	 cx, WORD PTR [esi+332]
  01501	66 89 8e 9c 01
	00 00		 mov	 WORD PTR [esi+412], cx

; 1883 : 			pVtm_t->vtdTuneResults.rnpd2 = pVtm_t->rnpd2;

  01508	66 8b 96 50 01
	00 00		 mov	 dx, WORD PTR [esi+336]
  0150f	66 89 96 9e 01
	00 00		 mov	 WORD PTR [esi+414], dx

; 1884 : 			pVtm_t->vtdTuneResults.rnzd2 = pVtm_t->rnzd2;

  01516	66 8b 86 58 01
	00 00		 mov	 ax, WORD PTR [esi+344]

; 1885 : 			pVtm_t->vtdTuneResults.rlpd2 = pVtm_t->rlpd2;
; 1886 : 
; 1887 : 			if (phTTS->hTuneStopEvent!=NULL)

  0151d	8b 54 24 70	 mov	 edx, DWORD PTR _phTTS$[esp+104]
  01521	66 89 86 a0 01
	00 00		 mov	 WORD PTR [esi+416], ax
  01528	66 8b 8e 5c 01
	00 00		 mov	 cx, WORD PTR [esi+348]
  0152f	66 89 8e a2 01
	00 00		 mov	 WORD PTR [esi+418], cx
  01536	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]
  0153c	3b c7		 cmp	 eax, edi
  0153e	74 0f		 je	 SHORT $L71729

; 1888 : 			{
; 1889 : 				OP_SetEvent(phTTS->hTuneStopEvent);

  01540	50		 push	 eax
  01541	e8 00 00 00 00	 call	 _OP_SetEvent

; 1890 : 				OP_Sleep(0);

  01546	57		 push	 edi
  01547	e8 00 00 00 00	 call	 _OP_Sleep
  0154c	83 c4 08	 add	 esp, 8
$L71729:
  0154f	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]
  01555	43		 inc	 ebx
  01556	3b d8		 cmp	 ebx, eax
  01558	89 5c 24 3c	 mov	 DWORD PTR _ns$[esp+108], ebx
  0155c	0f 82 60 f1 ff
	ff		 jb	 $L71728
$L71730:
  01562	5f		 pop	 edi
  01563	5e		 pop	 esi
  01564	5d		 pop	 ebp
  01565	5b		 pop	 ebx

; 1891 : 			}
; 1892 : 
; 1893 : 
; 1894 : 		}
; 1895 : 
; 1896 : 		
; 1897 : 	}
; 1898 : 
; 1899 : 
; 1900 : 
; 1901 :   }
; 1902 :   return;
; 1903 : }

  01566	83 c4 5c	 add	 esp, 92			; 0000005cH
  01569	c3		 ret	 0
_speech_waveform_generator ENDP
_TEXT	ENDS
PUBLIC	_read_speaker_definition
_TEXT	SEGMENT
_phTTS$ = 8
_read_speaker_definition PROC NEAR

; 1913 : {

  01570	53		 push	 ebx

; 1914 :   S16 *spdeftochip;
; 1915 :   S16 f4c;       /*  Frequency of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1916 :   S16 b4c;       /*  Bandwidth of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1917 :   S16 f5c;       /*  Frequency of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1918 :   S16 b5c;       /*  Bandwidth of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1919 :   S16 f4p;       /*  Frequency of fixed parallel 4th formant*//* MVP : Moved from vtm.h*/
; 1920 :   S16 b4p;       /*  Bandwidth of fixed parallel 4th formant*/
; 1921 :   S16 f5p;       /*  Frequency of fixed parallel 5th formant            */
; 1922 :   S16 b5p;       /*  Bandwidth of fixed parallel 5th formant            */
; 1923 : 
; 1924 : #ifndef LOWCOMPUTE
; 1925 :   S16 flp;       /*  Frequency of fixed glottal decimating filter       */
; 1926 :   S16 blp;       /*  Bandwidth of fixed glottal decimating filter       */
; 1927 :   S16 rlpg;      /*  Gain of down-sampling low-pass resonator           */
; 1928 : #endif
; 1929 :   S16 avg;       /*  Gain factor for voicing                            */
; 1930 :   S16 apg;       /*  Gain factor for aspiration                         */
; 1931 :   S16 afg;       /*  Gain factor for frication                          */
; 1932 :   S16 rnpg;      /*  Gain factor for nasal pole resonator               */
; 1933 :   S16 a5gain;    /*  Gain in dB for the 5th cascade resonator.          */
; 1934 :   S16 a4gain;    /*  Gain in dB for the 4th cascade resonator.          */
; 1935 :   S16 a3gain;    /*  Gain in dB for the 3rd cascade resonator.          */
; 1936 :   S16 a2gain;    /*  Gain in dB for the 2nd cascade resonator.          */
; 1937 :   S16 a1gain;    /*  Gain in dB for the 1st cascade resonator.          */
; 1938 : 
; 1939 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  01571	8b 5c 24 08	 mov	 ebx, DWORD PTR _phTTS$[esp]
  01575	56		 push	 esi
  01576	57		 push	 edi
  01577	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 1940 : 
; 1941 :   /********************************************************************/
; 1942 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 1943 :   /********************************************************************/
; 1944 : #ifdef  F1_B1_UPGRADE  
; 1945 :     pVtm_t->Up_Down_Flag=0;
; 1946 : #endif
; 1947 : 
; 1948 : 	pVtm_t->ldspdef=1;	  /*  flag that we loaded a speaker def eab 10/96*/
; 1949 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  0157a	33 ff		 xor	 edi, edi
  0157c	c7 86 2c 02 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+556], 1
  01586	66 89 be 26 01
	00 00		 mov	 WORD PTR [esi+294], di

; 1950 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  0158d	66 89 be 28 01
	00 00		 mov	 WORD PTR [esi+296], di

; 1951 : 
; 1952 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  01594	66 89 be 2a 01
	00 00		 mov	 WORD PTR [esi+298], di

; 1953 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  0159b	66 89 be 2c 01
	00 00		 mov	 WORD PTR [esi+300], di

; 1954 : 
; 1955 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  015a2	66 89 be 2e 01
	00 00		 mov	 WORD PTR [esi+302], di

; 1956 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  015a9	66 89 be 30 01
	00 00		 mov	 WORD PTR [esi+304], di

; 1957 : 	
; 1958 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  015b0	66 89 be 32 01
	00 00		 mov	 WORD PTR [esi+306], di

; 1959 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  015b7	66 89 be 34 01
	00 00		 mov	 WORD PTR [esi+308], di

; 1960 : 
; 1961 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  015be	66 89 be 36 01
	00 00		 mov	 WORD PTR [esi+310], di

; 1962 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  015c5	66 89 be 38 01
	00 00		 mov	 WORD PTR [esi+312], di

; 1963 : 
; 1964 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  015cc	66 89 be 3a 01
	00 00		 mov	 WORD PTR [esi+314], di

; 1965 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  015d3	66 89 be 3c 01
	00 00		 mov	 WORD PTR [esi+316], di

; 1966 : 
; 1967 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  015da	66 89 be 3e 01
	00 00		 mov	 WORD PTR [esi+318], di

; 1968 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  015e1	66 89 be 40 01
	00 00		 mov	 WORD PTR [esi+320], di

; 1969 : 
; 1970 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */

  015e8	66 89 be 42 01
	00 00		 mov	 WORD PTR [esi+322], di

; 1971 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */
; 1972 : 
; 1973 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */
; 1974 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */
; 1975 : 
; 1976 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */
; 1977 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */
; 1978 : 
; 1979 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */
; 1980 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */
; 1981 : 
; 1982 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */
; 1983 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */
; 1984 : 
; 1985 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */
; 1986 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */
; 1987 : 
; 1988 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */
; 1989 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */
; 1990 : 
; 1991 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */
; 1992 : 
; 1993 : 	/* Second sample of the tilt filter. 
; 1994 : 	   10/96 eab this filter parameter needs to be zeroed also */
; 1995 : 	pVtm_t->one_minus_decay = 0;
; 1996 : 
; 1997 : 	pVtm_t->avlind = 0;		// tek 08oct96
; 1998 : 	pVtm_t->voice0 = 0;		// tek 08oct96
; 1999 : 
; 2000 :   pVtm_t->vtdTuneResults.purevmax = 0;    /*maximum value within filter of casade rnz*/
; 2001 :   pVtm_t->vtdTuneResults.rnzmax = 0;       /* maximum value within filter of casade rnz */
; 2002 :   pVtm_t->vtdTuneResults.rnpmax = 0;       /* maximum value within filter of casade rnp */
; 2003 :   pVtm_t->vtdTuneResults.c4max = 0;        /* maximum value within filter of casade 4 */
; 2004 :   pVtm_t->vtdTuneResults.c3max = 0;        /* maximum value within filter of casade 3 */
; 2005 :   pVtm_t->vtdTuneResults.c2max = 0;        /* maximum value within filter of casade 3 */
; 2006 :   pVtm_t->vtdTuneResults.c1max = 0;        /* maximum value within filter of casade 3 */
; 2007 :   pVtm_t->vtdTuneResults.r5pd1 = 0;
; 2008 : 
; 2009 : 
; 2010 :   spdeftochip = &(pVtm_t->parambuff[1]);
; 2011 : 
; 2012 :   /********************************************************************/
; 2013 :   /*  Constants used in random number generation.                     */
; 2014 :   /********************************************************************/
; 2015 :   /*
; 2016 :   ranmul = 20077;
; 2017 :   ranadd = 12345;
; 2018 :   */
; 2019 :   /********************************************************************/
; 2020 :   /*  Constants used to filter the noise.                             */
; 2021 :   /********************************************************************/
; 2022 : 
; 2023 : 
; 2024 :   switch( pVtm_t->uiSampleRateChange )
; 2025 :   {

  015ef	8b 06		 mov	 eax, DWORD PTR [esi]
  015f1	66 89 be 44 01
	00 00		 mov	 WORD PTR [esi+324], di
  015f8	66 89 be 46 01
	00 00		 mov	 WORD PTR [esi+326], di
  015ff	66 89 be 48 01
	00 00		 mov	 WORD PTR [esi+328], di
  01606	66 89 be 4a 01
	00 00		 mov	 WORD PTR [esi+330], di
  0160d	66 89 be 4c 01
	00 00		 mov	 WORD PTR [esi+332], di
  01614	66 89 be 4e 01
	00 00		 mov	 WORD PTR [esi+334], di
  0161b	66 89 be 50 01
	00 00		 mov	 WORD PTR [esi+336], di
  01622	66 89 be 56 01
	00 00		 mov	 WORD PTR [esi+342], di
  01629	66 89 be 58 01
	00 00		 mov	 WORD PTR [esi+344], di
  01630	66 89 be 5a 01
	00 00		 mov	 WORD PTR [esi+346], di
  01637	2b c7		 sub	 eax, edi
  01639	66 89 be 5c 01
	00 00		 mov	 WORD PTR [esi+348], di
  01640	66 89 be 5e 01
	00 00		 mov	 WORD PTR [esi+350], di
  01647	66 89 be 60 01
	00 00		 mov	 WORD PTR [esi+352], di
  0164e	66 89 be 6c 01
	00 00		 mov	 WORD PTR [esi+364], di
  01655	66 89 be f8 01
	00 00		 mov	 WORD PTR [esi+504], di
  0165c	66 89 be 0c 02
	00 00		 mov	 WORD PTR [esi+524], di
  01663	66 89 be fa 01
	00 00		 mov	 WORD PTR [esi+506], di
  0166a	66 89 be 7e 01
	00 00		 mov	 WORD PTR [esi+382], di
  01671	66 89 be 72 01
	00 00		 mov	 WORD PTR [esi+370], di
  01678	66 89 be 70 01
	00 00		 mov	 WORD PTR [esi+368], di
  0167f	66 89 be 7a 01
	00 00		 mov	 WORD PTR [esi+378], di
  01686	66 89 be 78 01
	00 00		 mov	 WORD PTR [esi+376], di
  0168d	66 89 be 76 01
	00 00		 mov	 WORD PTR [esi+374], di
  01694	66 89 be 74 01
	00 00		 mov	 WORD PTR [esi+372], di
  0169b	66 89 be 86 01
	00 00		 mov	 WORD PTR [esi+390], di
  016a2	74 0a		 je	 SHORT $L71897
  016a4	48		 dec	 eax
  016a5	0f 84 bc 00 00
	00		 je	 $L71898
  016ab	48		 dec	 eax
  016ac	75 09		 jne	 SHORT $L71894
$L71897:

; 2026 :   case SAMPLE_RATE_INCREASE:
; 2027 : 
; 2028 :     pVtm_t->noiseb = -2913;

  016ae	66 c7 86 f4 01
	00 00 9f f4	 mov	 WORD PTR [esi+500], -2913 ; fffff49fH
$L71894:

; 2037 : 
; 2038 :   case NO_SAMPLE_RATE_CHANGE:
; 2039 : 
; 2040 :     pVtm_t->noiseb = -2913;
; 2041 :     /*noisec = 1499;*/
; 2042 :     break;
; 2043 : 
; 2044 :   default:
; 2045 : 
; 2046 :     break;
; 2047 :   }
; 2048 : 
; 2049 :   /********************************************************************/
; 2050 :   /*  Parallel 6th formant                                            */
; 2051 :   /*  Resonator constant "r6pa" is set elsewhere from A6inDB.         */
; 2052 :   /********************************************************************/
; 2053 : 
; 2054 :   /*pVtm_t->r6pb = -5702;*/     /* MVP : moved as a local constant */
; 2055 :   /*r6pc = -1995;                */     /* MVP : moved as a local constant */
; 2056 : 
; 2057 :   /********************************************************************/
; 2058 :   /*  Coefficients for fixed nasal formant.                           */
; 2059 :   /*  Gain parameter "rnpa" is set below by speaker definition        */
; 2060 :   /*  parameter "rnpg". Note possible future change, this could vary  */
; 2061 :   /*  from speaker to speaker.                                        */
; 2062 :   /********************************************************************/
; 2063 : 
; 2064 : #ifndef LOWCOMPUTE
; 2065 :   /********************************************************************/
; 2066 :   /*  Coefficients for fixed downsampling low-pass filter             */
; 2067 :   /********************************************************************/
; 2068 : 
; 2069 :   switch( pVtm_t->uiSampleRateChange )
; 2070 :   {
; 2071 :   case SAMPLE_RATE_INCREASE:
; 2072 : 
; 2073 :     flp = 948;
; 2074 :     blp = 615;
; 2075 :     rlpg = 2400;
; 2076 :     break;
; 2077 : 
; 2078 :   case SAMPLE_RATE_DECREASE:
; 2079 : 
; 2080 :     flp = 698;
; 2081 :     blp = 453;
; 2082 :     rlpg = 2400;
; 2083 :     break;
; 2084 : 
; 2085 :   case NO_SAMPLE_RATE_CHANGE:
; 2086 : 
; 2087 :     flp = 860;
; 2088 :     blp = 558;
; 2089 :     rlpg = 2400;
; 2090 :     break;
; 2091 : 
; 2092 :   default:
; 2093 : 
; 2094 :     break;
; 2095 :   }
; 2096 : 
; 2097 :   pVtm_t->rlpa = d2pole_pf( pVtm_t,&pVtm_t->rlpb, &pVtm_t->rlpc, flp, blp, rlpg );
; 2098 : #endif
; 2099 :   /********************************************************************/
; 2100 :   /*  Begin set coeficients of speaker-def controlled resonators.     */
; 2101 :   /*  Cascade fourth formant                                          */
; 2102 :   /********************************************************************/
; 2103 : 
; 2104 :   f4c = ((SPD_CHIP *)spdeftochip)->r4cb;   /*  1                       */
; 2105 :   b4c = ((SPD_CHIP *)spdeftochip)->r4cc;   /*  2                       */
; 2106 : 
; 2107 :   d2pole_cf45( pVtm_t,&pVtm_t->R4cb, &pVtm_t->R4cc, f4c, b4c, 0 );

  016b7	66 8b 86 d4 00
	00 00		 mov	 ax, WORD PTR [esi+212]
  016be	66 8b 8e d2 00
	00 00		 mov	 cx, WORD PTR [esi+210]
  016c5	57		 push	 edi
  016c6	50		 push	 eax
  016c7	8d 96 d4 01 00
	00		 lea	 edx, DWORD PTR [esi+468]
  016cd	51		 push	 ecx
  016ce	8d 86 d2 01 00
	00		 lea	 eax, DWORD PTR [esi+466]
  016d4	52		 push	 edx
  016d5	50		 push	 eax
  016d6	56		 push	 esi
  016d7	e8 00 00 00 00	 call	 _d2pole_cf45

; 2108 : 
; 2109 :   /********************************************************************/
; 2110 :   /*  Cascade fifth formant                                           */
; 2111 :   /********************************************************************/
; 2112 : 
; 2113 :   f5c = ((SPD_CHIP *)spdeftochip)->r5cb;   /*  3                       */
; 2114 :   b5c = ((SPD_CHIP *)spdeftochip)->r5cc;   /*  4                       */
; 2115 : 
; 2116 :   d2pole_cf45(pVtm_t,&pVtm_t->R5cb, &pVtm_t->R5cc, f5c, b5c, 0 );

  016dc	66 8b 8e d8 00
	00 00		 mov	 cx, WORD PTR [esi+216]
  016e3	66 8b 96 d6 00
	00 00		 mov	 dx, WORD PTR [esi+214]
  016ea	57		 push	 edi
  016eb	51		 push	 ecx
  016ec	8d 86 da 01 00
	00		 lea	 eax, DWORD PTR [esi+474]
  016f2	52		 push	 edx
  016f3	8d 8e d8 01 00
	00		 lea	 ecx, DWORD PTR [esi+472]
  016f9	50		 push	 eax
  016fa	51		 push	 ecx
  016fb	56		 push	 esi
  016fc	e8 00 00 00 00	 call	 _d2pole_cf45

; 2117 : 
; 2118 :   /********************************************************************/
; 2119 :   /*  Parallel fourth formant                                         */
; 2120 :   /********************************************************************/
; 2121 : 
; 2122 :   f4p = ((SPD_CHIP *)spdeftochip)->r4pb;   /*  5                       */
; 2123 :   b4p = 400;
; 2124 : 
; 2125 :   d2pole_pf( pVtm_t,&pVtm_t->R4pb, &pVtm_t->r4pc, f4p, b4p, 0 );

  01701	66 8b 96 da 00
	00 00		 mov	 dx, WORD PTR [esi+218]
  01708	57		 push	 edi
  01709	68 90 01 00 00	 push	 400			; 00000190H
  0170e	8d 86 b4 01 00
	00		 lea	 eax, DWORD PTR [esi+436]
  01714	52		 push	 edx
  01715	8d 8e b2 01 00
	00		 lea	 ecx, DWORD PTR [esi+434]
  0171b	50		 push	 eax
  0171c	51		 push	 ecx
  0171d	56		 push	 esi
  0171e	e8 00 00 00 00	 call	 _d2pole_pf

; 2126 : 
; 2127 :   /********************************************************************/
; 2128 :   /*  Parallel fifth formant                                          */
; 2129 :   /********************************************************************/
; 2130 : 
; 2131 :   f5p = ((SPD_CHIP *)spdeftochip)->r5pb;    /*  6                      */
; 2132 :   b5p = 500;
; 2133 : 
; 2134 :   d2pole_pf( pVtm_t,&pVtm_t->R5pb, &pVtm_t->r5pc, f5p, b5p, 0 );

  01723	66 8b 96 dc 00
	00 00		 mov	 dx, WORD PTR [esi+220]
  0172a	83 c4 48	 add	 esp, 72			; 00000048H
  0172d	8d 86 b8 01 00
	00		 lea	 eax, DWORD PTR [esi+440]
  01733	8d 8e b6 01 00
	00		 lea	 ecx, DWORD PTR [esi+438]
  01739	57		 push	 edi
  0173a	68 f4 01 00 00	 push	 500			; 000001f4H
  0173f	52		 push	 edx
  01740	50		 push	 eax
  01741	51		 push	 ecx
  01742	56		 push	 esi
  01743	e8 00 00 00 00	 call	 _d2pole_pf
  01748	83 c4 18	 add	 esp, 24			; 00000018H

; 2135 : 
; 2136 :   /********************************************************************/
; 2137 :   /*  End of set coeficients of speaker definition controlled         */
; 2138 :   /*  resonators.                                                     */
; 2139 :   /********************************************************************/
; 2140 : 
; 2141 :   /********************************************************************/
; 2142 :   /*  The following parameter deleted 12-JUL-85                       */
; 2143 :   /*  TLToff = ((SPD_CHIP *)spdeftochip)->tltoff;      7               */
; 2144 :   /********************************************************************/
; 2145 : 
; 2146 :   /********************************************************************/
; 2147 :   /*  Jitter parameter has it's sign flipped from the current value.  */
; 2148 :   /*  t0jitr is a time, so it should be scaled if fs != 10K.          */
; 2149 :   /********************************************************************/
; 2150 : 
; 2151 :   if ( pVtm_t->t0jitr < 0 )

  0174b	66 39 be 20 01
	00 00		 cmp	 WORD PTR [esi+288], di
  01752	7d 21		 jge	 SHORT $L71907

; 2152 :     pVtm_t->t0jitr = -((SPD_CHIP *)spdeftochip)->t0jit;    /*  8               */

  01754	66 8b 96 de 00
	00 00		 mov	 dx, WORD PTR [esi+222]
  0175b	66 f7 da	 neg	 dx
  0175e	66 89 96 20 01
	00 00		 mov	 WORD PTR [esi+288], dx

; 2153 :   else

  01765	eb 1c		 jmp	 SHORT $L71909
$L71898:

; 2029 :     /*noisec = 1499; */
; 2030 :     break;
; 2031 : 
; 2032 :   case SAMPLE_RATE_DECREASE:
; 2033 : 
; 2034 :     pVtm_t->noiseb = -1873;

  01767	66 c7 86 f4 01
	00 00 af f8	 mov	 WORD PTR [esi+500], -1873 ; fffff8afH

; 2035 :     /*noisec = 1499;*/
; 2036 :     break;

  01770	e9 42 ff ff ff	 jmp	 $L71894
$L71907:

; 2154 :     pVtm_t->t0jitr = ((SPD_CHIP *)spdeftochip)->t0jit;

  01775	66 8b 86 de 00
	00 00		 mov	 ax, WORD PTR [esi+222]
  0177c	66 89 86 20 01
	00 00		 mov	 WORD PTR [esi+288], ax
$L71909:

; 2155 : 
; 2156 :   switch( pVtm_t->uiSampleRateChange )
; 2157 :   {

  01783	8b 06		 mov	 eax, DWORD PTR [esi]
  01785	2b c7		 sub	 eax, edi
  01787	74 1d		 je	 SHORT $L71915
  01789	48		 dec	 eax
  0178a	75 34		 jne	 SHORT $L71912

; 2161 :     break;
; 2162 : 
; 2163 :   case SAMPLE_RATE_DECREASE:
; 2164 : 
; 2165 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr );

  0178c	0f bf 4e 04	 movsx	 ecx, WORD PTR [esi+4]
  01790	0f bf 96 20 01
	00 00		 movsx	 edx, WORD PTR [esi+288]
  01797	0f af ca	 imul	 ecx, edx
  0179a	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0179d	66 89 8e 20 01
	00 00		 mov	 WORD PTR [esi+288], cx

; 2166 :     break;

  017a4	eb 1a		 jmp	 SHORT $L71912
$L71915:

; 2158 :   case SAMPLE_RATE_INCREASE:
; 2159 : 
; 2160 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr ) << 1;

  017a6	0f bf 46 04	 movsx	 eax, WORD PTR [esi+4]
  017aa	0f bf 8e 20 01
	00 00		 movsx	 ecx, WORD PTR [esi+288]
  017b1	0f af c1	 imul	 eax, ecx
  017b4	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  017b7	24 fe		 and	 al, -2			; fffffffeH
  017b9	66 89 86 20 01
	00 00		 mov	 WORD PTR [esi+288], ax
$L71912:

; 2167 : 
; 2168 :   case NO_SAMPLE_RATE_CHANGE:
; 2169 : 
; 2170 :     break;
; 2171 : 
; 2172 :   default:
; 2173 : 
; 2174 :     break;
; 2175 :   }
; 2176 : 
; 2177 :   /********************************************************************/
; 2178 :   /*  Gains of cascade resonators (used to keep signal in high order  */
; 2179 :   /*  bits).                                                          */
; 2180 :   /********************************************************************/
; 2181 : 
; 2182 :   a5gain = ((SPD_CHIP *)spdeftochip)->r5ca;    /*  9                   */
; 2183 :   pVtm_t->R5ca = amptable[a5gain];

  017c0	0f bf 96 e0 00
	00 00		 movsx	 edx, WORD PTR [esi+224]
  017c7	5f		 pop	 edi
  017c8	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  017d0	66 89 86 d6 01
	00 00		 mov	 WORD PTR [esi+470], ax

; 2184 :   a4gain = ((SPD_CHIP *)spdeftochip)->r4ca;    /*  10                  */
; 2185 :   pVtm_t->R4ca = amptable[a4gain];

  017d7	0f bf 8e e2 00
	00 00		 movsx	 ecx, WORD PTR [esi+226]
  017de	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  017e6	66 89 96 d0 01
	00 00		 mov	 WORD PTR [esi+464], dx

; 2186 :   a3gain = ((SPD_CHIP *)spdeftochip)->r3ca;    /*  11                  */
; 2187 :   pVtm_t->r3cg = amptable[a3gain];

  017ed	0f bf 86 e4 00
	00 00		 movsx	 eax, WORD PTR [esi+228]
  017f4	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  017fc	66 89 8e 04 02
	00 00		 mov	 WORD PTR [esi+516], cx

; 2188 :   a2gain = ((SPD_CHIP *)spdeftochip)->r2ca;    /*  12                  */
; 2189 :   pVtm_t->r2cg = amptable[a2gain];

  01803	0f bf 96 e6 00
	00 00		 movsx	 edx, WORD PTR [esi+230]
  0180a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  01812	66 89 86 06 02
	00 00		 mov	 WORD PTR [esi+518], ax

; 2190 :   a1gain = ((SPD_CHIP *)spdeftochip)->r1ca;    /*  13                  */
; 2191 :   pVtm_t->r1cg = amptable[a1gain];

  01819	0f bf 8e e8 00
	00 00		 movsx	 ecx, WORD PTR [esi+232]
  01820	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01828	66 89 96 08 02
	00 00		 mov	 WORD PTR [esi+520], dx

; 2192 : 
; 2193 :   /********************************************************************/
; 2194 :   /*  Constants that determine the duration of the open phase of the  */
; 2195 :   /*  glottal period.                                                 */
; 2196 :   /********************************************************************/
; 2197 : 
; 2198 :   pVtm_t->k1 = ((SPD_CHIP *)spdeftochip)->nopen1;      /* 14                   */

  0182f	66 8b 86 ea 00
	00 00		 mov	 ax, WORD PTR [esi+234]
  01836	66 89 86 12 02
	00 00		 mov	 WORD PTR [esi+530], ax

; 2199 :   pVtm_t->k2 = ((SPD_CHIP *)spdeftochip)->nopen2;      /* 15                   */

  0183d	66 8b 8e ec 00
	00 00		 mov	 cx, WORD PTR [esi+236]
  01844	66 89 8e 14 02
	00 00		 mov	 WORD PTR [esi+532], cx

; 2200 : 
; 2201 :   /********************************************************************/
; 2202 :   /*  Breathiness coefficient.                                        */
; 2203 :   /********************************************************************/
; 2204 : 
; 2205 :   pVtm_t->Aturb = ((SPD_CHIP *)spdeftochip)->aturb;    /*  16                  */

  0184b	66 8b 96 ee 00
	00 00		 mov	 dx, WORD PTR [esi+238]
  01852	66 89 96 24 01
	00 00		 mov	 WORD PTR [esi+292], dx

; 2206 : 
; 2207 : 
; 2208 :  /********************************************************************/
; 2209 :  /*  T0range = ((SPD_CHIP *)spdeftochip)->f0scale;  17  (Not used)    */
; 2210 :  /********************************************************************/
; 2211 : 
; 2212 :   /********************************************************************/
; 2213 :   /*  Scale factor for variable formants F1inHZ, F2inHZ, and F3inHZ.  */
; 2214 :   /********************************************************************/
; 2215 : 
; 2216 :   pVtm_t->fnscal = ((SPD_CHIP *)spdeftochip)->fnscale;     /*  18              */

  01859	66 8b 86 f0 00
	00 00		 mov	 ax, WORD PTR [esi+240]
  01860	66 89 86 22 01
	00 00		 mov	 WORD PTR [esi+290], ax

; 2217 : 
; 2218 :   /********************************************************************/
; 2219 :   /*  Overall gain of frication source re other sources               */
; 2220 :   /********************************************************************/
; 2221 : 
; 2222 :   afg = ((SPD_CHIP *)spdeftochip)->afgain;     /*  19                  */
; 2223 : 
; 2224 :   pVtm_t->AFgain = amptable[afg]; 

  01867	0f bf 8e f2 00
	00 00		 movsx	 ecx, WORD PTR [esi+242]
  0186e	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01876	66 89 96 02 02
	00 00		 mov	 WORD PTR [esi+514], dx

; 2225 : 
; 2226 : 
; 2227 :   /********************************************************************/
; 2228 :   /*  Gain of the nasal pole resonator of cascade filter section.     */
; 2229 :   /********************************************************************/
; 2230 : 
; 2231 :   rnpg = ((SPD_CHIP *)spdeftochip)->rnpgain;   /*  20                  */
; 2232 :   pVtm_t->rnpa = amptable[rnpg];

  0187d	0f bf 86 f4 00
	00 00		 movsx	 eax, WORD PTR [esi+244]
  01884	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  0188c	66 89 8e dc 01
	00 00		 mov	 WORD PTR [esi+476], cx

; 2233 :   
; 2234 : 
; 2235 :   /********************************************************************/
; 2236 :   /*  Overall gain of voicing source relative to other sources        */
; 2237 :   /********************************************************************/
; 2238 : 
; 2239 :   avg = ((SPD_CHIP *)spdeftochip)->azgain;     /*  21                  */
; 2240 :   pVtm_t->avgain = amptable[avg];

  01893	0f bf 96 f6 00
	00 00		 movsx	 edx, WORD PTR [esi+246]
  0189a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  018a2	66 89 86 fc 01
	00 00		 mov	 WORD PTR [esi+508], ax

; 2241 : 
; 2242 :   /********************************************************************/
; 2243 :   /*  Overall gain of aspiration source relative to other sources     */
; 2244 :   /********************************************************************/
; 2245 : 
; 2246 :   apg = ((SPD_CHIP *)spdeftochip)->apgain;     /*  22                  */
; 2247 :   pVtm_t->APgain = amptable[apg];

  018a9	0f bf 8e f8 00
	00 00		 movsx	 ecx, WORD PTR [esi+248]
  018b0	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  018b8	66 89 96 00 02
	00 00		 mov	 WORD PTR [esi+512], dx

; 2248 : 
; 2249 :   phTTS->pKernelShareData->uiCurrentSpeaker = (short)((SPD_CHIP *)spdeftochip)->speaker; // NAL warning removal

  018bf	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  018c2	66 8b 8e fe 00
	00 00		 mov	 cx, WORD PTR [esi+254]
  018c9	5e		 pop	 esi
  018ca	66 89 88 e8 03
	00 00		 mov	 WORD PTR [eax+1000], cx
  018d1	5b		 pop	 ebx

; 2250 : #ifdef COMPRESSION
; 2251 :   // set the initial gain fairly low, it will quickly set itself.
; 2252 :   pVtm_t->sGain = CompGainTable[COMPRESSION_GAIN_TABLE_SIZE/2];
; 2253 : #endif //COMPRESSION
; 2254 : 
; 2255 : }

  018d2	c3		 ret	 0
_read_speaker_definition ENDP
_TEXT	ENDS
PUBLIC	_InitializeVTM
_TEXT	SEGMENT
_phTTS$ = 8
_InitializeVTM PROC NEAR

; 2271 : 	PVTM_T pVtm_t =phTTS->pVTMThreadData;

  018e0	8b 44 24 04	 mov	 eax, DWORD PTR _phTTS$[esp-4]

; 2272 : 
; 2273 :   /********************************************************************/
; 2274 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 2275 :   /********************************************************************/
; 2276 : 	pVtm_t->cas_count = 0;

  018e4	33 c9		 xor	 ecx, ecx
  018e6	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  018e9	89 88 1c 02 00
	00		 mov	 DWORD PTR [eax+540], ecx

; 2277 : 	pVtm_t->par_count = 0;

  018ef	89 88 18 02 00
	00		 mov	 DWORD PTR [eax+536], ecx

; 2278 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  018f5	66 89 88 26 01
	00 00		 mov	 WORD PTR [eax+294], cx

; 2279 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  018fc	66 89 88 28 01
	00 00		 mov	 WORD PTR [eax+296], cx

; 2280 : 
; 2281 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  01903	66 89 88 2a 01
	00 00		 mov	 WORD PTR [eax+298], cx

; 2282 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  0190a	66 89 88 2c 01
	00 00		 mov	 WORD PTR [eax+300], cx

; 2283 : 
; 2284 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  01911	66 89 88 2e 01
	00 00		 mov	 WORD PTR [eax+302], cx

; 2285 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  01918	66 89 88 30 01
	00 00		 mov	 WORD PTR [eax+304], cx

; 2286 : 	
; 2287 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  0191f	66 89 88 32 01
	00 00		 mov	 WORD PTR [eax+306], cx

; 2288 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  01926	66 89 88 34 01
	00 00		 mov	 WORD PTR [eax+308], cx

; 2289 : 
; 2290 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  0192d	66 89 88 36 01
	00 00		 mov	 WORD PTR [eax+310], cx

; 2291 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  01934	66 89 88 38 01
	00 00		 mov	 WORD PTR [eax+312], cx

; 2292 : 
; 2293 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  0193b	66 89 88 3a 01
	00 00		 mov	 WORD PTR [eax+314], cx

; 2294 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  01942	66 89 88 3c 01
	00 00		 mov	 WORD PTR [eax+316], cx

; 2295 : 
; 2296 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  01949	66 89 88 3e 01
	00 00		 mov	 WORD PTR [eax+318], cx

; 2297 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  01950	66 89 88 40 01
	00 00		 mov	 WORD PTR [eax+320], cx

; 2298 : 
; 2299 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */

  01957	66 89 88 42 01
	00 00		 mov	 WORD PTR [eax+322], cx

; 2300 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */

  0195e	66 89 88 44 01
	00 00		 mov	 WORD PTR [eax+324], cx

; 2301 : 
; 2302 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */

  01965	66 89 88 46 01
	00 00		 mov	 WORD PTR [eax+326], cx

; 2303 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */

  0196c	66 89 88 48 01
	00 00		 mov	 WORD PTR [eax+328], cx

; 2304 : 
; 2305 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */

  01973	66 89 88 4a 01
	00 00		 mov	 WORD PTR [eax+330], cx

; 2306 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */

  0197a	66 89 88 4c 01
	00 00		 mov	 WORD PTR [eax+332], cx

; 2307 : 
; 2308 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */

  01981	66 89 88 4e 01
	00 00		 mov	 WORD PTR [eax+334], cx

; 2309 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */

  01988	66 89 88 50 01
	00 00		 mov	 WORD PTR [eax+336], cx

; 2310 : 
; 2311 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */

  0198f	66 89 88 56 01
	00 00		 mov	 WORD PTR [eax+342], cx

; 2312 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */

  01996	66 89 88 58 01
	00 00		 mov	 WORD PTR [eax+344], cx

; 2313 : 
; 2314 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */

  0199d	66 89 88 5a 01
	00 00		 mov	 WORD PTR [eax+346], cx

; 2315 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */

  019a4	66 89 88 5c 01
	00 00		 mov	 WORD PTR [eax+348], cx

; 2316 : 
; 2317 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */

  019ab	66 89 88 5e 01
	00 00		 mov	 WORD PTR [eax+350], cx

; 2318 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */

  019b2	66 89 88 60 01
	00 00		 mov	 WORD PTR [eax+352], cx

; 2319 : 
; 2320 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */

  019b9	66 89 88 6c 01
	00 00		 mov	 WORD PTR [eax+364], cx

; 2321 : 
; 2322 : 	pVtm_t->one_minus_decay = 0;    /* Second sample of the tilt filter.          */

  019c0	66 89 88 f8 01
	00 00		 mov	 WORD PTR [eax+504], cx

; 2323 : 	pVtm_t->rampdown =0;

  019c7	66 89 88 46 02
	00 00		 mov	 WORD PTR [eax+582], cx

; 2324 : 
; 2325 : }

  019ce	c3		 ret	 0
_InitializeVTM ENDP
_TEXT	ENDS
PUBLIC	__real@8@3fff8000000000000000
PUBLIC	_SetSampleRate
EXTRN	__fltused:NEAR
;	COMDAT __real@8@3fff8000000000000000
; File D:\work\Product\dapi\src\Vtm\vtm2.c
CONST	SEGMENT
__real@8@3fff8000000000000000 DQ 03ff0000000000000r ; 1
CONST	ENDS
_TEXT	SEGMENT
_phTTS$ = 8
_uiSampRate$ = 12
_SetSampleRate PROC NEAR

; 2382 :   /********************************************************************/
; 2383 :   /*  Set the global sample rate dependant parameters.                */
; 2384 :   /*  Some day these should be moved into the TTS handle.             */
; 2385 :   /********************************************************************/
; 2386 :   PKSD_T pKsd_t = phTTS->pKernelShareData;
; 2387 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;
; 2388 : 
; 2389 : #ifndef TUNE_8KHZ_VOICE
; 2390 :   pKsd_t->uiSampleRate = uiSampRate;
; 2391 :   pVtm_t->SampleRate = pKsd_t->uiSampleRate;
; 2392 : #else
; 2393 :    pVtm_t->SampleRate = 8000; /* for 8khz tune eab 1/15/98 */
; 2394 :    pKsd_t->uiSampleRate = 8000;
; 2395 : #endif	// TUNE_8KHZ_VOICE
; 2396 :   pKsd_t->SamplePeriod = 1.0 / pVtm_t->SampleRate;

  019d0	db 44 24 08	 fild	 DWORD PTR _uiSampRate$[esp-4]
  019d4	8b 44 24 04	 mov	 eax, DWORD PTR _phTTS$[esp-4]
  019d8	8b 54 24 08	 mov	 edx, DWORD PTR _uiSampRate$[esp-4]
  019dc	dc 3d 00 00 00
	00		 fdivr	 QWORD PTR __real@8@3fff8000000000000000
  019e2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  019e5	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  019e8	89 91 f0 03 00
	00		 mov	 DWORD PTR [ecx+1008], edx
  019ee	89 90 18 01 00
	00		 mov	 DWORD PTR [eax+280], edx

; 2397 : 
; 2398 :   /********************************************************************/
; 2399 :   /*  Setup for either 8, 10, or 11.025 kHz.                          */
; 2400 :   /********************************************************************/
; 2401 : 
; 2402 :   if ( pKsd_t->uiSampleRate == PC_SAMPLE_RATE )

  019f4	8b 91 f0 03 00
	00		 mov	 edx, DWORD PTR [ecx+1008]
  019fa	81 fa 11 2b 00
	00		 cmp	 edx, 11025		; 00002b11H
  01a00	dd 99 f8 03 00
	00		 fstp	 QWORD PTR [ecx+1016]
  01a06	75 28		 jne	 SHORT $L71947

; 2403 :   {
; 2404 :     pVtm_t->bEightKHz = FALSE;

  01a08	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0

; 2405 : 
; 2406 :     /******************************************************************/
; 2407 :     /*  Set the vocal tract model to 11 KHz.                          */
; 2408 :     /******************************************************************/
; 2409 : 
; 2410 :     pVtm_t->uiSampleRateChange = SAMPLE_RATE_INCREASE;

  01a12	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2411 :     pVtm_t->rate_scale = 18063;   /*  Equals 1.1 in Q14 format for 11 KHz.    */

  01a18	66 c7 40 04 8f
	46		 mov	 WORD PTR [eax+4], 18063	; 0000468fH

; 2412 :     pVtm_t->inv_rate_scale = 29722;    /*  Equals 0.909 in Q15 format.        */

  01a1e	66 c7 40 06 1a
	74		 mov	 WORD PTR [eax+6], 29722	; 0000741aH

; 2413 :     pVtm_t->uiNumberOfSamplesPerFrame = 71;

  01a24	c7 80 14 01 00
	00 47 00 00 00	 mov	 DWORD PTR [eax+276], 71	; 00000047H

; 2414 :   }
; 2415 :   else

  01a2e	eb 36		 jmp	 SHORT $L71950
$L71947:

; 2416 :   {
; 2417 :     if ( pKsd_t->uiSampleRate == MULAW_SAMPLE_RATE )

  01a30	81 fa 40 1f 00
	00		 cmp	 edx, 8000		; 00001f40H
  01a36	75 28		 jne	 SHORT $L71949

; 2418 :    {
; 2419 :       pVtm_t->bEightKHz = TRUE;

  01a38	c7 80 1c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+284], 1

; 2420 : 
; 2421 :       /****************************************************************/
; 2422 :       /*  Set the vocal tract model to 8 KHz.                         */
; 2423 :       /****************************************************************/
; 2424 : 
; 2425 :       pVtm_t->uiSampleRateChange = SAMPLE_RATE_DECREASE;

  01a42	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 2426 :       pVtm_t->rate_scale = 26214;    /*  Equals 0.8 in Q15 format for 8 KHz */

  01a48	66 c7 40 04 66
	66		 mov	 WORD PTR [eax+4], 26214	; 00006666H

; 2427 :       pVtm_t->inv_rate_scale = 20480;    /*  Equals 1.25 in Q14 format.     */

  01a4e	66 c7 40 06 00
	50		 mov	 WORD PTR [eax+6], 20480	; 00005000H

; 2428 :       pVtm_t->uiNumberOfSamplesPerFrame = 51;

  01a54	c7 80 14 01 00
	00 33 00 00 00	 mov	 DWORD PTR [eax+276], 51	; 00000033H

; 2429 :     }
; 2430 :     else

  01a5e	eb 06		 jmp	 SHORT $L71950
$L71949:

; 2431 :     {
; 2432 :       pVtm_t->uiSampleRateChange = NO_SAMPLE_RATE_CHANGE;

  01a60	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$L71950:

; 2433 :     }
; 2434 :   }
; 2435 : 
; 2436 :   /********************************************************************/
; 2437 :   /*  Update the speaker definition for the new sample rate.          */
; 2438 :   /********************************************************************/
; 2439 : 
; 2440 :   pKsd_t->async_voice = pKsd_t->last_voice ;

  01a66	0f bf 81 e4 03
	00 00		 movsx	 eax, WORD PTR [ecx+996]
  01a6d	89 81 04 04 00
	00		 mov	 DWORD PTR [ecx+1028], eax

; 2441 :   pKsd_t->async_change |= ASYNC_voice;

  01a73	8b 81 00 04 00
	00		 mov	 eax, DWORD PTR [ecx+1024]
  01a79	0c 01		 or	 al, 1
  01a7b	89 81 00 04 00
	00		 mov	 DWORD PTR [ecx+1024], eax

; 2442 : 
; 2443 :   return;
; 2444 : }

  01a81	c3		 ret	 0
_SetSampleRate ENDP
_TEXT	ENDS
PUBLIC	_setzeroabc
_TEXT	SEGMENT
_f$ = 8
_bw$ = 12
_rnzg$ = 16
_sacoef$ = 20
_sbcoef$ = 24
_sccoef$ = 28
_setzeroabc PROC NEAR

; 2486 : 	/* EAB 7/7/99 CHnages varibales from ints to S32 to avoid overflow errors*/
; 2487 : 
; 2488 : S32 acoef;
; 2489 : S32 bcoef;
; 2490 : S32 ccoef;
; 2491 : 
; 2492 : 
; 2493 : S32 r;
; 2494 : 
; 2495 : /*    First compute ordinary resonator coefficients */
; 2496 : /*    Let r  =  exp(-pi bw t) */
; 2497 : /*    To get rid of transcendentals for chip implementation, see above: */
; 2498 : 
; 2499 : 		r = radius_table[bw >> 3];

  01a90	8b 44 24 08	 mov	 eax, DWORD PTR _bw$[esp-4]

; 2500 : 		
; 2501 : 
; 2502 :     
; 2503 : 
; 2504 : 
; 2505 : /*    Let c  =  -r**2 */
; 2506 : 
; 2507 : 	 ccoef = -frac4mul(r,r);
; 2508 : 		
; 2509 : 
; 2510 : /*    Let b = r * 2*cos(2 pi f t) */
; 2511 : /*    To get rid of transcendentals for chip implementation, see above: */
; 2512 : 
; 2513 : 		 bcoef = frac4mul( r, cosine_table[ f >> 3 ] );

  01a94	8b 54 24 04	 mov	 edx, DWORD PTR _f$[esp-4]
  01a98	c1 f8 03	 sar	 eax, 3
  01a9b	c1 fa 03	 sar	 edx, 3
  01a9e	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _radius_table[eax*2]
  01aa6	53		 push	 ebx
  01aa7	56		 push	 esi
  01aa8	0f bf 34 55 00
	00 00 00	 movsx	 esi, WORD PTR _cosine_table[edx*2]
  01ab0	8b c8		 mov	 ecx, eax
  01ab2	0f af f0	 imul	 esi, eax
  01ab5	0f af c8	 imul	 ecx, eax

; 2514 : 
; 2515 : /*    Let a = 1.0 - b - c */
; 2516 : 	 
; 2517 : 	 acoef = 4096 - bcoef - ccoef;
; 2518 : 
; 2519 : /* Now convert to antiresonator coefficients (a'=1/a, b'=-b/a, c'=-c/a) */
; 2520 : /* It would be desirable to turn these divides into tables for chip impl. */
; 2521 : 	  
; 2522 : 	*sacoef = ( (4096* rnzg )/acoef);

  01ab8	8b 5c 24 14	 mov	 ebx, DWORD PTR _rnzg$[esp+4]
  01abc	57		 push	 edi
  01abd	8b c3		 mov	 eax, ebx
  01abf	bf 00 10 00 00	 mov	 edi, 4096		; 00001000H
  01ac4	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  01ac7	c1 fe 0c	 sar	 esi, 12			; 0000000cH
  01aca	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  01acd	f7 d9		 neg	 ecx
  01acf	2b fe		 sub	 edi, esi
  01ad1	99		 cdq
  01ad2	2b f9		 sub	 edi, ecx
  01ad4	f7 ff		 idiv	 edi
  01ad6	8b 54 24 1c	 mov	 edx, DWORD PTR _sacoef$[esp+8]
  01ada	66 89 02	 mov	 WORD PTR [edx], ax

; 2523 : 	*sbcoef = -((bcoef*rnzg)/acoef);

  01add	8b c6		 mov	 eax, esi
  01adf	0f af c3	 imul	 eax, ebx
  01ae2	99		 cdq
  01ae3	f7 ff		 idiv	 edi
  01ae5	8b 54 24 20	 mov	 edx, DWORD PTR _sbcoef$[esp+8]
  01ae9	f7 d8		 neg	 eax
  01aeb	66 89 02	 mov	 WORD PTR [edx], ax

; 2524 : 	*sccoef = -((ccoef*rnzg)/acoef);

  01aee	8b c1		 mov	 eax, ecx
  01af0	0f af c3	 imul	 eax, ebx
  01af3	99		 cdq
  01af4	f7 ff		 idiv	 edi
  01af6	8b 4c 24 24	 mov	 ecx, DWORD PTR _sccoef$[esp+8]
  01afa	5f		 pop	 edi
  01afb	5e		 pop	 esi
  01afc	5b		 pop	 ebx
  01afd	f7 d8		 neg	 eax
  01aff	66 89 01	 mov	 WORD PTR [ecx], ax

; 2525 : 
; 2526 : 	
; 2527 : 	
; 2528 : 	/*    Debugging printout *
; 2529 :       printf("fz=%3d bw=%3d acoef=%8.5f bcoef=%8.5f ccoef=%8.5f\n",
; 2530 : 	  f, bw, *acoef, *bcoef, *ccoef);  */
; 2531 : 
; 2532 : }

  01b02	c3		 ret	 0
_setzeroabc ENDP
_TEXT	ENDS
END
