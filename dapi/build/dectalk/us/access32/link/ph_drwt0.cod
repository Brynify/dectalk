	TITLE	D:\work\Product\dapi\src\Ph\ph_drwt0.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_oarcnt
PUBLIC	_uk_f0msegtars
PUBLIC	_uk_f0fsegtars
PUBLIC	_sp_f0msegtars
PUBLIC	_sp_f0fsegtars
PUBLIC	_la_f0msegtars
PUBLIC	_la_f0fsegtars
PUBLIC	_gr_f0msegtars
PUBLIC	_gr_f0fsegtars
PUBLIC	_us_f0msegtars
PUBLIC	_us_f0fsegtars
PUBLIC	_fr_f0msegtars
PUBLIC	_fr_f0fsegtars
_BSS	SEGMENT
_oarcnt	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_uk_f0msegtars DW 032H
	DW	064H
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	064H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	064H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	0c8H
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0fff6H
	DW	01eH
	DW	00H
	DW	096H
	DW	0ffceH
	DW	0fff6H
	ORG $+2
_uk_f0fsegtars DW 032H
	DW	064H
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	064H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	064H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	0c8H
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0fff6H
	DW	01eH
	DW	00H
	DW	096H
	DW	0ffceH
	DW	0fff6H
	ORG $+2
_sp_f0msegtars DW 01eH
	DW	00H
	DW	096H
	DW	0c8H
	DW	01eH
	DW	03cH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffe2H
	DW	0ffe2H
	DW	0ffb0H
	DW	0ffceH
	DW	096H
	DW	096H
	DW	096H
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	096H
	ORG $+2
_sp_f0fsegtars DW 01eH
	DW	00H
	DW	096H
	DW	0c8H
	DW	01eH
	DW	03cH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffe2H
	DW	0ffe2H
	DW	0ffb0H
	DW	0ffceH
	DW	096H
	DW	096H
	DW	096H
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	096H
	ORG $+2
_la_f0msegtars DW 01eH
	DW	00H
	DW	032H
	DW	032H
	DW	01eH
	DW	03cH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffe2H
	DW	0ffe2H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	096H
	DW	096H
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	096H
	ORG $+2
_la_f0fsegtars DW 01eH
	DW	00H
	DW	046H
	DW	046H
	DW	01eH
	DW	03cH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffe2H
	DW	0ffe2H
	DW	0ffb0H
	DW	0ffceH
	DW	096H
	DW	096H
	DW	096H
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	096H
	ORG $+2
_gr_f0msegtars DW 032H
	DW	0aH
	DW	0aH
	DW	0aH
	DW	0aH
	DW	05fH
	DW	01eH
	DW	05fH
	DW	014H
	DW	064H
	DW	014H
	DW	014H
	DW	03cH
	DW	03cH
	DW	050H
	DW	050H
	DW	03cH
	DW	028H
	DW	064H
	DW	01eH
	DW	03cH
	DW	0aH
	DW	01eH
	DW	01eH
	DW	03cH
	DW	03cH
	DW	0fff6H
	DW	0fff6H
	DW	0fff6H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	032H
	DW	032H
	DW	096H
	DW	0ffceH
	DW	096H
	DW	096H
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffe2H
	DW	096H
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
_gr_f0fsegtars DW 046H
	DW	0fH
	DW	0fH
	DW	0fH
	DW	0aH
	DW	046H
	DW	02dH
	DW	046H
	DW	01aH
	DW	064H
	DW	01aH
	DW	01aH
	DW	03cH
	DW	03cH
	DW	050H
	DW	050H
	DW	03cH
	DW	028H
	DW	050H
	DW	02dH
	DW	03cH
	DW	0aH
	DW	02dH
	DW	02dH
	DW	03cH
	DW	03cH
	DW	0fff1H
	DW	0fff1H
	DW	0fff1H
	DW	00H
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	00H
	DW	0ffbaH
	DW	0ffbaH
	DW	0190H
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	0190H
	DW	0ffbaH
	DW	0190H
	DW	0190H
	DW	0190H
	DW	0ffbaH
	DW	0190H
	DW	0ffbaH
	DW	0190H
	DW	0ffbaH
	DW	0ffbaH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
_us_f0msegtars DW 032H
	DW	03cH
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	064H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	064H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	07dH
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0ffd8H
	DW	00H
	DW	00H
	DW	096H
	DW	0ffceH
	DW	064H
	DW	0ff6aH
	DW	0ffe2H
	ORG $+2
_us_f0fsegtars DW 032H
	DW	050H
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	050H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	050H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	05aH
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0fff6H
	DW	0ffc4H
	DW	00H
	DW	096H
	DW	0ffceH
	DW	064H
	DW	0aaH
	DW	01eH
	ORG $+2
_fr_f0msegtars DW 032H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	096H
	DW	096H
	DW	0ffbaH
	DW	028H
	DW	096H
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	00H
	DW	00H
	DW	00H
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	0ffbaH
	DW	00H
	DW	00H
_fr_f0fsegtars DD FLAT:_fr_f0msegtars
_DATA	ENDS
PUBLIC	_pht0draw
EXTRN	_TextToSpeechErrorHandler:NEAR
EXTRN	__imp__fprintf:NEAR
EXTRN	_phone_feature:NEAR
EXTRN	_dologphoneme:NEAR
EXTRN	_getcosine:BYTE
_DATA	SEGMENT
$SG71461 DB	0aH, 00H
	ORG $+2
$SG71563 DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_phTTS$ = 8
_pKsd_t$ = -4
_f0seg$ = -8
_f0in$ = -8
_pht0draw PROC NEAR

; 529  : {

  00000	83 ec 08	 sub	 esp, 8

; 530  : 	
; 531  : 	
; 532  : 	/*	  Automatic variables */
; 533  : 	
; 534  : #ifdef GRAPHF0
; 535  : 	int icnt;
; 536  : 	char prntbuf[121];
; 537  : #endif
; 538  : 	int temp,dtglst,pseudojitter;	
; 539  : 	PKSD_T pKsd_t;
; 540  : 	PDPH_T pDph_t;
; 541  : 	PDPHSETTAR_ST pDphsettar;
; 542  : 	short f0seg=0,f0in=0;
; 543  : 	short tmp;
; 544  : 	
; 545  : 	pKsd_t = phTTS->pKernelShareData;

  00003	8b 44 24 0c	 mov	 eax, DWORD PTR _phTTS$[esp+4]
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi

; 546  : 	pDph_t = phTTS->pPHThreadData;

  0000a	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0000d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00010	33 db		 xor	 ebx, ebx
  00012	57		 push	 edi

; 547  : 	pDphsettar = pDph_t->pSTphsettar;
; 548  : 	/* Initialize , GL  6/11/1996*/
; 549  : 	/* this code is re-entrant and these variables must only be re-initialized at a hard or soft init*/
; 550  : 	
; 551  : 	/*pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0;*/
; 552  : 	
; 553  : 	
; 554  : 	
; 555  : 	if (pDph_t->malfem == MALE)

  00013	66 83 be 08 15
	00 00 01	 cmp	 WORD PTR [esi+5384], 1
  0001b	8b be 10 2c 00
	00		 mov	 edi, DWORD PTR [esi+11280]
  00021	89 5c 24 10	 mov	 DWORD PTR _f0seg$[esp+24], ebx
  00025	89 4c 24 14	 mov	 DWORD PTR _pKsd_t$[esp+24], ecx
  00029	0f 85 2b 0d 00
	00		 jne	 $L71364

; 556  : 	{	
; 557  : 		/*	  Initialize */
; 558  : 		if (pDph_t->nf0ev <= -2) 

  0002f	83 c9 ff	 or	 ecx, -1
  00032	66 83 be 52 23
	00 00 fe	 cmp	 WORD PTR [esi+9042], -2	; fffffffeH
  0003a	0f 8f 11 04 00
	00		 jg	 $L71365

; 559  : 		{
; 560  : 			
; 561  : 			/* Hard initialization */
; 562  : 			/* for now hardcode baseline for init experimentation eab 8/96*/
; 563  : 			/* EAB BUG- found problem with f0command, it needs to be a global variable
; 564  : 			or it sometimes doesn't get handled correctly*/
; 565  : 			pDph_t->clausepos=0;

  00040	66 89 9e ee 14
	00 00		 mov	 WORD PTR [esi+5358], bx

; 566  : 			pDphsettar->phocur = GEN_SIL;

  00047	66 c7 47 44 00
	1e		 mov	 WORD PTR [edi+68], 7680	; 00001e00H

; 567  : #ifdef GERMAN
; 568  : 			pDph_t->f0basetypes[0][0]=1137-10;
; 569  : 			pDph_t->f0basetypes[0][1]=1125-10;
; 570  : 			pDph_t->f0basetypes[0][2]=1129-10;
; 571  : 			pDph_t->f0basetypes[0][3]=1117-10;
; 572  : 			pDph_t->f0basetypes[0][4]=1113-10;
; 573  : 			pDph_t->f0basetypes[0][5]=1109-10;
; 574  : 			pDph_t->f0basetypes[0][6]=1095-10;
; 575  : 			pDph_t->f0basetypes[0][7]=1082-10;
; 576  : 			pDph_t->f0basetypes[0][8]=1079-10;
; 577  : 			pDph_t->f0basetypes[0][9]=1065-10;
; 578  : 			pDph_t->f0basetypes[0][10]=1053-10;
; 579  : 			pDph_t->f0basetypes[0][11]=1040-10;
; 580  : 			pDph_t->f0basetypes[0][12]=1038-10;
; 581  : 			pDph_t->f0basetypes[0][13]=1024-10;
; 582  : 			pDph_t->f0basetypes[0][14]=1010-10;
; 583  : 			pDph_t->f0basetypes[0][15]=1000-10;
; 584  : 			pDph_t->f0basetypes[0][16]=963-10;
; 585  : 			
; 586  : 			/*eab  less drop for short phrases*/
; 587  : 			
; 588  : 			pDph_t->f0basetypes[4][0]=1110-10;
; 589  : 			pDph_t->f0basetypes[4][1]=1110-10;
; 590  : 			pDph_t->f0basetypes[4][2]=1110-10;
; 591  : 			pDph_t->f0basetypes[4][3]=1102-10;
; 592  : 			pDph_t->f0basetypes[4][4]=1102-10;
; 593  : 			pDph_t->f0basetypes[4][5]=1100-10;
; 594  : 			pDph_t->f0basetypes[4][6]=1100-10;
; 595  : 			pDph_t->f0basetypes[4][7]=1094-10;
; 596  : 			pDph_t->f0basetypes[4][8]=1080-10;
; 597  : 			pDph_t->f0basetypes[4][9]=1080-10;
; 598  : 			pDph_t->f0basetypes[4][10]=1060-10;
; 599  : 			pDph_t->f0basetypes[4][11]=1040-10;
; 600  : 			pDph_t->f0basetypes[4][12]=1040-10;
; 601  : 			pDph_t->f0basetypes[4][13]=1030-10;
; 602  : 			pDph_t->f0basetypes[4][14]=1030-10;
; 603  : 			pDph_t->f0basetypes[4][15]=1020-10;
; 604  : 			pDph_t->f0basetypes[4][16]=1020-10;
; 605  : 			
; 606  : 			/* comma*/
; 607  : 			pDph_t->f0basetypes[1][0]=1157-10;
; 608  : 			pDph_t->f0basetypes[1][1]=1145-10;
; 609  : 			pDph_t->f0basetypes[1][2]=1139-10;
; 610  : 			pDph_t->f0basetypes[1][3]=1127-10;
; 611  : 			pDph_t->f0basetypes[1][4]=1113-10;
; 612  : 			pDph_t->f0basetypes[1][5]=1109-10;
; 613  : 			pDph_t->f0basetypes[1][6]=1085-10;
; 614  : 			pDph_t->f0basetypes[1][7]=1062-10;
; 615  : 			pDph_t->f0basetypes[1][8]=1049-10;
; 616  : 			pDph_t->f0basetypes[1][9]=1035-10;
; 617  : 			pDph_t->f0basetypes[1][10]=1023-10;
; 618  : 			pDph_t->f0basetypes[1][11]=1015-10;
; 619  : 			pDph_t->f0basetypes[1][12]=1005-10;
; 620  : 			pDph_t->f0basetypes[1][13]=1100-10;
; 621  : 			pDph_t->f0basetypes[1][14]=1101-10;
; 622  : 			pDph_t->f0basetypes[1][15]=1102-10;
; 623  : 			pDph_t->f0basetypes[1][16]=1104-10;
; 624  : 				
; 625  : 				/*exclamation*/
; 626  : 			pDph_t->f0basetypes[2][0]=1057+160;
; 627  : 			pDph_t->f0basetypes[2][1]=1085+160;
; 628  : 			pDph_t->f0basetypes[2][2]=1109+160;
; 629  : 			pDph_t->f0basetypes[2][3]=1117+160;
; 630  : 			pDph_t->f0basetypes[2][4]=1113+160;
; 631  : 			pDph_t->f0basetypes[2][5]=1149+160;
; 632  : 			pDph_t->f0basetypes[2][6]=1095+160;
; 633  : 			pDph_t->f0basetypes[2][7]=1082+160;
; 634  : 			pDph_t->f0basetypes[2][8]=1079+160;
; 635  : 			pDph_t->f0basetypes[2][9]=1065+160;
; 636  : 			pDph_t->f0basetypes[2][10]=1053+160;
; 637  : 			pDph_t->f0basetypes[2][11]=1040+160;
; 638  : 			pDph_t->f0basetypes[2][12]=1038+160;
; 639  : 			pDph_t->f0basetypes[2][13]=1024+160;
; 640  : 			pDph_t->f0basetypes[2][14]=980+160;
; 641  : 			pDph_t->f0basetypes[2][15]=852+160;
; 642  : 			pDph_t->f0basetypes[2][16]=843+160;
; 643  : 			
; 644  : 			/*Question*/
; 645  : 			pDph_t->glotalize =0;
; 646  : 			pDphsettar->glide_step=0;
; 647  : 			pDph_t->f0basetypes[3][0]=1187-10;
; 648  : 			pDph_t->f0basetypes[3][1]=1165-10;
; 649  : 			pDph_t->f0basetypes[3][2]=1139-10;
; 650  : 			pDph_t->f0basetypes[3][3]=1127-10;
; 651  : 			pDph_t->f0basetypes[3][4]=1113-10;
; 652  : 			pDph_t->f0basetypes[3][5]=1109-10;
; 653  : 			pDph_t->f0basetypes[3][6]=1095-10;
; 654  : 			pDph_t->f0basetypes[3][7]=1082-10;
; 655  : 			pDph_t->f0basetypes[3][8]=1079-10;
; 656  : 			pDph_t->f0basetypes[3][9]=1065-10;
; 657  : 			pDph_t->f0basetypes[3][10]=1053-10;
; 658  : 			pDph_t->f0basetypes[3][11]=940-10;
; 659  : 			pDph_t->f0basetypes[3][12]=938-10;
; 660  : 			pDph_t->f0basetypes[3][13]=924-10;
; 661  : 			pDph_t->f0basetypes[3][14]=1010-10;
; 662  : 			pDph_t->f0basetypes[3][15]=1014-10;
; 663  : 			pDph_t->f0basetypes[3][16]=1018-10;
; 664  : 			
; 665  : 			
; 666  : 			
; 667  : 			//Tuned BATS 709
; 668  : 			/* DECLARATIVE*/
; 669  : #ifdef trynew
; 670  : 			pDph_t->f0basetypes[0][0]=1195;
; 671  : 			pDph_t->f0basetypes[0][1]=1185;
; 672  : 			pDph_t->f0basetypes[0][2]=1179;
; 673  : 			pDph_t->f0basetypes[0][3]=1167;
; 674  : 			pDph_t->f0basetypes[0][4]=1153;
; 675  : 			pDph_t->f0basetypes[0][5]=1149;
; 676  : 			pDph_t->f0basetypes[0][6]=1135;
; 677  : 			pDph_t->f0basetypes[0][7]=1122;
; 678  : 			pDph_t->f0basetypes[0][8]=1119;
; 679  : 			pDph_t->f0basetypes[0][9]=1105;
; 680  : 			pDph_t->f0basetypes[0][10]=1093;
; 681  : 			pDph_t->f0basetypes[0][11]=1081;
; 682  : 			pDph_t->f0basetypes[0][12]=1075;
; 683  : 			pDph_t->f0basetypes[0][13]=1052;
; 684  : 			pDph_t->f0basetypes[0][14]=1011;
; 685  : 			pDph_t->f0basetypes[0][15]=984;
; 686  : 			pDph_t->f0basetypes[0][16]=972;
; 687  : 			;
; 688  : 			
; 689  : 			/*eab  less drop for short phrases*/
; 690  : 			
; 691  : 			pDph_t->f0basetypes[4][0]=1160;
; 692  : 			pDph_t->f0basetypes[4][1]=1150;
; 693  : 			pDph_t->f0basetypes[4][2]=1150;
; 694  : 			pDph_t->f0basetypes[4][3]=1152;
; 695  : 			pDph_t->f0basetypes[4][4]=1132;
; 696  : 			pDph_t->f0basetypes[4][5]=1120;
; 697  : 			pDph_t->f0basetypes[4][6]=1100;
; 698  : 			pDph_t->f0basetypes[4][7]=1104;
; 699  : 			pDph_t->f0basetypes[4][8]=1100;
; 700  : 			pDph_t->f0basetypes[4][9]=1080;
; 701  : 			pDph_t->f0basetypes[4][10]=1070;
; 702  : 			pDph_t->f0basetypes[4][11]=1060;
; 703  : 			pDph_t->f0basetypes[4][12]=1050;
; 704  : 			pDph_t->f0basetypes[4][13]=1040;
; 705  : 			pDph_t->f0basetypes[4][14]=1030;
; 706  : 			pDph_t->f0basetypes[4][15]=1000;
; 707  : 			pDph_t->f0basetypes[4][16]=1000;
; 708  : 			
; 709  : 			/* comma*/
; 710  : 			pDph_t->f0basetypes[1][0]=1157;
; 711  : 			pDph_t->f0basetypes[1][1]=1145;
; 712  : 			pDph_t->f0basetypes[1][2]=1139;
; 713  : 			pDph_t->f0basetypes[1][3]=1127;
; 714  : 			pDph_t->f0basetypes[1][4]=1113;
; 715  : 			pDph_t->f0basetypes[1][5]=1109;
; 716  : 			pDph_t->f0basetypes[1][6]=1085;
; 717  : 			pDph_t->f0basetypes[1][7]=1062;
; 718  : 			pDph_t->f0basetypes[1][8]=1049;
; 719  : 			pDph_t->f0basetypes[1][9]=1025;
; 720  : 			pDph_t->f0basetypes[1][10]=1013;
; 721  : 			pDph_t->f0basetypes[1][11]=1000;
; 722  : 			pDph_t->f0basetypes[1][12]=1002;
; 723  : 			pDph_t->f0basetypes[1][13]=1030;
; 724  : 			pDph_t->f0basetypes[1][14]=1060;
; 725  : 			pDph_t->f0basetypes[1][15]=1010;
; 726  : 			pDph_t->f0basetypes[1][16]=1020;
; 727  : 			
; 728  : 			/*exclamation*/
; 729  : 			pDph_t->f0basetypes[2][0]=1157;
; 730  : 			pDph_t->f0basetypes[2][1]=1145;
; 731  : 			pDph_t->f0basetypes[2][2]=1139;
; 732  : 			pDph_t->f0basetypes[2][3]=1127;
; 733  : 			pDph_t->f0basetypes[2][4]=1113;
; 734  : 			pDph_t->f0basetypes[2][5]=1109;
; 735  : 			pDph_t->f0basetypes[2][6]=1095;
; 736  : 			pDph_t->f0basetypes[2][7]=1082;
; 737  : 			pDph_t->f0basetypes[2][8]=1079;
; 738  : 			pDph_t->f0basetypes[2][9]=1065;
; 739  : 			pDph_t->f0basetypes[2][10]=1053;
; 740  : 			pDph_t->f0basetypes[2][11]=1040;
; 741  : 			pDph_t->f0basetypes[2][12]=1038;
; 742  : 			pDph_t->f0basetypes[2][13]=1024;
; 743  : 			pDph_t->f0basetypes[2][14]=980+70;
; 744  : 			pDph_t->f0basetypes[2][15]=952+60;
; 745  : 			pDph_t->f0basetypes[2][16]=943+40;
; 746  : 			
; 747  : 			/*Question*/
; 748  : 			pDph_t->glotalize =0;
; 749  : 			pDphsettar->glide_step=0;
; 750  : 			pDph_t->f0basetypes[3][0]=1187;
; 751  : 			pDph_t->f0basetypes[3][1]=1165;
; 752  : 			pDph_t->f0basetypes[3][2]=1139;
; 753  : 			pDph_t->f0basetypes[3][3]=1127;
; 754  : 			pDph_t->f0basetypes[3][4]=1113;
; 755  : 			pDph_t->f0basetypes[3][5]=1109;
; 756  : 			pDph_t->f0basetypes[3][6]=1095;
; 757  : 			pDph_t->f0basetypes[3][7]=1082;
; 758  : 			pDph_t->f0basetypes[3][8]=1079;
; 759  : 			pDph_t->f0basetypes[3][9]=1065;
; 760  : 			pDph_t->f0basetypes[3][10]=1053;
; 761  : 			pDph_t->f0basetypes[3][11]=940;
; 762  : 			pDph_t->f0basetypes[3][12]=938;
; 763  : 			pDph_t->f0basetypes[3][13]=924;
; 764  : 			pDph_t->f0basetypes[3][14]=1010;
; 765  : 			pDph_t->f0basetypes[3][15]=1014;
; 766  : 			pDph_t->f0basetypes[3][16]=1018;
; 767  : 			
; 768  : #endif	//trynew
; 769  : #endif	// GERMAN
; 770  : 			
; 771  : 			
; 772  : #ifdef SPANISH_LA
; 773  : 			
; 774  : 			
; 775  : 			
; 776  : 			/* DECLARATIVE*/
; 777  : 			
; 778  : 			pDph_t->f0basetypes[0][0]=1127;
; 779  : 			pDph_t->f0basetypes[0][1]=1115;
; 780  : 			pDph_t->f0basetypes[0][2]=1139;
; 781  : 			pDph_t->f0basetypes[0][3]=1127;
; 782  : 			pDph_t->f0basetypes[0][4]=1113;
; 783  : 			pDph_t->f0basetypes[0][5]=1119;
; 784  : 			pDph_t->f0basetypes[0][6]=1105;
; 785  : 			pDph_t->f0basetypes[0][7]=1112;
; 786  : 			pDph_t->f0basetypes[0][8]=1119;
; 787  : 			pDph_t->f0basetypes[0][9]=1115;
; 788  : 			pDph_t->f0basetypes[0][10]=1112;
; 789  : 			pDph_t->f0basetypes[0][11]=1119;
; 790  : 			pDph_t->f0basetypes[0][12]=1115;
; 791  : 			pDph_t->f0basetypes[0][13]=1112;
; 792  : 			pDph_t->f0basetypes[0][14]=1119;
; 793  : 			pDph_t->f0basetypes[0][15]=1005;
; 794  : 			pDph_t->f0basetypes[0][16]=952;
; 795  : 			
; 796  : 			
; 797  : 			
; 798  : 			/*eab  less drop for short phrases*/
; 799  : 			
; 800  : 			pDph_t->f0basetypes[4][0]=1140;
; 801  : 			pDph_t->f0basetypes[4][1]=1130;
; 802  : 			pDph_t->f0basetypes[4][2]=1120;
; 803  : 			pDph_t->f0basetypes[4][3]=1122;
; 804  : 			pDph_t->f0basetypes[4][4]=1122;
; 805  : 			pDph_t->f0basetypes[4][5]=1120;
; 806  : 			pDph_t->f0basetypes[4][6]=1110;
; 807  : 			pDph_t->f0basetypes[4][7]=1114;
; 808  : 			pDph_t->f0basetypes[4][8]=1110;
; 809  : 			pDph_t->f0basetypes[4][9]=1110;
; 810  : 			pDph_t->f0basetypes[4][10]=1110;
; 811  : 			pDph_t->f0basetypes[4][11]=1110;
; 812  : 			pDph_t->f0basetypes[4][12]=1110;
; 813  : 			pDph_t->f0basetypes[4][13]=1110;
; 814  : 			pDph_t->f0basetypes[4][14]=1110;
; 815  : 			pDph_t->f0basetypes[4][15]=1050;
; 816  : 			pDph_t->f0basetypes[4][16]=1000;
; 817  : 			
; 818  : 			/* comma*/
; 819  : 			pDph_t->f0basetypes[1][0]=1157;
; 820  : 			pDph_t->f0basetypes[1][1]=1145;
; 821  : 			pDph_t->f0basetypes[1][2]=1139;
; 822  : 			pDph_t->f0basetypes[1][3]=1127;
; 823  : 			pDph_t->f0basetypes[1][4]=1113;
; 824  : 			pDph_t->f0basetypes[1][5]=1109;
; 825  : 			pDph_t->f0basetypes[1][6]=1085;
; 826  : 			pDph_t->f0basetypes[1][7]=1062;
; 827  : 			pDph_t->f0basetypes[1][8]=1049;
; 828  : 			pDph_t->f0basetypes[1][9]=1035;
; 829  : 			pDph_t->f0basetypes[1][10]=1043;
; 830  : 			pDph_t->f0basetypes[1][11]=1045;
; 831  : 			pDph_t->f0basetypes[1][12]=1035;
; 832  : 			pDph_t->f0basetypes[1][13]=1040;
; 833  : 			pDph_t->f0basetypes[1][14]=1067;
; 834  : 			pDph_t->f0basetypes[1][15]=1084;
; 835  : 			pDph_t->f0basetypes[1][16]=1090;
; 836  : 			
; 837  : 			/*exclamation*/
; 838  : 			pDph_t->f0basetypes[2][0]=1157;
; 839  : 			pDph_t->f0basetypes[2][1]=1145;
; 840  : 			pDph_t->f0basetypes[2][2]=1139;
; 841  : 			pDph_t->f0basetypes[2][3]=1127;
; 842  : 			pDph_t->f0basetypes[2][4]=1113;
; 843  : 			pDph_t->f0basetypes[2][5]=1109;
; 844  : 			pDph_t->f0basetypes[2][6]=1095;
; 845  : 			pDph_t->f0basetypes[2][7]=1082;
; 846  : 			pDph_t->f0basetypes[2][8]=1079;
; 847  : 			pDph_t->f0basetypes[2][9]=1065;
; 848  : 			pDph_t->f0basetypes[2][10]=1053;
; 849  : 			pDph_t->f0basetypes[2][11]=1040;
; 850  : 			pDph_t->f0basetypes[2][12]=1038;
; 851  : 			pDph_t->f0basetypes[2][13]=1024;
; 852  : 			pDph_t->f0basetypes[2][14]=980+70;
; 853  : 			pDph_t->f0basetypes[2][15]=952+60;
; 854  : 			pDph_t->f0basetypes[2][16]=943+40;
; 855  : 			
; 856  : 			/*Question*/
; 857  : 			pDph_t->glotalize =0;
; 858  : 			pDphsettar->glide_step=0;
; 859  : 			pDph_t->f0basetypes[3][0]=1187;
; 860  : 			pDph_t->f0basetypes[3][1]=1165;
; 861  : 			pDph_t->f0basetypes[3][2]=1139;
; 862  : 			pDph_t->f0basetypes[3][3]=1127;
; 863  : 			pDph_t->f0basetypes[3][4]=1113;
; 864  : 			pDph_t->f0basetypes[3][5]=1109;
; 865  : 			pDph_t->f0basetypes[3][6]=1095;
; 866  : 			pDph_t->f0basetypes[3][7]=1082;
; 867  : 			pDph_t->f0basetypes[3][8]=1079;
; 868  : 			pDph_t->f0basetypes[3][9]=1065;
; 869  : 			pDph_t->f0basetypes[3][10]=1053;
; 870  : 			pDph_t->f0basetypes[3][11]=1043;
; 871  : 			pDph_t->f0basetypes[3][12]=1056;
; 872  : 			pDph_t->f0basetypes[3][13]=1067;
; 873  : 			pDph_t->f0basetypes[3][14]=1089;
; 874  : 			pDph_t->f0basetypes[3][15]=1092;
; 875  : 			pDph_t->f0basetypes[3][16]=1104;
; 876  : 			
; 877  : #endif	// SPANISH_LA
; 878  : 			
; 879  : 			
; 880  : #ifdef SPANISH_SP
; 881  : 			
; 882  : 			
; 883  : 			/* DECLARATIVE*/
; 884  : 			
; 885  : 			pDph_t->f0basetypes[0][0]=1127;
; 886  : 			pDph_t->f0basetypes[0][1]=1115;
; 887  : 			pDph_t->f0basetypes[0][2]=1139;
; 888  : 			pDph_t->f0basetypes[0][3]=1127;
; 889  : 			pDph_t->f0basetypes[0][4]=1113;
; 890  : 			pDph_t->f0basetypes[0][5]=1119;
; 891  : 			pDph_t->f0basetypes[0][6]=1105;
; 892  : 			pDph_t->f0basetypes[0][7]=1112;
; 893  : 			pDph_t->f0basetypes[0][8]=1119;
; 894  : 			pDph_t->f0basetypes[0][9]=1115;
; 895  : 			pDph_t->f0basetypes[0][10]=1112;
; 896  : 			pDph_t->f0basetypes[0][11]=1119;
; 897  : 			pDph_t->f0basetypes[0][12]=1115;
; 898  : 			pDph_t->f0basetypes[0][13]=1112;
; 899  : 			pDph_t->f0basetypes[0][14]=1119;
; 900  : 			pDph_t->f0basetypes[0][15]=1005;
; 901  : 			pDph_t->f0basetypes[0][16]=952;
; 902  : 			
; 903  : 			
; 904  : 			
; 905  : 			/*eab  less drop for short phrases*/
; 906  : 			
; 907  : 			pDph_t->f0basetypes[4][0]=1140;
; 908  : 			pDph_t->f0basetypes[4][1]=1130;
; 909  : 			pDph_t->f0basetypes[4][2]=1120;
; 910  : 			pDph_t->f0basetypes[4][3]=1122;
; 911  : 			pDph_t->f0basetypes[4][4]=1122;
; 912  : 			pDph_t->f0basetypes[4][5]=1120;
; 913  : 			pDph_t->f0basetypes[4][6]=1110;
; 914  : 			pDph_t->f0basetypes[4][7]=1114;
; 915  : 			pDph_t->f0basetypes[4][8]=1110;
; 916  : 			pDph_t->f0basetypes[4][9]=1110;
; 917  : 			pDph_t->f0basetypes[4][10]=1110;
; 918  : 			pDph_t->f0basetypes[4][11]=1110;
; 919  : 			pDph_t->f0basetypes[4][12]=1110;
; 920  : 			pDph_t->f0basetypes[4][13]=1110;
; 921  : 			pDph_t->f0basetypes[4][14]=1110;
; 922  : 			pDph_t->f0basetypes[4][15]=1050;
; 923  : 			pDph_t->f0basetypes[4][16]=1000;
; 924  : 			
; 925  : 			/* comma*/
; 926  : 			pDph_t->f0basetypes[1][0]=1157;
; 927  : 			pDph_t->f0basetypes[1][1]=1145;
; 928  : 			pDph_t->f0basetypes[1][2]=1139;
; 929  : 			pDph_t->f0basetypes[1][3]=1127;
; 930  : 			pDph_t->f0basetypes[1][4]=1113;
; 931  : 			pDph_t->f0basetypes[1][5]=1109;
; 932  : 			pDph_t->f0basetypes[1][6]=1085;
; 933  : 			pDph_t->f0basetypes[1][7]=1062;
; 934  : 			pDph_t->f0basetypes[1][8]=1049;
; 935  : 			pDph_t->f0basetypes[1][9]=1035;
; 936  : 			pDph_t->f0basetypes[1][10]=1043;
; 937  : 			pDph_t->f0basetypes[1][11]=1045;
; 938  : 			pDph_t->f0basetypes[1][12]=1035;
; 939  : 			pDph_t->f0basetypes[1][13]=1040;
; 940  : 			pDph_t->f0basetypes[1][14]=1067;
; 941  : 			pDph_t->f0basetypes[1][15]=1084;
; 942  : 			pDph_t->f0basetypes[1][16]=1090;
; 943  : 			
; 944  : 			
; 945  : 			/* comma*/
; 946  : 			pDph_t->f0basetypes[1][0]=1157;
; 947  : 			pDph_t->f0basetypes[1][1]=1145;
; 948  : 			pDph_t->f0basetypes[1][2]=1139;
; 949  : 			pDph_t->f0basetypes[1][3]=1127;
; 950  : 			pDph_t->f0basetypes[1][4]=1113;
; 951  : 			pDph_t->f0basetypes[1][5]=1109;
; 952  : 			pDph_t->f0basetypes[1][6]=1085;
; 953  : 			pDph_t->f0basetypes[1][7]=1062;
; 954  : 			pDph_t->f0basetypes[1][8]=1049;
; 955  : 			pDph_t->f0basetypes[1][9]=1035;
; 956  : 			pDph_t->f0basetypes[1][10]=1043;
; 957  : 			pDph_t->f0basetypes[1][11]=1045;
; 958  : 			pDph_t->f0basetypes[1][12]=1035;
; 959  : 			pDph_t->f0basetypes[1][13]=1040;
; 960  : 			pDph_t->f0basetypes[1][14]=1067;
; 961  : 			pDph_t->f0basetypes[1][15]=1084;
; 962  : 			pDph_t->f0basetypes[1][16]=1090;
; 963  : 			
; 964  : 			/*exclamation*/
; 965  : 			pDph_t->f0basetypes[2][0]=1157;
; 966  : 			pDph_t->f0basetypes[2][1]=1145;
; 967  : 			pDph_t->f0basetypes[2][2]=1139;
; 968  : 			pDph_t->f0basetypes[2][3]=1127;
; 969  : 			pDph_t->f0basetypes[2][4]=1113;
; 970  : 			pDph_t->f0basetypes[2][5]=1109;
; 971  : 			pDph_t->f0basetypes[2][6]=1095;
; 972  : 			pDph_t->f0basetypes[2][7]=1082;
; 973  : 			pDph_t->f0basetypes[2][8]=1079;
; 974  : 			pDph_t->f0basetypes[2][9]=1065;
; 975  : 			pDph_t->f0basetypes[2][10]=1053;
; 976  : 			pDph_t->f0basetypes[2][11]=1040;
; 977  : 			pDph_t->f0basetypes[2][12]=1038;
; 978  : 			pDph_t->f0basetypes[2][13]=1024;
; 979  : 			pDph_t->f0basetypes[2][14]=980+70;
; 980  : 			pDph_t->f0basetypes[2][15]=952+60;
; 981  : 			pDph_t->f0basetypes[2][16]=943+40;
; 982  : 			
; 983  : 			/*Question*/
; 984  : 			pDph_t->glotalize =0;
; 985  : 			pDphsettar->glide_step=0;
; 986  : 			pDph_t->f0basetypes[3][0]=1187;
; 987  : 			pDph_t->f0basetypes[3][1]=1165;
; 988  : 			pDph_t->f0basetypes[3][2]=1139;
; 989  : 			pDph_t->f0basetypes[3][3]=1127;
; 990  : 			pDph_t->f0basetypes[3][4]=1113;
; 991  : 			pDph_t->f0basetypes[3][5]=1109;
; 992  : 			pDph_t->f0basetypes[3][6]=1095;
; 993  : 			pDph_t->f0basetypes[3][7]=1082;
; 994  : 			pDph_t->f0basetypes[3][8]=1079;
; 995  : 			pDph_t->f0basetypes[3][9]=1065;
; 996  : 			pDph_t->f0basetypes[3][10]=1053;
; 997  : 			pDph_t->f0basetypes[3][11]=1043;
; 998  : 			pDph_t->f0basetypes[3][12]=1056;
; 999  : 			pDph_t->f0basetypes[3][13]=1067;
; 1000 : 			pDph_t->f0basetypes[3][14]=1089;
; 1001 : 			pDph_t->f0basetypes[3][15]=1092;
; 1002 : 			pDph_t->f0basetypes[3][16]=1104;
; 1003 : 			
; 1004 : #endif // SPANISH_SP
; 1005 : 			
; 1006 : 			
; 1007 : 			
; 1008 : #ifdef ENGLISH_US
; 1009 : 			
; 1010 : 			
; 1011 : 			
; 1012 : 			/* DECLARATIVE*/
; 1013 : 			
; 1014 : 			pDph_t->f0basetypes[0][0]=1157;

  0004d	66 c7 86 38 20
	00 00 85 04	 mov	 WORD PTR [esi+8248], 1157 ; 00000485H

; 1015 : 			pDph_t->f0basetypes[0][1]=1145;

  00056	66 c7 86 3a 20
	00 00 79 04	 mov	 WORD PTR [esi+8250], 1145 ; 00000479H

; 1016 : 			pDph_t->f0basetypes[0][2]=1139;
; 1017 : 			pDph_t->f0basetypes[0][3]=1127;

  0005f	bd 67 04 00 00	 mov	 ebp, 1127		; 00000467H
  00064	66 c7 86 3c 20
	00 00 73 04	 mov	 WORD PTR [esi+8252], 1139 ; 00000473H

; 1018 : 			pDph_t->f0basetypes[0][4]=1113;

  0006d	ba 59 04 00 00	 mov	 edx, 1113		; 00000459H
  00072	66 89 ae 3e 20
	00 00		 mov	 WORD PTR [esi+8254], bp

; 1019 : 			pDph_t->f0basetypes[0][5]=1109;

  00079	b9 55 04 00 00	 mov	 ecx, 1109		; 00000455H
  0007e	66 89 96 40 20
	00 00		 mov	 WORD PTR [esi+8256], dx
  00085	66 89 8e 42 20
	00 00		 mov	 WORD PTR [esi+8258], cx

; 1020 : 			pDph_t->f0basetypes[0][6]=1095;

  0008c	66 c7 86 44 20
	00 00 47 04	 mov	 WORD PTR [esi+8260], 1095 ; 00000447H

; 1021 : 			pDph_t->f0basetypes[0][7]=1082;

  00095	66 c7 86 46 20
	00 00 3a 04	 mov	 WORD PTR [esi+8262], 1082 ; 0000043aH

; 1022 : 			pDph_t->f0basetypes[0][8]=1079;

  0009e	66 c7 86 48 20
	00 00 37 04	 mov	 WORD PTR [esi+8264], 1079 ; 00000437H

; 1023 : 			pDph_t->f0basetypes[0][9]=1065;

  000a7	66 c7 86 4a 20
	00 00 29 04	 mov	 WORD PTR [esi+8266], 1065 ; 00000429H

; 1024 : 			pDph_t->f0basetypes[0][10]=1053;

  000b0	66 c7 86 4c 20
	00 00 1d 04	 mov	 WORD PTR [esi+8268], 1053 ; 0000041dH

; 1025 : 			pDph_t->f0basetypes[0][11]=1040;

  000b9	66 c7 86 4e 20
	00 00 10 04	 mov	 WORD PTR [esi+8270], 1040 ; 00000410H

; 1026 : 			pDph_t->f0basetypes[0][12]=1038;

  000c2	66 c7 86 50 20
	00 00 0e 04	 mov	 WORD PTR [esi+8272], 1038 ; 0000040eH

; 1027 : 			pDph_t->f0basetypes[0][13]=1024;

  000cb	66 c7 86 52 20
	00 00 00 04	 mov	 WORD PTR [esi+8274], 1024 ; 00000400H

; 1028 : 			pDph_t->f0basetypes[0][14]=980;

  000d4	66 c7 86 54 20
	00 00 d4 03	 mov	 WORD PTR [esi+8276], 980 ; 000003d4H

; 1029 : 			pDph_t->f0basetypes[0][15]=952;

  000dd	66 c7 86 56 20
	00 00 b8 03	 mov	 WORD PTR [esi+8278], 952 ; 000003b8H

; 1030 : 			pDph_t->f0basetypes[0][16]=863;

  000e6	66 c7 86 58 20
	00 00 5f 03	 mov	 WORD PTR [esi+8280], 863 ; 0000035fH

; 1031 : 			
; 1032 : 			/*eab  less drop for short phrases*/
; 1033 : 			
; 1034 : 			pDph_t->f0basetypes[4][0]=1160;

  000ef	66 c7 86 c0 20
	00 00 88 04	 mov	 WORD PTR [esi+8384], 1160 ; 00000488H

; 1035 : 			pDph_t->f0basetypes[4][1]=1150;
; 1036 : 			pDph_t->f0basetypes[4][2]=1140;

  000f8	b8 74 04 00 00	 mov	 eax, 1140		; 00000474H
  000fd	66 c7 86 c2 20
	00 00 7e 04	 mov	 WORD PTR [esi+8386], 1150 ; 0000047eH
  00106	66 89 86 c4 20
	00 00		 mov	 WORD PTR [esi+8388], ax

; 1037 : 			pDph_t->f0basetypes[4][3]=1152;

  0010d	66 c7 86 c6 20
	00 00 80 04	 mov	 WORD PTR [esi+8390], 1152 ; 00000480H

; 1038 : 			pDph_t->f0basetypes[4][4]=1132;

  00116	66 c7 86 c8 20
	00 00 6c 04	 mov	 WORD PTR [esi+8392], 1132 ; 0000046cH

; 1039 : 			pDph_t->f0basetypes[4][5]=1140;

  0011f	66 89 86 ca 20
	00 00		 mov	 WORD PTR [esi+8394], ax

; 1040 : 			pDph_t->f0basetypes[4][6]=1130;

  00126	66 c7 86 cc 20
	00 00 6a 04	 mov	 WORD PTR [esi+8396], 1130 ; 0000046aH

; 1041 : 			pDph_t->f0basetypes[4][7]=1124;

  0012f	66 c7 86 ce 20
	00 00 64 04	 mov	 WORD PTR [esi+8398], 1124 ; 00000464H

; 1042 : 			pDph_t->f0basetypes[4][8]=1110;

  00138	66 c7 86 d0 20
	00 00 56 04	 mov	 WORD PTR [esi+8400], 1110 ; 00000456H

; 1043 : 			pDph_t->f0basetypes[4][9]=1100;

  00141	66 c7 86 d2 20
	00 00 4c 04	 mov	 WORD PTR [esi+8402], 1100 ; 0000044cH

; 1044 : 			pDph_t->f0basetypes[4][10]=1090;

  0014a	66 c7 86 d4 20
	00 00 42 04	 mov	 WORD PTR [esi+8404], 1090 ; 00000442H

; 1045 : 			pDph_t->f0basetypes[4][11]=1090;

  00153	66 c7 86 d6 20
	00 00 42 04	 mov	 WORD PTR [esi+8406], 1090 ; 00000442H

; 1046 : 			pDph_t->f0basetypes[4][12]=1080;

  0015c	66 c7 86 d8 20
	00 00 38 04	 mov	 WORD PTR [esi+8408], 1080 ; 00000438H

; 1047 : 			pDph_t->f0basetypes[4][13]=1080;

  00165	66 c7 86 da 20
	00 00 38 04	 mov	 WORD PTR [esi+8410], 1080 ; 00000438H

; 1048 : 			pDph_t->f0basetypes[4][14]=1070;

  0016e	66 c7 86 dc 20
	00 00 2e 04	 mov	 WORD PTR [esi+8412], 1070 ; 0000042eH

; 1049 : 			pDph_t->f0basetypes[4][15]=1070;

  00177	66 c7 86 de 20
	00 00 2e 04	 mov	 WORD PTR [esi+8414], 1070 ; 0000042eH

; 1050 : 			pDph_t->f0basetypes[4][16]=1060;

  00180	66 c7 86 e0 20
	00 00 24 04	 mov	 WORD PTR [esi+8416], 1060 ; 00000424H

; 1051 : 			
; 1052 : 			/* comma*/
; 1053 : 			pDph_t->f0basetypes[1][0]=1157;

  00189	66 c7 86 5a 20
	00 00 85 04	 mov	 WORD PTR [esi+8282], 1157 ; 00000485H

; 1054 : 			pDph_t->f0basetypes[1][1]=1145;

  00192	66 c7 86 5c 20
	00 00 79 04	 mov	 WORD PTR [esi+8284], 1145 ; 00000479H

; 1055 : 			pDph_t->f0basetypes[1][2]=1139;

  0019b	66 c7 86 5e 20
	00 00 73 04	 mov	 WORD PTR [esi+8286], 1139 ; 00000473H

; 1056 : 			pDph_t->f0basetypes[1][3]=1127;

  001a4	66 89 ae 60 20
	00 00		 mov	 WORD PTR [esi+8288], bp

; 1057 : 			pDph_t->f0basetypes[1][4]=1113;

  001ab	66 89 96 62 20
	00 00		 mov	 WORD PTR [esi+8290], dx

; 1058 : 			pDph_t->f0basetypes[1][5]=1109;

  001b2	66 89 8e 64 20
	00 00		 mov	 WORD PTR [esi+8292], cx

; 1059 : 			pDph_t->f0basetypes[1][6]=1085;

  001b9	66 c7 86 66 20
	00 00 3d 04	 mov	 WORD PTR [esi+8294], 1085 ; 0000043dH

; 1060 : 			pDph_t->f0basetypes[1][7]=1062;

  001c2	66 c7 86 68 20
	00 00 26 04	 mov	 WORD PTR [esi+8296], 1062 ; 00000426H

; 1061 : 			pDph_t->f0basetypes[1][8]=1049;

  001cb	66 c7 86 6a 20
	00 00 19 04	 mov	 WORD PTR [esi+8298], 1049 ; 00000419H

; 1062 : 			pDph_t->f0basetypes[1][9]=1035;

  001d4	66 c7 86 6c 20
	00 00 0b 04	 mov	 WORD PTR [esi+8300], 1035 ; 0000040bH

; 1063 : 			pDph_t->f0basetypes[1][10]=1023;

  001dd	66 c7 86 6e 20
	00 00 ff 03	 mov	 WORD PTR [esi+8302], 1023 ; 000003ffH

; 1064 : 			pDph_t->f0basetypes[1][11]=1015;

  001e6	66 c7 86 70 20
	00 00 f7 03	 mov	 WORD PTR [esi+8304], 1015 ; 000003f7H

; 1065 : 			pDph_t->f0basetypes[1][12]=1005;

  001ef	66 c7 86 72 20
	00 00 ed 03	 mov	 WORD PTR [esi+8306], 1005 ; 000003edH

; 1066 : 			pDph_t->f0basetypes[1][13]=1010;

  001f8	66 c7 86 74 20
	00 00 f2 03	 mov	 WORD PTR [esi+8308], 1010 ; 000003f2H

; 1067 : 			pDph_t->f0basetypes[1][14]=1017;

  00201	66 c7 86 76 20
	00 00 f9 03	 mov	 WORD PTR [esi+8310], 1017 ; 000003f9H

; 1068 : 			pDph_t->f0basetypes[1][15]=1024;

  0020a	66 c7 86 78 20
	00 00 00 04	 mov	 WORD PTR [esi+8312], 1024 ; 00000400H

; 1069 : 			pDph_t->f0basetypes[1][16]=1040;

  00213	66 c7 86 7a 20
	00 00 10 04	 mov	 WORD PTR [esi+8314], 1040 ; 00000410H

; 1070 : 			
; 1071 : 			/*exclamation*/
; 1072 : 			pDph_t->f0basetypes[2][0]=1057+160;

  0021c	66 c7 86 7c 20
	00 00 c1 04	 mov	 WORD PTR [esi+8316], 1217 ; 000004c1H

; 1073 : 			pDph_t->f0basetypes[2][1]=1085+160;

  00225	66 c7 86 7e 20
	00 00 dd 04	 mov	 WORD PTR [esi+8318], 1245 ; 000004ddH

; 1074 : 			pDph_t->f0basetypes[2][2]=1109+160;

  0022e	66 c7 86 80 20
	00 00 f5 04	 mov	 WORD PTR [esi+8320], 1269 ; 000004f5H

; 1075 : 			pDph_t->f0basetypes[2][3]=1117+160;

  00237	66 c7 86 82 20
	00 00 fd 04	 mov	 WORD PTR [esi+8322], 1277 ; 000004fdH

; 1076 : 			pDph_t->f0basetypes[2][4]=1113+160;

  00240	66 c7 86 84 20
	00 00 f9 04	 mov	 WORD PTR [esi+8324], 1273 ; 000004f9H

; 1077 : 			pDph_t->f0basetypes[2][5]=1149+160;

  00249	66 c7 86 86 20
	00 00 1d 05	 mov	 WORD PTR [esi+8326], 1309 ; 0000051dH

; 1078 : 			pDph_t->f0basetypes[2][6]=1095+160;

  00252	66 c7 86 88 20
	00 00 e7 04	 mov	 WORD PTR [esi+8328], 1255 ; 000004e7H

; 1079 : 			pDph_t->f0basetypes[2][7]=1082+160;

  0025b	66 c7 86 8a 20
	00 00 da 04	 mov	 WORD PTR [esi+8330], 1242 ; 000004daH

; 1080 : 			pDph_t->f0basetypes[2][8]=1079+160;

  00264	66 c7 86 8c 20
	00 00 d7 04	 mov	 WORD PTR [esi+8332], 1239 ; 000004d7H

; 1081 : 			pDph_t->f0basetypes[2][9]=1065+160;

  0026d	66 c7 86 8e 20
	00 00 c9 04	 mov	 WORD PTR [esi+8334], 1225 ; 000004c9H

; 1082 : 			pDph_t->f0basetypes[2][10]=1053+160;

  00276	66 c7 86 90 20
	00 00 bd 04	 mov	 WORD PTR [esi+8336], 1213 ; 000004bdH

; 1083 : 			pDph_t->f0basetypes[2][11]=1040+160;

  0027f	66 c7 86 92 20
	00 00 b0 04	 mov	 WORD PTR [esi+8338], 1200 ; 000004b0H

; 1084 : 			pDph_t->f0basetypes[2][12]=1038+160;

  00288	66 c7 86 94 20
	00 00 ae 04	 mov	 WORD PTR [esi+8340], 1198 ; 000004aeH

; 1085 : 			pDph_t->f0basetypes[2][13]=1024+160;

  00291	66 c7 86 96 20
	00 00 a0 04	 mov	 WORD PTR [esi+8342], 1184 ; 000004a0H

; 1086 : 			pDph_t->f0basetypes[2][14]=980+160;

  0029a	66 89 86 98 20
	00 00		 mov	 WORD PTR [esi+8344], ax

; 1087 : 			pDph_t->f0basetypes[2][15]=852+160;

  002a1	66 c7 86 9a 20
	00 00 f4 03	 mov	 WORD PTR [esi+8346], 1012 ; 000003f4H

; 1088 : 			pDph_t->f0basetypes[2][16]=843+160;

  002aa	66 c7 86 9c 20
	00 00 eb 03	 mov	 WORD PTR [esi+8348], 1003 ; 000003ebH

; 1089 : 			
; 1090 : 			/*Question*/
; 1091 : 			pDph_t->glotalize =0;

  002b3	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 1092 : 			pDphsettar->glide_step=0;

  002ba	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1093 : 			pDph_t->f0basetypes[3][0]=1187;

  002be	66 c7 86 9e 20
	00 00 a3 04	 mov	 WORD PTR [esi+8350], 1187 ; 000004a3H

; 1094 : 			pDph_t->f0basetypes[3][1]=1165;

  002c7	66 c7 86 a0 20
	00 00 8d 04	 mov	 WORD PTR [esi+8352], 1165 ; 0000048dH

; 1095 : 			pDph_t->f0basetypes[3][2]=1139;

  002d0	66 c7 86 a2 20
	00 00 73 04	 mov	 WORD PTR [esi+8354], 1139 ; 00000473H

; 1096 : 			pDph_t->f0basetypes[3][3]=1127;

  002d9	66 89 ae a4 20
	00 00		 mov	 WORD PTR [esi+8356], bp

; 1097 : 			pDph_t->f0basetypes[3][4]=1113;

  002e0	66 89 96 a6 20
	00 00		 mov	 WORD PTR [esi+8358], dx

; 1098 : 			pDph_t->f0basetypes[3][5]=1109;

  002e7	66 89 8e a8 20
	00 00		 mov	 WORD PTR [esi+8360], cx

; 1099 : 			pDph_t->f0basetypes[3][6]=1095;

  002ee	66 c7 86 aa 20
	00 00 47 04	 mov	 WORD PTR [esi+8362], 1095 ; 00000447H

; 1100 : 			pDph_t->f0basetypes[3][7]=1082;

  002f7	66 c7 86 ac 20
	00 00 3a 04	 mov	 WORD PTR [esi+8364], 1082 ; 0000043aH

; 1101 : 			pDph_t->f0basetypes[3][8]=1079;

  00300	66 c7 86 ae 20
	00 00 37 04	 mov	 WORD PTR [esi+8366], 1079 ; 00000437H

; 1102 : 			pDph_t->f0basetypes[3][9]=1065;

  00309	66 c7 86 b0 20
	00 00 29 04	 mov	 WORD PTR [esi+8368], 1065 ; 00000429H

; 1103 : 			pDph_t->f0basetypes[3][10]=1053;

  00312	66 c7 86 b2 20
	00 00 1d 04	 mov	 WORD PTR [esi+8370], 1053 ; 0000041dH

; 1104 : 			pDph_t->f0basetypes[3][11]=940;

  0031b	66 c7 86 b4 20
	00 00 ac 03	 mov	 WORD PTR [esi+8372], 940 ; 000003acH

; 1105 : 			pDph_t->f0basetypes[3][12]=938;

  00324	66 c7 86 b6 20
	00 00 aa 03	 mov	 WORD PTR [esi+8374], 938 ; 000003aaH

; 1106 : 			pDph_t->f0basetypes[3][13]=924;

  0032d	66 c7 86 b8 20
	00 00 9c 03	 mov	 WORD PTR [esi+8376], 924 ; 0000039cH

; 1107 : 			pDph_t->f0basetypes[3][14]=1010;

  00336	66 c7 86 ba 20
	00 00 f2 03	 mov	 WORD PTR [esi+8378], 1010 ; 000003f2H

; 1108 : 			pDph_t->f0basetypes[3][15]=1014;

  0033f	66 c7 86 bc 20
	00 00 f6 03	 mov	 WORD PTR [esi+8380], 1014 ; 000003f6H

; 1109 : 			pDph_t->f0basetypes[3][16]=1018;

  00348	66 c7 86 be 20
	00 00 fa 03	 mov	 WORD PTR [esi+8382], 1018 ; 000003faH

; 1110 : 			
; 1111 : 			
; 1112 : 			
; 1113 : #endif // ENGLISH_US
; 1114 : 			
; 1115 : 			
; 1116 : #ifdef ENGLISH_UK
; 1117 : 			
; 1118 : 			/* DECLARATIVE Added base profile per caroline*/
; 1119 : 			pDph_t->f0basetypes[0][0]=1157;
; 1120 : 			pDph_t->f0basetypes[0][1]=1145;
; 1121 : 			pDph_t->f0basetypes[0][2]=1139;
; 1122 : 			pDph_t->f0basetypes[0][3]=1127;
; 1123 : 			pDph_t->f0basetypes[0][4]=1113;
; 1124 : 			pDph_t->f0basetypes[0][5]=1109;
; 1125 : 			pDph_t->f0basetypes[0][6]=1095;
; 1126 : 			pDph_t->f0basetypes[0][7]=1082;
; 1127 : 			pDph_t->f0basetypes[0][8]=1079;
; 1128 : 			pDph_t->f0basetypes[0][9]=1065;
; 1129 : 			pDph_t->f0basetypes[0][10]=1053;
; 1130 : 			pDph_t->f0basetypes[0][11]=1040;
; 1131 : 			pDph_t->f0basetypes[0][12]=1038;
; 1132 : 			pDph_t->f0basetypes[0][13]=1024;
; 1133 : 			pDph_t->f0basetypes[0][14]=1040;
; 1134 : 			pDph_t->f0basetypes[0][15]=1050;
; 1135 : 			pDph_t->f0basetypes[0][16]=1060;
; 1136 : 			
; 1137 : 			
; 1138 : 			/*exclamation*/
; 1139 : 			pDph_t->f0basetypes[2][0]=1157;
; 1140 : 			pDph_t->f0basetypes[2][1]=1145;
; 1141 : 			pDph_t->f0basetypes[2][2]=1139;
; 1142 : 			pDph_t->f0basetypes[2][3]=1127;
; 1143 : 			pDph_t->f0basetypes[2][4]=1113;
; 1144 : 			pDph_t->f0basetypes[2][5]=1109;
; 1145 : 			pDph_t->f0basetypes[2][6]=1095;
; 1146 : 			pDph_t->f0basetypes[2][7]=1082;
; 1147 : 			pDph_t->f0basetypes[2][8]=1079;
; 1148 : 			pDph_t->f0basetypes[2][9]=1065;
; 1149 : 			pDph_t->f0basetypes[2][10]=1053;
; 1150 : 			pDph_t->f0basetypes[2][11]=1040;
; 1151 : 			pDph_t->f0basetypes[2][12]=1038;
; 1152 : 			pDph_t->f0basetypes[2][13]=1024;
; 1153 : 			pDph_t->f0basetypes[2][14]=980;
; 1154 : 			pDph_t->f0basetypes[2][15]=952;
; 1155 : 			pDph_t->f0basetypes[2][16]=943;
; 1156 : 			
; 1157 : 			
; 1158 : 			
; 1159 : 			
; 1160 : 			/*eab  less drop for short phrases*/
; 1161 : 			
; 1162 : 			pDph_t->f0basetypes[4][0]=1160;
; 1163 : 			pDph_t->f0basetypes[4][1]=1150;
; 1164 : 			pDph_t->f0basetypes[4][2]=1150;
; 1165 : 			pDph_t->f0basetypes[4][3]=1152;
; 1166 : 			pDph_t->f0basetypes[4][4]=1132;
; 1167 : 			pDph_t->f0basetypes[4][5]=1120;
; 1168 : 			pDph_t->f0basetypes[4][6]=1100;
; 1169 : 			pDph_t->f0basetypes[4][7]=1104;
; 1170 : 			pDph_t->f0basetypes[4][8]=1100;
; 1171 : 			pDph_t->f0basetypes[4][9]=1080;
; 1172 : 			pDph_t->f0basetypes[4][10]=1070;
; 1173 : 			pDph_t->f0basetypes[4][11]=1060;
; 1174 : 			pDph_t->f0basetypes[4][12]=1050;
; 1175 : 			pDph_t->f0basetypes[4][13]=1040;
; 1176 : 			pDph_t->f0basetypes[4][14]=1030;
; 1177 : 			pDph_t->f0basetypes[4][15]=1000;
; 1178 : 			pDph_t->f0basetypes[4][16]=1000;
; 1179 : 			
; 1180 : 			
; 1181 : 			/*Question*/
; 1182 : 			pDph_t->glotalize =0;
; 1183 : 			pDphsettar->glide_step=0;
; 1184 : 			pDph_t->f0basetypes[3][0]=1187;
; 1185 : 			pDph_t->f0basetypes[3][1]=1165;
; 1186 : 			pDph_t->f0basetypes[3][2]=1139;
; 1187 : 			pDph_t->f0basetypes[3][3]=1127;
; 1188 : 			pDph_t->f0basetypes[3][4]=1113;
; 1189 : 			pDph_t->f0basetypes[3][5]=1109;
; 1190 : 			pDph_t->f0basetypes[3][6]=1095;
; 1191 : 			pDph_t->f0basetypes[3][7]=1082;
; 1192 : 			pDph_t->f0basetypes[3][8]=1079;
; 1193 : 			pDph_t->f0basetypes[3][9]=1065;
; 1194 : 			pDph_t->f0basetypes[3][10]=1053;
; 1195 : 			pDph_t->f0basetypes[3][11]=940;
; 1196 : 			pDph_t->f0basetypes[3][12]=938;
; 1197 : 			pDph_t->f0basetypes[3][13]=924;
; 1198 : 			pDph_t->f0basetypes[3][14]=1010;
; 1199 : 			pDph_t->f0basetypes[3][15]=1014;
; 1200 : 			pDph_t->f0basetypes[3][16]=1018;
; 1201 : 			
; 1202 : 			/* comma*/
; 1203 : 			pDph_t->f0basetypes[1][0]=1157;
; 1204 : 			pDph_t->f0basetypes[1][1]=1145;
; 1205 : 			pDph_t->f0basetypes[1][2]=1139;
; 1206 : 			pDph_t->f0basetypes[1][3]=1127;
; 1207 : 			pDph_t->f0basetypes[1][4]=1113;
; 1208 : 			pDph_t->f0basetypes[1][5]=1109;
; 1209 : 			pDph_t->f0basetypes[1][6]=1085;
; 1210 : 			pDph_t->f0basetypes[1][7]=1062;
; 1211 : 			pDph_t->f0basetypes[1][8]=1049;
; 1212 : 			pDph_t->f0basetypes[1][9]=1035;
; 1213 : 			pDph_t->f0basetypes[1][10]=1043;
; 1214 : 			pDph_t->f0basetypes[1][11]=1055;
; 1215 : 			pDph_t->f0basetypes[1][12]=1065;
; 1216 : 			pDph_t->f0basetypes[1][13]=1080;
; 1217 : 			pDph_t->f0basetypes[1][14]=1097;
; 1218 : 			pDph_t->f0basetypes[1][15]=1114;
; 1219 : 			pDph_t->f0basetypes[1][16]=1120;
; 1220 : 			
; 1221 : #endif /*ENGLISH_UK*/
; 1222 : 			
; 1223 : #ifdef FRENCH
; 1224 : 			
; 1225 : 			/* DECLARATIVE*/
; 1226 : 			
; 1227 : 			pDph_t->f0basetypes[0][0]=1107;
; 1228 : 			pDph_t->f0basetypes[0][1]=1105;
; 1229 : 			pDph_t->f0basetypes[0][2]=1119;
; 1230 : 			pDph_t->f0basetypes[0][3]=1127;
; 1231 : 			pDph_t->f0basetypes[0][4]=1133;
; 1232 : 			pDph_t->f0basetypes[0][5]=1149;
; 1233 : 			pDph_t->f0basetypes[0][6]=1155;
; 1234 : 			pDph_t->f0basetypes[0][7]=1142;
; 1235 : 			pDph_t->f0basetypes[0][8]=1129;
; 1236 : 			pDph_t->f0basetypes[0][9]=1115;
; 1237 : 			pDph_t->f0basetypes[0][10]=1093;
; 1238 : 			pDph_t->f0basetypes[0][11]=1080;
; 1239 : 			pDph_t->f0basetypes[0][12]=1058;
; 1240 : 			pDph_t->f0basetypes[0][13]=1001;
; 1241 : 			pDph_t->f0basetypes[0][14]=980;
; 1242 : 			pDph_t->f0basetypes[0][15]=952;
; 1243 : 			pDph_t->f0basetypes[0][16]=863;
; 1244 : 			
; 1245 : 			/*eab  less drop for short phrases*/
; 1246 : 			
; 1247 : 			pDph_t->f0basetypes[4][0]=1100;
; 1248 : 			pDph_t->f0basetypes[4][1]=1110;
; 1249 : 			pDph_t->f0basetypes[4][2]=1120;
; 1250 : 			pDph_t->f0basetypes[4][3]=1132;
; 1251 : 			pDph_t->f0basetypes[4][4]=1142;
; 1252 : 			pDph_t->f0basetypes[4][5]=1150;
; 1253 : 			pDph_t->f0basetypes[4][6]=1170;
; 1254 : 			pDph_t->f0basetypes[4][7]=1164;
; 1255 : 			pDph_t->f0basetypes[4][8]=1150;
; 1256 : 			pDph_t->f0basetypes[4][9]=1140;
; 1257 : 			pDph_t->f0basetypes[4][10]=1130;
; 1258 : 			pDph_t->f0basetypes[4][11]=1120;
; 1259 : 			pDph_t->f0basetypes[4][12]=1110;
; 1260 : 			pDph_t->f0basetypes[4][13]=1090;
; 1261 : 			pDph_t->f0basetypes[4][14]=1080;
; 1262 : 			pDph_t->f0basetypes[4][15]=1070;
; 1263 : 			pDph_t->f0basetypes[4][16]=1060;
; 1264 : 			
; 1265 : 			/* comma*/
; 1266 : 			pDph_t->f0basetypes[1][0]=1157;
; 1267 : 			pDph_t->f0basetypes[1][1]=1145;
; 1268 : 			pDph_t->f0basetypes[1][2]=1139;
; 1269 : 			pDph_t->f0basetypes[1][3]=1127;
; 1270 : 			pDph_t->f0basetypes[1][4]=1113;
; 1271 : 			pDph_t->f0basetypes[1][5]=1109;
; 1272 : 			pDph_t->f0basetypes[1][6]=1085;
; 1273 : 			pDph_t->f0basetypes[1][7]=1062;
; 1274 : 			pDph_t->f0basetypes[1][8]=1049;
; 1275 : 			pDph_t->f0basetypes[1][9]=1035;
; 1276 : 			pDph_t->f0basetypes[1][10]=1023;
; 1277 : 			pDph_t->f0basetypes[1][11]=1015;
; 1278 : 			pDph_t->f0basetypes[1][12]=1005;
; 1279 : 			pDph_t->f0basetypes[1][13]=1020;
; 1280 : 			pDph_t->f0basetypes[1][14]=1047;
; 1281 : 			pDph_t->f0basetypes[1][15]=1064;
; 1282 : 			pDph_t->f0basetypes[1][16]=1084;	// Ajout Michel 
; 1283 : 			
; 1284 : 			/*exclamation*/
; 1285 : 			pDph_t->f0basetypes[2][0]=1057+160;
; 1286 : 			pDph_t->f0basetypes[2][1]=1085+160;
; 1287 : 			pDph_t->f0basetypes[2][2]=1109+160;
; 1288 : 			pDph_t->f0basetypes[2][3]=1117+160;
; 1289 : 			pDph_t->f0basetypes[2][4]=1113+160;
; 1290 : 			pDph_t->f0basetypes[2][5]=1149+160;
; 1291 : 			pDph_t->f0basetypes[2][6]=1095+160;
; 1292 : 			pDph_t->f0basetypes[2][7]=1082+160;
; 1293 : 			pDph_t->f0basetypes[2][8]=1079+160;
; 1294 : 			pDph_t->f0basetypes[2][9]=1065+160;
; 1295 : 			pDph_t->f0basetypes[2][10]=1053+160;
; 1296 : 			pDph_t->f0basetypes[2][11]=1040+160;
; 1297 : 			pDph_t->f0basetypes[2][12]=1038+160;
; 1298 : 			pDph_t->f0basetypes[2][13]=1024+160;
; 1299 : 			pDph_t->f0basetypes[2][14]=980+160;
; 1300 : 			pDph_t->f0basetypes[2][15]=852+160;
; 1301 : 			pDph_t->f0basetypes[2][16]=843+160;
; 1302 : 			
; 1303 : 			/*Question*/
; 1304 : 			pDph_t->glotalize =0;
; 1305 : 			pDphsettar->glide_step=0;
; 1306 : 			pDph_t->f0basetypes[3][0]=1187;
; 1307 : 			pDph_t->f0basetypes[3][1]=1165;
; 1308 : 			pDph_t->f0basetypes[3][2]=1139;
; 1309 : 			pDph_t->f0basetypes[3][3]=1127;
; 1310 : 			pDph_t->f0basetypes[3][4]=1113;
; 1311 : 			pDph_t->f0basetypes[3][5]=1109;
; 1312 : 			pDph_t->f0basetypes[3][6]=1095;
; 1313 : 			pDph_t->f0basetypes[3][7]=1082;
; 1314 : 			pDph_t->f0basetypes[3][8]=1079;
; 1315 : 			pDph_t->f0basetypes[3][9]=1065;
; 1316 : 			pDph_t->f0basetypes[3][10]=1053;
; 1317 : 			pDph_t->f0basetypes[3][11]=940;
; 1318 : 			pDph_t->f0basetypes[3][12]=938;
; 1319 : 			pDph_t->f0basetypes[3][13]=924;
; 1320 : 			pDph_t->f0basetypes[3][14]=1010;
; 1321 : 			pDph_t->f0basetypes[3][15]=1014;
; 1322 : 			pDph_t->f0basetypes[3][16]=1018;
; 1323 : 			
; 1324 : #endif	// FRENCH
; 1325 : 			
; 1326 : 			
; 1327 : 			/* redundant and incorrectly placed code since a soft init automatically follows a hard init
; 1328 : 			the code only has to be in once*/
; 1329 : 			
; 1330 : 			
; 1331 : 			/*		  Time since last reset of baseline fall, in frames */
; 1332 : 			pDphsettar->nframb = 0;

  00351	66 89 5f 48	 mov	 WORD PTR [edi+72], bx

; 1333 : 			
; 1334 : 			pDphsettar->basetime = 0;

  00355	66 89 5f 36	 mov	 WORD PTR [edi+54], bx

; 1335 : 			pDphsettar->basecntr = 0;

  00359	66 89 5f 32	 mov	 WORD PTR [edi+50], bx

; 1336 : 			pDphsettar->f0delta  = 0;

  0035d	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 1337 : 			
; 1338 : 			
; 1339 : 			
; 1340 : 			/*eab 4/11/97 Moved these variables to a proper place of initlaization*/
; 1341 : 			pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0; 

  00364	66 89 9f 80 00
	00 00		 mov	 WORD PTR [edi+128], bx
  0036b	66 89 9f 82 00
	00 00		 mov	 WORD PTR [edi+130], bx
  00372	66 89 9f 84 00
	00 00		 mov	 WORD PTR [edi+132], bx

; 1342 : 			
; 1343 : 			/*		  If within 32 ms (5 frames) of nframg, glottal stop gesture */
; 1344 : 			/*		  is in progress */
; 1345 : 			pDphsettar->tglstp = -200;

  00379	66 c7 47 50 38
	ff		 mov	 WORD PTR [edi+80], -200	; ffffff38H

; 1346 : 			
; 1347 : 			/*		  Set filter memory to init baseline fall (f0 in hz*10) */
; 1348 : 			pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;

  0037f	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  00386	66 c1 e2 03	 shl	 dx, 3
  0038a	66 89 57 58	 mov	 WORD PTR [edi+88], dx

; 1349 : 			pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;

  0038e	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  00395	66 c1 e0 03	 shl	 ax, 3
  00399	66 89 47 5a	 mov	 WORD PTR [edi+90], ax

; 1350 : 			oarcnt = 0;

  0039d	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1351 : 			pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  003a3	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 1352 : 			pDphsettar->f0slas2 = 0;

  003aa	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 1353 : 			pDph_t->f0 = pDphsettar->f0basestart;

  003b1	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]

; 1354 : 			pDphsettar->tarhat = 0;
; 1355 : 			pDphsettar->tarimp = 0;
; 1356 : 			pDphsettar->delimp = 0;
; 1357 : 			
; 1358 : 			/*		Set smoothing constants for ( critical-damped? ) 2nd-order sys	*/
; 1359 : 			
; 1360 : 			pDphsettar->f0a2 = pDph_t->f0_lp_filter;	/* Impulse and hat commands */
; 1361 : 			pDphsettar->f0b = FRAC_ONE - pDphsettar->f0a2;

  003b8	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  003bd	66 89 8e 9c 03
	00 00		 mov	 WORD PTR [esi+924], cx
  003c4	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx
  003c8	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx
  003cc	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
  003d3	66 8b 86 d0 18
	00 00		 mov	 ax, WORD PTR [esi+6352]

; 1362 : 			pDphsettar->f0a1 = pDphsettar->f0a2 << F0SHFT;
; 1363 : 			
; 1364 : 			pDphsettar->f0sa2 =  F_SEG_LOWPASS; /* Segmental influences */
; 1365 : 			
; 1366 : 			pDphsettar->f0sb = FRAC_ONE - pDphsettar->f0sa2;
; 1367 : 			pDphsettar->f0sa1 = pDphsettar->f0sa2 << F0SHFT;
; 1368 : 			
; 1369 : 			/*		Variables  relevent only if f0mode >= SINGING */
; 1370 : 			
; 1371 : 			pDphsettar->newnote = pDphsettar->f0basestart;
; 1372 : 			pDphsettar->delnote = 0;

  003da	66 89 9f 90 00
	00 00		 mov	 WORD PTR [edi+144], bx
  003e1	2b d0		 sub	 edx, eax
  003e3	66 89 47 60	 mov	 WORD PTR [edi+96], ax
  003e7	66 89 57 62	 mov	 WORD PTR [edi+98], dx
  003eb	66 8b 47 60	 mov	 ax, WORD PTR [edi+96]
  003ef	66 c1 e0 03	 shl	 ax, 3
  003f3	66 89 47 64	 mov	 WORD PTR [edi+100], ax
  003f7	66 c7 87 a0 00
	00 00 b8 0b	 mov	 WORD PTR [edi+160], 3000 ; 00000bb8H
  00400	66 c7 87 a2 00
	00 00 48 34	 mov	 WORD PTR [edi+162], 13384 ; 00003448H
  00409	66 8b 8f a0 00
	00 00		 mov	 cx, WORD PTR [edi+160]
  00410	66 c1 e1 03	 shl	 cx, 3
  00414	66 89 8f a4 00
	00 00		 mov	 WORD PTR [edi+164], cx
  0041b	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  00422	66 89 97 8e 00
	00 00		 mov	 WORD PTR [edi+142], dx

; 1373 : 			pDphsettar->delcum = 0;

  00429	66 89 9f 92 00
	00 00		 mov	 WORD PTR [edi+146], bx

; 1374 : 			pDphsettar->f0start = pDph_t->f0;

  00430	66 8b 86 9c 03
	00 00		 mov	 ax, WORD PTR [esi+924]

; 1375 : 			pDphsettar->vibsw = 0;

  00437	66 89 9f 8c 00
	00 00		 mov	 WORD PTR [edi+140], bx
  0043e	66 89 87 94 00
	00 00		 mov	 WORD PTR [edi+148], ax

; 1376 : 			
; 1377 : 			/*		Initialize pointer to f0 command string */
; 1378 : 			
; 1379 : 			pDph_t->nf0ev = -1;

  00445	66 c7 86 52 23
	00 00 ff ff	 mov	 WORD PTR [esi+9042], -1
  0044e	83 c9 ff	 or	 ecx, -1
$L71365:

; 1380 : 	}
; 1381 : 	
; 1382 : 	/*	  Reinit pointer and time of first f0 command if new clause */
; 1383 : 	if( pDph_t->nf0ev == -1 ) 

  00451	66 39 8e 52 23
	00 00		 cmp	 WORD PTR [esi+9042], cx
  00458	0f 85 b2 01 00
	00		 jne	 $L71640

; 1384 : 	{		
; 1385 : 		/* Soft initialization */
; 1386 : 		
; 1387 : 		pDph_t->enddrop =0;
; 1388 : 		/*	  Set Beginning and final frequency of baseline fall */
; 1389 : 		switch (pDph_t->clausetype)
; 1390 : 		{

  0045e	0f bf 86 e6 03
	00 00		 movsx	 eax, WORD PTR [esi+998]
  00465	83 f8 03	 cmp	 eax, 3
  00468	66 89 9e 5e 23
	00 00		 mov	 WORD PTR [esi+9054], bx
  0046f	77 6f		 ja	 SHORT $L71379
  00471	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71671[eax*4]
$L71371:

; 1391 : 		case 0: /*	declarative  */
; 1392 : 			if(pDph_t->number_words > 3)

  00478	66 83 be 2e 20
	00 00 03	 cmp	 WORD PTR [esi+8238], 3
  00480	7e 0e		 jle	 SHORT $L71372

; 1393 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  00482	8d 96 38 20 00
	00		 lea	 edx, DWORD PTR [esi+8248]
  00488	89 96 34 20 00
	00		 mov	 DWORD PTR [esi+8244], edx

; 1394 : 			else

  0048e	eb 42		 jmp	 SHORT $L71377
$L71372:

; 1395 : 				pDph_t->f0baseline = pDph_t->f0basetypes[4];

  00490	8d 86 c0 20 00
	00		 lea	 eax, DWORD PTR [esi+8384]

; 1396 : 			pDph_t->clausepos=0;
; 1397 : 			pDph_t->dcommacnt =0;
; 1398 : 			break; //BATS 704

  00496	eb 34		 jmp	 SHORT $L71659
$L71374:

; 1399 : 			
; 1400 : 		case 1: /*	comma  First one goes up but later ones are more declarative*/
; 1401 : 			// But long ones tend to be declarative! eab 4/15/00
; 1402 : 			// MOve clausetype selection earlier as cbsym has to be decide as well
; 1403 : 			//pDph_t->dcommacnt++;
; 1404 : 			//if(pDph_t->dcommacnt == 1  )
; 1405 : 			pDph_t->f0baseline = pDph_t->f0basetypes[1];

  00498	8d 96 5a 20 00
	00		 lea	 edx, DWORD PTR [esi+8282]
  0049e	89 96 34 20 00
	00		 mov	 DWORD PTR [esi+8244], edx

; 1406 : 			//else if(pDph_t->dcommacnt > 1)
; 1407 : 			//		pDph_t->f0baseline = pDph_t->f0basetypes[0];
; 1408 : 			//	if(pDph_t->number_words > 4)
; 1409 : 			//		pDph_t->f0baseline = pDph_t->f0basetypes[0];
; 1410 : 			
; 1411 : 			break; //BATS 704

  004a4	eb 3a		 jmp	 SHORT $L71379
$L71375:

; 1412 : 			
; 1413 : 		case 2: /*	exclaimatory  */
; 1414 : 			//4/15/00 EAB short one clasify as exclamatory but long ones suffer
; 1415 : 			//from the don't know which part to emphasize problem so better devalrative.
; 1416 : 			if(pDph_t->number_words > 2)

  004a6	66 83 be 2e 20
	00 00 02	 cmp	 WORD PTR [esi+8238], 2
  004ae	7e 08		 jle	 SHORT $L71376

; 1417 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  004b0	8d 86 38 20 00
	00		 lea	 eax, DWORD PTR [esi+8248]

; 1418 : 			else

  004b6	eb 14		 jmp	 SHORT $L71659
$L71376:

; 1419 : 				pDph_t->f0baseline = pDph_t->f0basetypes[2];

  004b8	8d 96 7c 20 00
	00		 lea	 edx, DWORD PTR [esi+8316]
  004be	89 96 34 20 00
	00		 mov	 DWORD PTR [esi+8244], edx

; 1420 : 			pDph_t->clausepos =0;
; 1421 : 			pDph_t->dcommacnt =0;
; 1422 : 			break;

  004c4	eb 0c		 jmp	 SHORT $L71377
$L71378:

; 1423 : 			
; 1424 : 			
; 1425 : 		case 3: /*	question  */
; 1426 : 			pDph_t->f0baseline = pDph_t->f0basetypes[3];

  004c6	8d 86 9e 20 00
	00		 lea	 eax, DWORD PTR [esi+8350]
$L71659:
  004cc	89 86 34 20 00
	00		 mov	 DWORD PTR [esi+8244], eax
$L71377:

; 1427 : 			pDph_t->clausepos =0;

  004d2	66 89 9e ee 14
	00 00		 mov	 WORD PTR [esi+5358], bx

; 1428 : 			pDph_t->dcommacnt =0;

  004d9	66 89 9e f2 14
	00 00		 mov	 WORD PTR [esi+5362], bx
$L71379:

; 1429 : 			break;
; 1430 : 			
; 1431 : 		default:
; 1432 : 			
; 1433 : 			break;
; 1434 : 			
; 1435 : 			
; 1436 : 		}
; 1437 : 		/*	  Set Beginning and final frequency of baseline fall */
; 1438 : 		pDphsettar->f0basestart = pDph_t->f0baseline[0];

  004e0	8b 96 34 20 00
	00		 mov	 edx, DWORD PTR [esi+8244]
  004e6	66 8b 02	 mov	 ax, WORD PTR [edx]
  004e9	66 89 87 86 00
	00 00		 mov	 WORD PTR [edi+134], ax

; 1439 : 		
; 1440 : 		pDphsettar->f0endfall = pDph_t->f0baseline[16];

  004f0	8b 96 34 20 00
	00		 mov	 edx, DWORD PTR [esi+8244]
  004f6	66 8b 42 20	 mov	 ax, WORD PTR [edx+32]
  004fa	66 89 87 8a 00
	00 00		 mov	 WORD PTR [edi+138], ax

; 1441 : 		
; 1442 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 1443 : 		pDphsettar->endfall = pDphsettar->f0endfall;
; 1444 : 		
; 1445 : 		//WINprintf ("beginfall %d, endfall %d\n", pDphsettar->beginfall, pDphsettar->endfall );
; 1446 : 		
; 1447 : 		
; 1448 : 		
; 1449 : 		
; 1450 : 		oarcnt=0;

  00501	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1451 : 		
; 1452 : 		
; 1453 : 		
; 1454 : #ifdef SPANISH
; 1455 : 		if (pDph_t->special_phrase == 1)
; 1456 : 		{
; 1457 : 			pDphsettar->beginfall = pDphsettar->f0basestart - 50 + pDph_t->delta_special;
; 1458 : 			pDphsettar->endfall = pDphsettar->f0endfall - 100; /* lastf0-(f0basefall>>1); */
; 1459 : 			pDph_t->special_phrase = 0; 
; 1460 : 		}
; 1461 : 		else
; 1462 : 		{
; 1463 : 			pDphsettar->lastbase=pDphsettar->f0basestart<<2;
; 1464 : 			pDphsettar->beginfall = pDphsettar->f0basestart;
; 1465 : 			pDphsettar->endfall = pDphsettar->f0endfall;
; 1466 : 		}
; 1467 : #else
; 1468 : 		
; 1469 : 		pDphsettar->lastbase = pDphsettar->f0basestart<<2;

  00507	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]

; 1470 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 1471 : 		pDphsettar->endfall = pDphsettar->f0endfall;
; 1472 : 		
; 1473 : #ifdef DEBUGF0
; 1474 : 		WINprintf ("At newpar sw %d %d	beginfall and endfall \n", pDphsettar->beginfall, pDphsettar->endfall);
; 1475 : #endif
; 1476 : 		
; 1477 : #endif
; 1478 : 		pDphsettar->nframb = 0;

  0050e	66 89 5f 48	 mov	 WORD PTR [edi+72], bx
  00512	66 89 47 6e	 mov	 WORD PTR [edi+110], ax

; 1479 : 		pDphsettar->basetime=0;

  00516	66 89 5f 36	 mov	 WORD PTR [edi+54], bx
  0051a	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00521	66 8b 87 8a 00
	00 00		 mov	 ax, WORD PTR [edi+138]

; 1480 : 		pDphsettar->basecntr =0;

  00528	66 89 5f 32	 mov	 WORD PTR [edi+50], bx
  0052c	66 89 57 72	 mov	 WORD PTR [edi+114], dx
  00530	66 89 47 7a	 mov	 WORD PTR [edi+122], ax

; 1481 : 		pDphsettar->f0delta =0;

  00534	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 1482 : 		pDph_t->special_phrase = 0;

  0053b	66 89 9e f8 2b
	00 00		 mov	 WORD PTR [esi+11256], bx

; 1483 : 		oarcnt=0;

  00542	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1484 : 		/*	  Raise baseline for first sentence of a paragraph */
; 1485 : 		if (pDph_t->newparagsw != FALSE) 

  00548	38 9e 9a 17 00
	00		 cmp	 BYTE PTR [esi+6042], bl
  0054e	74 10		 je	 SHORT $L71380

; 1486 : 		{
; 1487 : 			pDphsettar->beginfall += 120;

  00550	66 83 47 6e 78	 add	 WORD PTR [edi+110], 120	; 00000078H

; 1488 : 			pDphsettar->endfall += 70;

  00555	66 83 47 7a 46	 add	 WORD PTR [edi+122], 70	; 00000046H

; 1489 : 			pDph_t->newparagsw = FALSE;

  0055a	88 9e 9a 17 00
	00		 mov	 BYTE PTR [esi+6042], bl
$L71380:

; 1490 : 			//WINprintf ("New paragraph  beginfall %d, endfall %d\n", pDphsettar->beginfall, pDphsettar->endfall );
; 1491 : 		}
; 1492 : 		
; 1493 : 		/*		  Time between 0 and first	f0 command, in frames */
; 1494 : 		pDphsettar->dtimf0 = pDph_t->f0tim[0];

  00560	66 8b 96 e2 20
	00 00		 mov	 dx, WORD PTR [esi+8418]

; 1495 : 		/*		   Pointer into dur and phone arrays */
; 1496 : 		pDphsettar->np_drawt0 = -1;

  00567	66 89 4f 74	 mov	 WORD PTR [edi+116], cx
  0056b	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 1497 : 		pDphsettar->npg = -1;

  0056f	66 89 4f 76	 mov	 WORD PTR [edi+118], cx

; 1498 : 		pDph_t->nf0ev = 0;

  00573	66 89 9e 52 23
	00 00		 mov	 WORD PTR [esi+9042], bx

; 1499 : 		
; 1500 : 		
; 1501 : 		
; 1502 : 		/*		  Time since last f0 command, in frames */
; 1503 : 		
; 1504 : 		/* INITIALIZE NFRAM TO DELAY THROUGH FILTER THIS USED TO BE IN AND WAS NOT IN
; 1505 : 		88 STUFF BUT IS REALLY NEEDED*/
; 1506 : 		oarcnt=0;

  0057a	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1507 : 		pDphsettar->nframs = 0;
; 1508 : 		pDphsettar->nfram =0;
; 1509 : 		pDphsettar->nframg = 0;
; 1510 : 		/*eab 0 works much better 
; 1511 : 		6- ((pDph_t->f0_lp_filter-1300)>>8);*/
; 1512 : 		
; 1513 : 		if (pDph_t->f0mode< SINGING) 
; 1514 : 		{
; 1515 : 			pDphsettar->nfram = pDphsettar->nframs >> 1;
; 1516 : 		}
; 1517 : 		else 
; 1518 : 		{
; 1519 : 			pDphsettar->nfram = 0;	/* Start note slightly early if singing */
; 1520 : 		}
; 1521 : 		
; 1522 : 		
; 1523 : 		
; 1524 : 		
; 1525 : 		
; 1526 : 		/* Time since beginning of cur phonetic segment, in frames */
; 1527 : 		pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;

  00580	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  00587	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  0058b	66 c1 e0 03	 shl	 ax, 3
  0058f	66 89 47 58	 mov	 WORD PTR [edi+88], ax

; 1528 : 		pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;

  00593	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]
  0059a	66 c1 e1 03	 shl	 cx, 3
  0059e	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx
  005a2	66 89 5f 4c	 mov	 WORD PTR [edi+76], bx
  005a6	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  005aa	66 89 4f 5a	 mov	 WORD PTR [edi+90], cx

; 1529 : 		oarcnt=0;

  005ae	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1530 : 		pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  005b4	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 1531 : 		pDphsettar->f0slas2 = 0;

  005bb	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 1532 : 		pDph_t->f0 = pDphsettar->f0basestart;

  005c2	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  005c9	66 89 96 9c 03
	00 00		 mov	 WORD PTR [esi+924], dx

; 1533 : 		pDphsettar->nframs = 0; 	

  005d0	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx

; 1534 : 		/* Used in computing segmental effects */
; 1535 : 		
; 1536 : 		
; 1537 : 		/*		  Extra time, in frames, used to delay or advance f0 gesture assoc. */
; 1538 : 		/*		  with a particular segment, e.g. at delayed vot, or anticipate in V-V */
; 1539 : 		pDphsettar->extrad = -DELAY_SEG_LOWPASS; /* Start gesture toward next seg early */

  005d4	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH

; 1540 : 		/*		  Duration of current segment, in frames */
; 1541 : 		pDphsettar->segdur = 0;

  005da	66 89 5f 54	 mov	 WORD PTR [edi+84], bx

; 1542 : 		pDphsettar->segdrg = 0;

  005de	66 89 5f 56	 mov	 WORD PTR [edi+86], bx

; 1543 : 		pDph_t->lastallo=0;

  005e2	66 89 9e 2a 20
	00 00		 mov	 WORD PTR [esi+8234], bx

; 1544 : 		pDph_t->keepallo=0;

  005e9	66 89 9e 28 20
	00 00		 mov	 WORD PTR [esi+8232], bx

; 1545 : #ifdef GFAPHF0
; 1546 : 		pDph_t->lastone=-1;
; 1547 : 		pDph_t->keepdur=0;
; 1548 : #endif
; 1549 : 		pDph_t->glotalize =0;

  005f0	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 1550 : 		pDphsettar->glide_step=0;

  005f7	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1551 : 		pDphsettar->glide_tot=0;

  005fb	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 1552 : 		pDphsettar->glide_inc =0;

  005ff	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 1553 : 		/*	  Must be at bottom of hat */
; 1554 : 		pDphsettar->tarhat = 0; 	/* should be anyway, except for emergency halt */

  00603	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 1555 : 		pDph_t->addjit = 305;

  00607	66 c7 86 e8 03
	00 00 31 01	 mov	 WORD PTR [esi+1000], 305 ; 00000131H
$L71640:

; 1556 : 		
; 1557 : 		
; 1558 : 		}
; 1559 : 		/*	  End of initialization */
; 1560 : 		
; 1561 : 		
; 1562 : 		
; 1563 : 		/*	See if new f0 commands issued					*/
; 1564 : 		/*	  To get f0 commands to occur at right times, need to take		*/
; 1565 : 		/*	  into account delay introduced by low-pass filter. Response to */
; 1566 : 		/*	  a step command begins xx frames earlier than f0time[] request */
; 1567 : 		/*	  so f0 gets half-way to target at nominal step onset time		*/
; 1568 : 		
; 1569 : 		while ((pDphsettar->nfram >= pDphsettar->dtimf0) && 
; 1570 : 			(pDph_t->nf0ev < pDph_t->nf0tot)) 

  00610	66 8b 47 46	 mov	 ax, WORD PTR [edi+70]
  00614	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  00618	66 3b c2	 cmp	 ax, dx
  0061b	0f 8c 5a 01 00
	00		 jl	 $L71385
$L71384:
  00621	66 8b ae 52 23
	00 00		 mov	 bp, WORD PTR [esi+9042]
  00628	66 3b ae 54 23
	00 00		 cmp	 bp, WORD PTR [esi+9044]
  0062f	0f 8d 46 01 00
	00		 jge	 $L71385

; 1571 : 		{
; 1572 : 			
; 1573 : 			pDphsettar->f0command = pDph_t->f0tar[pDph_t->nf0ev];	/* New target f0 */

  00635	0f bf ed	 movsx	 ebp, bp
  00638	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]

; 1574 : 			pDphsettar->type = pDph_t->f0type[pDph_t->nf0ev];
; 1575 : 			pDphsettar->nfram -= pDphsettar->dtimf0;

  0063b	2b c2		 sub	 eax, edx
  0063d	66 8b ac 6e e2
	18 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6370]
  00645	66 89 29	 mov	 WORD PTR [ecx], bp
  00648	0f bf ae 52 23
	00 00		 movsx	 ebp, WORD PTR [esi+9042]
  0064f	66 8b ac 6e 4e
	1b 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6990]
  00657	66 89 47 46	 mov	 WORD PTR [edi+70], ax
  0065b	66 89 6f 40	 mov	 WORD PTR [edi+64], bp

; 1576 : 			/* eab 1/10/98 added length parameter*/
; 1577 : 			pDphsettar->length = pDph_t->f0length[pDph_t->nf0ev];

  0065f	0f bf 86 52 23
	00 00		 movsx	 eax, WORD PTR [esi+9042]
  00666	66 8b 94 46 ba
	1d 00 00	 mov	 dx, WORD PTR [esi+eax*2+7610]
  0066e	66 89 57 42	 mov	 WORD PTR [edi+66], dx

; 1578 : 			
; 1579 : #if 0
; 1580 : 			printf ("Ph_drwt02.c nfram %d, dtimf0 %d, f0command %d\n",
; 1581 : 				pDphsettar->nfram, pDphsettar->dtimf0, pDphsettar->f0command);
; 1582 : #endif
; 1583 : 			
; 1584 : 			if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  00672	66 83 be 9c 17
	00 00 06	 cmp	 WORD PTR [esi+6044], 6
  0067a	75 29		 jne	 SHORT $L71386

; 1585 : 				pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  0067c	0f bf 86 52 23
	00 00		 movsx	 eax, WORD PTR [esi+9042]
  00683	66 8b 94 46 e2
	20 00 00	 mov	 dx, WORD PTR [esi+eax*2+8418]
  0068b	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 1586 : 				pDph_t->nf0ev++;

  0068f	66 ff 86 52 23
	00 00		 inc	 WORD PTR [esi+9042]
$L71392:

; 1587 : 				set_user_target(pDph_t,&pDphsettar->f0command);

  00696	51		 push	 ecx
  00697	56		 push	 esi
  00698	e8 00 00 00 00	 call	 _set_user_target
  0069d	83 c4 08	 add	 esp, 8

; 1588 : 			}
; 1589 : 			else {

  006a0	e9 c5 00 00 00	 jmp	 $L71389
$L71386:

; 1590 : 				pDph_t->nf0ev++;	/* Achieve target at next time */

  006a5	66 ff 86 52 23
	00 00		 inc	 WORD PTR [esi+9042]

; 1591 : 				pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  006ac	0f bf 86 52 23
	00 00		 movsx	 eax, WORD PTR [esi+9042]
  006b3	66 8b 94 46 e2
	20 00 00	 mov	 dx, WORD PTR [esi+eax*2+8418]

; 1592 : 				switch(pDphsettar->type)
; 1593 : 				{

  006bb	0f bf 47 40	 movsx	 eax, WORD PTR [edi+64]
  006bf	83 f8 05	 cmp	 eax, 5
  006c2	66 89 57 66	 mov	 WORD PTR [edi+102], dx
  006c6	0f 87 9e 00 00
	00		 ja	 $L71389
  006cc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71672[eax*4]
$L71393:

; 1594 : 				case USER: /*user specified f0 target*/
; 1595 : 					set_user_target(pDph_t,&pDphsettar->f0command);
; 1596 : 					break;
; 1597 : 					
; 1598 : 				case F0_RESET: /* f0 reset*/
; 1599 : 					
; 1600 : 							   pDphsettar->tarhat = 0;		/* Go to bottom of hat pattern 

  006d3	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 1601 : 															and for UK init glide, note glide is not ifdefed _uk becuase
; 1602 : 							   it is a command we ant to allow others to use*/
; 1603 : 							   pDph_t->glotalize =0;

  006d7	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 1604 : 							   pDphsettar->glide_step=0;

  006de	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1605 : 							   pDphsettar->glide_tot=0;

  006e2	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 1606 : 							   pDphsettar->glide_inc=0;

  006e6	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 1607 : 							   break; //BATS 704

  006ea	eb 7e		 jmp	 SHORT $L71389
$L71394:

; 1608 : 				case STEP:
; 1609 : #ifdef ENGLISH_UK
; 1610 : 					break;
; 1611 : #endif
; 1612 : 					pDphsettar->tarhat += pDphsettar->f0command;

  006ec	66 8b 09	 mov	 cx, WORD PTR [ecx]
  006ef	66 01 4f 5c	 add	 WORD PTR [edi+92], cx

; 1613 : 					/* Command is a step, reset pDphsettar->tarhat */
; 1614 : 					
; 1615 : 					if (pDphsettar->f0command < 0) 

  006f3	66 3b cb	 cmp	 cx, bx
  006f6	7d 13		 jge	 SHORT $L71395

; 1616 : 					{	/* Cancel previous impulse if step */
; 1617 : 						/* is of opposite sign */
; 1618 : 						if (pDphsettar->tarimp > 0) 

  006f8	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  006fc	7e 6c		 jle	 SHORT $L71389

; 1619 : 						{	
; 1620 : 							pDphsettar->tarimp = 0;

  006fe	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1621 : 							pDphsettar->delimp = 0;

  00702	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 1622 : 						}
; 1623 : 					}
; 1624 : 					else

  00709	eb 5f		 jmp	 SHORT $L71389
$L71395:

; 1625 : 					{
; 1626 : 						if (pDphsettar->tarimp < 0) 

  0070b	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  0070f	7d 59		 jge	 SHORT $L71389

; 1627 : 						{
; 1628 : 							pDphsettar->tarimp = 0;

  00711	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1629 : 							pDphsettar->delimp = 0;

  00715	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 1630 : 						}
; 1631 : 					}
; 1632 : 					break;

  0071c	eb 4c		 jmp	 SHORT $L71389
$L71399:

; 1633 : 				case GLIDE:/* eab 1/10/98 work in progress */
; 1634 : 					
; 1635 : 					pDphsettar->glide_step = pDphsettar->f0command;

  0071e	66 8b 09	 mov	 cx, WORD PTR [ecx]

; 1636 : 					pDphsettar->glide_inc =(pDphsettar->glide_step/pDphsettar->length);

  00721	0f bf c1	 movsx	 eax, cx
  00724	66 89 4f 3a	 mov	 WORD PTR [edi+58], cx
  00728	0f bf 4f 42	 movsx	 ecx, WORD PTR [edi+66]
  0072c	99		 cdq
  0072d	f7 f9		 idiv	 ecx
  0072f	66 89 47 3c	 mov	 WORD PTR [edi+60], ax

; 1637 : 					
; 1638 : 					break;

  00733	eb 35		 jmp	 SHORT $L71389
$L71400:

; 1639 : 					
; 1640 : 				case GLOTTAL:
; 1641 : #ifdef ENGLISH_UK
; 1642 : 					break;
; 1643 : #endif
; 1644 : 					
; 1645 : #ifndef FRENCH
; 1646 : 					pDph_t->enddrop= -pDphsettar->f0command;

  00735	66 8b 11	 mov	 dx, WORD PTR [ecx]

; 1647 : 					pDph_t->glotalize =1;

  00738	66 c7 86 64 23
	00 00 01 00	 mov	 WORD PTR [esi+9060], 1
  00741	66 f7 da	 neg	 dx
  00744	66 89 96 5e 23
	00 00		 mov	 WORD PTR [esi+9054], dx

; 1648 : #endif
; 1649 : 					break;

  0074b	eb 1d		 jmp	 SHORT $L71389
$L71401:

; 1650 : 					
; 1651 : 				case IMPULSE:
; 1652 : 					
; 1653 : 					/* Odd, command is impulse	*/
; 1654 : 					/*			  Impulse realized as 24-frame "step plus ramp" from f0command */
; 1655 : 					/*			  to three times focommand */
; 1656 : 					/* eab old ocde used to have an impulse as a 2*f0command that would be realized as an 
; 1657 : 					16 frame wide pulse. This new scheme proposed by Dennis Klatt uses 
; 1658 : 					imp=f0command+(f0command _ f0command>>4 meaning it will take 16 farmes to
; 1659 : 					reach double height. The old one never reached target so this new approach I think 
; 1660 : 					presently has two problems it's dealyed too much and it lasts too long causing higher f0 values
; 1661 : 					and more percieved effect. I want to try it differently starting out close to the old code with a pulse command that 
; 1662 : 					trails off.
; 1663 : 					with a downward slope think of it as a rectangular pulse with a triangle placed on
; 1664 : 					top instead of a second rectangular pulse- by the way it's not working correctly at
; 1665 : 					the moment*/
; 1666 : 					
; 1667 : 					//			if (pDphsettar->tarbas == 1200)
; 1668 : 					//				pDphsettar->tarbas = 1300;
; 1669 : 					//			else
; 1670 : 					//			pDphsettar->tarbas= (int)(.94 * (float)pDphsettar->tarbas);
; 1671 : 					pDphsettar->tarimp = pDphsettar->f0command<<1;

  0074d	66 8b 09	 mov	 cx, WORD PTR [ecx]
  00750	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]

; 1672 : 					
; 1673 : 					
; 1674 : 					pDphsettar->delimp = pDphsettar->f0command>>2;

  00753	66 c1 f9 02	 sar	 cx, 2
  00757	66 89 47 5e	 mov	 WORD PTR [edi+94], ax
  0075b	66 89 8f 9e 00
	00 00		 mov	 WORD PTR [edi+158], cx

; 1675 : 					// pDphsettar->nimp = 24 - ((pDph_t->f0_lp_filter-1300)>>8);
; 1676 : 					pDphsettar->nimp = pDphsettar->length;

  00762	66 8b 4f 42	 mov	 cx, WORD PTR [edi+66]
  00766	66 89 4f 78	 mov	 WORD PTR [edi+120], cx
$L71389:
  0076a	66 8b 47 46	 mov	 ax, WORD PTR [edi+70]
  0076e	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  00772	66 3b c2	 cmp	 ax, dx
  00775	0f 8d a6 fe ff
	ff		 jge	 $L71384
$L71385:

; 1677 : 					break;
; 1678 : 					
; 1679 : 				}
; 1680 : 			}
; 1681 : 			
; 1682 : 			
; 1683 :             
; 1684 : 			
; 1685 : 			/*        Loop back to look for more f0 commands */
; 1686 :         }
; 1687 : #ifdef  ENDDROP
; 1688 : 		
; 1689 : 		/*EAB Drop pitch rapidly at  end of utterance
; 1690 : 		enddrop now reflects pitch dropoff at end of utterance and not final creek
; 1691 : 		hence the removal of the tcumdur stuff
; 1692 : 		9/19/97 */
; 1693 : 		if(  pDph_t->enddrop 
; 1694 : 			&& pDph_t->glotalize  && pDph_t->number_words >= 3)
; 1695 : 		{
; 1696 : 			if(pDphsettar->tarbas > 500)
; 1697 : 			{
; 1698 : 				pDph_t->enddrop += pDph_t->enddrop>>1;
; 1699 : 			}
; 1700 : 			
; 1701 : 		}
; 1702 : 		
; 1703 : #endif
; 1704 : 		
; 1705 : 		
; 1706 : 		
; 1707 : 		
; 1708 : 		
; 1709 : 		/* 8/96 eab have baseline follow profile in basline array*/
; 1710 : 		/* since we use nframb <<4 and array is 16 then stepsize == tcumdur*16/16
; 1711 : 		This code works by starting from a base value and then a difference bewteeen where we are
; 1712 : 		and where we want to be is done modulo sixteen, The lastbase keeps the acutal position,
; 1713 : 		we don't enforce the values in the code but targets them over time. F0delta is a cumulative
; 1714 : 		offset since the last synchro point i.e. every sixteen */
; 1715 : 		if(pDphsettar->nframb << 4 >= pDphsettar->basetime )

  0077b	66 8b 47 36	 mov	 ax, WORD PTR [edi+54]
  0077f	0f bf 57 48	 movsx	 edx, WORD PTR [edi+72]
  00783	0f bf c8	 movsx	 ecx, ax
  00786	c1 e2 04	 shl	 edx, 4
  00789	3b d1		 cmp	 edx, ecx
  0078b	7c 47		 jl	 SHORT $L71404

; 1716 : 		{
; 1717 : 			pDphsettar->basestep=(pDphsettar->lastbase>>2)-pDph_t->f0baseline[pDphsettar->basecntr+1];

  0078d	0f bf 57 32	 movsx	 edx, WORD PTR [edi+50]
  00791	66 8b 6f 72	 mov	 bp, WORD PTR [edi+114]
  00795	8b 8e 34 20 00
	00		 mov	 ecx, DWORD PTR [esi+8244]
  0079b	66 c1 fd 02	 sar	 bp, 2
  0079f	66 2b 6c 51 02	 sub	 bp, WORD PTR [ecx+edx*2+2]
  007a4	66 89 6f 34	 mov	 WORD PTR [edi+52], bp

; 1718 : 			
; 1719 : 			/* WINprintf ("nframb %d, baseline %d\n", pDphsettar->nframb, pDphsettar->basetime);
; 1720 : 			   WINprintf ("tcumdur %d, basecntr %d\n", pDph_t->tcumdur, pDphsettar->basecntr);
; 1721 : 			   WINprintf ("lastbase %d, f0baseline [pDphsettar->basecntr+1] %d,  basestep %d\n",
; 1722 :            	   (pDphsettar->lastbase>>2), pDph_t->f0baseline [pDphsettar->basecntr+1], 
; 1723 :            	    pDphsettar->basestep); 
; 1724 : 			*/
; 1725 : 			
; 1726 : 			/* WINprintf("pos %d target %d step %d bas %d act %d \n",pDphsettar->basecntr,
; 1727 : 			   pDph_t->f0baseline[pDphsettar->basecntr], pDphsettar->basestep, pDphsettar->lastbase,
; 1728 : 			   pDphsettar->tarbas);
; 1729 : 			*/
; 1730 : 			pDphsettar->basetime += pDph_t->tcumdur;

  007a8	66 03 86 50 23
	00 00		 add	 ax, WORD PTR [esi+9040]
  007af	66 89 47 36	 mov	 WORD PTR [edi+54], ax

; 1731 : 			//			if(pDphsettar->basecntr < 15)  // Michel : On utilise basecnt + 1
; 1732 : 			// Eab Michel identified a bug I fixed it. EAB 3/23/01
; 1733 : 			if(pDphsettar->basecntr <= 15)

  007b3	66 8b 47 32	 mov	 ax, WORD PTR [edi+50]
  007b7	66 3d 0f 00	 cmp	 ax, 15			; 0000000fH
  007bb	7f 05		 jg	 SHORT $L71403

; 1734 : 			{
; 1735 : 				pDphsettar->basecntr++;

  007bd	40		 inc	 eax
  007be	66 89 47 32	 mov	 WORD PTR [edi+50], ax
$L71403:

; 1736 : 				
; 1737 : 			}
; 1738 : 			
; 1739 : 			if (pDph_t->tcumdur == 0)	

  007c2	66 39 9e 50 23
	00 00		 cmp	 WORD PTR [esi+9040], bx
  007c9	75 09		 jne	 SHORT $L71404

; 1740 : 				pDph_t->tcumdur = 1;

  007cb	66 c7 86 50 23
	00 00 01 00	 mov	 WORD PTR [esi+9040], 1
$L71404:

; 1741 : 		}
; 1742 : 		
; 1743 : 		
; 1744 : 		pDphsettar->f0delta = pDphsettar->basestep<<6;

  007d4	66 8b 47 34	 mov	 ax, WORD PTR [edi+52]
  007d8	66 c1 e0 06	 shl	 ax, 6
  007dc	66 89 87 9c 00
	00 00		 mov	 WORD PTR [edi+156], ax

; 1745 : 		temp = (((pDphsettar->f0delta)/pDph_t->tcumdur));
; 1746 : 		pDphsettar->lastbase -= (((pDphsettar->f0delta)/pDph_t->tcumdur));

  007e3	0f bf 8e 50 23
	00 00		 movsx	 ecx, WORD PTR [esi+9040]
  007ea	0f bf c0	 movsx	 eax, ax
  007ed	99		 cdq
  007ee	f7 f9		 idiv	 ecx
  007f0	66 29 47 72	 sub	 WORD PTR [edi+114], ax

; 1747 : 		
; 1748 :         /* WINprintf ("basestep %d, f0delta %d, temp %d, lastbase %d\n", 
; 1749 : 		   pDphsettar->basestep, pDphsettar->f0delta, temp, pDphsettar->lastbase);
; 1750 : 		*/
; 1751 : 		
; 1752 : 		//	if(	pDphsettar->tarbas > 500)
; 1753 : 		//	{
; 1754 : 		
; 1755 : 		/* Pitch falls are less pronounced for some speakers 
; 1756 : 		   to reduce impession of assertive personality 
; 1757 :         */
; 1758 : 		pDph_t->scaled_enddrop= frac4mul( pDph_t->enddrop, pDph_t->assertiveness);

  007f4	0f bf 86 5e 23
	00 00		 movsx	 eax, WORD PTR [esi+9054]
  007fb	0f bf 96 ce 18
	00 00		 movsx	 edx, WORD PTR [esi+6350]
  00802	0f af c2	 imul	 eax, edx
  00805	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00808	66 89 86 62 23
	00 00		 mov	 WORD PTR [esi+9058], ax

; 1759 : 		pDphsettar->tarbas = (pDphsettar->lastbase>>2)-pDph_t->scaled_enddrop;

  0080f	66 8b 4f 72	 mov	 cx, WORD PTR [edi+114]
  00813	66 c1 f9 02	 sar	 cx, 2
  00817	2b c8		 sub	 ecx, eax

; 1760 : 		
; 1761 : 		/* WINprintf ("\n**** phocur %4x, tarbase : %d, lastbase %d, scaled_enddrop %d\n", 
; 1762 : 		   pDphsettar->phocur, pDphsettar->tarbas, pDphsettar->lastbase, 
; 1763 : 		   pDph_t->scaled_enddrop); 
; 1764 :         */
; 1765 : 		
; 1766 : 		//pDphsettar->tarbas = pDphsettar->tarbas;
; 1767 : 		//	}
; 1768 : 		//	else
; 1769 : 		//			pDphsettar->tarbas = pDphsettar->lastbase>>2;
; 1770 : 		
; 1771 : 		
; 1772 : 		//WINprintf("dur %d pDphsettar->tarbas %d phon %d \n",
; 1773 : 		//pDphsettar->basetime,pDphsettar->tarbas,pDph_t->allophons[pDphsettar->np_drawt0]);
; 1774 : 		
; 1775 : 		pDphsettar->nframb++;

  00819	66 ff 47 48	 inc	 WORD PTR [edi+72]

; 1776 : 		
; 1777 : 		
; 1778 : 		
; 1779 : 
; 1780 : 		/*    Impulse duration fixed at 24 frames, count down to zero */
; 1781 : 		/*    (actually, duration is function of speaker def par "quickness" */
; 1782 : 		
; 1783 :         if (--pDphsettar->nimp < 0) {

  0081d	66 ff 4f 78	 dec	 WORD PTR [edi+120]
  00821	66 39 5f 78	 cmp	 WORD PTR [edi+120], bx
  00825	66 89 8f 96 00
	00 00		 mov	 WORD PTR [edi+150], cx
  0082c	7d 0b		 jge	 SHORT $L71406

; 1784 : 			//pDphsettar->nimp--;
; 1785 : 			pDphsettar->tarimp = 0;

  0082e	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1786 : 			pDphsettar->delimp = 0;

  00832	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
$L71406:

; 1787 : 			//pDphsettar->nimp = 0;
; 1788 : 		}
; 1789 : 		
; 1790 : 		
; 1791 : 		/*    Segmental effect on f0, reset pDphsettar->tarseg if time exceeds cum dur */
; 1792 : 		
; 1793 :         if ((pDphsettar->nframs >= (pDphsettar->segdur + pDphsettar->extrad)) 
; 1794 : 			&& (pDphsettar->np_drawt0 < (pDph_t->nallotot-1))) {

  00839	66 8b 4f 54	 mov	 cx, WORD PTR [edi+84]
  0083d	66 8b 47 4a	 mov	 ax, WORD PTR [edi+74]
  00841	0f bf d1	 movsx	 edx, cx
  00844	0f bf 4f 4e	 movsx	 ecx, WORD PTR [edi+78]
  00848	03 d1		 add	 edx, ecx
  0084a	0f bf c8	 movsx	 ecx, ax
  0084d	3b ca		 cmp	 ecx, edx
  0084f	0f 8c 6d 01 00
	00		 jl	 $L71424
  00855	66 8b 4f 74	 mov	 cx, WORD PTR [edi+116]
  00859	0f bf 96 06 15
	00 00		 movsx	 edx, WORD PTR [esi+5382]
  00860	0f bf e9	 movsx	 ebp, cx
  00863	4a		 dec	 edx
  00864	3b ea		 cmp	 ebp, edx
  00866	0f 8d 56 01 00
	00		 jge	 $L71424

; 1795 : 			
; 1796 : 			pDphsettar->nframs -= pDphsettar->segdur;

  0086c	66 8b 57 54	 mov	 dx, WORD PTR [edi+84]
  00870	2b c2		 sub	 eax, edx
  00872	66 89 47 4a	 mov	 WORD PTR [edi+74], ax

; 1797 :             pDphsettar->segdur = pDph_t->allodurs[++pDphsettar->np_drawt0];

  00876	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00879	0f bf c8	 movsx	 ecx, ax
  0087c	66 89 47 74	 mov	 WORD PTR [edi+116], ax

; 1798 :             pDphsettar->phocur = pDph_t->allophons[pDphsettar->np_drawt0];
; 1799 : 			
; 1800 : 			/* EAB Found long standing bug-- due to the compensation for the delay through the filters
; 1801 : 			the first phoneme is getting cheated on duration */
; 1802 : 			if(pDphsettar->np_drawt0 == 1)

  00880	66 3d 01 00	 cmp	 ax, 1
  00884	66 8b 94 4e 9c
	0d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+3484]
  0088c	66 89 57 54	 mov	 WORD PTR [edi+84], dx
  00890	66 8b 94 4e ec
	03 00 00	 mov	 dx, WORD PTR [esi+ecx*2+1004]
  00898	66 89 57 44	 mov	 WORD PTR [edi+68], dx
  0089c	75 06		 jne	 SHORT $L71408

; 1803 : 			{
; 1804 : 				pDphsettar->nframs = -DELAY_SEG_LOWPASS;

  0089e	66 c7 47 4a fd
	ff		 mov	 WORD PTR [edi+74], -3	; fffffffdH
$L71408:

; 1805 : 			}
; 1806 : 			
; 1807 :             if (pDphsettar->np_drawt0 < pDph_t->nallotot)  

  008a4	66 3b 86 06 15
	00 00		 cmp	 ax, WORD PTR [esi+5382]
  008ab	7d 0c		 jge	 SHORT $L71409

; 1808 : 				pDphsettar->phonex_drawt0 = pDph_t->allophons[pDphsettar->np_drawt0+1];

  008ad	66 8b 84 4e ee
	03 00 00	 mov	 ax, WORD PTR [esi+ecx*2+1006]
  008b5	66 89 47 68	 mov	 WORD PTR [edi+104], ax
$L71409:

; 1809 : 			
; 1810 : 			
; 1811 : 			/*        Set next f0 segmental incremental target */
; 1812 : 			
; 1813 : 			//f0seg = pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[phocur].f0segtars;
; 1814 : 			tmp = pDphsettar->phocur & PFONT;

  008b9	66 8b 47 44	 mov	 ax, WORD PTR [edi+68]
  008bd	8b d0		 mov	 edx, eax
  008bf	81 e2 00 1f 00
	00		 and	 edx, 7936		; 00001f00H

; 1815 : 			if(tmp == PFUSA<<PSFONT)

  008c5	66 81 fa 00 1e	 cmp	 dx, 7680		; 00001e00H
  008ca	75 0f		 jne	 SHORT $L71410

; 1816 : 			{
; 1817 : 				f0seg = us_f0msegtars[pDphsettar->phocur & PVALUE];	

  008cc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008d1	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _us_f0msegtars[eax*2]

; 1818 : 			}
; 1819 : 			else if(tmp == PFGR<<PSFONT)

  008d9	eb 5e		 jmp	 SHORT $L71660
$L71410:
  008db	66 81 fa 00 1c	 cmp	 dx, 7168		; 00001c00H
  008e0	75 13		 jne	 SHORT $L71412

; 1820 : 			{
; 1821 : 				f0seg = gr_f0msegtars[pDphsettar->phocur & PVALUE];	

  008e2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  008e7	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _gr_f0msegtars[eax*2]
  008ef	89 44 24 10	 mov	 DWORD PTR _f0seg$[esp+24], eax

; 1822 : 			}
; 1823 : 			else if(tmp == PFLA<<PSFONT)

  008f3	eb 48		 jmp	 SHORT $L71418
$L71412:
  008f5	66 81 fa 00 1a	 cmp	 dx, 6656		; 00001a00H
  008fa	75 0f		 jne	 SHORT $L71414

; 1824 : 			{
; 1825 : 				f0seg = la_f0msegtars[pDphsettar->phocur & PVALUE];

  008fc	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00901	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _la_f0msegtars[eax*2]

; 1826 : 			}
; 1827 : 			else if(tmp == PFSP<<PSFONT)

  00909	eb 2e		 jmp	 SHORT $L71660
$L71414:
  0090b	66 81 fa 00 1b	 cmp	 dx, 6912		; 00001b00H
  00910	75 13		 jne	 SHORT $L71416

; 1828 : 			{
; 1829 : 				f0seg = sp_f0msegtars[pDphsettar->phocur & PVALUE];

  00912	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00917	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _sp_f0msegtars[eax*2]
  0091f	89 44 24 10	 mov	 DWORD PTR _f0seg$[esp+24], eax

; 1830 : 			}
; 1831 : 			else if(tmp==PFFR<<PSFONT)

  00923	eb 18		 jmp	 SHORT $L71418
$L71416:
  00925	66 81 fa 00 19	 cmp	 dx, 6400		; 00001900H
  0092a	75 11		 jne	 SHORT $L71418

; 1832 : 			{
; 1833 :                 f0seg = fr_f0msegtars[pDphsettar->phocur & PVALUE];

  0092c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00931	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _fr_f0msegtars[eax*2]
$L71660:
  00939	89 54 24 10	 mov	 DWORD PTR _f0seg$[esp+24], edx
$L71418:

; 1834 : 			}
; 1835 : 			
; 1836 : 			/*	  Effect is half as much in unstressed segments */
; 1837 : 			#ifndef GERMAN /*The Fstress marker isn't valid for the whole segment so this is wrong as often as right
; 1838 : 			I need time to sort out what Fstress etc should really be doing*/
; 1839 : 			if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  0093d	8a 84 8e 58 06
	00 00		 mov	 al, BYTE PTR [esi+ecx*4+1624]

; 1840 : 				f0seg = f0seg >> 1;

  00944	66 8b 6c 24 10	 mov	 bp, WORD PTR _f0seg$[esp+24]
  00949	a8 03		 test	 al, 3
  0094b	75 03		 jne	 SHORT $L71419
  0094d	66 d1 fd	 sar	 bp, 1
$L71419:

; 1841 : 			}
; 1842 : #endif
; 1843 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS;	/* Assume like V-V trans */
; 1844 : 			/* so start new target early */
; 1845 : 			/*        Delay start of f0 rise for upcoming voiceless segment until boundary */
; 1846 :             if ((phone_feature( pDph_t,pDphsettar->phonex_drawt0) & FVOICD) IS_MINUS) {

  00950	0f bf 47 68	 movsx	 eax, WORD PTR [edi+104]
  00954	50		 push	 eax
  00955	56		 push	 esi
  00956	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH
  0095c	e8 00 00 00 00	 call	 _phone_feature
  00961	83 c4 08	 add	 esp, 8
  00964	a8 02		 test	 al, 2
  00966	75 04		 jne	 SHORT $L71420

; 1847 :                 pDphsettar->extrad = 0;			/* All of rise during voicless */

  00968	66 89 5f 4e	 mov	 WORD PTR [edi+78], bx
$L71420:

; 1848 :             }
; 1849 : 			/*        Delay f0 fall from voiceless plosive until vot (when glottis closes)*/
; 1850 : 			if ((phone_feature( pDph_t,pDphsettar->phocur) & FVOICD) IS_MINUS) 

  0096c	0f bf 4f 44	 movsx	 ecx, WORD PTR [edi+68]
  00970	51		 push	 ecx
  00971	56		 push	 esi
  00972	e8 00 00 00 00	 call	 _phone_feature
  00977	83 c4 08	 add	 esp, 8
  0097a	a8 02		 test	 al, 2
  0097c	75 3c		 jne	 SHORT $L71421

; 1851 : 			{	
; 1852 : 				pDphsettar->tarseg1 = f0seg;  /* Gesture fast, go to only 1 lpfilter */
; 1853 : 				pDphsettar->tarseg = 0;
; 1854 : 				pDphsettar->extrad = 1;	/* -V fric, fall starts at voicing onset */
; 1855 : 				if ((phone_feature( pDph_t,pDphsettar->phocur) & FPLOSV) IS_PLUS) {

  0097e	0f bf 57 44	 movsx	 edx, WORD PTR [edi+68]
  00982	52		 push	 edx
  00983	56		 push	 esi
  00984	66 89 6f 6c	 mov	 WORD PTR [edi+108], bp
  00988	66 89 5f 6a	 mov	 WORD PTR [edi+106], bx
  0098c	66 c7 47 4e 01
	00		 mov	 WORD PTR [edi+78], 1
  00992	e8 00 00 00 00	 call	 _phone_feature
  00997	83 c4 08	 add	 esp, 8
  0099a	a8 40		 test	 al, 64			; 00000040H
  0099c	74 24		 je	 SHORT $L71424

; 1856 : 					pDphsettar->extrad = 5;		/* -V plos, assume VOT = 32 ms */
; 1857 : 					if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  0099e	0f bf 47 74	 movsx	 eax, WORD PTR [edi+116]
  009a2	66 c7 47 4e 05
	00		 mov	 WORD PTR [edi+78], 5
  009a8	f6 84 86 58 06
	00 00 03	 test	 BYTE PTR [esi+eax*4+1624], 3
  009b0	75 10		 jne	 SHORT $L71424

; 1858 : 						pDphsettar->extrad = 3;

  009b2	66 c7 47 4e 03
	00		 mov	 WORD PTR [edi+78], 3

; 1859 : 					}
; 1860 : 				}
; 1861 :             }
; 1862 : 			else {

  009b8	eb 08		 jmp	 SHORT $L71424
$L71421:

; 1863 : 				pDphsettar->tarseg = f0seg;	  /* Normal gesture for voiced segments is */

  009ba	66 89 6f 6a	 mov	 WORD PTR [edi+106], bp

; 1864 : 				pDphsettar->tarseg1 = 0;	  /* slow, use both segmental 1-pole filters */

  009be	66 89 5f 6c	 mov	 WORD PTR [edi+108], bx
$L71424:

; 1865 : 			}
; 1866 :         }
; 1867 : 		
; 1868 : 		/*    Glottal stop gesture, test at beginning of each phoneme */
; 1869 : 		/* eab 11/22/97 per caroline remove glotalization */
; 1870 : #ifndef ENGLISH_UK
; 1871 : 		set_tglst(pDph_t);		

  009c2	56		 push	 esi
  009c3	e8 00 00 00 00	 call	 _set_tglst

; 1872 : #endif
; 1873 : 		/* Set times of f0 fall pDphsettar->tglstp,pDphsettar->tglstn */
; 1874 : 		
; 1875 : 		if (pDph_t->f0mode< SINGING) {

  009c8	bd 04 00 00 00	 mov	 ebp, 4
  009cd	83 c4 04	 add	 esp, 4
  009d0	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  009d7	0f 8d df 00 00
	00		 jge	 $L71425

; 1876 : 			
; 1877 : 			/*	  Filter f0 step and impulse commands to produce next value f0 */
; 1878 : 			/* increment gilde towards target and cancel increment when as close as poss to target
; 1879 : 			eab 1/21/98 */
; 1880 : 			pDphsettar->glide_tot += pDphsettar->glide_inc;

  009dd	66 8b 47 3c	 mov	 ax, WORD PTR [edi+60]
  009e1	66 01 47 3e	 add	 WORD PTR [edi+62], ax

; 1881 : 			//	WINprintf("male %d %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0]);
; 1882 : 			pDphsettar->glide_step -= pDphsettar->glide_inc;

  009e5	66 29 47 3a	 sub	 WORD PTR [edi+58], ax
  009e9	66 8b 4f 3a	 mov	 cx, WORD PTR [edi+58]

; 1883 : 			/*EAB 1/10/98 set glide_inc to zero if we've reached target*/
; 1884 : 			if(pDphsettar->glide_inc > 0 )

  009ed	66 3b c3	 cmp	 ax, bx
  009f0	7e 07		 jle	 SHORT $L71661

; 1885 : 			{
; 1886 : 				if ( pDphsettar->glide_step <= pDphsettar->glide_inc)

  009f2	66 3b c8	 cmp	 cx, ax
  009f5	7f 0d		 jg	 SHORT $L71430

; 1887 : 				{
; 1888 : 					pDphsettar->glide_inc =0;
; 1889 : 				}
; 1890 : 			}
; 1891 : 			else

  009f7	eb 07		 jmp	 SHORT $L71662
$L71661:

; 1892 : 				if(pDphsettar->glide_inc < 0 )

  009f9	7d 09		 jge	 SHORT $L71430

; 1893 : 				{
; 1894 : 					if ( pDphsettar->glide_step >= pDphsettar->glide_inc)

  009fb	66 3b c8	 cmp	 cx, ax
  009fe	7c 04		 jl	 SHORT $L71430
$L71662:

; 1895 : 					{
; 1896 : 						pDphsettar->glide_inc =0;

  00a00	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx
$L71430:

; 1897 : 					}
; 1898 : 				}
; 1899 : 				
; 1900 : 				f0in = (pDphsettar->tarbas + pDphsettar->tarhat + (pDphsettar->tarimp));

  00a04	66 8b 47 5e	 mov	 ax, WORD PTR [edi+94]
  00a08	66 8b 4f 5c	 mov	 cx, WORD PTR [edi+92]
  00a0c	66 03 c8	 add	 cx, ax
  00a0f	66 03 8f 96 00
	00 00		 add	 cx, WORD PTR [edi+150]

; 1901 : #ifdef DEBUGF0
; 1902 : 				//WINprintf("f0in %d  tarbas %d,tarbat %d tarimp %d \n",pDphsettar->tarbas,pDphsettar->tarhat,pDphsettar->tarimp,f0in);
; 1903 : #endif
; 1904 : 				//WINprintf("phon %d tarbat %d tarimp %d glide %d\n",pDphsettar->np_drawt0,pDphsettar->tarhat,pDphsettar->tarimp,pDphsettar->glide_tot);
; 1905 : 				
; 1906 : 				
; 1907 : 				//debug code deleted eab 1/10/98
; 1908 : 				if (pDphsettar->tarimp != 0)   

  00a16	66 3b c3	 cmp	 ax, bx
  00a19	89 4c 24 10	 mov	 DWORD PTR _f0in$[esp+24], ecx
  00a1d	74 0e		 je	 SHORT $L71431

; 1909 : 					pDphsettar->tarimp += pDphsettar->delimp;

  00a1f	66 8b 97 9e 00
	00 00		 mov	 dx, WORD PTR [edi+158]
  00a26	66 03 d0	 add	 dx, ax
  00a29	66 89 57 5e	 mov	 WORD PTR [edi+94], dx
$L71431:

; 1910 : 				/* Strange way to  */
; 1911 : 				/* make f0 rise gradually for a	  */
; 1912 : 				/* stress-impulse command	  */
; 1913 : 				//	pDphsettar->delimp -=1;
; 1914 : 				pDphsettar->delimp= pDphsettar->delimp>>1;
; 1915 : 				/*	  Reduce segmental tongue height effect of sonorants toward */
; 1916 : 				/*	  end of segment (98% per frame)  */
; 1917 : 				
; 1918 : 				//pDph_t->arg1 = pDphsettar->tarseg; 
; 1919 : 				//pDph_t->arg2 = 16064;    
; 1920 : 				pDphsettar->tarseg = mlsh1(pDphsettar->tarseg,16064);

  00a2d	0f bf 4f 6a	 movsx	 ecx, WORD PTR [edi+106]
  00a31	8b c1		 mov	 eax, ecx
  00a33	c1 e0 06	 shl	 eax, 6
  00a36	2b c1		 sub	 eax, ecx
  00a38	c1 e0 02	 shl	 eax, 2
  00a3b	66 d1 bf 9e 00
	00 00		 sar	 WORD PTR [edi+158], 1
  00a42	2b c1		 sub	 eax, ecx
  00a44	c1 e0 06	 shl	 eax, 6
  00a47	c1 f8 0e	 sar	 eax, 14			; 0000000eH

; 1921 : 				filter_seg_commands(pDph_t,pDphsettar->tarseg);	/* Input is pDphsettar->tarseg, output is pDphsettar->f0s */

  00a4a	50		 push	 eax
  00a4b	56		 push	 esi
  00a4c	66 89 47 6a	 mov	 WORD PTR [edi+106], ax
  00a50	e8 00 00 00 00	 call	 _filter_seg_commands

; 1922 : 				
; 1923 : #ifdef REMOVENWSLATER
; 1924 : 				pDph_t->f0s += frac4mul(pDph_t->f0s, pDph_t->`scalefac+7000);
; 1925 : #endif
; 1926 : 				f0in += pDphsettar->glide_tot;

  00a55	66 8b 47 3e	 mov	 ax, WORD PTR [edi+62]
  00a59	66 03 44 24 18	 add	 ax, WORD PTR _f0in$[esp+32]

; 1927 : 				filter_commands(pDph_t,f0in);		/* Input is f0in, output is f0  */

  00a5e	50		 push	 eax
  00a5f	56		 push	 esi
  00a60	e8 00 00 00 00	 call	 _filter_commands

; 1928 : 				
; 1929 : 				/* Add in glide value to F0 eab 1/21/98 */
; 1930 : 				//Olivertest 
; 1931 : 				pDph_t->f0prime = pDph_t->f0+ pDph_t->f0s ;	/* This will be spdef-scaled output value */

  00a65	66 8b 8e 9c 03
	00 00		 mov	 cx, WORD PTR [esi+924]
  00a6c	83 c4 10	 add	 esp, 16			; 00000010H
  00a6f	66 03 8e 9a 03
	00 00		 add	 cx, WORD PTR [esi+922]
  00a76	66 89 8e 56 23
	00 00		 mov	 WORD PTR [esi+9046], cx

; 1932 : 				//		WINprintf("maleseg f0s %d tarseg %d tarseg1 %d \n", pDph_t->f0s,pDphsettar->tarseg,pDphsettar->tarseg1); 
; 1933 : 				
; 1934 : 				/* WINprintf (" f0 %4d f0s %4d f0prime %4d, ",
; 1935 : 				   pDph_t->f0, pDph_t->f0s, pDph_t->f0prime );
; 1936 :                 */
; 1937 : 				
; 1938 : #ifdef DEBUGF0
; 1939 : 				WINprintf("maleseg f0s %d tarseg %d tarseg1 %d \n", pDph_t->f0s,pDphsettar->tarseg,pDphsettar->tarseg1); 
; 1940 : 				WINprintf("male %d %d %d pDph_t->f0 %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0],
; 1941 : 					pDph_t->f0prime, pDph_t->f0); 
; 1942 : #endif
; 1943 : 				
; 1944 : 				
; 1945 : 				/* 11/23/97 Eab creek for male voice only for now*/
; 1946 : 				/*BATS 709 EAB 7/15/98 left number_words >5 out in ad code this
; 1947 : 				isn't right or wrong but for overall perception not creeking except for longer
; 1948 : 				utternce should be better */
; 1949 : #ifdef CREEKMALE
; 1950 : 				if( pDphsettar->nframb >  pDph_t->tcumdur-4
; 1951 : 					&& pDph_t->clausetype == DECLARATIVE 
; 1952 : 					&& pDph_t->number_words > 5 )

  00a7d	0f bf 96 50 23
	00 00		 movsx	 edx, WORD PTR [esi+9040]
  00a84	0f bf 47 48	 movsx	 eax, WORD PTR [edi+72]
  00a88	2b d5		 sub	 edx, ebp
  00a8a	3b c2		 cmp	 eax, edx
  00a8c	7e 25		 jle	 SHORT $L71432
  00a8e	66 39 9e e6 03
	00 00		 cmp	 WORD PTR [esi+998], bx
  00a95	75 1c		 jne	 SHORT $L71432
  00a97	66 83 be 2e 20
	00 00 05	 cmp	 WORD PTR [esi+8238], 5
  00a9f	7e 12		 jle	 SHORT $L71432

; 1953 : 				{
; 1954 : 					pDph_t->avcreek = -6;

  00aa1	66 c7 86 dc 03
	00 00 fa ff	 mov	 WORD PTR [esi+988], -6	; fffffffaH

; 1955 : 					pDph_t->f0prime = pDph_t->f0prime >>1;

  00aaa	66 d1 be 56 23
	00 00		 sar	 WORD PTR [esi+9046], 1

; 1956 : 				}
; 1957 : 				else

  00ab1	eb 12		 jmp	 SHORT $L71434
$L71432:

; 1958 : 				{
; 1959 : 					pDph_t->avcreek = 0;

  00ab3	66 89 9e dc 03
	00 00		 mov	 WORD PTR [esi+988], bx

; 1960 : 				}
; 1961 : 				
; 1962 : 				//WINprintf("phocur %d %d %d F0in %d \n",pDphsettar->phocur, pDphsettar->tarbas, pDph_t->enddrop, pDph_t->f0prime);
; 1963 : 				
; 1964 : #endif
; 1965 : 				
; 1966 : 		}
; 1967 : 		
; 1968 : 		else 

  00aba	eb 09		 jmp	 SHORT $L71434
$L71425:

; 1969 : 		{
; 1970 : 			/*	  Linear interpolation to 'pDphsettar->newnote' over 100 ms or phoneme duration */
; 1971 : 			/* Add vibratto if pDphsettar->vibsw=1  */
; 1972 : 			linear_interp(pDph_t);

  00abc	56		 push	 esi
  00abd	e8 00 00 00 00	 call	 _linear_interp
  00ac2	83 c4 04	 add	 esp, 4
$L71434:

; 1973 : 		}
; 1974 : 		
; 1975 : 		/*    Glottalization gesture */
; 1976 : 		/*    F0 dip by 60 Hz linear ramp in 8 frames each direction about pDphsettar->tglstp */
; 1977 : 		dtglst = pDphsettar->nframg - pDphsettar->tglstp;

  00ac5	0f bf 4f 50	 movsx	 ecx, WORD PTR [edi+80]
  00ac9	0f bf 47 4c	 movsx	 eax, WORD PTR [edi+76]
  00acd	2b c1		 sub	 eax, ecx

; 1978 : 		if ( dtglst < 0 )

  00acf	79 02		 jns	 SHORT $L71435

; 1979 : 			dtglst = (-dtglst);

  00ad1	f7 d8		 neg	 eax
$L71435:

; 1980 :         if (dtglst <= 7)

  00ad3	83 f8 07	 cmp	 eax, 7
  00ad6	7f 1a		 jg	 SHORT $L71436

; 1981 : 		{
; 1982 : #ifdef SPANISH
; 1983 : 			
; 1984 :             pDph_t->f0prime += ((dtglst * 70) - 550)>>2;
; 1985 : #else
; 1986 : 			pDph_t->f0prime += ((dtglst * 70) - 550);

  00ad8	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00adf	2b c8		 sub	 ecx, eax
  00ae1	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00ae4	8d 8c 12 da fd
	ff ff		 lea	 ecx, DWORD PTR [edx+edx-550]
  00aeb	66 01 8e 56 23
	00 00		 add	 WORD PTR [esi+9046], cx
$L71436:

; 1987 : #endif
; 1988 :             
; 1989 : 			
; 1990 : 		}
; 1991 : 		
; 1992 : 		/*	  And reduce AV somewhat (ugly code, but F0 computed before AV) */
; 1993 : 		
; 1994 :         if (dtglst <= 5) 

  00af2	83 f8 05	 cmp	 eax, 5
  00af5	7f 10		 jg	 SHORT $L71437

; 1995 : 		{
; 1996 : 			pDph_t->avglstop = (6 - dtglst);	/* Global variable, used in PHDRAW.C */

  00af7	ba 06 00 00 00	 mov	 edx, 6
  00afc	2b d0		 sub	 edx, eax
  00afe	66 89 96 da 03
	00 00		 mov	 WORD PTR [esi+986], dx

; 1997 :         }
; 1998 : 		else 

  00b05	eb 07		 jmp	 SHORT $L71438
$L71437:

; 1999 : 		{
; 2000 : 			pDph_t->avglstop = 0;

  00b07	66 89 9e da 03
	00 00		 mov	 WORD PTR [esi+986], bx
$L71438:

; 2001 : 		}
; 2002 : 		
; 2003 : 		/*    Add f0 drift or flutter (approx 3 and 5-Hz sine waves, each +/-1.0 Hz) */
; 2004 : 		if (pDph_t->f0mode< SINGING) {

  00b0e	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  00b15	0f 8d 10 01 00
	00		 jge	 $L71446

; 2005 : 			pDphsettar->timecos5 += 131;		/* Prime number to reduce coincidence */

  00b1b	66 81 47 7e 83
	00		 add	 WORD PTR [edi+126], 131	; 00000083H
  00b21	66 8b 47 7e	 mov	 ax, WORD PTR [edi+126]

; 2006 : 			if (pDphsettar->timecos5 > TWOPI)    pDphsettar->timecos5 -= TWOPI;

  00b25	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  00b29	7e 09		 jle	 SHORT $L71440
  00b2b	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  00b30	66 89 47 7e	 mov	 WORD PTR [edi+126], ax
$L71440:

; 2007 : 			pDphsettar->timecos3 += 79;

  00b34	66 83 47 7c 4f	 add	 WORD PTR [edi+124], 79	; 0000004fH
  00b39	66 8b 47 7c	 mov	 ax, WORD PTR [edi+124]

; 2008 : 			if (pDphsettar->timecos3 > TWOPI)    pDphsettar->timecos3 -= TWOPI;

  00b3d	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  00b41	7e 09		 jle	 SHORT $L71441
  00b43	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  00b48	66 89 47 7c	 mov	 WORD PTR [edi+124], ax
$L71441:

; 2009 : 			pseudojitter = getcosine[pDphsettar->timecos5>>6]
; 2010 : 				- getcosine[pDphsettar->timecos3>>6];

  00b4c	0f bf 47 7c	 movsx	 eax, WORD PTR [edi+124]
  00b50	0f bf 57 7e	 movsx	 edx, WORD PTR [edi+126]
  00b54	c1 f8 06	 sar	 eax, 6
  00b57	c1 fa 06	 sar	 edx, 6
  00b5a	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _getcosine[eax*2]
  00b62	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _getcosine[edx*2]
  00b6a	2b c1		 sub	 eax, ecx

; 2011 : 			//pDph_t->arg1 = pseudojitter;
; 2012 : 			/* eab found flutter is not a speaker def yet*/
; 2013 : 			//pDph_t->arg2 = 700;//pDph_t->f0flutter;
; 2014 : 			/* "FLUTTER" spdef parameter, 10% -> +/-1 Hz, */
; 2015 : 			pDph_t->f0prime += mlsh1(pseudojitter,700);	

  00b6c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00b73	2b c8		 sub	 ecx, eax
  00b75	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00b78	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00b7b	c1 e1 02	 shl	 ecx, 2
  00b7e	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00b81	66 01 8e 56 23
	00 00		 add	 WORD PTR [esi+9046], cx

; 2016 : 			if(pDph_t->clausetype == 2)

  00b88	66 83 be e6 03
	00 00 02	 cmp	 WORD PTR [esi+998], 2
  00b90	66 8b 8e 56 23
	00 00		 mov	 cx, WORD PTR [esi+9046]
  00b97	75 27		 jne	 SHORT $L71442

; 2017 : 			{
; 2018 : 				pDph_t->f0prime += mlsh1(pseudojitter,pDph_t->addjit);

  00b99	0f bf 96 e8 03
	00 00		 movsx	 edx, WORD PTR [esi+1000]
  00ba0	0f af d0	 imul	 edx, eax
  00ba3	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00ba6	03 d1		 add	 edx, ecx
  00ba8	66 89 96 56 23
	00 00		 mov	 WORD PTR [esi+9046], dx

; 2019 : 				pDph_t->addjit = -pDph_t->addjit;

  00baf	66 8b 86 e8 03
	00 00		 mov	 ax, WORD PTR [esi+1000]
  00bb6	66 f7 d8	 neg	 ax
  00bb9	66 89 86 e8 03
	00 00		 mov	 WORD PTR [esi+1000], ax
$L71442:

; 2020 : 			}
; 2021 : 			
; 2022 : 			
; 2023 : 			/*  100% corresp. to +/- 10 Hz max flutter */
; 2024 : 		}
; 2025 : 		
; 2026 : 		/*    Introduce variability to period at startup from a voiceless interval */
; 2027 : 		/*	not implemented */
; 2028 : 		
; 2029 : 		/*    Scale f0 according to current speaker definition, the number 120 is
; 2030 : 		*    the nominal average pitch of Paul's voice (AP in spdef)  */
; 2031 : 		
; 2032 : 		if (pDph_t->f0mode< SINGING) {

  00bc0	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  00bc7	7d 62		 jge	 SHORT $L71446

; 2033 : 			if(pDph_t->clausetype == 2)

  00bc9	66 83 be e6 03
	00 00 02	 cmp	 WORD PTR [esi+998], 2
  00bd1	75 30		 jne	 SHORT $L71444

; 2034 : 			{
; 2035 : 				pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1200), pDph_t->f0scalefac+1200);

  00bd3	0f bf 8e da 18
	00 00		 movsx	 ecx, WORD PTR [esi+6362]
  00bda	0f bf 96 56 23
	00 00		 movsx	 edx, WORD PTR [esi+9046]
  00be1	81 c1 b0 04 00
	00		 add	 ecx, 1200		; 000004b0H
  00be7	81 ea b0 04 00
	00		 sub	 edx, 1200		; 000004b0H
  00bed	0f af ca	 imul	 ecx, edx
  00bf0	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00bf3	66 03 8e d8 18
	00 00		 add	 cx, WORD PTR [esi+6360]
  00bfa	66 89 8e 56 23
	00 00		 mov	 WORD PTR [esi+9046], cx

; 2036 : 				
; 2037 : 			}
; 2038 : 			else

  00c01	eb 28		 jmp	 SHORT $L71446
$L71444:

; 2039 : 			{
; 2040 : 				//WINprintf ("\nf0prime1 %d ", pDph_t->f0prime);
; 2041 : 				pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1200), pDph_t->f0scalefac);

  00c03	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  00c0a	0f bf 86 da 18
	00 00		 movsx	 eax, WORD PTR [esi+6362]
  00c11	81 e9 b0 04 00
	00		 sub	 ecx, 1200		; 000004b0H
  00c17	0f af c1	 imul	 eax, ecx
  00c1a	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00c1d	66 03 86 d8 18
	00 00		 add	 ax, WORD PTR [esi+6360]
  00c24	66 89 86 56 23
	00 00		 mov	 WORD PTR [esi+9046], ax
$L71446:

; 2042 : 				//WINprintf ("f0prime2 %d \n", pDph_t->f0prime);
; 2043 : 			}
; 2044 : 		}
; 2045 : 		
; 2046 : 		
; 2047 : 		/*    See if f0 exceeds legal bounds, truncate  */
; 2048 :         if (pDph_t->f0prime > HIGHEST_F0) {

  00c2b	66 8b 86 56 23
	00 00		 mov	 ax, WORD PTR [esi+9046]
  00c32	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  00c36	7e 0b		 jle	 SHORT $L71448

; 2049 : 			pDph_t->f0prime = HIGHEST_F0;

  00c38	66 c7 86 56 23
	00 00 01 14	 mov	 WORD PTR [esi+9046], 5121 ; 00001401H

; 2050 : 		}
; 2051 :         else if (pDph_t->f0prime < LOWEST_F0) {

  00c41	eb 0f		 jmp	 SHORT $L71450
$L71448:
  00c43	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  00c47	7d 09		 jge	 SHORT $L71450

; 2052 : 			pDph_t->f0prime = LOWEST_F0;

  00c49	66 c7 86 56 23
	00 00 f4 01	 mov	 WORD PTR [esi+9046], 500 ; 000001f4H
$L71450:

; 2053 : 		}
; 2054 : 		
; 2055 : 		/*    Change from Middle C = 256 Hz (A = 430.4) to A = 440 Hz (SHOULD RE-DO */
; 2056 : 		/*    TABLE INSTEAD) */
; 2057 : 		if (pDph_t->f0mode== SINGING) 

  00c52	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  00c59	75 22		 jne	 SHORT $L71451

; 2058 : 		{
; 2059 : 			pDph_t->f0prime = frac4mul(pDph_t->f0prime,4190);

  00c5b	0f bf 86 56 23
	00 00		 movsx	 eax, WORD PTR [esi+9046]
  00c62	8b d0		 mov	 edx, eax
  00c64	c1 e2 06	 shl	 edx, 6
  00c67	03 d0		 add	 edx, eax
  00c69	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00c6c	c1 e1 04	 shl	 ecx, 4
  00c6f	2b c8		 sub	 ecx, eax
  00c71	d1 e1		 shl	 ecx, 1
  00c73	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00c76	66 89 8e 56 23
	00 00		 mov	 WORD PTR [esi+9046], cx
$L71451:

; 2060 : 		}
; 2061 : 		
; 2062 : 		/*    Save value of period t0 in parameter array  */
; 2063 : 		/*    (ONLY ESSENTIAL DIVIDE INSTRUCTION IN ALL OF DECTALK) */
; 2064 : 		//pDph_t->arg1 = 400;
; 2065 : 		/* 2/12/99  eab adjusted for sample in vtm.c*/
; 2066 : 		//pDph_t->arg2 = 1000;
; 2067 : 		//pDph_t->arg3 = pDph_t->f0prime;
; 2068 :         temp = muldv(400, 1000, pDph_t->f0prime);
; 2069 : 		pDph_t->parstochip[OUT_T0]  = temp;

  00c7d	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  00c84	b8 80 1a 06 00	 mov	 eax, 400000		; 00061a80H
  00c89	99		 cdq
  00c8a	f7 f9		 idiv	 ecx
  00c8c	66 89 86 b0 03
	00 00		 mov	 WORD PTR [esi+944], ax

; 2070 : #ifdef HLSYN
; 2071 : 		pDph_t->parstochip[OUT_T0]  =pDph_t->f0prime;
; 2072 : #endif 
; 2073 : 		
; 2074 : 		
; 2075 : 		
; 2076 : 		// tarbas, tarhat, tarimp, f0in, f0prime
; 2077 : 		//printf ("%2s, %4d, %4d, %4d, %4d, %4d,\n", 
; 2078 : 		//    phprint(pDphsettar->phocur), pDphsettar->tarbas, pDphsettar->tarhat,
; 2079 : 		//     pDphsettar->tarimp, f0in, pDph_t->f0prime);  //MD
; 2080 : 		
; 2081 : 		//WINprintf("f0minimum %4d, f0scalefac %4d\n", 
; 2082 : 		//    pDph_t->f0minimum, pDph_t->f0scalefac);
; 2083 : 		
; 2084 : 		
; 2085 : #ifdef GRAPHF0
; 2086 : 		
; 2087 : 		for (icnt=0;icnt<=120;icnt++)
; 2088 : 		{
; 2089 : 			prntbuf[icnt]=' ';
; 2090 : 		}
; 2091 : 		prntbuf[120]='\0';
; 2092 : 		if(pDph_t->malfem == FEMALE) /* Female or childs voice scale to fit*/
; 2093 : 			icnt=((pDph_t->f0prime)/30);
; 2094 : 		else
; 2095 : 			icnt=((pDph_t->f0prime)/10)-50;
; 2096 : 		if(icnt >=120)
; 2097 : 			icnt=119;
; 2098 : 		prntbuf[icnt]='*';
; 2099 : 		WINprintf("%d",pDph_t->f0prime);
; 2100 : 		WINprintf("%s\n",prntbuf);
; 2101 : 		
; 2102 : 		
; 2103 : #endif
; 2104 : 		/*
; 2105 : 		WINprintf("TARBAS %d phone %d  tarhat=%3d tarimp=%3d  f0 =%d \n",
; 2106 :         pDphsettar->tarbas,pDph_t->allophons[pDphsettar->npg],pDphsettar->tarhat, pDphsettar->tarimp,
; 2107 : 		pDph_t->f0prime); */
; 2108 : 		//	 if(0)
; 2109 : 		//	 pDph_t->parstochip[OUT_T0]=of0array[oarcnt++];
; 2110 : 		
; 2111 : 		/* debug switch */
; 2112 : 		if (((pKsd_t->logflag) & LOG_OUTPHON) || DT_DBG(PH_DBG,0x008))

  00c93	8b 44 24 14	 mov	 eax, DWORD PTR _pKsd_t$[esp+24]
  00c97	f6 80 c4 03 00
	00 20		 test	 BYTE PTR [eax+964], 32	; 00000020H
  00c9e	75 18		 jne	 SHORT $L71454
  00ca0	66 8b 80 40 06
	00 00		 mov	 ax, WORD PTR [eax+1600]
  00ca7	f6 c4 20	 test	 ah, 32			; 00000020H
  00caa	0f 84 01 0e 00
	00		 je	 $L71455
  00cb0	a8 08		 test	 al, 8
  00cb2	0f 84 f9 0d 00
	00		 je	 $L71455
$L71454:

; 2113 : 		{
; 2114 : #ifdef MSDBG4
; 2115 : 			if (pDphsettar->lastone==-1)
; 2116 : 			{
; 2117 : 				for (keepdur=0;keepdur<TOT_ALLOPHONES;keepdur++)
; 2118 : 				{
; 2119 : 					printf("phone#=%d == %c%c\n",keepdur,pKsd_t->arpabet[keepdur <<1],pKsd_t->arpabet[(keepdur <<1)+1]);
; 2120 : 				}  
; 2121 : 			}
; 2122 : #endif
; 2123 : 			/* if (np == 0 && allophons[np] == GEN_SIL) { lastone=np; }   */
; 2124 : 			if (pDphsettar->np_drawt0 != pDphsettar->lastone)

  00cb8	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  00cbc	66 3b 47 70	 cmp	 ax, WORD PTR [edi+112]
  00cc0	0f 84 eb 0d 00
	00		 je	 $L71455

; 2125 : 			{
; 2126 : #ifdef MSDBG4 
; 2127 : 				printf("lastone=%d f0prime=%d\n",pDphsettar->lastone,pDph_t->f0prime/10);
; 2128 : 				printf ("allophons[%d]=%d ", pDphsettar->np_drawt0, pDph_t->allophons[pDphsettar->np_drawt0]);
; 2129 : 				printf ("allodurs[%d]=%d\n", pDphsettar->np_drawt0, pDph_t->allodurs[pDphsettar->np_drawt0]*64/10);
; 2130 : #endif
; 2131 : 				if ((pDphsettar->np_drawt0 >= 0))

  00cc6	66 3b c3	 cmp	 ax, bx
  00cc9	0f 8c da 0d 00
	00		 jl	 $L71460

; 2132 : 				{
; 2133 : 					
; 2134 : #ifdef MSDOS
; 2135 : 					/*WAIT_PRINT;*/
; 2136 : 					dologphoneme (pDph_t->allophons[pDphsettar->np_drawt0],
; 2137 : 						(pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 2138 : 						(pDph_t->f0prime / 10));
; 2139 : 					printf("\n");
; 2140 : 					/*SIGNAL_PRINT;*/
; 2141 : #else
; 2142 : 					dologphoneme (phTTS, pDph_t->allophons[pDphsettar->np_drawt0],
; 2143 : 						(short)  (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 2144 : 						(short) (pDph_t->f0prime / 10));

  00ccf	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  00cd6	0f bf e8	 movsx	 ebp, ax
  00cd9	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00cde	f7 e9		 imul	 ecx
  00ce0	c1 fa 02	 sar	 edx, 2
  00ce3	8b c2		 mov	 eax, edx
  00ce5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ce8	03 d0		 add	 edx, eax
  00cea	0f bf 84 6e 9c
	0d 00 00	 movsx	 eax, WORD PTR [esi+ebp*2+3484]
  00cf2	52		 push	 edx
  00cf3	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00cf6	c1 e1 03	 shl	 ecx, 3
  00cf9	2b c8		 sub	 ecx, eax
  00cfb	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00d00	f7 e9		 imul	 ecx
  00d02	c1 fa 02	 sar	 edx, 2
  00d05	8b ca		 mov	 ecx, edx
  00d07	8b 44 24 20	 mov	 eax, DWORD PTR _phTTS$[esp+24]
  00d0b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00d0e	03 d1		 add	 edx, ecx
  00d10	52		 push	 edx
  00d11	66 8b 94 6e ec
	03 00 00	 mov	 dx, WORD PTR [esi+ebp*2+1004]
  00d19	52		 push	 edx
  00d1a	50		 push	 eax
  00d1b	e8 00 00 00 00	 call	 _dologphoneme

; 2145 : #ifdef PRINTFDEBUG
; 2146 : 					printf ("\n");
; 2147 : #endif
; 2148 : 					if (pKsd_t->logflag & LOG_OUTPHON)

  00d20	8b 4c 24 24	 mov	 ecx, DWORD PTR _pKsd_t$[esp+40]
  00d24	83 c4 10	 add	 esp, 16			; 00000010H
  00d27	f6 81 c4 03 00
	00 20		 test	 BYTE PTR [ecx+964], 32	; 00000020H
  00d2e	0f 84 75 0d 00
	00		 je	 $L71460

; 2149 : 					{
; 2150 : 						if (fprintf (phTTS->pLogFile, "\n") < 0)

  00d34	8b 74 24 1c	 mov	 esi, DWORD PTR _phTTS$[esp+20]
  00d38	68 00 00 00 00	 push	 OFFSET FLAT:$SG71461
  00d3d	8b 96 9c 00 00
	00		 mov	 edx, DWORD PTR [esi+156]
  00d43	52		 push	 edx
  00d44	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00d4a	83 c4 08	 add	 esp, 8
  00d4d	85 c0		 test	 eax, eax
  00d4f	0f 8d 54 0d 00
	00		 jge	 $L71460

; 2151 : 						{
; 2152 : 							TextToSpeechErrorHandler (phTTS,
; 2153 : 								ERROR_WRITING_FILE,
; 2154 : 								0L);
; 2155 : 						}
; 2156 : 					}
; 2157 : #endif
; 2158 : 				}
; 2159 : 				/* keepdur = (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10); */		/* eab need to keep orig value of dur */ 
; 2160 : 				/* keepallo = pDph_t->allophons[pDphsettar->np_drawt0]; */
; 2161 : 				pDphsettar->lastone = pDphsettar->np_drawt0;
; 2162 : 			}
; 2163 : 		}
; 2164 : 		
; 2165 : 		/*    Increment time counters */
; 2166 :         pDphsettar->nfram++;
; 2167 :         pDphsettar->nframs++;
; 2168 :         pDphsettar->nframg++;
; 2169 : 		
; 2170 : #ifndef MSDOS
; 2171 : 		//eab BATS 887 this is the wrong place to output them....
; 2172 : 		//pDph_t->parstochip[OUT_PH] = pDph_t->allophons[pDphsettar->np_drawt0];
; 2173 : 		//pDph_t->parstochip[OUT_DU] = pDph_t->allodurs[pDphsettar->np_drawt0];
; 2174 : #endif
; 2175 : 		
; 2176 : 		
; 2177 : 		
; 2178 : 		
; 2179 : }/*end of if malfem==male*/
; 2180 : else

  00d55	e9 43 0d 00 00	 jmp	 $L71664
$L71364:

; 2181 : {
; 2182 : 	if (pDph_t->nf0ev <= -2) 

  00d5a	83 cd ff	 or	 ebp, -1
  00d5d	66 83 be 52 23
	00 00 fe	 cmp	 WORD PTR [esi+9042], -2	; fffffffeH
  00d65	0f 8f 18 04 00
	00		 jg	 $L71463

; 2183 : 	{
; 2184 : 		/* Hard initialization */
; 2185 : 		/* for now hardcode baseline for init experimentation eab 8/96*/
; 2186 : 		/* eab BUG- found problem with f0command, it needs to be a global variable
; 2187 : 		or it sometimes doesn't get handled correctly*/
; 2188 : 		pDph_t->clausepos=0;

  00d6b	66 89 9e ee 14
	00 00		 mov	 WORD PTR [esi+5358], bx

; 2189 : 		pDphsettar->phocur = GEN_SIL;

  00d72	66 c7 47 44 00
	1e		 mov	 WORD PTR [edi+68], 7680	; 00001e00H

; 2190 : 		
; 2191 : 		/*Question*/
; 2192 : 		pDph_t->glotalize =0;

  00d78	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 2193 : 		pDphsettar->glide_step=0;
; 2194 : 		
; 2195 : 		
; 2196 : #ifdef GERMAN
; 2197 : 		
; 2198 : 		
; 2199 : 		/* DECLARATIVE*/		/*
; 2200 : 								pDph_t->f0basetypes[0][0]=1887; 
; 2201 : 								pDph_t->f0basetypes[0][1]=1865; 
; 2202 : 								pDph_t->f0basetypes[0][2]=1839; 
; 2203 : 								pDph_t->f0basetypes[0][3]=1827; 
; 2204 : 								pDph_t->f0basetypes[0][4]=1813; 
; 2205 : 								pDph_t->f0basetypes[0][5]=1809; 
; 2206 : 								pDph_t->f0basetypes[0][6]=1795; 
; 2207 : 								pDph_t->f0basetypes[0][7]=1782; 
; 2208 : 								pDph_t->f0basetypes[0][8]=1779; 
; 2209 : 								pDph_t->f0basetypes[0][9]=1765; 
; 2210 : 								pDph_t->f0basetypes[0][10]=1763; 
; 2211 : 								pDph_t->f0basetypes[0][11]=1750; 
; 2212 : 								pDph_t->f0basetypes[0][12]=1738; 
; 2213 : 								pDph_t->f0basetypes[0][13]=1714; 
; 2214 : 								pDph_t->f0basetypes[0][14]=1700; 
; 2215 : 								pDph_t->f0basetypes[0][15]=1694; 
; 2216 : 		pDph_t->f0basetypes[0][16]=1678; */
; 2217 : 		/* DECLARATIVE*/		
; 2218 : 		pDph_t->f0basetypes[0][0]=2270; 
; 2219 : 		pDph_t->f0basetypes[0][1]=2270; 
; 2220 : 		pDph_t->f0basetypes[0][2]=2265;
; 2221 : 		pDph_t->f0basetypes[0][3]=2222;
; 2222 : 		pDph_t->f0basetypes[0][4]=2120;
; 2223 : 		pDph_t->f0basetypes[0][5]=1930;
; 2224 : 		pDph_t->f0basetypes[0][6]=1910;
; 2225 : 		pDph_t->f0basetypes[0][7]=1900;
; 2226 : 		pDph_t->f0basetypes[0][8]=1870;
; 2227 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2228 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2229 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2230 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2231 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2232 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2233 : 		pDph_t->f0basetypes[0][15]=1600; 
; 2234 : 		pDph_t->f0basetypes[0][16]=1560; 
; 2235 : 		
; 2236 : 		/*comma*/
; 2237 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2238 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2239 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2240 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2241 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2242 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2243 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2244 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2245 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2246 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2247 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2248 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2249 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2250 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2251 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2252 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2253 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2254 : 		
; 2255 : 		/*excalamatory*/
; 2256 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2257 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2258 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2259 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2260 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2261 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2262 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2263 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2264 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2265 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2266 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2267 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2268 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2269 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2270 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2271 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2272 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2273 : 		
; 2274 : 		/*question*/
; 2275 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2276 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2277 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2278 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2279 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2280 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2281 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2282 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2283 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2284 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2285 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2286 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2287 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2288 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2289 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2290 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2291 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2292 : 		
; 2293 : 		
; 2294 : 		/* short phrase */	
; 2295 : 		pDph_t->f0basetypes[4][0]=1890; 
; 2296 : 		pDph_t->f0basetypes[4][1]=1880; 
; 2297 : 		pDph_t->f0basetypes[4][2]=1870; 
; 2298 : 		pDph_t->f0basetypes[4][3]=1850; 
; 2299 : 		pDph_t->f0basetypes[4][4]=1860; 
; 2300 : 		pDph_t->f0basetypes[4][5]=1840; 
; 2301 : 		pDph_t->f0basetypes[4][6]=1820; 
; 2302 : 		pDph_t->f0basetypes[4][7]=1814; 
; 2303 : 		pDph_t->f0basetypes[4][8]=1828; 
; 2304 : 		pDph_t->f0basetypes[4][9]=1804; 
; 2305 : 		pDph_t->f0basetypes[4][10]=1790; 
; 2306 : 		pDph_t->f0basetypes[4][11]=1780; 
; 2307 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2308 : 		pDph_t->f0basetypes[4][13]=1760; 
; 2309 : 		pDph_t->f0basetypes[4][14]=1750; 
; 2310 : 		pDph_t->f0basetypes[4][15]=1732; 
; 2311 : 		pDph_t->f0basetypes[4][16]=1700; 
; 2312 : 		
; 2313 : #endif
; 2314 : 		
; 2315 : #ifdef  ENGLISH_US 
; 2316 : 		
; 2317 : 		
; 2318 : 		/* DECLARATIVE*/		
; 2319 : 		
; 2320 : 		pDph_t->f0basetypes[0][0]=1687; 

  00d7f	ba 97 06 00 00	 mov	 edx, 1687		; 00000697H
  00d84	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx
  00d88	66 89 96 38 20
	00 00		 mov	 WORD PTR [esi+8248], dx

; 2321 : 		pDph_t->f0basetypes[0][1]=1657; 

  00d8f	66 c7 86 3a 20
	00 00 79 06	 mov	 WORD PTR [esi+8250], 1657 ; 00000679H

; 2322 : 		pDph_t->f0basetypes[0][2]=1629; 

  00d98	66 c7 86 3c 20
	00 00 5d 06	 mov	 WORD PTR [esi+8252], 1629 ; 0000065dH

; 2323 : 		pDph_t->f0basetypes[0][3]=1607; 

  00da1	66 c7 86 3e 20
	00 00 47 06	 mov	 WORD PTR [esi+8254], 1607 ; 00000647H

; 2324 : 		pDph_t->f0basetypes[0][4]=1673; 
; 2325 : 		pDph_t->f0basetypes[0][5]=1639; 

  00daa	b8 67 06 00 00	 mov	 eax, 1639		; 00000667H
  00daf	66 c7 86 40 20
	00 00 89 06	 mov	 WORD PTR [esi+8256], 1673 ; 00000689H

; 2326 : 		pDph_t->f0basetypes[0][6]=1605; 

  00db8	b9 45 06 00 00	 mov	 ecx, 1605		; 00000645H
  00dbd	66 89 86 42 20
	00 00		 mov	 WORD PTR [esi+8258], ax
  00dc4	66 89 8e 44 20
	00 00		 mov	 WORD PTR [esi+8260], cx

; 2327 : 		pDph_t->f0basetypes[0][7]=1672; 

  00dcb	66 c7 86 46 20
	00 00 88 06	 mov	 WORD PTR [esi+8262], 1672 ; 00000688H

; 2328 : 		pDph_t->f0basetypes[0][8]=1639; 

  00dd4	66 89 86 48 20
	00 00		 mov	 WORD PTR [esi+8264], ax

; 2329 : 		pDph_t->f0basetypes[0][9]=1605; 

  00ddb	66 89 8e 4a 20
	00 00		 mov	 WORD PTR [esi+8266], cx

; 2330 : 		pDph_t->f0basetypes[0][10]=1653; 

  00de2	66 c7 86 4c 20
	00 00 75 06	 mov	 WORD PTR [esi+8268], 1653 ; 00000675H

; 2331 : 		pDph_t->f0basetypes[0][11]=1620; 

  00deb	66 c7 86 4e 20
	00 00 54 06	 mov	 WORD PTR [esi+8270], 1620 ; 00000654H

; 2332 : 		pDph_t->f0basetypes[0][12]=1698; 

  00df4	66 c7 86 50 20
	00 00 a2 06	 mov	 WORD PTR [esi+8272], 1698 ; 000006a2H

; 2333 : 		pDph_t->f0basetypes[0][13]=1614; 

  00dfd	66 c7 86 52 20
	00 00 4e 06	 mov	 WORD PTR [esi+8274], 1614 ; 0000064eH

; 2334 : 		pDph_t->f0basetypes[0][14]=1600; 

  00e06	66 c7 86 54 20
	00 00 40 06	 mov	 WORD PTR [esi+8276], 1600 ; 00000640H

; 2335 : 		pDph_t->f0basetypes[0][15]=1694; 

  00e0f	66 c7 86 56 20
	00 00 9e 06	 mov	 WORD PTR [esi+8278], 1694 ; 0000069eH

; 2336 : 		pDph_t->f0basetypes[0][16]=1678; 

  00e18	66 c7 86 58 20
	00 00 8e 06	 mov	 WORD PTR [esi+8280], 1678 ; 0000068eH

; 2337 : 		
; 2338 : 		/*comma*/
; 2339 : 		pDph_t->f0basetypes[1][0]=1687; 

  00e21	66 89 96 5a 20
	00 00		 mov	 WORD PTR [esi+8282], dx

; 2340 : 		pDph_t->f0basetypes[1][1]=1665; 

  00e28	66 c7 86 5c 20
	00 00 81 06	 mov	 WORD PTR [esi+8284], 1665 ; 00000681H

; 2341 : 		pDph_t->f0basetypes[1][2]=1639; 

  00e31	66 89 86 5e 20
	00 00		 mov	 WORD PTR [esi+8286], ax

; 2342 : 		pDph_t->f0basetypes[1][3]=1627; 

  00e38	66 c7 86 60 20
	00 00 5b 06	 mov	 WORD PTR [esi+8288], 1627 ; 0000065bH

; 2343 : 		pDph_t->f0basetypes[1][4]=1613; 

  00e41	66 c7 86 62 20
	00 00 4d 06	 mov	 WORD PTR [esi+8290], 1613 ; 0000064dH

; 2344 : 		pDph_t->f0basetypes[1][5]=1609; 

  00e4a	66 c7 86 64 20
	00 00 49 06	 mov	 WORD PTR [esi+8292], 1609 ; 00000649H

; 2345 : 		pDph_t->f0basetypes[1][6]=1585; 

  00e53	66 c7 86 66 20
	00 00 31 06	 mov	 WORD PTR [esi+8294], 1585 ; 00000631H

; 2346 : 		pDph_t->f0basetypes[1][7]=1562; 

  00e5c	66 c7 86 68 20
	00 00 1a 06	 mov	 WORD PTR [esi+8296], 1562 ; 0000061aH

; 2347 : 		pDph_t->f0basetypes[1][8]=1549; 

  00e65	66 c7 86 6a 20
	00 00 0d 06	 mov	 WORD PTR [esi+8298], 1549 ; 0000060dH

; 2348 : 		pDph_t->f0basetypes[1][9]=1525; 

  00e6e	66 c7 86 6c 20
	00 00 f5 05	 mov	 WORD PTR [esi+8300], 1525 ; 000005f5H

; 2349 : 		pDph_t->f0basetypes[1][10]=1503; 

  00e77	66 c7 86 6e 20
	00 00 df 05	 mov	 WORD PTR [esi+8302], 1503 ; 000005dfH

; 2350 : 		pDph_t->f0basetypes[1][11]=1510; 

  00e80	66 c7 86 70 20
	00 00 e6 05	 mov	 WORD PTR [esi+8304], 1510 ; 000005e6H

; 2351 : 		pDph_t->f0basetypes[1][12]=1518; 

  00e89	66 c7 86 72 20
	00 00 ee 05	 mov	 WORD PTR [esi+8306], 1518 ; 000005eeH

; 2352 : 		pDph_t->f0basetypes[1][13]=1564; 

  00e92	66 c7 86 74 20
	00 00 1c 06	 mov	 WORD PTR [esi+8308], 1564 ; 0000061cH

; 2353 : 		pDph_t->f0basetypes[1][14]=1550; 

  00e9b	66 c7 86 76 20
	00 00 0e 06	 mov	 WORD PTR [esi+8310], 1550 ; 0000060eH

; 2354 : 		pDph_t->f0basetypes[1][15]=1544; 

  00ea4	66 c7 86 78 20
	00 00 08 06	 mov	 WORD PTR [esi+8312], 1544 ; 00000608H

; 2355 : 		pDph_t->f0basetypes[1][16]=1538; 

  00ead	66 c7 86 7a 20
	00 00 02 06	 mov	 WORD PTR [esi+8314], 1538 ; 00000602H

; 2356 : 		
; 2357 : 		/*excalamatory*/
; 2358 : 		pDph_t->f0basetypes[2][0]=1787; 

  00eb6	66 c7 86 7c 20
	00 00 fb 06	 mov	 WORD PTR [esi+8316], 1787 ; 000006fbH

; 2359 : 		pDph_t->f0basetypes[2][1]=1765; 

  00ebf	66 c7 86 7e 20
	00 00 e5 06	 mov	 WORD PTR [esi+8318], 1765 ; 000006e5H

; 2360 : 		pDph_t->f0basetypes[2][2]=1739; 

  00ec8	66 c7 86 80 20
	00 00 cb 06	 mov	 WORD PTR [esi+8320], 1739 ; 000006cbH

; 2361 : 		pDph_t->f0basetypes[2][3]=1727; 

  00ed1	66 c7 86 82 20
	00 00 bf 06	 mov	 WORD PTR [esi+8322], 1727 ; 000006bfH

; 2362 : 		pDph_t->f0basetypes[2][4]=1713; 

  00eda	66 c7 86 84 20
	00 00 b1 06	 mov	 WORD PTR [esi+8324], 1713 ; 000006b1H

; 2363 : 		pDph_t->f0basetypes[2][5]=1709; 

  00ee3	66 c7 86 86 20
	00 00 ad 06	 mov	 WORD PTR [esi+8326], 1709 ; 000006adH

; 2364 : 		pDph_t->f0basetypes[2][6]=1685; 

  00eec	66 c7 86 88 20
	00 00 95 06	 mov	 WORD PTR [esi+8328], 1685 ; 00000695H

; 2365 : 		pDph_t->f0basetypes[2][7]=1662; 

  00ef5	66 c7 86 8a 20
	00 00 7e 06	 mov	 WORD PTR [esi+8330], 1662 ; 0000067eH

; 2366 : 		pDph_t->f0basetypes[2][8]=1649; 

  00efe	66 c7 86 8c 20
	00 00 71 06	 mov	 WORD PTR [esi+8332], 1649 ; 00000671H

; 2367 : 		pDph_t->f0basetypes[2][9]=1625; 

  00f07	66 c7 86 8e 20
	00 00 59 06	 mov	 WORD PTR [esi+8334], 1625 ; 00000659H

; 2368 : 		pDph_t->f0basetypes[2][10]=1606; 
; 2369 : 		pDph_t->f0basetypes[2][11]=1686; 
; 2370 : 		pDph_t->f0basetypes[2][12]=1716; 
; 2371 : 		pDph_t->f0basetypes[2][13]=1734; 
; 2372 : 		pDph_t->f0basetypes[2][14]=1760; 
; 2373 : 		pDph_t->f0basetypes[2][15]=1784; 
; 2374 : 		pDph_t->f0basetypes[2][16]=1798; 
; 2375 : 		
; 2376 : 		/*question*/
; 2377 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2378 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2379 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2380 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2381 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2382 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2383 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2384 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2385 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2386 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2387 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2388 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2389 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2390 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2391 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2392 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2393 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2394 : 		
; 2395 : 		
; 2396 : 		/* short phrase */	
; 2397 : 		pDph_t->f0basetypes[4][0]=1890; 
; 2398 : 		pDph_t->f0basetypes[4][1]=1880; 

  00f10	b8 58 07 00 00	 mov	 eax, 1880		; 00000758H
  00f15	66 c7 86 c0 20
	00 00 62 07	 mov	 WORD PTR [esi+8384], 1890 ; 00000762H
  00f1e	66 89 86 c2 20
	00 00		 mov	 WORD PTR [esi+8386], ax

; 2399 : 		pDph_t->f0basetypes[4][2]=1880; 

  00f25	66 89 86 c4 20
	00 00		 mov	 WORD PTR [esi+8388], ax

; 2400 : 		pDph_t->f0basetypes[4][3]=1870; 

  00f2c	b8 4e 07 00 00	 mov	 eax, 1870		; 0000074eH
  00f31	66 c7 86 90 20
	00 00 46 06	 mov	 WORD PTR [esi+8336], 1606 ; 00000646H
  00f3a	66 c7 86 92 20
	00 00 96 06	 mov	 WORD PTR [esi+8338], 1686 ; 00000696H
  00f43	66 c7 86 94 20
	00 00 b4 06	 mov	 WORD PTR [esi+8340], 1716 ; 000006b4H
  00f4c	66 c7 86 96 20
	00 00 c6 06	 mov	 WORD PTR [esi+8342], 1734 ; 000006c6H
  00f55	66 c7 86 98 20
	00 00 e0 06	 mov	 WORD PTR [esi+8344], 1760 ; 000006e0H
  00f5e	66 c7 86 9a 20
	00 00 f8 06	 mov	 WORD PTR [esi+8346], 1784 ; 000006f8H
  00f67	66 c7 86 9c 20
	00 00 06 07	 mov	 WORD PTR [esi+8348], 1798 ; 00000706H
  00f70	66 c7 86 9e 20
	00 00 5f 07	 mov	 WORD PTR [esi+8350], 1887 ; 0000075fH
  00f79	66 c7 86 a0 20
	00 00 49 07	 mov	 WORD PTR [esi+8352], 1865 ; 00000749H
  00f82	66 c7 86 a2 20
	00 00 2f 07	 mov	 WORD PTR [esi+8354], 1839 ; 0000072fH
  00f8b	66 c7 86 a4 20
	00 00 23 07	 mov	 WORD PTR [esi+8356], 1827 ; 00000723H
  00f94	66 c7 86 a6 20
	00 00 15 07	 mov	 WORD PTR [esi+8358], 1813 ; 00000715H
  00f9d	66 c7 86 a8 20
	00 00 11 07	 mov	 WORD PTR [esi+8360], 1809 ; 00000711H
  00fa6	66 c7 86 aa 20
	00 00 f9 06	 mov	 WORD PTR [esi+8362], 1785 ; 000006f9H
  00faf	66 c7 86 ac 20
	00 00 e2 06	 mov	 WORD PTR [esi+8364], 1762 ; 000006e2H
  00fb8	66 c7 86 ae 20
	00 00 d5 06	 mov	 WORD PTR [esi+8366], 1749 ; 000006d5H
  00fc1	66 c7 86 b0 20
	00 00 bd 06	 mov	 WORD PTR [esi+8368], 1725 ; 000006bdH
  00fca	66 c7 86 b2 20
	00 00 a7 06	 mov	 WORD PTR [esi+8370], 1703 ; 000006a7H
  00fd3	66 c7 86 b4 20
	00 00 bc 07	 mov	 WORD PTR [esi+8372], 1980 ; 000007bcH
  00fdc	66 c7 86 b6 20
	00 00 b0 07	 mov	 WORD PTR [esi+8374], 1968 ; 000007b0H
  00fe5	66 c7 86 b8 20
	00 00 98 07	 mov	 WORD PTR [esi+8376], 1944 ; 00000798H
  00fee	66 c7 86 ba 20
	00 00 a8 07	 mov	 WORD PTR [esi+8378], 1960 ; 000007a8H
  00ff7	66 c7 86 bc 20
	00 00 b6 07	 mov	 WORD PTR [esi+8380], 1974 ; 000007b6H
  01000	66 c7 86 be 20
	00 00 b6 06	 mov	 WORD PTR [esi+8382], 1718 ; 000006b6H
  01009	66 89 86 c6 20
	00 00		 mov	 WORD PTR [esi+8390], ax

; 2401 : 		pDph_t->f0basetypes[4][4]=1870; 

  01010	66 89 86 c8 20
	00 00		 mov	 WORD PTR [esi+8392], ax

; 2402 : 		pDph_t->f0basetypes[4][5]=1860; 

  01017	b8 44 07 00 00	 mov	 eax, 1860		; 00000744H
  0101c	66 89 86 ca 20
	00 00		 mov	 WORD PTR [esi+8394], ax

; 2403 : 		pDph_t->f0basetypes[4][6]=1860; 

  01023	66 89 86 cc 20
	00 00		 mov	 WORD PTR [esi+8396], ax

; 2404 : 		pDph_t->f0basetypes[4][7]=1854; 

  0102a	66 c7 86 ce 20
	00 00 3e 07	 mov	 WORD PTR [esi+8398], 1854 ; 0000073eH

; 2405 : 		pDph_t->f0basetypes[4][8]=1858; 

  01033	66 c7 86 d0 20
	00 00 42 07	 mov	 WORD PTR [esi+8400], 1858 ; 00000742H

; 2406 : 		pDph_t->f0basetypes[4][9]=1844; 

  0103c	66 c7 86 d2 20
	00 00 34 07	 mov	 WORD PTR [esi+8402], 1844 ; 00000734H

; 2407 : 		pDph_t->f0basetypes[4][10]=1840; 
; 2408 : 		pDph_t->f0basetypes[4][11]=1830; 

  01045	b8 26 07 00 00	 mov	 eax, 1830		; 00000726H
  0104a	66 c7 86 d4 20
	00 00 30 07	 mov	 WORD PTR [esi+8404], 1840 ; 00000730H
  01053	66 89 86 d6 20
	00 00		 mov	 WORD PTR [esi+8406], ax

; 2409 : 		pDph_t->f0basetypes[4][12]=1830; 

  0105a	66 89 86 d8 20
	00 00		 mov	 WORD PTR [esi+8408], ax

; 2410 : 		pDph_t->f0basetypes[4][13]=1820; 

  01061	b8 1c 07 00 00	 mov	 eax, 1820		; 0000071cH
  01066	66 89 86 da 20
	00 00		 mov	 WORD PTR [esi+8410], ax

; 2411 : 		pDph_t->f0basetypes[4][14]=1820; 

  0106d	66 89 86 dc 20
	00 00		 mov	 WORD PTR [esi+8412], ax

; 2412 : 		pDph_t->f0basetypes[4][15]=1812; 

  01074	66 c7 86 de 20
	00 00 14 07	 mov	 WORD PTR [esi+8414], 1812 ; 00000714H

; 2413 : 		pDph_t->f0basetypes[4][16]=1810; 

  0107d	66 c7 86 e0 20
	00 00 12 07	 mov	 WORD PTR [esi+8416], 1810 ; 00000712H

; 2414 : 		
; 2415 : 		
; 2416 : 		/* short phrase 
; 2417 : 		pDph_t->f0basetypes[4][0]=1830; 
; 2418 : 		pDph_t->f0basetypes[4][1]=2040; 
; 2419 : 		pDph_t->f0basetypes[4][2]=1920; 
; 2420 : 		pDph_t->f0basetypes[4][3]=2000; 
; 2421 : 		pDph_t->f0basetypes[4][4]=1960; 
; 2422 : 		pDph_t->f0basetypes[4][5]=1920; 
; 2423 : 		pDph_t->f0basetypes[4][6]=1910; 
; 2424 : 		pDph_t->f0basetypes[4][7]=1804; 
; 2425 : 		pDph_t->f0basetypes[4][8]=1801; 
; 2426 : 		pDph_t->f0basetypes[4][9]=1794; 
; 2427 : 		pDph_t->f0basetypes[4][10]=1780; 
; 2428 : 		pDph_t->f0basetypes[4][11]=1790; 
; 2429 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2430 : 		pDph_t->f0basetypes[4][13]=1750; 
; 2431 : 		pDph_t->f0basetypes[4][14]=1730; 
; 2432 : 		pDph_t->f0basetypes[4][15]=1720; 
; 2433 : 		pDph_t->f0basetypes[4][16]=1710; 
; 2434 : 		*/
; 2435 : 		
; 2436 : #endif
; 2437 : 		
; 2438 : #ifdef  FRENCH
; 2439 : 		
; 2440 : 		/* DECLARATIVE*/		
; 2441 : 		
; 2442 : 		pDph_t->f0basetypes[0][0]=1757; 
; 2443 : 		pDph_t->f0basetypes[0][1]=1785; 
; 2444 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2445 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2446 : 		pDph_t->f0basetypes[0][4]=1833; 
; 2447 : 		pDph_t->f0basetypes[0][5]=1869; 
; 2448 : 		pDph_t->f0basetypes[0][6]=1945; 
; 2449 : 		pDph_t->f0basetypes[0][7]=1912; 
; 2450 : 		pDph_t->f0basetypes[0][8]=1859; 
; 2451 : 		pDph_t->f0basetypes[0][9]=1835; 
; 2452 : 		pDph_t->f0basetypes[0][10]=1813; 
; 2453 : 		pDph_t->f0basetypes[0][11]=1790; 
; 2454 : 		pDph_t->f0basetypes[0][12]=1778; 
; 2455 : 		pDph_t->f0basetypes[0][13]=1754; 
; 2456 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2457 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2458 : 		pDph_t->f0basetypes[0][16]=1678; 
; 2459 : 		
; 2460 : 		/*comma*/
; 2461 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2462 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2463 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2464 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2465 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2466 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2467 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2468 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2469 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2470 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2471 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2472 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2473 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2474 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2475 : 		pDph_t->f0basetypes[1][14]=1750; 
; 2476 : 		pDph_t->f0basetypes[1][15]=1774; 
; 2477 : 		pDph_t->f0basetypes[1][16]=1798; 
; 2478 : 		
; 2479 : 		/*exclamatory*/
; 2480 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2481 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2482 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2483 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2484 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2485 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2486 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2487 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2488 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2489 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2490 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2491 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2492 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2493 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2494 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2495 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2496 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2497 : 		
; 2498 : 		/*question*/
; 2499 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2500 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2501 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2502 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2503 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2504 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2505 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2506 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2507 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2508 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2509 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2510 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2511 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2512 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2513 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2514 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2515 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2516 : 		
; 2517 : 		
; 2518 : 		/* short phrase */	
; 2519 : 		pDph_t->f0basetypes[4][0]=1890; 
; 2520 : 		pDph_t->f0basetypes[4][1]=1880; 
; 2521 : 		pDph_t->f0basetypes[4][2]=1880; 
; 2522 : 		pDph_t->f0basetypes[4][3]=1870; 
; 2523 : 		pDph_t->f0basetypes[4][4]=1870; 
; 2524 : 		pDph_t->f0basetypes[4][5]=1860; 
; 2525 : 		pDph_t->f0basetypes[4][6]=1860; 
; 2526 : 		pDph_t->f0basetypes[4][7]=1854; 
; 2527 : 		pDph_t->f0basetypes[4][8]=1858; 
; 2528 : 		pDph_t->f0basetypes[4][9]=1844; 
; 2529 : 		pDph_t->f0basetypes[4][10]=1840; 
; 2530 : 		pDph_t->f0basetypes[4][11]=1830; 
; 2531 : 		pDph_t->f0basetypes[4][12]=1830; 
; 2532 : 		pDph_t->f0basetypes[4][13]=1820; 
; 2533 : 		pDph_t->f0basetypes[4][14]=1820; 
; 2534 : 		pDph_t->f0basetypes[4][15]=1812; 
; 2535 : 		pDph_t->f0basetypes[4][16]=1810; 
; 2536 : 		
; 2537 : 		
; 2538 : 		/* short phrase 
; 2539 : 		pDph_t->f0basetypes[4][0]=1830; 
; 2540 : 		pDph_t->f0basetypes[4][1]=2040; 
; 2541 : 		pDph_t->f0basetypes[4][2]=1920; 
; 2542 : 		pDph_t->f0basetypes[4][3]=2000; 
; 2543 : 		pDph_t->f0basetypes[4][4]=1960; 
; 2544 : 		pDph_t->f0basetypes[4][5]=1920; 
; 2545 : 		pDph_t->f0basetypes[4][6]=1910; 
; 2546 : 		pDph_t->f0basetypes[4][7]=1804; 
; 2547 : 		pDph_t->f0basetypes[4][8]=1801; 
; 2548 : 		pDph_t->f0basetypes[4][9]=1794; 
; 2549 : 		pDph_t->f0basetypes[4][10]=1780; 
; 2550 : 		pDph_t->f0basetypes[4][11]=1790; 
; 2551 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2552 : 		pDph_t->f0basetypes[4][13]=1750; 
; 2553 : 		pDph_t->f0basetypes[4][14]=1730; 
; 2554 : 		pDph_t->f0basetypes[4][15]=1720; 
; 2555 : 		pDph_t->f0basetypes[4][16]=1710; 
; 2556 : 		*/
; 2557 : 		
; 2558 : 		
; 2559 : #endif
; 2560 : 		
; 2561 : 		
; 2562 : #ifdef SPANISH
; 2563 : 		
; 2564 : 		
; 2565 : 		/* DECLARATIVE*/		
; 2566 : 		pDph_t->f0basetypes[0][0]=1887; 
; 2567 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2568 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2569 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2570 : 		pDph_t->f0basetypes[0][4]=1813; 
; 2571 : 		pDph_t->f0basetypes[0][5]=1809; 
; 2572 : 		pDph_t->f0basetypes[0][6]=1795; 
; 2573 : 		pDph_t->f0basetypes[0][7]=1782; 
; 2574 : 		pDph_t->f0basetypes[0][8]=1779; 
; 2575 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2576 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2577 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2578 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2579 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2580 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2581 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2582 : 		pDph_t->f0basetypes[0][16]=1678; 
; 2583 : 		
; 2584 : 		/*comma*/
; 2585 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2586 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2587 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2588 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2589 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2590 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2591 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2592 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2593 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2594 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2595 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2596 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2597 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2598 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2599 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2600 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2601 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2602 : 		
; 2603 : 		/*excalamatory*/
; 2604 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2605 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2606 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2607 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2608 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2609 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2610 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2611 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2612 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2613 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2614 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2615 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2616 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2617 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2618 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2619 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2620 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2621 : 		
; 2622 : 		/*question*/
; 2623 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2624 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2625 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2626 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2627 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2628 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2629 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2630 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2631 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2632 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2633 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2634 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2635 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2636 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2637 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2638 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2639 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2640 : 		
; 2641 : 		
; 2642 : 		/* short phrase */	
; 2643 : 		pDph_t->f0basetypes[4][0]=1890; 
; 2644 : 		pDph_t->f0basetypes[4][1]=1880; 
; 2645 : 		pDph_t->f0basetypes[4][2]=1870; 
; 2646 : 		pDph_t->f0basetypes[4][3]=1850; 
; 2647 : 		pDph_t->f0basetypes[4][4]=1860; 
; 2648 : 		pDph_t->f0basetypes[4][5]=1840; 
; 2649 : 		pDph_t->f0basetypes[4][6]=1820; 
; 2650 : 		pDph_t->f0basetypes[4][7]=1814; 
; 2651 : 		pDph_t->f0basetypes[4][8]=1828; 
; 2652 : 		pDph_t->f0basetypes[4][9]=1804; 
; 2653 : 		pDph_t->f0basetypes[4][10]=1790; 
; 2654 : 		pDph_t->f0basetypes[4][11]=1780; 
; 2655 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2656 : 		pDph_t->f0basetypes[4][13]=1760; 
; 2657 : 		pDph_t->f0basetypes[4][14]=1750; 
; 2658 : 		pDph_t->f0basetypes[4][15]=1732; 
; 2659 : 		pDph_t->f0basetypes[4][16]=1700; 
; 2660 : 		
; 2661 : 		
; 2662 : 		/* short phrase 
; 2663 : 		pDph_t->f0basetypes[4][0]=1830; 
; 2664 : 		pDph_t->f0basetypes[4][1]=2040; 
; 2665 : 		pDph_t->f0basetypes[4][2]=1920; 
; 2666 : 		pDph_t->f0basetypes[4][3]=2000; 
; 2667 : 		pDph_t->f0basetypes[4][4]=1960; 
; 2668 : 		pDph_t->f0basetypes[4][5]=1920; 
; 2669 : 		pDph_t->f0basetypes[4][6]=1910; 
; 2670 : 		pDph_t->f0basetypes[4][7]=1804; 
; 2671 : 		pDph_t->f0basetypes[4][8]=1801; 
; 2672 : 		pDph_t->f0basetypes[4][9]=1794; 
; 2673 : 		pDph_t->f0basetypes[4][10]=1780; 
; 2674 : 		pDph_t->f0basetypes[4][11]=1790; 
; 2675 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2676 : 		pDph_t->f0basetypes[4][13]=1750; 
; 2677 : 		pDph_t->f0basetypes[4][14]=1730; 
; 2678 : 		pDph_t->f0basetypes[4][15]=1720; 
; 2679 : 		pDph_t->f0basetypes[4][16]=1710; 
; 2680 : 		*/
; 2681 : 		
; 2682 : #endif
; 2683 : 		
; 2684 : 		
; 2685 : #ifdef ENGLISH_UK
; 2686 : 		
; 2687 : 		/* DECLARATIVE*/		
; 2688 : 		pDph_t->f0basetypes[0][0]=1887; 
; 2689 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2690 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2691 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2692 : 		pDph_t->f0basetypes[0][4]=1813; 
; 2693 : 		pDph_t->f0basetypes[0][5]=1809; 
; 2694 : 		pDph_t->f0basetypes[0][6]=1795; 
; 2695 : 		pDph_t->f0basetypes[0][7]=1782; 
; 2696 : 		pDph_t->f0basetypes[0][8]=1779; 
; 2697 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2698 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2699 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2700 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2701 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2702 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2703 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2704 : 		pDph_t->f0basetypes[0][16]=1688; 
; 2705 : 		
; 2706 : 		/*comma*/
; 2707 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2708 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2709 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2710 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2711 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2712 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2713 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2714 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2715 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2716 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2717 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2718 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2719 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2720 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2721 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2722 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2723 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2724 : 		
; 2725 : 		/*excalamatory*/
; 2726 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2727 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2728 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2729 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2730 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2731 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2732 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2733 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2734 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2735 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2736 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2737 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2738 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2739 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2740 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2741 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2742 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2743 : 		
; 2744 : 		/*question*/
; 2745 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2746 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2747 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2748 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2749 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2750 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2751 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2752 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2753 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2754 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2755 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2756 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2757 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2758 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2759 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2760 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2761 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2762 : 		
; 2763 : 		
; 2764 : 		/* short phrase */	
; 2765 : 		pDph_t->f0basetypes[4][0]=1890; 
; 2766 : 		pDph_t->f0basetypes[4][1]=1880; 
; 2767 : 		pDph_t->f0basetypes[4][2]=1870; 
; 2768 : 		pDph_t->f0basetypes[4][3]=1850; 
; 2769 : 		pDph_t->f0basetypes[4][4]=1860; 
; 2770 : 		pDph_t->f0basetypes[4][5]=1840; 
; 2771 : 		pDph_t->f0basetypes[4][6]=1820; 
; 2772 : 		pDph_t->f0basetypes[4][7]=1814; 
; 2773 : 		pDph_t->f0basetypes[4][8]=1828; 
; 2774 : 		pDph_t->f0basetypes[4][9]=1804; 
; 2775 : 		pDph_t->f0basetypes[4][10]=1790; 
; 2776 : 		pDph_t->f0basetypes[4][11]=1780; 
; 2777 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2778 : 		pDph_t->f0basetypes[4][13]=1760; 
; 2779 : 		pDph_t->f0basetypes[4][14]=1750; 
; 2780 : 		pDph_t->f0basetypes[4][15]=1742; 
; 2781 : 		pDph_t->f0basetypes[4][16]=1730; 
; 2782 : 		
; 2783 : 		
; 2784 : 		/* short phrase 
; 2785 : 		pDph_t->f0basetypes[4][0]=1830; 
; 2786 : 		pDph_t->f0basetypes[4][1]=2040; 
; 2787 : 		pDph_t->f0basetypes[4][2]=1920; 
; 2788 : 		pDph_t->f0basetypes[4][3]=2000; 
; 2789 : 		pDph_t->f0basetypes[4][4]=1960; 
; 2790 : 		pDph_t->f0basetypes[4][5]=1920; 
; 2791 : 		pDph_t->f0basetypes[4][6]=1910; 
; 2792 : 		pDph_t->f0basetypes[4][7]=1804; 
; 2793 : 		pDph_t->f0basetypes[4][8]=1801; 
; 2794 : 		pDph_t->f0basetypes[4][9]=1794; 
; 2795 : 		pDph_t->f0basetypes[4][10]=1780; 
; 2796 : 		pDph_t->f0basetypes[4][11]=1790; 
; 2797 : 		pDph_t->f0basetypes[4][12]=1770; 
; 2798 : 		pDph_t->f0basetypes[4][13]=1750; 
; 2799 : 		pDph_t->f0basetypes[4][14]=1730; 
; 2800 : 		pDph_t->f0basetypes[4][15]=1720; 
; 2801 : 		pDph_t->f0basetypes[4][16]=1710; 
; 2802 : 		*/
; 2803 : #endif
; 2804 : 		
; 2805 : 		
; 2806 : 		
; 2807 : 		
; 2808 : 		/*        Time since last reset of baseline fall, in frames */
; 2809 : 		pDphsettar->nframb = 0;

  01086	66 89 5f 48	 mov	 WORD PTR [edi+72], bx

; 2810 : 		
; 2811 : 		pDphsettar->basetime =0;

  0108a	66 89 5f 36	 mov	 WORD PTR [edi+54], bx

; 2812 : 		pDphsettar->basecntr =0;

  0108e	66 89 5f 32	 mov	 WORD PTR [edi+50], bx

; 2813 : 		pDphsettar->f0delta =0;

  01092	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 2814 : 		
; 2815 : 		
; 2816 : 		
; 2817 : 		/*eab 4/11/97 Moved these variables to a proper place of initlaization*/
; 2818 : 		pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0;	

  01099	66 89 9f 80 00
	00 00		 mov	 WORD PTR [edi+128], bx
  010a0	66 89 9f 82 00
	00 00		 mov	 WORD PTR [edi+130], bx
  010a7	66 89 9f 84 00
	00 00		 mov	 WORD PTR [edi+132], bx

; 2819 : 		
; 2820 : 		/*        If within 32 ms (5 frames) of nframg, glottal stop gesture */
; 2821 : 		/*        is in progress */
; 2822 : 		pDphsettar->tglstp = -200;

  010ae	66 c7 47 50 38
	ff		 mov	 WORD PTR [edi+80], -200	; ffffff38H

; 2823 : 		
; 2824 : 		/*        Set filter memory to init baseline fall (f0 in hz*10) */
; 2825 : 		/* eab 7/22/98 changed to >>1 to account for scaling of female voice*/
; 2826 : 		pDphsettar->f0las1 = (pDphsettar->f0basestart << F0SHFT)>>1;

  010b4	0f bf 8f 86 00
	00 00		 movsx	 ecx, WORD PTR [edi+134]
  010bb	c1 e1 03	 shl	 ecx, 3
  010be	d1 f9		 sar	 ecx, 1
  010c0	66 89 4f 58	 mov	 WORD PTR [edi+88], cx

; 2827 : 		pDphsettar->f0las2 = (pDphsettar->f0basestart << F0SHFT)>>1;
; 2828 : 		oarcnt = 0;
; 2829 : 		pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */
; 2830 : 		pDphsettar->f0slas2 = 0;
; 2831 : 		pDph_t->f0 = pDphsettar->f0basestart;
; 2832 : 		pDphsettar->tarhat = 0;
; 2833 : 		pDphsettar->tarimp = 0;
; 2834 : 		pDphsettar->delimp = 0;
; 2835 : 		
; 2836 : 		/*      Set smoothing constants for ( critical-damped? ) 2nd-order sys  */
; 2837 : 		
; 2838 : 		pDphsettar->f0a2 = pDph_t->f0_lp_filter;	/* Impulse and hat commands */
; 2839 : 		pDphsettar->f0b = FRAC_ONE - pDphsettar->f0a2;

  010c4	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  010c9	0f bf 97 86 00
	00 00		 movsx	 edx, WORD PTR [edi+134]
  010d0	c1 e2 03	 shl	 edx, 3
  010d3	d1 fa		 sar	 edx, 1
  010d5	66 89 57 5a	 mov	 WORD PTR [edi+90], dx
  010d9	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx
  010df	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx
  010e6	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx
  010ed	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  010f4	66 89 86 9c 03
	00 00		 mov	 WORD PTR [esi+924], ax
  010fb	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx
  010ff	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx
  01103	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
  0110a	66 8b 86 d0 18
	00 00		 mov	 ax, WORD PTR [esi+6352]

; 2840 : 		pDphsettar->f0a1 = pDphsettar->f0a2 << F0SHFT;
; 2841 : 		
; 2842 : 		pDphsettar->f0sa2 =  F_SEG_LOWPASS;	/* Segmental influences */
; 2843 : 		
; 2844 : 		pDphsettar->f0sb = FRAC_ONE - pDphsettar->f0sa2;
; 2845 : 		pDphsettar->f0sa1 = pDphsettar->f0sa2 << F0SHFT;
; 2846 : 		
; 2847 : 		/*      Variables  relevent only if f0mode >= SINGING */
; 2848 : 		
; 2849 : 		pDphsettar->newnote = pDphsettar->f0basestart;
; 2850 : 		pDphsettar->delnote = 0;

  01111	66 89 9f 90 00
	00 00		 mov	 WORD PTR [edi+144], bx
  01118	2b c8		 sub	 ecx, eax
  0111a	66 89 47 60	 mov	 WORD PTR [edi+96], ax
  0111e	66 89 4f 62	 mov	 WORD PTR [edi+98], cx
  01122	66 8b 57 60	 mov	 dx, WORD PTR [edi+96]
  01126	66 c1 e2 03	 shl	 dx, 3
  0112a	66 89 57 64	 mov	 WORD PTR [edi+100], dx
  0112e	66 c7 87 a0 00
	00 00 b8 0b	 mov	 WORD PTR [edi+160], 3000 ; 00000bb8H
  01137	66 c7 87 a2 00
	00 00 48 34	 mov	 WORD PTR [edi+162], 13384 ; 00003448H
  01140	66 8b 87 a0 00
	00 00		 mov	 ax, WORD PTR [edi+160]
  01147	66 c1 e0 03	 shl	 ax, 3
  0114b	66 89 87 a4 00
	00 00		 mov	 WORD PTR [edi+164], ax
  01152	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]
  01159	66 89 8f 8e 00
	00 00		 mov	 WORD PTR [edi+142], cx

; 2851 : 		pDphsettar->delcum = 0;

  01160	66 89 9f 92 00
	00 00		 mov	 WORD PTR [edi+146], bx

; 2852 : 		pDphsettar->f0start = pDph_t->f0;

  01167	66 8b 96 9c 03
	00 00		 mov	 dx, WORD PTR [esi+924]

; 2853 : 		pDphsettar->vibsw = 0;

  0116e	66 89 9f 8c 00
	00 00		 mov	 WORD PTR [edi+140], bx
  01175	66 89 97 94 00
	00 00		 mov	 WORD PTR [edi+148], dx

; 2854 : 		
; 2855 : 		/*      Initialize pointer to f0 command string */
; 2856 : 		
; 2857 : 		pDph_t->nf0ev = -1;

  0117c	66 89 ae 52 23
	00 00		 mov	 WORD PTR [esi+9042], bp
$L71463:

; 2858 : 	}
; 2859 : 	
; 2860 : 	/*    Reinit pointer and time of first f0 command if new clause */
; 2861 :     if( pDph_t->nf0ev == -1 ) 

  01183	66 39 ae 52 23
	00 00		 cmp	 WORD PTR [esi+9042], bp
  0118a	0f 85 fb 01 00
	00		 jne	 $L71641

; 2862 : 	{		
; 2863 : 		/* Soft initialization */
; 2864 : 		
; 2865 : 		pDph_t->enddrop =0;
; 2866 : 		/*	  Set Beginning and final frequency of baseline fall */
; 2867 : 		switch (pDph_t->clausetype)
; 2868 : 		{

  01190	0f bf 86 e6 03
	00 00		 movsx	 eax, WORD PTR [esi+998]
  01197	83 f8 03	 cmp	 eax, 3
  0119a	66 89 9e 5e 23
	00 00		 mov	 WORD PTR [esi+9054], bx
  011a1	0f 87 b2 00 00
	00		 ja	 $L71481
  011a7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71673[eax*4]
$L71469:

; 2869 : 		case 0: /*  declarative  */
; 2870 : 			if(pDph_t->number_words > 3)

  011ae	66 83 be 2e 20
	00 00 03	 cmp	 WORD PTR [esi+8238], 3
  011b6	7e 11		 jle	 SHORT $L71470

; 2871 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  011b8	8d 86 38 20 00
	00		 lea	 eax, DWORD PTR [esi+8248]
  011be	89 86 34 20 00
	00		 mov	 DWORD PTR [esi+8244], eax

; 2872 : 			else

  011c4	e9 82 00 00 00	 jmp	 $L71479
$L71470:

; 2873 : 				pDph_t->f0baseline = pDph_t->f0basetypes[4];

  011c9	8d 8e c0 20 00
	00		 lea	 ecx, DWORD PTR [esi+8384]

; 2874 : 			pDph_t->clausepos=0;
; 2875 : 			pDph_t->dcommacnt =0;
; 2876 : 			break; //BATS 704

  011cf	eb 74		 jmp	 SHORT $L71665
$L71472:

; 2877 : 		case 1: /*  comma  First one goes up but later ones are more declarative*/
; 2878 : 			// But long ones tend to be declarative! eab 4/15/00
; 2879 : 			pDph_t->dcommacnt++;

  011d1	66 ff 86 f2 14
	00 00		 inc	 WORD PTR [esi+5362]
  011d8	66 8b 86 f2 14
	00 00		 mov	 ax, WORD PTR [esi+5362]

; 2880 : 			if(pDph_t->dcommacnt == 1)

  011df	66 3d 01 00	 cmp	 ax, 1
  011e3	75 0e		 jne	 SHORT $L71666

; 2881 : 				pDph_t->f0baseline = pDph_t->f0basetypes[1];

  011e5	8d 96 5a 20 00
	00		 lea	 edx, DWORD PTR [esi+8282]
  011eb	89 96 34 20 00
	00		 mov	 DWORD PTR [esi+8244], edx

; 2882 : 			else if(pDph_t->dcommacnt > 1)

  011f1	eb 0e		 jmp	 SHORT $L71475
$L71666:
  011f3	7e 0c		 jle	 SHORT $L71475

; 2883 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  011f5	8d 86 38 20 00
	00		 lea	 eax, DWORD PTR [esi+8248]
  011fb	89 86 34 20 00
	00		 mov	 DWORD PTR [esi+8244], eax
$L71475:

; 2884 : 			if(pDph_t->number_words > 4)

  01201	66 83 be 2e 20
	00 00 04	 cmp	 WORD PTR [esi+8238], 4
  01209	7e 4e		 jle	 SHORT $L71481

; 2885 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  0120b	8d 8e 38 20 00
	00		 lea	 ecx, DWORD PTR [esi+8248]
  01211	89 8e 34 20 00
	00		 mov	 DWORD PTR [esi+8244], ecx

; 2886 : 			
; 2887 : 			break; //BATS 704

  01217	eb 40		 jmp	 SHORT $L71481
$L71477:

; 2888 : 			
; 2889 : 		case 2: /*  exclaimatory  */
; 2890 : 			//4/15/00 EAB short one clasify as exclamatory but long ones suffer
; 2891 : 			//from the don't know which part to emphasize problem so better devalrative.
; 2892 : 			if(pDph_t->number_words > 2)

  01219	66 83 be 2e 20
	00 00 02	 cmp	 WORD PTR [esi+8238], 2
  01221	7e 0e		 jle	 SHORT $L71478

; 2893 : 				pDph_t->f0baseline = pDph_t->f0basetypes[0];

  01223	8d 96 38 20 00
	00		 lea	 edx, DWORD PTR [esi+8248]
  01229	89 96 34 20 00
	00		 mov	 DWORD PTR [esi+8244], edx

; 2894 : 			else

  0122f	eb 1a		 jmp	 SHORT $L71479
$L71478:

; 2895 : 				pDph_t->f0baseline = pDph_t->f0basetypes[2];

  01231	8d 86 7c 20 00
	00		 lea	 eax, DWORD PTR [esi+8316]
  01237	89 86 34 20 00
	00		 mov	 DWORD PTR [esi+8244], eax

; 2896 : 			pDph_t->clausepos =0;
; 2897 : 			pDph_t->dcommacnt =0;
; 2898 : 			break;

  0123d	eb 0c		 jmp	 SHORT $L71479
$L71480:

; 2899 : 			
; 2900 : 			
; 2901 : 			
; 2902 : 		case 3: /*  question  */
; 2903 : 			pDph_t->f0baseline = pDph_t->f0basetypes[3];

  0123f	8d 8e 9e 20 00
	00		 lea	 ecx, DWORD PTR [esi+8350]
$L71665:
  01245	89 8e 34 20 00
	00		 mov	 DWORD PTR [esi+8244], ecx
$L71479:

; 2904 : 			pDph_t->clausepos =0;

  0124b	66 89 9e ee 14
	00 00		 mov	 WORD PTR [esi+5358], bx

; 2905 : 			pDph_t->dcommacnt =0;

  01252	66 89 9e f2 14
	00 00		 mov	 WORD PTR [esi+5362], bx
$L71481:

; 2906 : 			break;
; 2907 : 			
; 2908 : 		default:
; 2909 : 			
; 2910 : 			break;
; 2911 : 			
; 2912 : 			
; 2913 : 		}
; 2914 : 		/*	  Set Beginning and final frequency of baseline fall */
; 2915 : 		pDphsettar->f0basestart = pDph_t->f0baseline[0];

  01259	8b 96 34 20 00
	00		 mov	 edx, DWORD PTR [esi+8244]
  0125f	66 8b 02	 mov	 ax, WORD PTR [edx]
  01262	66 89 87 86 00
	00 00		 mov	 WORD PTR [edi+134], ax

; 2916 : 		pDphsettar->f0endfall = pDph_t->f0baseline[16];

  01269	8b 8e 34 20 00
	00		 mov	 ecx, DWORD PTR [esi+8244]
  0126f	66 8b 51 20	 mov	 dx, WORD PTR [ecx+32]
  01273	66 89 97 8a 00
	00 00		 mov	 WORD PTR [edi+138], dx

; 2917 : 		
; 2918 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 2919 : 		pDphsettar->endfall = pDphsettar->f0endfall;
; 2920 : 		
; 2921 : 		
; 2922 : 		
; 2923 : 		
; 2924 : 		
; 2925 : 		oarcnt=0;

  0127a	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2926 : 		
; 2927 : 		
; 2928 : 		
; 2929 : 		
; 2930 : #ifdef SPANISH
; 2931 : 		if (pDph_t->special_phrase == 1)
; 2932 : 		{
; 2933 : 			pDphsettar->beginfall = pDphsettar->f0basestart - 50 + pDph_t->delta_special;
; 2934 : 			pDphsettar->endfall = pDphsettar->f0endfall - 100; /* lastf0-(f0basefall>>1); */
; 2935 : 			pDph_t->special_phrase = 0; 
; 2936 : 		}
; 2937 : 		else
; 2938 : 		{
; 2939 : 			pDphsettar->lastbase=pDphsettar->f0basestart<<2;
; 2940 : 			pDphsettar->beginfall = pDphsettar->f0basestart;
; 2941 : 			pDphsettar->endfall = pDphsettar->f0endfall;
; 2942 : 		}
; 2943 : #else
; 2944 : 		
; 2945 : 		pDphsettar->lastbase=pDphsettar->f0basestart<<2;

  01280	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]

; 2946 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 2947 : 		pDphsettar->endfall = pDphsettar->f0endfall;

  01287	66 8b 97 8a 00
	00 00		 mov	 dx, WORD PTR [edi+138]

; 2948 : 		
; 2949 : #ifdef DEBUGF0
; 2950 : 		WINprintf ("At newpar sw %d %d	beginfall and endfall \n", pDphsettar->beginfall, pDphsettar->endfall);
; 2951 : #endif
; 2952 : 		
; 2953 : #endif
; 2954 : 		pDphsettar->nframb = 0;

  0128e	66 89 5f 48	 mov	 WORD PTR [edi+72], bx

; 2955 : 		pDphsettar->basetime=0;

  01292	66 89 5f 36	 mov	 WORD PTR [edi+54], bx
  01296	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]

; 2956 : 		pDphsettar->basecntr =0;

  0129d	66 89 5f 32	 mov	 WORD PTR [edi+50], bx
  012a1	66 89 4f 72	 mov	 WORD PTR [edi+114], cx
  012a5	66 89 47 6e	 mov	 WORD PTR [edi+110], ax
  012a9	66 89 57 7a	 mov	 WORD PTR [edi+122], dx

; 2957 : 		pDphsettar->f0delta =0;

  012ad	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 2958 : 		pDph_t->special_phrase = 0;

  012b4	66 89 9e f8 2b
	00 00		 mov	 WORD PTR [esi+11256], bx

; 2959 : 		oarcnt=0;

  012bb	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2960 : 		/*	  Raise baseline for first sentence of a paragraph */
; 2961 : 		if (pDph_t->newparagsw != FALSE) 

  012c1	38 9e 9a 17 00
	00		 cmp	 BYTE PTR [esi+6042], bl
  012c7	74 10		 je	 SHORT $L71482

; 2962 : 		{
; 2963 : 			pDphsettar->beginfall += 120;

  012c9	66 83 47 6e 78	 add	 WORD PTR [edi+110], 120	; 00000078H

; 2964 : 			pDphsettar->endfall += 70;

  012ce	66 83 47 7a 46	 add	 WORD PTR [edi+122], 70	; 00000046H

; 2965 : 			pDph_t->newparagsw = FALSE;

  012d3	88 9e 9a 17 00
	00		 mov	 BYTE PTR [esi+6042], bl
$L71482:

; 2966 : 		}
; 2967 : 		
; 2968 : 		/*        Time between 0 and first  f0 command, in frames */
; 2969 : 		pDphsettar->dtimf0 = pDph_t->f0tim[0];

  012d9	66 8b 86 e2 20
	00 00		 mov	 ax, WORD PTR [esi+8418]

; 2970 : 		/*         Pointer into dur and phone arrays */
; 2971 : 		pDphsettar->np_drawt0 = -1;

  012e0	66 89 6f 74	 mov	 WORD PTR [edi+116], bp
  012e4	66 89 47 66	 mov	 WORD PTR [edi+102], ax

; 2972 : 		pDphsettar->npg = -1;

  012e8	66 89 6f 76	 mov	 WORD PTR [edi+118], bp

; 2973 : 		pDph_t->nf0ev = 0;

  012ec	66 89 9e 52 23
	00 00		 mov	 WORD PTR [esi+9042], bx

; 2974 : 		
; 2975 : 		
; 2976 : 		
; 2977 : 		/*        Time since last f0 command, in frames */
; 2978 : 		
; 2979 : 		/* INITIALIZE NFRAM TO DELAY THROUGH FILTER THIS USED TO BE IN AND WAS NOT IN
; 2980 : 		88 STUFF BUT IS REALLY NEEDED*/
; 2981 : 		oarcnt=0;

  012f3	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2982 : 		pDphsettar->nframs = 0;
; 2983 : 		pDphsettar->nfram =  0;
; 2984 :         pDphsettar->nframg = 0;
; 2985 : 		/*eab 0 works much better 
; 2986 : 		6- ((pDph_t->f0_lp_filter-1300)>>8);*/
; 2987 : 		
; 2988 : 		if (pDph_t->f0mode< SINGING) 
; 2989 : 		{
; 2990 : 			pDphsettar->nfram = pDphsettar->nframs >> 1;
; 2991 : 		}
; 2992 : 		else 
; 2993 : 		{
; 2994 : 			pDphsettar->nfram = 0;	/* Start note slightly early if singing */
; 2995 : 		}
; 2996 : 		
; 2997 : 		
; 2998 : 		
; 2999 : 		
; 3000 : 		
; 3001 : 		/* Time since beginning of cur phonetic segment, in frames */
; 3002 : 		/* eab 7/22/98 changed to >>1 to account for scaling of female voice*/
; 3003 : 		pDphsettar->f0las1 = (pDphsettar->f0basestart << F0SHFT)>>1;

  012f9	0f bf 8f 86 00
	00 00		 movsx	 ecx, WORD PTR [edi+134]
  01300	c1 e1 03	 shl	 ecx, 3
  01303	d1 f9		 sar	 ecx, 1
  01305	66 89 4f 58	 mov	 WORD PTR [edi+88], cx
  01309	66 89 5f 46	 mov	 WORD PTR [edi+70], bx

; 3004 : 		pDphsettar->f0las2 = (pDphsettar->f0basestart << F0SHFT)>>1;

  0130d	0f bf 97 86 00
	00 00		 movsx	 edx, WORD PTR [edi+134]
  01314	c1 e2 03	 shl	 edx, 3
  01317	d1 fa		 sar	 edx, 1
  01319	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx
  0131d	66 89 5f 4c	 mov	 WORD PTR [edi+76], bx
  01321	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  01325	66 89 57 5a	 mov	 WORD PTR [edi+90], dx

; 3005 : 		//pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;
; 3006 :         //pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;
; 3007 : 		oarcnt=0;

  01329	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 3008 : 		pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  0132f	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 3009 : 		pDphsettar->f0slas2 = 0;

  01336	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 3010 :         pDph_t->f0 = pDphsettar->f0basestart;

  0133d	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  01344	66 89 86 9c 03
	00 00		 mov	 WORD PTR [esi+924], ax

; 3011 :         pDphsettar->nframs = 0;		

  0134b	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx

; 3012 : 		/* Used in computing segmental effects */
; 3013 : 		
; 3014 : 		
; 3015 : 		/*        Extra time, in frames, used to delay or advance f0 gesture assoc. */
; 3016 : 		/*        with a particular segment, e.g. at delayed vot, or anticipate in V-V */
; 3017 : 		pDphsettar->extrad = -DELAY_SEG_LOWPASS; /* Start gesture toward next seg early */

  0134f	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH

; 3018 : 		/*        Duration of current segment, in frames */
; 3019 : 		pDphsettar->segdur = 0;

  01355	66 89 5f 54	 mov	 WORD PTR [edi+84], bx

; 3020 : 		pDphsettar->segdrg = 0;

  01359	66 89 5f 56	 mov	 WORD PTR [edi+86], bx

; 3021 : 		pDph_t->lastallo=0;

  0135d	66 89 9e 2a 20
	00 00		 mov	 WORD PTR [esi+8234], bx

; 3022 : 		pDph_t->keepallo=0;

  01364	66 89 9e 28 20
	00 00		 mov	 WORD PTR [esi+8232], bx

; 3023 : #ifdef GFAPHF0
; 3024 : 		pDph_t->lastone=-1;
; 3025 : 		pDph_t->keepdur=0;
; 3026 : #endif
; 3027 : 		pDph_t->glotalize =0;

  0136b	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 3028 : 		pDphsettar->glide_step=0;

  01372	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 3029 : 		pDphsettar->glide_tot=0;

  01376	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 3030 : 		pDphsettar->glide_inc =0;

  0137a	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 3031 : 		/*	  Must be at bottom of hat */
; 3032 : 		pDphsettar->tarhat = 0;	    /* should be anyway, except for emergency halt */

  0137e	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 3033 : 		pDph_t->addjit = 305;

  01382	66 c7 86 e8 03
	00 00 31 01	 mov	 WORD PTR [esi+1000], 305 ; 00000131H
$L71641:

; 3034 : 		
; 3035 : 		
; 3036 :         }
; 3037 : 		/*    End of initialization */
; 3038 : 		
; 3039 : 		
; 3040 : 		
; 3041 : 		/*  See if new f0 commands issued					*/
; 3042 : 		/*    To get f0 commands to occur at right times, need to take		*/
; 3043 : 		/*    into account delay introduced by low-pass filter. Response to	*/
; 3044 : 		/*    a step command begins xx frames earlier than f0time[] request	*/
; 3045 : 		/*    so f0 gets half-way to target at nominal step onset time		*/
; 3046 : 		
; 3047 :         while ((pDphsettar->nfram >= pDphsettar->dtimf0) && 
; 3048 : 			(pDph_t->nf0ev < pDph_t->nf0tot)) 

  0138b	66 8b 47 46	 mov	 ax, WORD PTR [edi+70]
  0138f	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  01393	66 3b c2	 cmp	 ax, dx
  01396	0f 8c 57 01 00
	00		 jl	 $L71487
$L71486:
  0139c	66 8b ae 52 23
	00 00		 mov	 bp, WORD PTR [esi+9042]
  013a3	66 3b ae 54 23
	00 00		 cmp	 bp, WORD PTR [esi+9044]
  013aa	0f 8d 43 01 00
	00		 jge	 $L71487

; 3049 : 		{
; 3050 : 			
; 3051 :             pDphsettar->f0command = pDph_t->f0tar[pDph_t->nf0ev];	/* New target f0 */

  013b0	0f bf ed	 movsx	 ebp, bp
  013b3	8d 4f 38	 lea	 ecx, DWORD PTR [edi+56]

; 3052 : 			pDphsettar->type = pDph_t->f0type[pDph_t->nf0ev];
; 3053 :             pDphsettar->nfram -= pDphsettar->dtimf0;

  013b6	2b c2		 sub	 eax, edx
  013b8	66 8b ac 6e e2
	18 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6370]
  013c0	66 89 29	 mov	 WORD PTR [ecx], bp
  013c3	0f bf ae 52 23
	00 00		 movsx	 ebp, WORD PTR [esi+9042]
  013ca	66 8b ac 6e 4e
	1b 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6990]
  013d2	66 89 47 46	 mov	 WORD PTR [edi+70], ax
  013d6	66 89 6f 40	 mov	 WORD PTR [edi+64], bp

; 3054 : 			/* eab 1/10/98 added length parameter*/
; 3055 : 			pDphsettar->length = pDph_t->f0length[pDph_t->nf0ev];

  013da	0f bf 96 52 23
	00 00		 movsx	 edx, WORD PTR [esi+9042]
  013e1	66 8b 84 56 ba
	1d 00 00	 mov	 ax, WORD PTR [esi+edx*2+7610]
  013e9	66 89 47 42	 mov	 WORD PTR [edi+66], ax

; 3056 : 			
; 3057 : 			if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  013ed	66 83 be 9c 17
	00 00 06	 cmp	 WORD PTR [esi+6044], 6
  013f5	75 29		 jne	 SHORT $L71488

; 3058 : 				pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  013f7	0f bf 96 52 23
	00 00		 movsx	 edx, WORD PTR [esi+9042]
  013fe	66 8b 84 56 e2
	20 00 00	 mov	 ax, WORD PTR [esi+edx*2+8418]
  01406	66 89 47 66	 mov	 WORD PTR [edi+102], ax

; 3059 : 				pDph_t->nf0ev++;

  0140a	66 ff 86 52 23
	00 00		 inc	 WORD PTR [esi+9042]
$L71494:

; 3060 : 				set_user_target(pDph_t,&pDphsettar->f0command);

  01411	51		 push	 ecx
  01412	56		 push	 esi
  01413	e8 00 00 00 00	 call	 _set_user_target
  01418	83 c4 08	 add	 esp, 8

; 3061 : 			}
; 3062 : 			else {

  0141b	e9 c2 00 00 00	 jmp	 $L71491
$L71488:

; 3063 : 				pDph_t->nf0ev++;	/* Achieve target at next time */

  01420	66 ff 86 52 23
	00 00		 inc	 WORD PTR [esi+9042]

; 3064 : 				pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  01427	0f bf 96 52 23
	00 00		 movsx	 edx, WORD PTR [esi+9042]
  0142e	66 8b 84 56 e2
	20 00 00	 mov	 ax, WORD PTR [esi+edx*2+8418]
  01436	66 89 47 66	 mov	 WORD PTR [edi+102], ax

; 3065 : 				switch(pDphsettar->type)
; 3066 : 				{

  0143a	0f bf 47 40	 movsx	 eax, WORD PTR [edi+64]
  0143e	83 f8 05	 cmp	 eax, 5
  01441	0f 87 9b 00 00
	00		 ja	 $L71491
  01447	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71674[eax*4]
$L71495:

; 3067 : 				case USER: /*user specified f0 target*/
; 3068 : 					set_user_target(pDph_t,&pDphsettar->f0command);
; 3069 : 					break;
; 3070 : 					
; 3071 : 				case F0_RESET: /* f0 reset*/
; 3072 : 					
; 3073 : 							   pDphsettar->tarhat = 0;		/* Go to bottom of hat pattern 

  0144e	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 3074 : 															and for UK init glide, note glide is not ifdefed _uk becuase
; 3075 : 							   it is a command we ant to allow others to use*/
; 3076 : 							   pDph_t->glotalize =0;

  01452	66 89 9e 64 23
	00 00		 mov	 WORD PTR [esi+9060], bx

; 3077 : 							   pDphsettar->glide_step=0;

  01459	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 3078 : 							   pDphsettar->glide_tot=0;

  0145d	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 3079 : 							   pDphsettar->glide_inc=0;

  01461	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 3080 : 							   break;

  01465	eb 7b		 jmp	 SHORT $L71491
$L71496:

; 3081 : 				case STEP:
; 3082 : #ifdef ENGLISH_UK
; 3083 : 					break;
; 3084 : #endif
; 3085 : 					pDphsettar->tarhat += pDphsettar->f0command;

  01467	66 8b 09	 mov	 cx, WORD PTR [ecx]
  0146a	66 01 4f 5c	 add	 WORD PTR [edi+92], cx

; 3086 : 					/* Command is a step, reset pDphsettar->tarhat */
; 3087 : 					
; 3088 : 					if (pDphsettar->f0command < 0) 

  0146e	66 3b cb	 cmp	 cx, bx
  01471	7d 13		 jge	 SHORT $L71497

; 3089 : 					{	/* Cancel previous impulse if step */
; 3090 : 						/* is of opposite sign */
; 3091 : 						if (pDphsettar->tarimp > 0) 

  01473	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  01477	7e 69		 jle	 SHORT $L71491

; 3092 : 						{   
; 3093 : 							pDphsettar->tarimp = 0;

  01479	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 3094 : 							pDphsettar->delimp = 0;

  0147d	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 3095 : 						}
; 3096 : 					}
; 3097 : 					else

  01484	eb 5c		 jmp	 SHORT $L71491
$L71497:

; 3098 : 					{
; 3099 : 						if (pDphsettar->tarimp < 0) 

  01486	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  0148a	7d 56		 jge	 SHORT $L71491

; 3100 : 						{
; 3101 : 							pDphsettar->tarimp = 0;

  0148c	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 3102 : 							pDphsettar->delimp = 0;

  01490	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 3103 : 						}
; 3104 : 					}
; 3105 : 					break;

  01497	eb 49		 jmp	 SHORT $L71491
$L71501:

; 3106 : 				case GLIDE:/* eab 1/10/98 work in progress */
; 3107 : 					
; 3108 : 					pDphsettar->glide_step = pDphsettar->f0command;

  01499	66 8b 09	 mov	 cx, WORD PTR [ecx]

; 3109 : 					pDphsettar->glide_inc =(pDphsettar->glide_step/pDphsettar->length);

  0149c	0f bf c1	 movsx	 eax, cx
  0149f	66 89 4f 3a	 mov	 WORD PTR [edi+58], cx
  014a3	0f bf 4f 42	 movsx	 ecx, WORD PTR [edi+66]
  014a7	99		 cdq
  014a8	f7 f9		 idiv	 ecx
  014aa	66 89 47 3c	 mov	 WORD PTR [edi+60], ax

; 3110 : 					
; 3111 : 					break;

  014ae	eb 32		 jmp	 SHORT $L71491
$L71502:

; 3112 : 					
; 3113 : 				case GLOTTAL:
; 3114 : #ifdef ENGLISH_UK
; 3115 : 					break;
; 3116 : #endif
; 3117 : 					pDph_t->enddrop= -pDphsettar->f0command;

  014b0	66 8b 11	 mov	 dx, WORD PTR [ecx]

; 3118 : 					pDph_t->glotalize =1;

  014b3	66 c7 86 64 23
	00 00 01 00	 mov	 WORD PTR [esi+9060], 1
  014bc	66 f7 da	 neg	 dx
  014bf	66 89 96 5e 23
	00 00		 mov	 WORD PTR [esi+9054], dx

; 3119 : 					break; //BATS 704	

  014c6	eb 1a		 jmp	 SHORT $L71491
$L71503:

; 3120 : 				case IMPULSE:
; 3121 : 					
; 3122 : 					/* Odd, command is impulse  */
; 3123 : 					/*	          Impulse realized as 24-frame "step plus ramp" from f0command */
; 3124 : 					/*	          to three times focommand */
; 3125 : 					/* eab old ocde used to have an impulse as a 2*f0command that would be realized as an 
; 3126 : 					16 frame wide pulse. This new scheme proposed by Dennis Klatt uses 
; 3127 : 					imp=f0command+(f0command _ f0command>>4 meaning it will take 16 farmes to
; 3128 : 					reach double height. The old one never reached target so this new approach I think 
; 3129 : 					presently has two problems it's dealyed too much and it lasts too long causing higher f0 values
; 3130 : 					and more percieved effect. I want to try it differently starting out close to the old code with a pulse command that 
; 3131 : 					trails off.
; 3132 : 					with a downward slope think of it as a rectangular pulse with a triangle placed on
; 3133 : 					top instead of a second rectangular pulse- by the way it's not working correctly at
; 3134 : 					the moment*/
; 3135 : 					pDphsettar->tarimp = pDphsettar->f0command;

  014c8	66 8b 09	 mov	 cx, WORD PTR [ecx]

; 3136 : 					
; 3137 : 					pDphsettar->delimp = pDphsettar->f0command>>2;
; 3138 : 					// pDphsettar->nimp = 24 - ((pDph_t->f0_lp_filter-1300)>>8);
; 3139 : 					pDphsettar->nimp = pDphsettar->length;

  014cb	66 8b 47 42	 mov	 ax, WORD PTR [edi+66]
  014cf	66 89 4f 5e	 mov	 WORD PTR [edi+94], cx
  014d3	66 89 47 78	 mov	 WORD PTR [edi+120], ax
  014d7	66 c1 f9 02	 sar	 cx, 2
  014db	66 89 8f 9e 00
	00 00		 mov	 WORD PTR [edi+158], cx
$L71491:
  014e2	66 8b 47 46	 mov	 ax, WORD PTR [edi+70]
  014e6	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  014ea	66 3b c2	 cmp	 ax, dx
  014ed	0f 8d a9 fe ff
	ff		 jge	 $L71486
$L71487:

; 3140 : 					break;
; 3141 : 					
; 3142 : 				}
; 3143 : 			}
; 3144 : 			
; 3145 : 			
; 3146 :             
; 3147 : 			
; 3148 : 			/*        Loop back to look for more f0 commands */
; 3149 :         }
; 3150 : #ifdef  ENDDROP
; 3151 : 		/*EAB Drop pitch rapidly at  end of utterance
; 3152 : 		enddrop now reflects pitch dropoff at end of utterance and not final creek
; 3153 : 		hence the removal of the tcumdur stuff
; 3154 : 		9/19/97 */
; 3155 : 		if(  pDph_t->enddrop 
; 3156 : 			&& pDph_t->glotalize  && pDph_t->number_words >= 3)
; 3157 : 		{
; 3158 : 			if(pDphsettar->tarbas > 500)
; 3159 : 			{
; 3160 : 				pDph_t->enddrop += pDph_t->enddrop>>1;
; 3161 : 			}
; 3162 : 			
; 3163 : 		}
; 3164 : 		
; 3165 : #endif
; 3166 : 		
; 3167 : 		
; 3168 : 		
; 3169 : 		
; 3170 : 		
; 3171 : 		/* 8/96 eab have baseline follow profile in basline array*/
; 3172 : 		/* since we use nframb <<4 and array is 16 then stepsize == tcumdur*16/16
; 3173 : 		This code works by starting from a base value and then a difference bewteeen where we are
; 3174 : 		and where we want to be is done modulo sixteen, The lastbase keeps the acutal position,
; 3175 : 		we don't enforce the values int he code but targets them over time. F0delta is a cumulative
; 3176 : 		offset since hte last synchro point i.e. every sixteen */
; 3177 : 		if(pDphsettar->nframb<<4 >= pDphsettar->basetime)

  014f3	66 8b 47 36	 mov	 ax, WORD PTR [edi+54]
  014f7	0f bf 4f 48	 movsx	 ecx, WORD PTR [edi+72]
  014fb	0f bf d0	 movsx	 edx, ax
  014fe	c1 e1 04	 shl	 ecx, 4
  01501	3b ca		 cmp	 ecx, edx
  01503	7c 47		 jl	 SHORT $L71506

; 3178 : 		{
; 3179 : 			
; 3180 : 			pDphsettar->basestep=(pDphsettar->lastbase>>2)-pDph_t->f0baseline[pDphsettar->basecntr+1];

  01505	0f bf 4f 32	 movsx	 ecx, WORD PTR [edi+50]
  01509	66 8b 6f 72	 mov	 bp, WORD PTR [edi+114]
  0150d	8b 96 34 20 00
	00		 mov	 edx, DWORD PTR [esi+8244]
  01513	66 c1 fd 02	 sar	 bp, 2
  01517	66 2b 6c 4a 02	 sub	 bp, WORD PTR [edx+ecx*2+2]
  0151c	66 89 6f 34	 mov	 WORD PTR [edi+52], bp

; 3181 : 			/*WINprintf("pos %d target %d step %d bas %d act %d \n",pDphsettar->basecntr,
; 3182 : 			pDph_t->f0baseline[pDphsettar->basecntr], pDphsettar->basestep, pDphsettar->lastbase,
; 3183 : 			pDphsettar->tarbas);*/
; 3184 : 			pDphsettar->basetime += pDph_t->tcumdur;

  01520	66 03 86 50 23
	00 00		 add	 ax, WORD PTR [esi+9040]
  01527	66 89 47 36	 mov	 WORD PTR [edi+54], ax

; 3185 : 			if(pDphsettar->basecntr <=15)

  0152b	66 8b 47 32	 mov	 ax, WORD PTR [edi+50]
  0152f	66 3d 0f 00	 cmp	 ax, 15			; 0000000fH
  01533	7f 05		 jg	 SHORT $L71505

; 3186 : 			{
; 3187 : 				pDphsettar->basecntr++;

  01535	40		 inc	 eax
  01536	66 89 47 32	 mov	 WORD PTR [edi+50], ax
$L71505:

; 3188 : 				
; 3189 : 			}
; 3190 : 			if (pDph_t->tcumdur == 0)	pDph_t->tcumdur = 1;

  0153a	66 39 9e 50 23
	00 00		 cmp	 WORD PTR [esi+9040], bx
  01541	75 09		 jne	 SHORT $L71506
  01543	66 c7 86 50 23
	00 00 01 00	 mov	 WORD PTR [esi+9040], 1
$L71506:

; 3191 : 			
; 3192 : 			
; 3193 : 			
; 3194 : 			
; 3195 : 		}
; 3196 : 		
; 3197 : 		
; 3198 : 		pDphsettar->f0delta =pDphsettar->basestep<<6;

  0154c	66 8b 47 34	 mov	 ax, WORD PTR [edi+52]
  01550	66 c1 e0 06	 shl	 ax, 6
  01554	66 89 87 9c 00
	00 00		 mov	 WORD PTR [edi+156], ax

; 3199 : 		pDphsettar->lastbase -= (((pDphsettar->f0delta)/pDph_t->tcumdur));

  0155b	0f bf 8e 50 23
	00 00		 movsx	 ecx, WORD PTR [esi+9040]
  01562	0f bf c0	 movsx	 eax, ax
  01565	99		 cdq
  01566	f7 f9		 idiv	 ecx
  01568	66 29 47 72	 sub	 WORD PTR [edi+114], ax

; 3200 : 		
; 3201 : 		
; 3202 : 		
; 3203 : 		if(	pDphsettar->tarbas > 500)

  0156c	66 81 bf 96 00
	00 00 f4 01	 cmp	 WORD PTR [edi+150], 500	; 000001f4H
  01575	66 8b 47 72	 mov	 ax, WORD PTR [edi+114]
  01579	7e 2e		 jle	 SHORT $L71507

; 3204 : 		{
; 3205 : 		/* Pitch falls are less pronounced for some speakers 
; 3206 : 			* to reduce impression of assertive personality */
; 3207 : 			pDph_t->scaled_enddrop= frac4mul ( pDph_t->enddrop, pDph_t->assertiveness);

  0157b	0f bf 86 5e 23
	00 00		 movsx	 eax, WORD PTR [esi+9054]
  01582	0f bf 96 ce 18
	00 00		 movsx	 edx, WORD PTR [esi+6350]
  01589	0f af c2	 imul	 eax, edx
  0158c	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0158f	66 89 86 62 23
	00 00		 mov	 WORD PTR [esi+9058], ax

; 3208 : 			pDphsettar->tarbas = (pDphsettar->lastbase>>2)-pDph_t->scaled_enddrop;

  01596	66 8b 4f 72	 mov	 cx, WORD PTR [edi+114]
  0159a	66 c1 f9 02	 sar	 cx, 2
  0159e	2b c8		 sub	 ecx, eax
  015a0	66 89 8f 96 00
	00 00		 mov	 WORD PTR [edi+150], cx

; 3209 : 		}
; 3210 : 		else

  015a7	eb 0b		 jmp	 SHORT $L71509
$L71507:

; 3211 : 			pDphsettar->tarbas = pDphsettar->lastbase>>2;

  015a9	66 c1 f8 02	 sar	 ax, 2
  015ad	66 89 87 96 00
	00 00		 mov	 WORD PTR [edi+150], ax
$L71509:

; 3212 : 		
; 3213 : 		//WINprintf("dur %d pDphsettar->tarbas %d phon %d \n",pDphsettar->basetime,pDphsettar->tarbas,pDph_t->allophons[pDphsettar->np_drawt0]);
; 3214 : 		
; 3215 : 		pDphsettar->nframb++;

  015b4	66 ff 47 48	 inc	 WORD PTR [edi+72]

; 3216 : 		
; 3217 : 		
; 3218 : 		
; 3219 : 		
; 3220 : 		/*    Impulse duration fixed at 24 frames, count down to zero */
; 3221 : 		/*    (actually, duration is function of speaker def par "quickness" */
; 3222 : 		
; 3223 :         if(--pDphsettar->nimp < 0) {

  015b8	66 ff 4f 78	 dec	 WORD PTR [edi+120]
  015bc	66 39 5f 78	 cmp	 WORD PTR [edi+120], bx
  015c0	7d 0b		 jge	 SHORT $L71510

; 3224 : 			//pDphsettar->nimp--;
; 3225 : 			pDphsettar->tarimp = 0;

  015c2	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 3226 : 			pDphsettar->delimp = 0;

  015c6	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
$L71510:

; 3227 : 			//pDphsettar->nimp =0;
; 3228 : 		}
; 3229 : 		
; 3230 : 		
; 3231 : 		/*    Segmental effect on f0, reset pDphsettar->tarseg if time exceeds cum dur */
; 3232 : 		
; 3233 :         if ((pDphsettar->nframs >= (pDphsettar->segdur + pDphsettar->extrad)) 
; 3234 : 			&& (pDphsettar->np_drawt0 < (pDph_t->nallotot-1))) {

  015cd	66 8b 4f 54	 mov	 cx, WORD PTR [edi+84]
  015d1	66 8b 47 4a	 mov	 ax, WORD PTR [edi+74]
  015d5	0f bf d1	 movsx	 edx, cx
  015d8	0f bf 4f 4e	 movsx	 ecx, WORD PTR [edi+78]
  015dc	03 d1		 add	 edx, ecx
  015de	0f bf c8	 movsx	 ecx, ax
  015e1	3b ca		 cmp	 ecx, edx
  015e3	0f 8c 6f 01 00
	00		 jl	 $L71528
  015e9	66 8b 4f 74	 mov	 cx, WORD PTR [edi+116]
  015ed	0f bf 96 06 15
	00 00		 movsx	 edx, WORD PTR [esi+5382]
  015f4	0f bf e9	 movsx	 ebp, cx
  015f7	4a		 dec	 edx
  015f8	3b ea		 cmp	 ebp, edx
  015fa	0f 8d 58 01 00
	00		 jge	 $L71528

; 3235 : 			
; 3236 : 			pDphsettar->nframs -= pDphsettar->segdur;

  01600	66 8b 57 54	 mov	 dx, WORD PTR [edi+84]
  01604	2b c2		 sub	 eax, edx
  01606	66 89 47 4a	 mov	 WORD PTR [edi+74], ax

; 3237 :             pDphsettar->segdur = pDph_t->allodurs[++pDphsettar->np_drawt0];

  0160a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0160d	0f bf c8	 movsx	 ecx, ax
  01610	66 89 47 74	 mov	 WORD PTR [edi+116], ax

; 3238 :             pDphsettar->phocur = pDph_t->allophons[pDphsettar->np_drawt0];
; 3239 : 			/* EAB Found long standing bug-- due to the compensation for the delay through the filters
; 3240 : 			the first phoneme is getting cheated on duration */
; 3241 : 			if(pDphsettar->np_drawt0 == 1)

  01614	66 3d 01 00	 cmp	 ax, 1
  01618	66 8b 94 4e 9c
	0d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+3484]
  01620	66 89 57 54	 mov	 WORD PTR [edi+84], dx
  01624	66 8b 94 4e ec
	03 00 00	 mov	 dx, WORD PTR [esi+ecx*2+1004]
  0162c	66 89 57 44	 mov	 WORD PTR [edi+68], dx
  01630	75 06		 jne	 SHORT $L71512

; 3242 : 			{
; 3243 : 				pDphsettar->nframs = -DELAY_SEG_LOWPASS;

  01632	66 c7 47 4a fd
	ff		 mov	 WORD PTR [edi+74], -3	; fffffffdH
$L71512:

; 3244 : 			}
; 3245 : 			
; 3246 :             if (pDphsettar->np_drawt0 < pDph_t->nallotot)  

  01638	66 3b 86 06 15
	00 00		 cmp	 ax, WORD PTR [esi+5382]
  0163f	7d 0c		 jge	 SHORT $L71513

; 3247 : 				pDphsettar->phonex_drawt0 = pDph_t->allophons[pDphsettar->np_drawt0+1];

  01641	66 8b 84 4e ee
	03 00 00	 mov	 ax, WORD PTR [esi+ecx*2+1006]
  01649	66 89 47 68	 mov	 WORD PTR [edi+104], ax
$L71513:

; 3248 : 			
; 3249 : 			
; 3250 : 			/*        Set next f0 segmental incremental target */
; 3251 : 			tmp = pDphsettar->phocur & PFONT;

  0164d	66 8b 47 44	 mov	 ax, WORD PTR [edi+68]
  01651	8b d0		 mov	 edx, eax
  01653	81 e2 00 1f 00
	00		 and	 edx, 7936		; 00001f00H

; 3252 : 			if(tmp == PFUSA<<PSFONT)

  01659	66 81 fa 00 1e	 cmp	 dx, 7680		; 00001e00H
  0165e	75 13		 jne	 SHORT $L71514

; 3253 : 			{
; 3254 : 				f0seg = us_f0fsegtars[pDphsettar->phocur & PVALUE];	

  01660	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01665	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _us_f0fsegtars[eax*2]
  0166d	89 54 24 10	 mov	 DWORD PTR _f0seg$[esp+24], edx

; 3255 : 			}
; 3256 : 			else if(tmp == PFGR<<PSFONT)

  01671	eb 60		 jmp	 SHORT $L71522
$L71514:
  01673	66 81 fa 00 1c	 cmp	 dx, 7168		; 00001c00H
  01678	75 0f		 jne	 SHORT $L71516

; 3257 : 			{
; 3258 : 				f0seg = gr_f0fsegtars[pDphsettar->phocur & PVALUE];	

  0167a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0167f	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _gr_f0fsegtars[eax*2]

; 3259 : 			}
; 3260 : 			else if(tmp == PFLA<<PSFONT)

  01687	eb 46		 jmp	 SHORT $L71667
$L71516:
  01689	66 81 fa 00 1a	 cmp	 dx, 6656		; 00001a00H
  0168e	75 13		 jne	 SHORT $L71518

; 3261 : 			{
; 3262 : 				f0seg = la_f0fsegtars[pDphsettar->phocur & PVALUE];

  01690	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01695	66 8b 14 45 00
	00 00 00	 mov	 dx, WORD PTR _la_f0fsegtars[eax*2]
  0169d	89 54 24 10	 mov	 DWORD PTR _f0seg$[esp+24], edx

; 3263 : 			}
; 3264 : 			else if(tmp == PFSP<<PSFONT)

  016a1	eb 30		 jmp	 SHORT $L71522
$L71518:
  016a3	66 81 fa 00 1b	 cmp	 dx, 6912		; 00001b00H
  016a8	75 0f		 jne	 SHORT $L71520

; 3265 : 			{
; 3266 : 				f0seg = sp_f0fsegtars[pDphsettar->phocur & PVALUE];

  016aa	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  016af	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _sp_f0fsegtars[eax*2]

; 3267 : 			}
; 3268 : 			else if(tmp == PFFR<<PSFONT)

  016b7	eb 16		 jmp	 SHORT $L71667
$L71520:
  016b9	66 81 fa 00 19	 cmp	 dx, 6400		; 00001900H
  016be	75 13		 jne	 SHORT $L71522

; 3269 : 			{
; 3270 :                 f0seg = fr_f0fsegtars[pDphsettar->phocur & PVALUE];

  016c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _fr_f0fsegtars
  016c6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  016cb	66 8b 04 42	 mov	 ax, WORD PTR [edx+eax*2]
$L71667:
  016cf	89 44 24 10	 mov	 DWORD PTR _f0seg$[esp+24], eax
$L71522:

; 3271 : 			}
; 3272 : 			// f0seg = pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[phocur].f0segtars;
; 3273 : 			//	f0seg = f0fsegtars[pDphsettar->phocur & PVALUE];
; 3274 : 			/*	  Effect is half as much in unstressed segments */
; 3275 : 			#ifndef GERMAN /*The Fstress marker isn't valid for the hwole segment so this is wrong as ften as right
; 3276 : 			I need time to sort out what Fstress etc should really be doing*/
; 3277 : 			if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  016d3	8a 84 8e 58 06
	00 00		 mov	 al, BYTE PTR [esi+ecx*4+1624]

; 3278 : 				f0seg = f0seg >> 1;

  016da	66 8b 6c 24 10	 mov	 bp, WORD PTR _f0seg$[esp+24]
  016df	a8 03		 test	 al, 3
  016e1	75 03		 jne	 SHORT $L71523
  016e3	66 d1 fd	 sar	 bp, 1
$L71523:

; 3279 : 			}
; 3280 : #endif
; 3281 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS;	/* Assume like V-V trans */
; 3282 : 			/* so start new target early */
; 3283 : 			/*        Delay start of f0 rise for upcoming voiceless segment until boundary */
; 3284 :             if ((phone_feature( pDph_t,pDphsettar->phonex_drawt0) & FVOICD) IS_MINUS) {

  016e6	0f bf 4f 68	 movsx	 ecx, WORD PTR [edi+104]
  016ea	51		 push	 ecx
  016eb	56		 push	 esi
  016ec	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH
  016f2	e8 00 00 00 00	 call	 _phone_feature
  016f7	83 c4 08	 add	 esp, 8
  016fa	a8 02		 test	 al, 2
  016fc	75 04		 jne	 SHORT $L71524

; 3285 :                 pDphsettar->extrad = 0;			/* All of rise during voicless */

  016fe	66 89 5f 4e	 mov	 WORD PTR [edi+78], bx
$L71524:

; 3286 :             }
; 3287 : 			/*        Delay f0 fall from voiceless plosive until vot (when glottis closes)*/
; 3288 : 			if ((phone_feature( pDph_t,pDphsettar->phocur) & FVOICD) IS_MINUS) 

  01702	0f bf 57 44	 movsx	 edx, WORD PTR [edi+68]
  01706	52		 push	 edx
  01707	56		 push	 esi
  01708	e8 00 00 00 00	 call	 _phone_feature
  0170d	83 c4 08	 add	 esp, 8
  01710	a8 02		 test	 al, 2
  01712	75 3c		 jne	 SHORT $L71525

; 3289 : 			{	
; 3290 : 				pDphsettar->tarseg1 = f0seg;  /* Gesture fast, go to only 1 lpfilter */
; 3291 : 				pDphsettar->tarseg = 0;
; 3292 : 				pDphsettar->extrad = 1;	/* -V fric, fall starts at voicing onset */
; 3293 : 				if ((phone_feature( pDph_t,pDphsettar->phocur) & FPLOSV) IS_PLUS) {

  01714	0f bf 47 44	 movsx	 eax, WORD PTR [edi+68]
  01718	50		 push	 eax
  01719	56		 push	 esi
  0171a	66 89 6f 6c	 mov	 WORD PTR [edi+108], bp
  0171e	66 89 5f 6a	 mov	 WORD PTR [edi+106], bx
  01722	66 c7 47 4e 01
	00		 mov	 WORD PTR [edi+78], 1
  01728	e8 00 00 00 00	 call	 _phone_feature
  0172d	83 c4 08	 add	 esp, 8
  01730	a8 40		 test	 al, 64			; 00000040H
  01732	74 24		 je	 SHORT $L71528

; 3294 : 					pDphsettar->extrad = 5;		/* -V plos, assume VOT = 32 ms */
; 3295 : 					if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  01734	0f bf 4f 74	 movsx	 ecx, WORD PTR [edi+116]
  01738	66 c7 47 4e 05
	00		 mov	 WORD PTR [edi+78], 5
  0173e	f6 84 8e 58 06
	00 00 03	 test	 BYTE PTR [esi+ecx*4+1624], 3
  01746	75 10		 jne	 SHORT $L71528

; 3296 : 						pDphsettar->extrad = 3;

  01748	66 c7 47 4e 03
	00		 mov	 WORD PTR [edi+78], 3

; 3297 : 					}
; 3298 : 				}
; 3299 :             }
; 3300 : 			else {

  0174e	eb 08		 jmp	 SHORT $L71528
$L71525:

; 3301 : 				pDphsettar->tarseg = f0seg;	  /* Normal gesture for voiced segments is */

  01750	66 89 6f 6a	 mov	 WORD PTR [edi+106], bp

; 3302 : 				pDphsettar->tarseg1 = 0;	  /* slow, use both segmental 1-pole filters */

  01754	66 89 5f 6c	 mov	 WORD PTR [edi+108], bx
$L71528:

; 3303 : 			}
; 3304 :         }
; 3305 : 		
; 3306 : 		/*    Glottal stop gesture, test at beginning of each phoneme */
; 3307 : 		/* eab 11/22/97 per caroline remove glotalization */
; 3308 : #ifndef ENGLISH_UK
; 3309 : 		set_tglst(pDph_t);		

  01758	56		 push	 esi
  01759	e8 00 00 00 00	 call	 _set_tglst

; 3310 : #endif
; 3311 : 		/* Set times of f0 fall pDphsettar->tglstp,pDphsettar->tglstn */
; 3312 : 		
; 3313 : 		if (pDph_t->f0mode< SINGING) {

  0175e	bd 04 00 00 00	 mov	 ebp, 4
  01763	83 c4 04	 add	 esp, 4
  01766	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  0176d	0f 8d c0 00 00
	00		 jge	 $L71529

; 3314 : 			
; 3315 : 			/*	  Filter f0 step and impulse commands to produce next value f0 */
; 3316 : 			/* increment gilde towards target and cancel increment when as close as poss to target
; 3317 : 			eab 1/21/98 */
; 3318 : 			pDphsettar->glide_tot += pDphsettar->glide_inc;

  01773	66 8b 47 3c	 mov	 ax, WORD PTR [edi+60]
  01777	66 01 47 3e	 add	 WORD PTR [edi+62], ax

; 3319 : 			//	WINprintf("male %d %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0]);
; 3320 : 			pDphsettar->glide_step -= pDphsettar->glide_inc;

  0177b	66 29 47 3a	 sub	 WORD PTR [edi+58], ax
  0177f	66 8b 4f 3a	 mov	 cx, WORD PTR [edi+58]

; 3321 : 			/*EAB 1/10/98 set glide_inc to zero if we've reached target*/
; 3322 : 			if(pDphsettar->glide_inc > 0 )

  01783	66 3b c3	 cmp	 ax, bx
  01786	7e 07		 jle	 SHORT $L71668

; 3323 : 			{
; 3324 : 				if ( pDphsettar->glide_step <= pDphsettar->glide_inc)

  01788	66 3b c8	 cmp	 cx, ax
  0178b	7f 0d		 jg	 SHORT $L71534

; 3325 : 				{
; 3326 : 					pDphsettar->glide_inc =0;
; 3327 : 				}
; 3328 : 			}
; 3329 : 			else

  0178d	eb 07		 jmp	 SHORT $L71669
$L71668:

; 3330 : 				if(pDphsettar->glide_inc < 0 )

  0178f	7d 09		 jge	 SHORT $L71534

; 3331 : 				{
; 3332 : 					if ( pDphsettar->glide_step >= pDphsettar->glide_inc)

  01791	66 3b c8	 cmp	 cx, ax
  01794	7c 04		 jl	 SHORT $L71534
$L71669:

; 3333 : 					{
; 3334 : 						pDphsettar->glide_inc =0;

  01796	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx
$L71534:

; 3335 : 					}
; 3336 : 				}
; 3337 : 				
; 3338 : 				f0in = (pDphsettar->tarbas + pDphsettar->tarhat + pDphsettar->tarimp);

  0179a	66 8b 47 5e	 mov	 ax, WORD PTR [edi+94]
  0179e	66 8b 57 5c	 mov	 dx, WORD PTR [edi+92]
  017a2	66 03 d0	 add	 dx, ax
  017a5	66 03 97 96 00
	00 00		 add	 dx, WORD PTR [edi+150]

; 3339 : #ifdef DEBUGF0
; 3340 : 				WINprintf(" tarbas %d,tarbat %d tarimp %d \n",pDphsettar->tarbas,pDphsettar->tarhat,pDphsettar->tarimp);
; 3341 : #endif
; 3342 : 				
; 3343 : 				//debug code deleted eab 1/10/98
; 3344 : 				if (pDphsettar->tarimp != 0)   

  017ac	66 3b c3	 cmp	 ax, bx
  017af	89 54 24 10	 mov	 DWORD PTR _f0in$[esp+24], edx
  017b3	74 0e		 je	 SHORT $L71535

; 3345 : 					pDphsettar->tarimp += pDphsettar->delimp;

  017b5	66 8b 8f 9e 00
	00 00		 mov	 cx, WORD PTR [edi+158]
  017bc	66 03 c8	 add	 cx, ax
  017bf	66 89 4f 5e	 mov	 WORD PTR [edi+94], cx
$L71535:

; 3346 : 				/* Strange way to  */
; 3347 : 				/* make f0 rise gradually for a	  */
; 3348 : 				/* stress-impulse command	  */
; 3349 : 				//	pDphsettar->delimp -=1;
; 3350 : 				pDphsettar->delimp= pDphsettar->delimp>>1;
; 3351 : 				/*	  Reduce segmental tongue height effect of sonorants toward */
; 3352 : 				/*	  end of segment (98% per frame)  */
; 3353 : 				
; 3354 : 				//pDph_t->arg1 = pDphsettar->tarseg; 
; 3355 : 				//pDph_t->arg2 = 16064;    
; 3356 : 				
; 3357 : 				pDphsettar->tarseg = mlsh1(pDphsettar->tarseg,16064);

  017c3	0f bf 47 6a	 movsx	 eax, WORD PTR [edi+106]

; 3358 : 				
; 3359 : 				
; 3360 : 				//WINprintf("tarseg = %d f0in %d \n,",(pDphsettar->tarseg +pDphsettar->tarseg1),f0in);
; 3361 : 				f0in=f0in>>1; //eab 7/21/98 scale to avoid overload

  017c7	66 8b 6c 24 10	 mov	 bp, WORD PTR _f0in$[esp+24]
  017cc	8b d0		 mov	 edx, eax
  017ce	c1 e2 06	 shl	 edx, 6
  017d1	2b d0		 sub	 edx, eax
  017d3	66 d1 bf 9e 00
	00 00		 sar	 WORD PTR [edi+158], 1
  017da	c1 e2 02	 shl	 edx, 2
  017dd	66 d1 fd	 sar	 bp, 1
  017e0	2b d0		 sub	 edx, eax
  017e2	66 89 6c 24 10	 mov	 WORD PTR _f0in$[esp+24], bp

; 3362 : 				filter_seg_commands(pDph_t,f0in);	/* Input is pDphsettar->tarseg, output is pDphsettar->f0s */

  017e7	8b 44 24 10	 mov	 eax, DWORD PTR _f0in$[esp+24]
  017eb	c1 e2 06	 shl	 edx, 6
  017ee	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  017f1	50		 push	 eax
  017f2	56		 push	 esi
  017f3	66 89 57 6a	 mov	 WORD PTR [edi+106], dx
  017f7	e8 00 00 00 00	 call	 _filter_seg_commands

; 3363 : #ifdef REMOVENWSLATER
; 3364 : 				pDph_t->f0s += frac4mul(pDph_t->f0s, pDph_t->f0segscalefac+7000);
; 3365 : #endif
; 3366 : 				f0in += pDphsettar->glide_tot;

  017fc	66 8b 4f 3e	 mov	 cx, WORD PTR [edi+62]
  01800	66 03 cd	 add	 cx, bp

; 3367 : 				filter_commands(pDph_t,f0in);		/* Input is f0in,   output is f0  */

  01803	51		 push	 ecx
  01804	56		 push	 esi
  01805	e8 00 00 00 00	 call	 _filter_commands

; 3368 : 				pDph_t->f0 = pDph_t->f0<<1;

  0180a	66 d1 a6 9c 03
	00 00		 shl	 WORD PTR [esi+924], 1
  01811	66 8b 86 9c 03
	00 00		 mov	 ax, WORD PTR [esi+924]

; 3369 : 				/* Add in glide value to F0 eab 1/21/98*/
; 3370 : 				/* reduce segmental influence per Oliver*/
; 3371 : 				pDph_t->f0prime = pDph_t->f0 + pDph_t->f0s ;	/* This will be spdef-scaled output value */

  01818	66 8b 96 9a 03
	00 00		 mov	 dx, WORD PTR [esi+922]
  0181f	83 c4 10	 add	 esp, 16			; 00000010H
  01822	66 03 d0	 add	 dx, ax
  01825	66 89 96 56 23
	00 00		 mov	 WORD PTR [esi+9046], dx

; 3372 : 				
; 3373 : #ifdef DEBUGF0
; 3374 : 				WINprintf("femalef0 %d \n", pDph_t->f0prime); 
; 3375 : 				WINprintf("female %d %d  pDph_t->f0 %d \n", pDphsettar->glide_tot, 
; 3376 : 					pDph_t->allophons[pDphsettar->np_drawt0], pDph_t->f0); 
; 3377 : #endif
; 3378 : 				
; 3379 : 				
; 3380 : #ifdef CREEKFEMALE
; 3381 : 				if( pDphsettar->nframb >  pDph_t->tcumdur-4 
; 3382 : 					&& pDph_t->clausetype == DECLARATIVE 
; 3383 : 					&& pDph_t->number_words > 5)
; 3384 : 				{
; 3385 : 					pDph_t->avcreek = -6;
; 3386 : 					pDph_t->f0prime = pDph_t->f0prime >>1;
; 3387 : 				}
; 3388 : 				else
; 3389 : 				{
; 3390 : 					pDph_t->avcreek = 0;
; 3391 : 				}
; 3392 : 				
; 3393 : 				//	WINprintf( "phocur %d %d %d F0in %d \n",pDphsettar->phocur, pDphsettar->tarbas, pDph_t->enddrop, pDph_t->f0prime);
; 3394 : #endif
; 3395 : 				
; 3396 : 		}
; 3397 : 		
; 3398 : 		else 

  0182c	bd 04 00 00 00	 mov	 ebp, 4
  01831	eb 09		 jmp	 SHORT $L71536
$L71529:

; 3399 : 		{
; 3400 : 			/*	  Linear interpolation to 'pDphsettar->newnote' over 100 ms or phoneme duration */
; 3401 : 			/* Add vibratto if pDphsettar->vibsw=1  */
; 3402 : 			linear_interp(pDph_t);

  01833	56		 push	 esi
  01834	e8 00 00 00 00	 call	 _linear_interp
  01839	83 c4 04	 add	 esp, 4
$L71536:

; 3403 : 		}
; 3404 : 		
; 3405 : 		/*    Glottalization gesture */
; 3406 : 		/*    F0 dip by 60 Hz linear ramp in 8 frames each direction about pDphsettar->tglstp */
; 3407 : 		dtglst = pDphsettar->nframg - pDphsettar->tglstp;

  0183c	0f bf 4f 50	 movsx	 ecx, WORD PTR [edi+80]
  01840	0f bf 47 4c	 movsx	 eax, WORD PTR [edi+76]
  01844	2b c1		 sub	 eax, ecx

; 3408 : 		if (dtglst < 0)

  01846	79 02		 jns	 SHORT $L71537

; 3409 : 			dtglst = (-dtglst);

  01848	f7 d8		 neg	 eax
$L71537:

; 3410 :         if (dtglst <= 7)

  0184a	83 f8 07	 cmp	 eax, 7
  0184d	7f 1a		 jg	 SHORT $L71538

; 3411 : 		{
; 3412 : 			
; 3413 :             pDph_t->f0prime += ((dtglst * 70) - 550);

  0184f	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  01856	2b c8		 sub	 ecx, eax
  01858	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  0185b	8d 8c 12 da fd
	ff ff		 lea	 ecx, DWORD PTR [edx+edx-550]
  01862	66 01 8e 56 23
	00 00		 add	 WORD PTR [esi+9046], cx
$L71538:

; 3414 : 			
; 3415 : 		}
; 3416 : 		
; 3417 : 		/*	  And reduce AV somewhat (ugly code, but F0 computed before AV) */
; 3418 :         if (dtglst <= 5) {

  01869	83 f8 05	 cmp	 eax, 5
  0186c	7f 10		 jg	 SHORT $L71539

; 3419 : 			pDph_t->avglstop = (6 - dtglst);	/* Global variable, used in PHDRAW.C */

  0186e	ba 06 00 00 00	 mov	 edx, 6
  01873	2b d0		 sub	 edx, eax
  01875	66 89 96 da 03
	00 00		 mov	 WORD PTR [esi+986], dx

; 3420 :         }
; 3421 : 		else 

  0187c	eb 07		 jmp	 SHORT $L71540
$L71539:

; 3422 : 		{
; 3423 : 			pDph_t->avglstop = 0;

  0187e	66 89 9e da 03
	00 00		 mov	 WORD PTR [esi+986], bx
$L71540:

; 3424 : 			
; 3425 : 		}
; 3426 : 		
; 3427 : 		/*    Add f0 drift or flutter (approx 3 and 5-Hz sine waves, each +/-1.0 Hz) */
; 3428 : 		if (pDph_t->f0mode< SINGING) {

  01885	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  0188c	0f 8d e9 00 00
	00		 jge	 $L71548

; 3429 : 			pDphsettar->timecos5 += 131;		/* Prime number to reduce coincidence */

  01892	66 81 47 7e 83
	00		 add	 WORD PTR [edi+126], 131	; 00000083H
  01898	66 8b 47 7e	 mov	 ax, WORD PTR [edi+126]

; 3430 : 			if (pDphsettar->timecos5 > TWOPI)    pDphsettar->timecos5 -= TWOPI;

  0189c	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  018a0	7e 09		 jle	 SHORT $L71542
  018a2	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  018a7	66 89 47 7e	 mov	 WORD PTR [edi+126], ax
$L71542:

; 3431 : 			pDphsettar->timecos3 += 79;

  018ab	66 83 47 7c 4f	 add	 WORD PTR [edi+124], 79	; 0000004fH
  018b0	66 8b 47 7c	 mov	 ax, WORD PTR [edi+124]

; 3432 : 			if (pDphsettar->timecos3 > TWOPI)    pDphsettar->timecos3 -= TWOPI;

  018b4	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  018b8	7e 09		 jle	 SHORT $L71543
  018ba	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  018bf	66 89 47 7c	 mov	 WORD PTR [edi+124], ax
$L71543:

; 3433 : 			pseudojitter = getcosine[pDphsettar->timecos5>>6]
; 3434 : 				- getcosine[pDphsettar->timecos3>>6];
; 3435 : 			//pDph_t->arg1 = pseudojitter;
; 3436 : 			/* eab found flutter is not a speaker def yet*/
; 3437 : 			//pDph_t->arg2 = pDph_t->f0flutter;//4/16/98 eab higher for female voice
; 3438 : 			/* "FLUTTER" spdef parameter, 10% -> +/-1 Hz, */
; 3439 : 			//pDph_t->f0prime += mlsh1(pDph_t->arg1,pDph_t->arg2);	
; 3440 : 			if(pDph_t->clausetype == 2)

  018c3	66 83 be e6 03
	00 00 02	 cmp	 WORD PTR [esi+998], 2
  018cb	75 45		 jne	 SHORT $L71544

; 3441 : 			{
; 3442 : 				pDph_t->f0prime += mlsh1(pseudojitter,pDph_t->f0flutter);

  018cd	0f bf 47 7c	 movsx	 eax, WORD PTR [edi+124]
  018d1	0f bf 57 7e	 movsx	 edx, WORD PTR [edi+126]
  018d5	c1 f8 06	 sar	 eax, 6
  018d8	c1 fa 06	 sar	 edx, 6
  018db	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _getcosine[eax*2]
  018e3	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _getcosine[edx*2]
  018eb	2b c1		 sub	 eax, ecx
  018ed	0f bf 8e 98 03
	00 00		 movsx	 ecx, WORD PTR [esi+920]
  018f4	0f af c1	 imul	 eax, ecx
  018f7	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  018fa	66 01 86 56 23
	00 00		 add	 WORD PTR [esi+9046], ax

; 3443 : 				pDph_t->addjit = -pDph_t->addjit;

  01901	66 8b 96 e8 03
	00 00		 mov	 dx, WORD PTR [esi+1000]
  01908	66 f7 da	 neg	 dx
  0190b	66 89 96 e8 03
	00 00		 mov	 WORD PTR [esi+1000], dx
$L71544:

; 3444 : 			}
; 3445 : 			//WINprintf("after adjit %d \n",pDph_t->f0prime);
; 3446 : 			
; 3447 : 			/*  100% corresp. to +/- 10 Hz max flutter */
; 3448 : 		}
; 3449 : 		
; 3450 : 		/*    Introduce variability to period at startup from a voiceless interval */
; 3451 : 		/*	  not implemented */
; 3452 : 		
; 3453 : 		/*    Scale f0 according to current speaker definition, the number 120 is
; 3454 : 		*    the nominal average pitch of Paul's voice (AP in spdef)  */
; 3455 : 		if (pDph_t->f0mode< SINGING) {

  01912	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  01919	7d 60		 jge	 SHORT $L71548

; 3456 : 			if(pDph_t->clausetype == 2)

  0191b	66 83 be e6 03
	00 00 02	 cmp	 WORD PTR [esi+998], 2
  01923	75 2f		 jne	 SHORT $L71546

; 3457 : 			{
; 3458 : 				pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1800), pDph_t->f0scalefac+1000);

  01925	0f bf 86 da 18
	00 00		 movsx	 eax, WORD PTR [esi+6362]
  0192c	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  01933	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  01938	81 e9 08 07 00
	00		 sub	 ecx, 1800		; 00000708H
  0193e	0f af c1	 imul	 eax, ecx
  01941	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  01944	66 03 86 d8 18
	00 00		 add	 ax, WORD PTR [esi+6360]
  0194b	66 89 86 56 23
	00 00		 mov	 WORD PTR [esi+9046], ax

; 3459 : 				
; 3460 : 			}
; 3461 : 			else

  01952	eb 27		 jmp	 SHORT $L71548
$L71546:

; 3462 : 			{
; 3463 : 				pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1800), pDph_t->f0scalefac);

  01954	0f bf 86 56 23
	00 00		 movsx	 eax, WORD PTR [esi+9046]
  0195b	0f bf 96 da 18
	00 00		 movsx	 edx, WORD PTR [esi+6362]
  01962	2d 08 07 00 00	 sub	 eax, 1800		; 00000708H
  01967	0f af d0	 imul	 edx, eax
  0196a	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0196d	66 03 96 d8 18
	00 00		 add	 dx, WORD PTR [esi+6360]
  01974	66 89 96 56 23
	00 00		 mov	 WORD PTR [esi+9046], dx
$L71548:

; 3464 : 			}
; 3465 : 		}
; 3466 : 		
; 3467 : 		/*    See if f0 exceeds legal bounds, truncate  */
; 3468 :         if (pDph_t->f0prime > HIGHEST_F0) {

  0197b	66 8b 86 56 23
	00 00		 mov	 ax, WORD PTR [esi+9046]
  01982	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  01986	7e 0b		 jle	 SHORT $L71550

; 3469 : 			pDph_t->f0prime = HIGHEST_F0;

  01988	66 c7 86 56 23
	00 00 01 14	 mov	 WORD PTR [esi+9046], 5121 ; 00001401H

; 3470 : 		}
; 3471 :         else if (pDph_t->f0prime < LOWEST_F0) {

  01991	eb 0f		 jmp	 SHORT $L71552
$L71550:
  01993	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  01997	7d 09		 jge	 SHORT $L71552

; 3472 : 			pDph_t->f0prime = LOWEST_F0;

  01999	66 c7 86 56 23
	00 00 f4 01	 mov	 WORD PTR [esi+9046], 500 ; 000001f4H
$L71552:

; 3473 : 		}
; 3474 : 		
; 3475 : 		/*    Change from Middle C = 256 Hz (A = 430.4) to A = 440 Hz (SHOULD RE-DO */
; 3476 : 		/*    TABLE INSTEAD) */
; 3477 : 		if (pDph_t->f0mode== SINGING) {

  019a2	66 39 ae 9c 17
	00 00		 cmp	 WORD PTR [esi+6044], bp
  019a9	75 22		 jne	 SHORT $L71553

; 3478 : 			pDph_t->f0prime = frac4mul(pDph_t->f0prime,4190);

  019ab	0f bf 86 56 23
	00 00		 movsx	 eax, WORD PTR [esi+9046]
  019b2	8b c8		 mov	 ecx, eax
  019b4	c1 e1 06	 shl	 ecx, 6
  019b7	03 c8		 add	 ecx, eax
  019b9	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  019bc	c1 e2 04	 shl	 edx, 4
  019bf	2b d0		 sub	 edx, eax
  019c1	d1 e2		 shl	 edx, 1
  019c3	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  019c6	66 89 96 56 23
	00 00		 mov	 WORD PTR [esi+9046], dx
$L71553:

; 3479 : 		}
; 3480 : 		
; 3481 : 		/*    Save value of period t0 in parameter array  */
; 3482 : 		/*    (ONLY ESSENTIAL DIVIDE INSTRUCTION IN ALL OF DECTALK) */
; 3483 : 		//pDph_t->arg1 = 400;
; 3484 : 		//pDph_t->arg2 = 1000;
; 3485 : 		//pDph_t->arg3 = pDph_t->f0prime;
; 3486 : 		temp = muldv(400, 1000, pDph_t->f0prime);
; 3487 : 		pDph_t->parstochip[OUT_T0] = temp;

  019cd	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  019d4	b8 80 1a 06 00	 mov	 eax, 400000		; 00061a80H
  019d9	99		 cdq
  019da	f7 f9		 idiv	 ecx
  019dc	66 89 86 b0 03
	00 00		 mov	 WORD PTR [esi+944], ax

; 3488 : 		
; 3489 : #ifdef HLSYN
; 3490 : 		pDph_t->parstochip[OUT_T0]  =pDph_t->f0prime;
; 3491 : #endif
; 3492 : 		
; 3493 : 		
; 3494 : 		
; 3495 : 		
; 3496 : #ifdef GRAPHF0
; 3497 : 		
; 3498 : 		for (icnt=0;icnt<=120;icnt++)
; 3499 : 			prntbuf[icnt]=' ';
; 3500 : 		prntbuf[120]='\0';
; 3501 : 		if(pDph_t->malfem == FEMALE) /* Female or childs voice scale to fit*/
; 3502 : 			icnt=((pDph_t->f0prime)/25);
; 3503 : 		else
; 3504 : 			icnt=((pDph_t->f0prime)/10)-50;
; 3505 : 		if(icnt >=120)
; 3506 : 			icnt=120;
; 3507 : 		prntbuf[icnt]='*';
; 3508 : 		WINprintf("%d",pDph_t->f0prime);
; 3509 : 		WINprintf("%s\n",prntbuf);
; 3510 : 		
; 3511 : 		
; 3512 : #endif
; 3513 : 		
; 3514 : 		//	WINprintf("TARBAS %d phone %d  tarhat=%3d tarimp=%3d  f0 =%d \n",
; 3515 : 		//      pDphsettar->tarbas,pDph_t->allophons[pDphsettar->npg],pDphsettar->tarhat, pDphsettar->tarimp,
; 3516 : 		//	pDph_t->f0prime); 
; 3517 : 		//	 if(0)
; 3518 : 		//	 pDph_t->parstochip[OUT_T0]=of0array[oarcnt++];
; 3519 : 		
; 3520 : 		/* debug switch */
; 3521 : 		if (((pKsd_t->logflag) & LOG_OUTPHON) || DT_DBG(PH_DBG,0x008))

  019e3	8b 44 24 14	 mov	 eax, DWORD PTR _pKsd_t$[esp+24]
  019e7	f6 80 c4 03 00
	00 20		 test	 BYTE PTR [eax+964], 32	; 00000020H
  019ee	75 18		 jne	 SHORT $L71556
  019f0	66 8b 80 40 06
	00 00		 mov	 ax, WORD PTR [eax+1600]
  019f7	f6 c4 20	 test	 ah, 32			; 00000020H
  019fa	0f 84 b1 00 00
	00		 je	 $L71455
  01a00	a8 08		 test	 al, 8
  01a02	0f 84 a9 00 00
	00		 je	 $L71455
$L71556:

; 3522 : 		{
; 3523 : #ifdef MSDBG4
; 3524 : 			if (pDphsettar->lastone==-1)
; 3525 : 			{
; 3526 : 				for (keepdur=0;keepdur<TOT_ALLOPHONES;keepdur++)
; 3527 : 				{
; 3528 : 					printf("phone#=%d == %c%c\n",keepdur,pKsd_t->arpabet[keepdur <<1],pKsd_t->arpabet[(keepdur <<1)+1]);
; 3529 : 				}  
; 3530 : 			}
; 3531 : #endif
; 3532 : 			/* if (np == 0 && allophons[np] == GEN_SIL) { lastone=np; }                  */
; 3533 : 			if (pDphsettar->np_drawt0 != pDphsettar->lastone)

  01a08	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  01a0c	66 3b 47 70	 cmp	 ax, WORD PTR [edi+112]
  01a10	0f 84 9b 00 00
	00		 je	 $L71455

; 3534 : 			{
; 3535 : #ifdef MSDBG4 
; 3536 : 				printf("lastone=%d f0prime=%d\n",pDphsettar->lastone,pDph_t->f0prime/10);
; 3537 : 				printf ("allophons[%d]=%d ", pDphsettar->np_drawt0, pDph_t->allophons[pDphsettar->np_drawt0]);
; 3538 : 				printf ("allodurs[%d]=%d\n", pDphsettar->np_drawt0, pDph_t->allodurs[pDphsettar->np_drawt0]*64/10);
; 3539 : #endif
; 3540 : 				if ((pDphsettar->np_drawt0 >= 0))

  01a16	66 3b c3	 cmp	 ax, bx
  01a19	0f 8c 8a 00 00
	00		 jl	 $L71460

; 3541 : 				{
; 3542 : 					
; 3543 : #ifdef MSDOS
; 3544 : 					/*WAIT_PRINT;*/
; 3545 : 					dologphoneme (pDph_t->allophons[pDphsettar->np_drawt0],
; 3546 : 						(pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 3547 : 						(pDph_t->f0prime / 10));
; 3548 : 					printf("\n");
; 3549 : 					/*SIGNAL_PRINT;*/
; 3550 : #else
; 3551 : 					dologphoneme (phTTS, pDph_t->allophons[pDphsettar->np_drawt0],
; 3552 : 						(short)(pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 3553 : 						(short)(pDph_t->f0prime / 10));  // NAL warning removal

  01a1f	0f bf 8e 56 23
	00 00		 movsx	 ecx, WORD PTR [esi+9046]
  01a26	0f bf e8	 movsx	 ebp, ax
  01a29	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01a2e	f7 e9		 imul	 ecx
  01a30	c1 fa 02	 sar	 edx, 2
  01a33	8b c2		 mov	 eax, edx
  01a35	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01a38	03 d0		 add	 edx, eax
  01a3a	0f bf 84 6e 9c
	0d 00 00	 movsx	 eax, WORD PTR [esi+ebp*2+3484]
  01a42	52		 push	 edx
  01a43	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  01a46	c1 e1 03	 shl	 ecx, 3
  01a49	2b c8		 sub	 ecx, eax
  01a4b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01a50	f7 e9		 imul	 ecx
  01a52	c1 fa 02	 sar	 edx, 2
  01a55	8b ca		 mov	 ecx, edx
  01a57	8b 44 24 20	 mov	 eax, DWORD PTR _phTTS$[esp+24]
  01a5b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01a5e	03 d1		 add	 edx, ecx
  01a60	52		 push	 edx
  01a61	66 8b 94 6e ec
	03 00 00	 mov	 dx, WORD PTR [esi+ebp*2+1004]
  01a69	52		 push	 edx
  01a6a	50		 push	 eax
  01a6b	e8 00 00 00 00	 call	 _dologphoneme

; 3554 : #ifdef PRINTFDEBUG
; 3555 : 					printf ("\n");
; 3556 : #endif
; 3557 : 					if (pKsd_t->logflag & LOG_OUTPHON)

  01a70	8b 4c 24 24	 mov	 ecx, DWORD PTR _pKsd_t$[esp+40]
  01a74	83 c4 10	 add	 esp, 16			; 00000010H
  01a77	f6 81 c4 03 00
	00 20		 test	 BYTE PTR [ecx+964], 32	; 00000020H
  01a7e	74 29		 je	 SHORT $L71460

; 3558 : 					{
; 3559 : 						if (fprintf (phTTS->pLogFile, "\n") < 0)

  01a80	8b 74 24 1c	 mov	 esi, DWORD PTR _phTTS$[esp+20]
  01a84	68 00 00 00 00	 push	 OFFSET FLAT:$SG71563
  01a89	8b 96 9c 00 00
	00		 mov	 edx, DWORD PTR [esi+156]
  01a8f	52		 push	 edx
  01a90	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  01a96	83 c4 08	 add	 esp, 8
  01a99	85 c0		 test	 eax, eax
  01a9b	7d 0c		 jge	 SHORT $L71460
$L71664:

; 3560 : 						{
; 3561 : 							TextToSpeechErrorHandler (phTTS,
; 3562 : 								ERROR_WRITING_FILE,
; 3563 : 								0L);

  01a9d	53		 push	 ebx
  01a9e	6a 05		 push	 5
  01aa0	56		 push	 esi
  01aa1	e8 00 00 00 00	 call	 _TextToSpeechErrorHandler
  01aa6	83 c4 0c	 add	 esp, 12			; 0000000cH
$L71460:

; 3564 : 						}
; 3565 : 					}
; 3566 : #endif
; 3567 : 				}
; 3568 : 				/* keepdur = (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10); */		/* eab need to keep orig value of dur */ 
; 3569 : 				/* keepallo = pDph_t->allophons[pDphsettar->np_drawt0]; */
; 3570 : 				pDphsettar->lastone = pDphsettar->np_drawt0;

  01aa9	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  01aad	66 89 47 70	 mov	 WORD PTR [edi+112], ax
$L71455:

; 3571 : 			}
; 3572 : 		}
; 3573 : 		
; 3574 : 		/*    Increment time counters */
; 3575 :         pDphsettar->nfram++;

  01ab1	66 ff 47 46	 inc	 WORD PTR [edi+70]

; 3576 :         pDphsettar->nframs++;

  01ab5	66 ff 47 4a	 inc	 WORD PTR [edi+74]

; 3577 :         pDphsettar->nframg++;

  01ab9	66 ff 47 4c	 inc	 WORD PTR [edi+76]
  01abd	5f		 pop	 edi
  01abe	5e		 pop	 esi
  01abf	5d		 pop	 ebp
  01ac0	5b		 pop	 ebx

; 3578 : 		
; 3579 : #ifndef MSDOS
; 3580 : 		//eab BATS 887 this is the wrong place to output them....
; 3581 : 		//pDph_t->parstochip[OUT_PH] = pDph_t->allophons[pDphsettar->np_drawt0];
; 3582 : 		//pDph_t->parstochip[OUT_DU] = pDph_t->allodurs[pDphsettar->np_drawt0];
; 3583 : #endif
; 3584 : 		
; 3585 : 		
; 3586 : 		
; 3587 : } /* end of fem stuff*/
; 3588 : }

  01ac1	83 c4 08	 add	 esp, 8
  01ac4	c3		 ret	 0
  01ac5	8d 49 00	 npad	 3
$L71671:
  01ac8	00 00 00 00	 DD	 $L71371
  01acc	00 00 00 00	 DD	 $L71374
  01ad0	00 00 00 00	 DD	 $L71375
  01ad4	00 00 00 00	 DD	 $L71378
$L71672:
  01ad8	00 00 00 00	 DD	 $L71392
  01adc	00 00 00 00	 DD	 $L71401
  01ae0	00 00 00 00	 DD	 $L71394
  01ae4	00 00 00 00	 DD	 $L71393
  01ae8	00 00 00 00	 DD	 $L71400
  01aec	00 00 00 00	 DD	 $L71399
$L71673:
  01af0	00 00 00 00	 DD	 $L71469
  01af4	00 00 00 00	 DD	 $L71472
  01af8	00 00 00 00	 DD	 $L71477
  01afc	00 00 00 00	 DD	 $L71480
$L71674:
  01b00	00 00 00 00	 DD	 $L71494
  01b04	00 00 00 00	 DD	 $L71503
  01b08	00 00 00 00	 DD	 $L71496
  01b0c	00 00 00 00	 DD	 $L71495
  01b10	00 00 00 00	 DD	 $L71502
  01b14	00 00 00 00	 DD	 $L71501
_pht0draw ENDP
_TEXT	ENDS
EXTRN	_notetab:BYTE
_TEXT	SEGMENT
_pDph_t$ = 8
_psF0command$ = 12
_set_user_target PROC NEAR

; 3598 : 	short trandur=0;
; 3599 :     PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;
; 3600 : 	
; 3601 : 	if (*psF0command >= 2000)   *psF0command -= 2000;   /* 2000 is offset flag */

  01b20	8b 54 24 08	 mov	 edx, DWORD PTR _psF0command$[esp-4]
  01b24	56		 push	 esi
  01b25	8b 74 24 08	 mov	 esi, DWORD PTR _pDph_t$[esp]
  01b29	66 8b 02	 mov	 ax, WORD PTR [edx]
  01b2c	8b 8e 10 2c 00
	00		 mov	 ecx, DWORD PTR [esi+11280]
  01b32	66 3d d0 07	 cmp	 ax, 2000		; 000007d0H
  01b36	7c 08		 jl	 SHORT $L71571
  01b38	05 30 f8 ff ff	 add	 eax, -2000		; fffff830H
  01b3d	66 89 02	 mov	 WORD PTR [edx], ax
$L71571:

; 3602 : 	if (*psF0command <= 37) {	/* Pointer to C5, highest possible sung note */

  01b40	66 8b 02	 mov	 ax, WORD PTR [edx]
  01b43	66 3d 25 00	 cmp	 ax, 37			; 00000025H
  01b47	7f 36		 jg	 SHORT $L71572

; 3603 : 		
; 3604 : 		pDphsettar->newnote = notetab[*psF0command-1];

  01b49	0f bf c0	 movsx	 eax, ax
  01b4c	66 8b 14 45 fe
	ff ff ff	 mov	 dx, WORD PTR _notetab[eax*2-2]

; 3605 : 		pDphsettar->vibsw = 1;

  01b54	66 c7 81 8c 00
	00 00 01 00	 mov	 WORD PTR [ecx+140], 1
  01b5d	66 89 91 8e 00
	00 00		 mov	 WORD PTR [ecx+142], dx

; 3606 : 		/*	  Set pDphsettar->delnote*4 so transition happens over 16 frames (100 ms) */
; 3607 : 		pDphsettar->delnote = ((pDphsettar->newnote - pDph_t->f0) >> 2);

  01b64	0f bf 86 9c 03
	00 00		 movsx	 eax, WORD PTR [esi+924]
  01b6b	0f bf d2	 movsx	 edx, dx
  01b6e	2b d0		 sub	 edx, eax
  01b70	c1 fa 02	 sar	 edx, 2
  01b73	66 89 91 90 00
	00 00		 mov	 WORD PTR [ecx+144], dx

; 3608 : 	}
; 3609 : 	else {						/* Straight-lines */

  01b7a	e9 b4 00 00 00	 jmp	 $L71582
$L71572:

; 3610 : 		*psF0command *= 10;

  01b7f	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  01b82	d1 e0		 shl	 eax, 1

; 3611 : 		if (*psF0command < LOWEST_F0) 

  01b84	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  01b88	66 89 02	 mov	 WORD PTR [edx], ax
  01b8b	7d 07		 jge	 SHORT $L71574

; 3612 : 		{
; 3613 : 			*psF0command = LOWEST_F0;

  01b8d	66 c7 02 f4 01	 mov	 WORD PTR [edx], 500	; 000001f4H

; 3614 : 		}
; 3615 : 		else if (*psF0command > HIGHEST_F0) 

  01b92	eb 0b		 jmp	 SHORT $L71576
$L71574:
  01b94	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  01b98	7e 05		 jle	 SHORT $L71576

; 3616 : 		{
; 3617 : 			*psF0command = HIGHEST_F0;

  01b9a	66 c7 02 01 14	 mov	 WORD PTR [edx], 5121	; 00001401H
$L71576:

; 3618 : 		}
; 3619 : 		pDphsettar->newnote = *psF0command;

  01b9f	66 8b 02	 mov	 ax, WORD PTR [edx]

; 3620 : 		pDphsettar->vibsw = 0;

  01ba2	66 c7 81 8c 00
	00 00 00 00	 mov	 WORD PTR [ecx+140], 0
  01bab	66 89 81 8e 00
	00 00		 mov	 WORD PTR [ecx+142], ax

; 3621 : 		/*	  Compute duration of linear transition */
; 3622 : 		if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  01bb2	66 83 be 9c 17
	00 00 06	 cmp	 WORD PTR [esi+6044], 6
  01bba	75 12		 jne	 SHORT $L71577

; 3623 : 			trandur = pDphsettar->dtimf0;	

  01bbc	66 8b 51 66	 mov	 dx, WORD PTR [ecx+102]

; 3624 : 			/*		Dur since last f0 command		*/
; 3625 : 			/* OUT		printf("trandur = %d, target=%d, curf0=%d\n",
; 3626 : 			trandur, pDphsettar->newnote, f0);  END OUT */
; 3627 : 			if (trandur == 0)  

  01bc0	66 85 d2	 test	 dx, dx
  01bc3	75 15		 jne	 SHORT $L71579

; 3628 : 				pDph_t->f0 = pDphsettar->newnote;

  01bc5	66 89 86 9c 03
	00 00		 mov	 WORD PTR [esi+924], ax

; 3629 : 		}
; 3630 : 		else {	

  01bcc	eb 0c		 jmp	 SHORT $L71579
$L71577:

; 3631 : 			trandur = pDph_t->allodurs[pDphsettar->npg+1];	/* Dur of cur phoneme */

  01bce	0f bf 51 76	 movsx	 edx, WORD PTR [ecx+118]
  01bd2	66 8b 94 56 9e
	0d 00 00	 mov	 dx, WORD PTR [esi+edx*2+3486]
$L71579:

; 3632 : 		}
; 3633 : 		/*	  Compute incremental change to f0*10 every frame */
; 3634 : 		pDphsettar->delnote = (pDphsettar->newnote - pDph_t->f0) << 2;	/* f0 change times 40 */

  01bda	66 8b 81 8e 00
	00 00		 mov	 ax, WORD PTR [ecx+142]
  01be1	66 2b 86 9c 03
	00 00		 sub	 ax, WORD PTR [esi+924]
  01be8	c1 e0 02	 shl	 eax, 2

; 3635 : 		if (pDphsettar->delnote > 0) {

  01beb	66 85 c0	 test	 ax, ax
  01bee	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
  01bf5	7e 0b		 jle	 SHORT $L71580

; 3636 : 			pDphsettar->delnote += (trandur - 1);	/* Round upward */

  01bf7	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  01bfb	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71580:

; 3637 : 		}
; 3638 : 		if (pDphsettar->delnote < 0) {

  01c02	66 8b 81 90 00
	00 00		 mov	 ax, WORD PTR [ecx+144]
  01c09	66 85 c0	 test	 ax, ax
  01c0c	7d 0a		 jge	 SHORT $L71581

; 3639 : 			pDphsettar->delnote -= (trandur - 1);	/* Round downward */

  01c0e	2b c2		 sub	 eax, edx
  01c10	40		 inc	 eax
  01c11	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71581:

; 3640 : 		}
; 3641 : 		if (trandur != 0) {

  01c18	66 85 d2	 test	 dx, dx
  01c1b	74 16		 je	 SHORT $L71582

; 3642 : 			pDphsettar->delnote /= trandur;

  01c1d	0f bf 81 90 00
	00 00		 movsx	 eax, WORD PTR [ecx+144]
  01c24	53		 push	 ebx
  01c25	0f bf da	 movsx	 ebx, dx
  01c28	99		 cdq
  01c29	f7 fb		 idiv	 ebx
  01c2b	5b		 pop	 ebx
  01c2c	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71582:

; 3643 : 		}
; 3644 : 		/*	  ELSE INSTANTANEOUS JUMP, was  8-frame (50 ms) transition */
; 3645 : 		/*	  OUT	    else {
; 3646 : 		pDphsettar->delnote = pDphsettar->delnote >> 1;
; 3647 : 		}
; 3648 : 		END OUT */
; 3649 : 	}
; 3650 : 	pDphsettar->delcum = 0;

  01c33	66 c7 81 92 00
	00 00 00 00	 mov	 WORD PTR [ecx+146], 0

; 3651 : 	pDphsettar->f0start = pDph_t->f0;

  01c3c	66 8b 96 9c 03
	00 00		 mov	 dx, WORD PTR [esi+924]
  01c43	66 89 91 94 00
	00 00		 mov	 WORD PTR [ecx+148], dx
  01c4a	5e		 pop	 esi

; 3652 : }

  01c4b	c3		 ret	 0
_set_user_target ENDP
_TEXT	ENDS
EXTRN	_place:NEAR
_TEXT	SEGMENT
_pDph_t$ = 8
_set_tglst PROC NEAR

; 3661 : {

  01c50	56		 push	 esi
  01c51	57		 push	 edi

; 3662 : 	PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01c52	8b 7c 24 0c	 mov	 edi, DWORD PTR _pDph_t$[esp+4]
  01c56	8b b7 10 2c 00
	00		 mov	 esi, DWORD PTR [edi+11280]

; 3663 : 	
; 3664 : 	if (pDphsettar->nframg >= pDphsettar->segdrg) {

  01c5c	66 8b 46 4c	 mov	 ax, WORD PTR [esi+76]
  01c60	66 8b 4e 56	 mov	 cx, WORD PTR [esi+86]
  01c64	66 3b c1	 cmp	 ax, cx
  01c67	0f 8c 63 01 00
	00		 jl	 $L71587

; 3665 : 		pDphsettar->nframg -= pDphsettar->segdrg;

  01c6d	2b c1		 sub	 eax, ecx

; 3666 : 		pDphsettar->segdrg = pDph_t->allodurs[++pDphsettar->npg];

  01c6f	66 ff 46 76	 inc	 WORD PTR [esi+118]
  01c73	66 89 46 4c	 mov	 WORD PTR [esi+76], ax

; 3667 : 		/*        Cancel glottal stop gesture that occurred at last phone onset */
; 3668 : 		if (pDphsettar->tglstp == 0)    

  01c77	66 83 7e 50 00	 cmp	 WORD PTR [esi+80], 0
  01c7c	0f bf 46 76	 movsx	 eax, WORD PTR [esi+118]
  01c80	66 8b 8c 47 9c
	0d 00 00	 mov	 cx, WORD PTR [edi+eax*2+3484]
  01c88	66 89 4e 56	 mov	 WORD PTR [esi+86], cx
  01c8c	b9 38 ff ff ff	 mov	 ecx, -200		; ffffff38H
  01c91	75 07		 jne	 SHORT $L71677

; 3669 : 			pDphsettar->tglstp = -200;

  01c93	66 89 4e 50	 mov	 WORD PTR [esi+80], cx

; 3670 : 		/*        Start second half of glottal stop gesture */
; 3671 : 		if (pDphsettar->tglstp > 0) 

  01c97	66 85 c9	 test	 cx, cx
$L71677:
  01c9a	7e 06		 jle	 SHORT $L71589

; 3672 : 		{
; 3673 : 			pDphsettar->tglstp = 0;

  01c9c	66 c7 46 50 00
	00		 mov	 WORD PTR [esi+80], 0
$L71589:

; 3674 : 		}
; 3675 : 		
; 3676 : 		/*        Insert glottal stop after cur seg */
; 3677 : 		/*         if next segment a vowel? */
; 3678 : 		/*         and is next segment in first syllable? */
; 3679 : 		/*         and is current segment in word-final rime? */
; 3680 : 		/*         and is next segment not the diphthong /YU/? */
; 3681 : 		pDphsettar->tglstn = -200;

  01ca2	66 89 4e 52	 mov	 WORD PTR [esi+82], cx

; 3682 : 		if (((phone_feature( pDph_t,pDph_t->allophons[pDphsettar->npg+1]) & FVOWEL) IS_PLUS)
; 3683 : 			&& ((pDph_t->allofeats[pDphsettar->npg+1] & (FMEDIALSYL & FFINALSYL)) IS_MINUS)
; 3684 : 			&& ((pDph_t->allofeats[pDphsettar->npg] & FBOUNDARY) >= FWBNEXT)
; 3685 : 			&& (pDph_t->allophons[pDphsettar->npg+1] != USP_YU)) {

  01ca6	0f bf 94 47 ee
	03 00 00	 movsx	 edx, WORD PTR [edi+eax*2+1006]
  01cae	52		 push	 edx
  01caf	57		 push	 edi
  01cb0	e8 00 00 00 00	 call	 _phone_feature
  01cb5	83 c4 08	 add	 esp, 8
  01cb8	a8 04		 test	 al, 4
  01cba	0f 84 bd 00 00
	00		 je	 $L71596
  01cc0	0f bf 46 76	 movsx	 eax, WORD PTR [esi+118]
  01cc4	f6 84 87 5c 06
	00 00 10	 test	 BYTE PTR [edi+eax*4+1628], 16 ; 00000010H
  01ccc	0f 85 ab 00 00
	00		 jne	 $L71596
  01cd2	8b 8c 87 58 06
	00 00		 mov	 ecx, DWORD PTR [edi+eax*4+1624]
  01cd9	81 e1 e0 01 00
	00		 and	 ecx, 480		; 000001e0H
  01cdf	83 f9 60	 cmp	 ecx, 96			; 00000060H
  01ce2	0f 82 95 00 00
	00		 jb	 $L71596
  01ce8	66 81 bc 47 ee
	03 00 00 10 1e	 cmp	 WORD PTR [edi+eax*2+1006], 7696 ; 00001e10H
  01cf2	0f 84 85 00 00
	00		 je	 $L71596

; 3686 : 			/*	      If cur seg is vowel, don't do it unless vowel ident, or pbound */
; 3687 : 			if ((phone_feature( pDph_t,pDph_t->allophons[pDphsettar->npg]) & FSYLL) IS_PLUS) {

  01cf8	0f bf 94 47 ec
	03 00 00	 movsx	 edx, WORD PTR [edi+eax*2+1004]
  01d00	52		 push	 edx
  01d01	57		 push	 edi
  01d02	e8 00 00 00 00	 call	 _phone_feature
  01d07	83 c4 08	 add	 esp, 8
  01d0a	a8 01		 test	 al, 1
  01d0c	74 3f		 je	 SHORT $L71591

; 3688 : 				if (((pDph_t->allophons[pDphsettar->npg] == pDph_t->allophons[pDphsettar->npg+1])
; 3689 : 					&& ((pDph_t->allofeats[pDphsettar->npg+1] & FSTRESS_1) IS_PLUS) )
; 3690 : 					|| ((pDph_t->allofeats[pDphsettar->npg] & FBOUNDARY) >= FVPNEXT)) {

  01d0e	0f bf 46 76	 movsx	 eax, WORD PTR [esi+118]
  01d12	66 8b 8c 47 ec
	03 00 00	 mov	 cx, WORD PTR [edi+eax*2+1004]
  01d1a	66 3b 8c 47 ee
	03 00 00	 cmp	 cx, WORD PTR [edi+eax*2+1006]
  01d22	75 0a		 jne	 SHORT $L71594
  01d24	f6 84 87 5c 06
	00 00 01	 test	 BYTE PTR [edi+eax*4+1628], 1
  01d2c	75 15		 jne	 SHORT $L71593
$L71594:
  01d2e	8b 94 87 58 06
	00 00		 mov	 edx, DWORD PTR [edi+eax*4+1624]
  01d35	81 e2 e0 01 00
	00		 and	 edx, 480		; 000001e0H
  01d3b	81 fa a0 00 00
	00		 cmp	 edx, 160		; 000000a0H
  01d41	72 3a		 jb	 SHORT $L71596
$L71593:

; 3691 : 					pDphsettar->tglstn = pDphsettar->segdrg;

  01d43	66 8b 46 56	 mov	 ax, WORD PTR [esi+86]
  01d47	66 89 46 52	 mov	 WORD PTR [esi+82], ax

; 3692 : 				}
; 3693 : 			}
; 3694 : 			/*	      If  next segment primary stressed, */
; 3695 : 			/*	      and if curr seg a consonant other than a plosive, do it */
; 3696 : 			else if ( ((phone_feature( pDph_t,pDph_t->allophons[pDphsettar->npg]) & FPLOSV) IS_MINUS)

  01d4b	eb 30		 jmp	 SHORT $L71596
$L71591:

; 3697 : 				/*&& (pDph_t->allophons[pDphsettar->npg] != DX)*/
; 3698 : 				&& ((pDph_t->allofeats[pDphsettar->npg+1] & FSTRESS_1) IS_PLUS) ) {

  01d4d	0f bf 4e 76	 movsx	 ecx, WORD PTR [esi+118]
  01d51	0f bf 94 4f ec
	03 00 00	 movsx	 edx, WORD PTR [edi+ecx*2+1004]
  01d59	52		 push	 edx
  01d5a	57		 push	 edi
  01d5b	e8 00 00 00 00	 call	 _phone_feature
  01d60	83 c4 08	 add	 esp, 8
  01d63	a8 40		 test	 al, 64			; 00000040H
  01d65	75 16		 jne	 SHORT $L71596
  01d67	0f bf 46 76	 movsx	 eax, WORD PTR [esi+118]
  01d6b	f6 84 87 5c 06
	00 00 01	 test	 BYTE PTR [edi+eax*4+1628], 1
  01d73	74 08		 je	 SHORT $L71596

; 3699 : 				pDphsettar->tglstn = pDphsettar->segdrg;

  01d75	66 8b 4e 56	 mov	 cx, WORD PTR [esi+86]
  01d79	66 89 4e 52	 mov	 WORD PTR [esi+82], cx
$L71596:

; 3700 : 			}
; 3701 : 		}
; 3702 : 		/*        And at beginning and end of glottalized segs TQ and Q */
; 3703 :         //    if ((pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[pDph_t->allophons[pDphsettar->npg+1]].place & FGLOTTAL) IS_PLUS) {
; 3704 : 		//      pDphsettar->tglstn = pDphsettar->segdrg;
; 3705 : 		
; 3706 : 		//}
; 3707 : 		//if ((pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[pDph_t->allophons[pDphsettar->npg]].place & FGLOTTAL) IS_PLUS) 
; 3708 : 		//{
; 3709 : 		//  pDphsettar->tglstn = pDphsettar->segdrg;
; 3710 : 		//}
; 3711 : 		//wrong! fix later
; 3712 : 		if((pDphsettar->npg + 1 <= pDph_t->nallotot) &&
; 3713 : 			(place(pDph_t->allophons[pDphsettar->npg + 1] ) & FGLOTTAL) IS_PLUS)

  01d7d	0f bf 46 76	 movsx	 eax, WORD PTR [esi+118]
  01d81	0f bf 97 06 15
	00 00		 movsx	 edx, WORD PTR [edi+5382]
  01d88	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  01d8b	3b ca		 cmp	 ecx, edx
  01d8d	7f 1d		 jg	 SHORT $L71597
  01d8f	0f bf 94 47 ee
	03 00 00	 movsx	 edx, WORD PTR [edi+eax*2+1006]
  01d97	52		 push	 edx
  01d98	e8 00 00 00 00	 call	 _place
  01d9d	83 c4 04	 add	 esp, 4
  01da0	a8 20		 test	 al, 32			; 00000020H
  01da2	74 08		 je	 SHORT $L71597

; 3714 : 		{
; 3715 : 			pDphsettar->tglstn = pDphsettar->segdrg;

  01da4	66 8b 46 56	 mov	 ax, WORD PTR [esi+86]
  01da8	66 89 46 52	 mov	 WORD PTR [esi+82], ax
$L71597:

; 3716 : 		}
; 3717 : 		
; 3718 : 		if ((place(pDph_t->allophons[pDphsettar->npg]) & FGLOTTAL) IS_PLUS)

  01dac	0f bf 4e 76	 movsx	 ecx, WORD PTR [esi+118]
  01db0	0f bf 94 4f ec
	03 00 00	 movsx	 edx, WORD PTR [edi+ecx*2+1004]
  01db8	52		 push	 edx
  01db9	e8 00 00 00 00	 call	 _place
  01dbe	83 c4 04	 add	 esp, 4
  01dc1	a8 20		 test	 al, 32			; 00000020H
  01dc3	74 24		 je	 SHORT $L71600

; 3719 : 		{
; 3720 : 			pDphsettar->tglstn = pDphsettar->segdrg;

  01dc5	66 8b 46 56	 mov	 ax, WORD PTR [esi+86]
  01dc9	5f		 pop	 edi
  01dca	66 89 46 52	 mov	 WORD PTR [esi+82], ax
  01dce	5e		 pop	 esi

; 3742 : 		
; 3743 : 	}
; 3744 : }

  01dcf	c3		 ret	 0
$L71587:

; 3721 : 		}
; 3722 : #ifdef GERMAN
; 3723 : 		/*EAB 2/25/98 This is applying more broadly than  it suppose to I will review this with
; 3724 : 		oliver and refine it it doesn't check for stress in next syllable and is it the sequence der 
; 3725 : 		or the word wbound not being checked either*/
; 3726 : 		
; 3727 : 		/* Rule 1a: The word "der" the r is an allophonic glottal stop before an unstressed syllable */
; 3728 : 		if ((pDph_t->allophons[pDphsettar->npg] == GRP_R)
; 3729 : 			&& ((phone_feature( pDph_t,pDph_t->allophons[pDphsettar->npg + 1]) & FVOWEL) IS_PLUS)
; 3730 : 			&& (pDph_t->allofeats[pDphsettar->npg] & FWBNEXT))
; 3731 : 		{
; 3732 : 			pDphsettar->tglstn = pDphsettar->segdrg;
; 3733 : 		}
; 3734 : #endif
; 3735 : 		
; 3736 : 	}
; 3737 : 	
; 3738 : 	/*    Wait until current gl stop gesture over before setting time of next one */
; 3739 : 	else if ((pDphsettar->nframg == 8) || (pDphsettar->nframg == (pDphsettar->segdrg - 1))) 

  01dd0	66 3d 08 00	 cmp	 ax, 8
  01dd4	74 0b		 je	 SHORT $L71601
  01dd6	0f bf c9	 movsx	 ecx, cx
  01dd9	0f bf d0	 movsx	 edx, ax
  01ddc	49		 dec	 ecx
  01ddd	3b d1		 cmp	 edx, ecx
  01ddf	75 08		 jne	 SHORT $L71600
$L71601:

; 3740 : 	{
; 3741 : 		pDphsettar->tglstp = pDphsettar->tglstn;

  01de1	66 8b 46 52	 mov	 ax, WORD PTR [esi+82]
  01de5	66 89 46 50	 mov	 WORD PTR [esi+80], ax
$L71600:
  01de9	5f		 pop	 edi
  01dea	5e		 pop	 esi

; 3742 : 		
; 3743 : 	}
; 3744 : }

  01deb	c3		 ret	 0
_set_tglst ENDP
_pDph_t$ = 8
_f0in$ = 12
_filter_commands PROC NEAR

; 3753 : {		/* Convert 'f0in' command to smoothed 'f0' */

  01df0	56		 push	 esi
  01df1	57		 push	 edi

; 3754 : 	
; 3755 : 	short f0outa, f0outb, f0outc, f0outd, f0out1, f0out2;
; 3756 : 	
; 3757 : 	PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01df2	8b 7c 24 0c	 mov	 edi, DWORD PTR _pDph_t$[esp+4]

; 3758 : 	
; 3759 : 	/*    First pole (separate into 2 poles to min truncation errors) */
; 3760 : 	//pDph_t->arg1 = pDphsettar->f0a1;
; 3761 : 	//pDph_t->arg2 = f0in;
; 3762 : 	f0outa = mlsh1(pDphsettar->f0a1,f0in);
; 3763 : 	//pDph_t->arg1 = pDphsettar->f0b;
; 3764 : 	//pDph_t->arg2 = pDphsettar->f0las1;
; 3765 : 	f0outb = mlsh1(pDphsettar->f0b,pDphsettar->f0las1);
; 3766 : 	f0out1 = f0outa + f0outb;

  01df6	0f bf 44 24 10	 movsx	 eax, WORD PTR _f0in$[esp+4]
  01dfb	8b 8f 10 2c 00
	00		 mov	 ecx, DWORD PTR [edi+11280]
  01e01	0f bf 51 64	 movsx	 edx, WORD PTR [ecx+100]

; 3767 : 	pDphsettar->f0las1 = f0out1;
; 3768 : 	/*    Second pole */
; 3769 : 	//pDph_t->arg1 = pDphsettar->f0a2;
; 3770 : 	//pDph_t->arg2 = f0out1;
; 3771 : 	f0outc = mlsh1(pDphsettar->f0a2,f0out1);
; 3772 : 	//pDph_t->arg1 = pDphsettar->f0b;
; 3773 : 	//pDph_t->arg2 = pDphsettar->f0las2;
; 3774 : 	f0outd = mlsh1(pDphsettar->f0b,pDphsettar->f0las2);
; 3775 : 	f0out2 = f0outc + f0outd;
; 3776 : 	pDphsettar->f0las2 = f0out2;
; 3777 : 	pDph_t->f0 = f0out2 >> F0SHFT;	/* Unscaled fundamental frequency	   */

  01e05	0f bf 71 62	 movsx	 esi, WORD PTR [ecx+98]
  01e09	0f af d0	 imul	 edx, eax
  01e0c	0f bf 41 58	 movsx	 eax, WORD PTR [ecx+88]
  01e10	0f af c6	 imul	 eax, esi
  01e13	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01e16	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  01e19	03 d0		 add	 edx, eax
  01e1b	0f bf 41 60	 movsx	 eax, WORD PTR [ecx+96]
  01e1f	66 89 51 58	 mov	 WORD PTR [ecx+88], dx
  01e23	0f bf d2	 movsx	 edx, dx
  01e26	0f af c2	 imul	 eax, edx
  01e29	0f bf 51 5a	 movsx	 edx, WORD PTR [ecx+90]
  01e2d	0f af d6	 imul	 edx, esi
  01e30	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  01e33	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01e36	03 c2		 add	 eax, edx
  01e38	66 89 41 5a	 mov	 WORD PTR [ecx+90], ax
  01e3c	66 c1 f8 03	 sar	 ax, 3
  01e40	66 89 87 9c 03
	00 00		 mov	 WORD PTR [edi+924], ax
  01e47	5f		 pop	 edi
  01e48	5e		 pop	 esi

; 3778 : 	
; 3779 : #if 0
; 3780 : 	//	printf(
; 3781 : 	//"[%s] pDphsettar->tarbas=%4d pDphsettar->tarhat=%3d pDphsettar->tarimp=%3d tarsum=%4d\n",
; 3782 : 	//        phprint(pDph_t->allophons[pDphsettar->npg]), pDphsettar->tarbas, pDphsettar->tarhat, pDphsettar->tarimp, f0in);
; 3783 : #endif
; 3784 : 	
; 3785 : 	
; 3786 : 	/*    (Check for overloads if change filter tc or size of impulses) */
; 3787 : #if 0
; 3788 : 	WINprintf("f0in=%6d   a=%6d b=%6d 1=%6d c=%6d d=%6d 2=%6d\n",
; 3789 : 		f0in, f0outa, f0outb, f0out1, f0outc, f0outd, f0out2);
; 3790 : #endif
; 3791 : }

  01e49	c3		 ret	 0
_filter_commands ENDP
_pDph_t$ = 8
_filter_seg_commands PROC NEAR

; 3800 : {		/* Convert 'f0in' command to smoothed 'pDphsettar->f0s' 

  01e50	56		 push	 esi

; 3801 : 	Input is realy tarseg comment about f0in is wrong*/
; 3802 : 	
; 3803 : 	short f0souta, f0soutb, f0soutc, f0soutd, f0sout1, f0sout2;
; 3804 : 	PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01e51	8b 74 24 08	 mov	 esi, DWORD PTR _pDph_t$[esp]
  01e55	57		 push	 edi
  01e56	8b 86 10 2c 00
	00		 mov	 eax, DWORD PTR [esi+11280]

; 3805 : 	/*    First pole (separate into 2 poles to min truncation errors) */
; 3806 : 	//pDph_t->arg1 = pDphsettar->f0sa1;
; 3807 : 	//pDph_t->arg2 = pDphsettar->tarseg;
; 3808 : 	f0souta = mlsh1(pDphsettar->f0sa1,pDphsettar->tarseg);
; 3809 : 	//pDph_t->arg1 = pDphsettar->f0sb;
; 3810 : 	//pDph_t->arg2 = pDphsettar->f0slas1;
; 3811 : 	f0soutb = mlsh1(pDphsettar->f0sb,pDphsettar->f0slas1);
; 3812 : 	f0sout1 = f0souta + f0soutb;

  01e5c	0f bf 88 a4 00
	00 00		 movsx	 ecx, WORD PTR [eax+164]
  01e63	0f bf 78 6a	 movsx	 edi, WORD PTR [eax+106]

; 3813 : 	pDphsettar->f0slas1 = f0sout1;
; 3814 : 	/*    Second pole */
; 3815 : 	//pDph_t->arg1 = pDphsettar->f0sa2;
; 3816 : 	//pDph_t->arg2 = f0sout1 + (pDphsettar->tarseg1 << F0SHFT);	/* Use only one pole */
; 3817 : 	f0soutc = mlsh1(pDphsettar->f0sa2,(f0sout1 + (pDphsettar->tarseg1 << F0SHFT)));
; 3818 : 	//pDph_t->arg1 = pDphsettar->f0sb;
; 3819 : 	//pDph_t->arg2 = pDphsettar->f0slas2;
; 3820 : 	f0soutd = mlsh1(pDphsettar->f0sb,pDphsettar->f0slas2);
; 3821 : 	f0sout2 = f0soutc + f0soutd;
; 3822 : 	pDphsettar->f0slas2 = f0sout2;
; 3823 : 	pDph_t->f0s = f0sout2 >> F0SHFT;  /* Unscaled fundamental frequency	   */

  01e67	0f bf 90 a2 00
	00 00		 movsx	 edx, WORD PTR [eax+162]
  01e6e	0f af cf	 imul	 ecx, edi
  01e71	0f bf b8 98 00
	00 00		 movsx	 edi, WORD PTR [eax+152]
  01e78	0f af fa	 imul	 edi, edx
  01e7b	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  01e7e	c1 ff 0e	 sar	 edi, 14			; 0000000eH
  01e81	03 cf		 add	 ecx, edi
  01e83	0f bf 78 6c	 movsx	 edi, WORD PTR [eax+108]
  01e87	66 89 88 98 00
	00 00		 mov	 WORD PTR [eax+152], cx
  01e8e	0f bf c9	 movsx	 ecx, cx
  01e91	8d 0c f9	 lea	 ecx, DWORD PTR [ecx+edi*8]
  01e94	0f bf b8 a0 00
	00 00		 movsx	 edi, WORD PTR [eax+160]
  01e9b	0f af cf	 imul	 ecx, edi
  01e9e	0f bf b8 9a 00
	00 00		 movsx	 edi, WORD PTR [eax+154]
  01ea5	0f af fa	 imul	 edi, edx
  01ea8	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  01eab	c1 ff 0e	 sar	 edi, 14			; 0000000eH
  01eae	03 cf		 add	 ecx, edi
  01eb0	5f		 pop	 edi
  01eb1	66 89 88 9a 00
	00 00		 mov	 WORD PTR [eax+154], cx
  01eb8	66 c1 f9 03	 sar	 cx, 3
  01ebc	66 89 8e 9a 03
	00 00		 mov	 WORD PTR [esi+922], cx
  01ec3	5e		 pop	 esi

; 3824 : 	
; 3825 : #if 0
; 3826 : 	WINprintf("[%s] pDphsettar->tarseg=%3d pDphsettar->tarseg1=%3d\n",
; 3827 : 		phprint(pDph_t->allophons[pDphsettar->npg]), pDphsettar->tarseg, pDphsettar->tarseg1);
; 3828 : #endif
; 3829 : 	/*    (Check for overloads if change filter tc or size of impulses) */
; 3830 : #if 0
; 3831 : 	WINprintf("  a=%6d b=%6d 1=%6d c=%6d d=%6d 2=%6d  pDphsettar->f0s=%4d\n",
; 3832 : 		f0souta, f0soutb, f0sout1, f0soutc, f0soutd, f0sout2, pDphsettar->f0s);
; 3833 : #endif
; 3834 : }

  01ec4	c3		 ret	 0
_filter_seg_commands ENDP
_pDph_t$ = 8
_linear_interp PROC NEAR

; 3844 : 	PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01ed0	8b 54 24 04	 mov	 edx, DWORD PTR _pDph_t$[esp-4]
  01ed4	56		 push	 esi
  01ed5	57		 push	 edi

; 3845 : 	pDphsettar->delcum += pDphsettar->delnote;
; 3846 : 	pDph_t->f0 = pDphsettar->f0start + (pDphsettar->delcum >> 2);
; 3847 : 	
; 3848 : 	if (pDphsettar->delnote >= 0) {			/* Do not overshoot pDphsettar->newnote */

  01ed6	33 ff		 xor	 edi, edi
  01ed8	8b 82 10 2c 00
	00		 mov	 eax, DWORD PTR [edx+11280]
  01ede	66 8b 88 90 00
	00 00		 mov	 cx, WORD PTR [eax+144]
  01ee5	66 01 88 92 00
	00 00		 add	 WORD PTR [eax+146], cx
  01eec	66 8b 88 92 00
	00 00		 mov	 cx, WORD PTR [eax+146]
  01ef3	66 c1 f9 02	 sar	 cx, 2
  01ef7	66 03 88 94 00
	00 00		 add	 cx, WORD PTR [eax+148]
  01efe	66 89 8a 9c 03
	00 00		 mov	 WORD PTR [edx+924], cx
  01f05	66 39 b8 90 00
	00 00		 cmp	 WORD PTR [eax+144], di

; 3849 : 		if (pDph_t->f0 > pDphsettar->newnote) {

  01f0c	66 8b b0 8e 00
	00 00		 mov	 si, WORD PTR [eax+142]
  01f13	7c 07		 jl	 SHORT $L71630
  01f15	66 3b ce	 cmp	 cx, si
  01f18	7e 2a		 jle	 SHORT $L71633

; 3850 : 			pDph_t->f0 = pDphsettar->newnote;
; 3851 : 			pDphsettar->f0start = pDphsettar->newnote;
; 3852 : 			pDphsettar->delcum = 0;
; 3853 : 			pDphsettar->delnote = 0;
; 3854 : 		}
; 3855 : 	}
; 3856 : 	else {

  01f1a	eb 05		 jmp	 SHORT $L71681
$L71630:

; 3857 : 		if (pDph_t->f0 < pDphsettar->newnote) {

  01f1c	66 3b ce	 cmp	 cx, si
  01f1f	7d 23		 jge	 SHORT $L71633
$L71681:

; 3858 : 			pDph_t->f0 = pDphsettar->newnote;

  01f21	66 89 b2 9c 03
	00 00		 mov	 WORD PTR [edx+924], si

; 3859 : 			pDphsettar->f0start = pDphsettar->newnote;

  01f28	66 8b 88 8e 00
	00 00		 mov	 cx, WORD PTR [eax+142]
  01f2f	66 89 88 94 00
	00 00		 mov	 WORD PTR [eax+148], cx

; 3860 : 			pDphsettar->delcum = 0;

  01f36	66 89 b8 92 00
	00 00		 mov	 WORD PTR [eax+146], di

; 3861 : 			pDphsettar->delnote = 0;

  01f3d	66 89 b8 90 00
	00 00		 mov	 WORD PTR [eax+144], di
$L71633:

; 3862 : 		}
; 3863 : 	}
; 3864 : 	pDph_t->f0prime = pDph_t->f0;				/* To be scaled by spdef */

  01f44	66 8b 8a 9c 03
	00 00		 mov	 cx, WORD PTR [edx+924]
  01f4b	5f		 pop	 edi
  01f4c	66 89 8a 56 23
	00 00		 mov	 WORD PTR [edx+9046], cx

; 3865 : 	
; 3866 : 	if (pDphsettar->vibsw == 1) 

  01f53	66 83 b8 8c 00
	00 00 01	 cmp	 WORD PTR [eax+140], 1
  01f5b	5e		 pop	 esi
  01f5c	75 41		 jne	 SHORT $L71634

; 3867 : 	{			/* Singing */
; 3868 : 		/*	  Add vibratto of 6.2 Hz (25 frames/cycle), +/- 2.05 Hz ampl. */
; 3869 : 		pDphsettar->timecosvib += 165;

  01f5e	66 81 80 84 00
	00 00 a5 00	 add	 WORD PTR [eax+132], 165	; 000000a5H
  01f67	66 8b 88 84 00
	00 00		 mov	 cx, WORD PTR [eax+132]

; 3870 : 		if (pDphsettar->timecosvib > TWOPI)    

  01f6e	66 81 f9 00 10	 cmp	 cx, 4096		; 00001000H
  01f73	7e 0d		 jle	 SHORT $L71635

; 3871 : 			pDphsettar->timecosvib -= TWOPI;

  01f75	81 c1 00 f0 ff
	ff		 add	 ecx, -4096		; fffff000H
  01f7b	66 89 88 84 00
	00 00		 mov	 WORD PTR [eax+132], cx
$L71635:

; 3872 : 		pDph_t->f0prime += getcosine[pDphsettar->timecosvib>>6] >> 3;

  01f82	0f bf 80 84 00
	00 00		 movsx	 eax, WORD PTR [eax+132]
  01f89	c1 f8 06	 sar	 eax, 6
  01f8c	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _getcosine[eax*2]
  01f94	66 c1 f9 03	 sar	 cx, 3
  01f98	66 01 8a 56 23
	00 00		 add	 WORD PTR [edx+9046], cx
$L71634:

; 3873 : 	}
; 3874 : }

  01f9f	c3		 ret	 0
_linear_interp ENDP
_TEXT	ENDS
END
