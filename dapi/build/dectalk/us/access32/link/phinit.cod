	TITLE	D:\work\Product\dapi\src\Ph\phinit.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_phinit
EXTRN	_init_phclause:NEAR
EXTRN	_usevoice:NEAR
EXTRN	_saveval:NEAR
_TEXT	SEGMENT
_phTTS$ = 8
_bResetAll$ = 12
_phinit	PROC NEAR

; 102  : {

  00000	53		 push	 ebx

; 103  : 	PKSD_T pKsd_t = phTTS->pKernelShareData;

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _phTTS$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi

; 104  : 	PDPH_T pDph_t = phTTS->pPHThreadData;

  00007	8b 73 18	 mov	 esi, DWORD PTR [ebx+24]
  0000a	57		 push	 edi
  0000b	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 105  : 
; 106  : 	init_phclause (pDph_t);

  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _init_phclause

; 107  : 
; 108  : 
; 109  : 
; 110  : 
; 111  : 	if (bResetAll)

  00014	8b 44 24 1c	 mov	 eax, DWORD PTR _bResetAll$[esp+16]
  00018	33 ed		 xor	 ebp, ebp
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b c5		 cmp	 eax, ebp
  0001f	0f 84 f6 00 00
	00		 je	 $L71322

; 112  : 	{
; 113  : 		pKsd_t->sprate = 180;
; 114  : 		pDph_t->perpause = 0;
; 115  : 		pDph_t->compause = 0;
; 116  : 
; 117  : 		pDph_t->param[F0].outp = &(pDph_t->parstochip[OUT_T0]);

  00025	8d 86 b0 03 00
	00		 lea	 eax, DWORD PTR [esi+944]

; 118  : 		pDph_t->param[F1].outp = &(pDph_t->parstochip[OUT_F1]);

  0002b	8d 8e a0 03 00
	00		 lea	 ecx, DWORD PTR [esi+928]
  00031	66 c7 87 e6 03
	00 00 b4 00	 mov	 WORD PTR [edi+998], 180	; 000000b4H

; 119  : 		pDph_t->param[F2].outp = &(pDph_t->parstochip[OUT_F2]);

  0003a	8d 96 b4 03 00
	00		 lea	 edx, DWORD PTR [esi+948]
  00040	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00043	89 4e 44	 mov	 DWORD PTR [esi+68], ecx
  00046	89 56 68	 mov	 DWORD PTR [esi+104], edx

; 120  : 		pDph_t->param[F3].outp = &(pDph_t->parstochip[OUT_F3]);

  00049	8d 86 b6 03 00
	00		 lea	 eax, DWORD PTR [esi+950]

; 121  : 		pDph_t->param[FZ].outp = &(pDph_t->parstochip[OUT_FZ]);

  0004f	8d 8e b8 03 00
	00		 lea	 ecx, DWORD PTR [esi+952]

; 122  : 		pDph_t->param[B1].outp = &(pDph_t->parstochip[OUT_B1]);

  00055	8d 96 ba 03 00
	00		 lea	 edx, DWORD PTR [esi+954]
  0005b	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  00061	89 8e b0 00 00
	00		 mov	 DWORD PTR [esi+176], ecx
  00067	89 96 d4 00 00
	00		 mov	 DWORD PTR [esi+212], edx

; 123  : 		pDph_t->param[B2].outp = &(pDph_t->parstochip[OUT_B2]);

  0006d	8d 86 bc 03 00
	00		 lea	 eax, DWORD PTR [esi+956]

; 124  : 		pDph_t->param[B3].outp = &(pDph_t->parstochip[OUT_B3]);

  00073	8d 8e be 03 00
	00		 lea	 ecx, DWORD PTR [esi+958]

; 125  : 		pDph_t->param[AV].outp = &(pDph_t->parstochip[OUT_AV]);

  00079	8d 96 b2 03 00
	00		 lea	 edx, DWORD PTR [esi+946]
  0007f	89 86 f8 00 00
	00		 mov	 DWORD PTR [esi+248], eax
  00085	89 8e 1c 01 00
	00		 mov	 DWORD PTR [esi+284], ecx
  0008b	89 96 40 01 00
	00		 mov	 DWORD PTR [esi+320], edx

; 126  : 		pDph_t->param[AP].outp = &(pDph_t->parstochip[OUT_AP]);

  00091	8d 86 9e 03 00
	00		 lea	 eax, DWORD PTR [esi+926]

; 127  : 		pDph_t->param[A2].outp = &(pDph_t->parstochip[OUT_A2]);

  00097	8d 8e a2 03 00
	00		 lea	 ecx, DWORD PTR [esi+930]

; 128  : 		pDph_t->param[A3].outp = &(pDph_t->parstochip[OUT_A3]);

  0009d	8d 96 a4 03 00
	00		 lea	 edx, DWORD PTR [esi+932]
  000a3	89 86 64 01 00
	00		 mov	 DWORD PTR [esi+356], eax
  000a9	89 8e 88 01 00
	00		 mov	 DWORD PTR [esi+392], ecx
  000af	89 96 ac 01 00
	00		 mov	 DWORD PTR [esi+428], edx

; 129  : 		pDph_t->param[A4].outp = &(pDph_t->parstochip[OUT_A4]);

  000b5	8d 86 a6 03 00
	00		 lea	 eax, DWORD PTR [esi+934]

; 130  : 		pDph_t->param[A5].outp = &(pDph_t->parstochip[OUT_A5]);

  000bb	8d 8e a8 03 00
	00		 lea	 ecx, DWORD PTR [esi+936]

; 131  : 		pDph_t->param[A6].outp = &(pDph_t->parstochip[OUT_A6]);

  000c1	8d 96 aa 03 00
	00		 lea	 edx, DWORD PTR [esi+938]
  000c7	89 86 d0 01 00
	00		 mov	 DWORD PTR [esi+464], eax
  000cd	89 8e f4 01 00
	00		 mov	 DWORD PTR [esi+500], ecx
  000d3	89 96 18 02 00
	00		 mov	 DWORD PTR [esi+536], edx

; 132  : 		pDph_t->param[AB].outp = &(pDph_t->parstochip[OUT_AB]);

  000d9	8d 86 ac 03 00
	00		 lea	 eax, DWORD PTR [esi+940]

; 133  : 		pDph_t->param[TILT].outp = &(pDph_t->parstochip[OUT_TLT]);

  000df	8d 8e ae 03 00
	00		 lea	 ecx, DWORD PTR [esi+942]

; 134  : 
; 135  : 		pKsd_t->speaker = (int *) &(pDph_t->curspdef[0]);

  000e5	8d 96 a2 17 00
	00		 lea	 edx, DWORD PTR [esi+6050]

; 136  : 
; 137  : #ifdef SPANISH
; 138  : 	usevoice (phTTS, HUGE_HARRY);
; 139  : #else
; 140  : 	usevoice (phTTS, PERFECT_PAUL);

  000eb	55		 push	 ebp
  000ec	66 89 ae e0 18
	00 00		 mov	 WORD PTR [esi+6368], bp
  000f3	66 89 ae de 18
	00 00		 mov	 WORD PTR [esi+6366], bp
  000fa	89 86 3c 02 00
	00		 mov	 DWORD PTR [esi+572], eax
  00100	89 8e 60 02 00
	00		 mov	 DWORD PTR [esi+608], ecx
  00106	53		 push	 ebx
  00107	89 97 14 04 00
	00		 mov	 DWORD PTR [edi+1044], edx
  0010d	e8 00 00 00 00	 call	 _usevoice

; 141  : #endif
; 142  : 
; 143  : 		saveval (pDph_t);

  00112	56		 push	 esi
  00113	e8 00 00 00 00	 call	 _saveval
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
$L71322:

; 144  : 	}
; 145  : 
; 146  : 	/* new_phone is not a gloabl variable. new_phone = TRUE; */
; 147  : 	pDph_t->reset_pitch = FALSE;
; 148  : 	pDph_t->symbols[0] = COMMA;

  0011b	b8 73 00 00 00	 mov	 eax, 115		; 00000073H
  00120	89 ae c8 23 00
	00		 mov	 DWORD PTR [esi+9160], ebp
  00126	66 89 86 26 15
	00 00		 mov	 WORD PTR [esi+5414], ax

; 149  : 	pDph_t->bound = COMMA;

  0012d	89 86 cc 23 00
	00		 mov	 DWORD PTR [esi+9164], eax

; 150  : 	pDph_t->lastoffs = 0;

  00133	89 ae d4 23 00
	00		 mov	 DWORD PTR [esi+9172], ebp

; 151  : 	pDph_t->nsymbtot = 1;

  00139	66 c7 86 82 17
	00 00 01 00	 mov	 WORD PTR [esi+6018], 1

; 152  : 	pDph_t->nphone = 0;

  00142	66 89 ae d0 23
	00 00		 mov	 WORD PTR [esi+9168], bp

; 153  : 	pDph_t->asperation = 0;

  00149	89 ae c4 23 00
	00		 mov	 DWORD PTR [esi+9156], ebp

; 154  : 	pKsd_t->dwLastPhoneme = 0xFFFFFFFF;

  0014f	c7 87 ec 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+1004], -1
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi
  0015b	5d		 pop	 ebp
  0015c	5b		 pop	 ebx

; 155  : 
; 156  : 	return;
; 157  : }

  0015d	c3		 ret	 0
_phinit	ENDP
_TEXT	ENDS
END
