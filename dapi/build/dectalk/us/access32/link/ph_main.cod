	TITLE	D:\work\Product\dapi\src\Ph\ph_main.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_FreePHInstanceData
PUBLIC	_ph_main@4
EXTRN	_paul_8:BYTE
EXTRN	_betty_8:BYTE
EXTRN	_harry_8:BYTE
EXTRN	_frank_8:BYTE
EXTRN	_kit_8:BYTE
EXTRN	_ursula_8:BYTE
EXTRN	_rita_8:BYTE
EXTRN	_wendy_8:BYTE
EXTRN	_dennis_8:BYTE
EXTRN	_paul:BYTE
EXTRN	_betty:BYTE
EXTRN	_harry:BYTE
EXTRN	_frank:BYTE
EXTRN	_kit:BYTE
EXTRN	_ursula:BYTE
EXTRN	_rita:BYTE
EXTRN	_wendy:BYTE
EXTRN	_dennis:BYTE
EXTRN	_paul_8_tune:BYTE
EXTRN	_betty_8_tune:BYTE
EXTRN	_harry_8_tune:BYTE
EXTRN	_frank_8_tune:BYTE
EXTRN	_kit_8_tune:BYTE
EXTRN	_ursula_8_tune:BYTE
EXTRN	_rita_8_tune:BYTE
EXTRN	_wendy_8_tune:BYTE
EXTRN	_dennis_8_tune:BYTE
EXTRN	_paul_tune:BYTE
EXTRN	_betty_tune:BYTE
EXTRN	_harry_tune:BYTE
EXTRN	_frank_tune:BYTE
EXTRN	_kit_tune:BYTE
EXTRN	_ursula_tune:BYTE
EXTRN	_rita_tune:BYTE
EXTRN	_wendy_tune:BYTE
EXTRN	_dennis_tune:BYTE
EXTRN	_val_tune:BYTE
EXTRN	__imp__calloc:NEAR
EXTRN	__imp__SetEvent@4:NEAR
EXTRN	_default_lang:NEAR
EXTRN	_kltask:NEAR
_TEXT	SEGMENT
_phTTS$ = 8
_ph_main@4 PROC NEAR

; 241  : {

  00000	53		 push	 ebx

; 242  : 	/* Added a variable to get the handle of Current instance krenel_share_data */
; 243  : 	PKSD_T                  pKsd_t;
; 244  : 	PDPH_T                  pDph_t = NULL;
; 245  : 	PDPHSETTAR_ST           pDphsettar_st = NULL;	/* Pointer to PHSETTAR.C file STATIC structure */
; 246  : 
; 247  : #ifdef WITHOUT_CALLOC
; 248  : 	int                     i;		   /* MVP : 03/18/96 */
; 249  : #endif
; 250  : 
; 251  : #ifdef MSDOS
; 252  : 	phTTS = &hTTS;
; 253  : 	phTTS->pKernelShareData = kernel_share;		/* set a pointer to the KS structure */
; 254  : 	pKsd_t = phTTS->pKernelShareData;
; 255  : 	phTTS->pPHThreadData = &Dph_t;
; 256  : 	pDph_t = phTTS->pPHThreadData;
; 257  : 	pDph_t->pSTphsettar = &STphsettar;
; 258  : 	pDphsettar_st = pDph_t->pSTphsettar;
; 259  : #else
; 260  : 	pKsd_t = phTTS->pKernelShareData;
; 261  : 
; 262  : #if defined (__osf__) || defined (__linux__)
; 263  :     /* GL 04/21/1997  add this as the latest OSF code */
; 264  :     /* Initialize thread error field to no error */
; 265  :     phTTS->uiThreadError = MMSYSERR_NOERROR;
; 266  : #endif
; 267  : 
; 268  : #ifdef SEPARATE_PROCESSES
; 269  : 	kernel_share = (struct share_data *) malloc (sizeof (struct share_data));
; 270  : 
; 271  : #endif
; 272  : 
; 273  : 
; 274  : 	/* MVP MI kinp is not used in this function  kinp = pKsd_t->lang_ph[LANG_english]; */
; 275  : 	if ((pDph_t = (PDPH_T) calloc (1, sizeof (DPH_T))) == NULL)

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__calloc
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b 7c 24 14	 mov	 edi, DWORD PTR _phTTS$[esp+12]
  0000e	68 14 2c 00 00	 push	 11284			; 00002c14H
  00013	6a 01		 push	 1
  00015	8b 6f 08	 mov	 ebp, DWORD PTR [edi+8]
  00018	ff d3		 call	 ebx
  0001a	8b f0		 mov	 esi, eax
  0001c	83 c4 08	 add	 esp, 8
  0001f	85 f6		 test	 esi, esi
  00021	75 0c		 jne	 SHORT $L71331
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp

; 276  : #ifdef WIN32
; 277  : 		return (MMSYSERR_NOMEM);

  00026	b8 07 00 00 00	 mov	 eax, 7
  0002b	5b		 pop	 ebx

; 496  : #endif
; 497  : #if defined (__osf__) || defined (__linux__)
; 498  : 		OP_ExitThread(MMSYSERR_NOERROR);
; 499  : 		OP_THREAD_RETURN;
; 500  : #endif
; 501  : }

  0002c	c2 04 00	 ret	 4
$L71331:

; 278  : #endif
; 279  : #if defined (__osf__) || defined (__linux__)
; 280  : 		phTTS->uiThreadError = MMSYSERR_NOMEM;
; 281  :         else
; 282  :         {
; 283  : #endif
; 284  : 		/* Associate this PH thread instance specific structure with current speech object */
; 285  : 		phTTS->pPHThreadData = pDph_t;

  0002f	89 77 18	 mov	 DWORD PTR [edi+24], esi

; 286  : #ifndef MSDOS
; 287  : 		/* MGS BATS 470 Fixed crashing due to reset */
; 288  : 		pDph_t->phTTS=phTTS;
; 289  : #endif
; 290  : 		/* MVP : Initialize all structure pointers in DPH_T to NULL. */
; 291  : 		pDph_t->pSTphsettar = NULL;
; 292  : 
; 293  : 	/****************************************************************************/
; 294  : 	/* MVP : Allocation of structures specific to STATIC varaibles in each file */
; 295  : 	/****************************************************************************/
; 296  : 
; 297  : 		/* Structure for PHSETTAR.C file specific static variables */
; 298  : 		/* MVP: 03/19/96 Use calloc() to initialize all elements to zero. */
; 299  : 		if ((pDphsettar_st = (PDPHSETTAR_ST) calloc (1, sizeof (DPHSETTAR_ST))) == NULL)

  00032	68 c4 00 00 00	 push	 196			; 000000c4H
  00037	89 be 00 15 00
	00		 mov	 DWORD PTR [esi+5376], edi
  0003d	6a 01		 push	 1
  0003f	c7 86 10 2c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+11280], 0
  00049	ff d3		 call	 ebx
  0004b	8b d8		 mov	 ebx, eax
  0004d	83 c4 08	 add	 esp, 8
  00050	85 db		 test	 ebx, ebx
  00052	75 18		 jne	 SHORT $L71336

; 300  : 		{
; 301  : 			FreePHInstanceData (pDph_t);

  00054	56		 push	 esi
  00055	e8 00 00 00 00	 call	 _FreePHInstanceData
  0005a	83 c4 04	 add	 esp, 4

; 302  : 			phTTS->pPHThreadData = NULL;

  0005d	89 5f 18	 mov	 DWORD PTR [edi+24], ebx

; 303  : #ifdef WIN32
; 304  : 			return (MMSYSERR_NOMEM);

  00060	b8 07 00 00 00	 mov	 eax, 7
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5d		 pop	 ebp
  00068	5b		 pop	 ebx

; 496  : #endif
; 497  : #if defined (__osf__) || defined (__linux__)
; 498  : 		OP_ExitThread(MMSYSERR_NOERROR);
; 499  : 		OP_THREAD_RETURN;
; 500  : #endif
; 501  : }

  00069	c2 04 00	 ret	 4
$L71336:

; 305  : 		}
; 306  : #endif
; 307  : #if defined (__osf__) || defined (__linux__)
; 308  : 			phTTS->uiThreadError = MMSYSERR_NOMEM;
; 309  : 		}
; 310  : 		}
; 311  : #endif
; 312  : 
; 313  : #ifdef WIN32
; 314  : 	SetEvent (phTTS->hMallocSuccessEvent);	/* Malloc s are success,set the event */

  0006c	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 315  : #endif
; 316  : #if defined (__osf__) || defined (__linux__)
; 317  :         /* CP: Set the event, even if malloc eerror occurred. User
; 318  :          * will look at uiThreadError for actual error code.
; 319  :          */
; 320  : 		OP_SetEvent(phTTS->hMallocSuccessEvent);
; 321  :         if (phTTS->uiThreadError != MMSYSERR_NOERROR)
; 322  : 		{
; 323  : 			OP_ExitThread(phTTS->uiThreadError);
; 324  : 			OP_THREAD_RETURN;
; 325  : 		}
; 326  : #endif
; 327  : #endif
; 328  : 
; 329  : 	/* Associate this structure handle with current PH thread data structure */
; 330  : 	pDph_t->pSTphsettar = pDphsettar_st;

  00076	89 9e 10 2c 00
	00		 mov	 DWORD PTR [esi+11280], ebx

; 331  : 	/* MVP :Do required initialization of certain elements of DPHSETTAR_ST structure */
; 332  : #ifdef WITHOUT_CALLOC
; 333  : 	pDphsettar_st->drawinitsw = 0;
; 334  : 	pDphsettar_st->breathyah = 0;
; 335  : 	pDphsettar_st->breathytilt = 0;
; 336  : 	pDphsettar_st->nrises_sofar = 0;
; 337  : 	pDphsettar_st->hatsize = 0;    
; 338  : #ifdef MWS_US
; 339  : 	pDphsettar_st->lastbound = 0; 
; 340  : #endif
; 341  : 	pDphsettar_st->tarbas=0;
; 342  : 	pDphsettar_st->hat_loc_re_baseline = 0;
; 343  : 	pDphsettar_st->initsw = 0;		   	/* MVP :03/19/96 */
; 344  : 
; 345  : 	pDphsettar_st->sprlast = 0;		   	/* MVP :03/19/96 */
; 346  : 
; 347  : 	pDphsettar_st->strucstressprev = 0;	/* MVP :03/19/96 */      
; 348  : 
; 349  : 	pDphsettar_st->phonex_drawt0 = 0;  	/* MVP :03/19/96 */
; 350  : 
; 351  : 	pDphsettar_st->tarseg = 0;		   	/* MVP :03/19/96 */
; 352  : 
; 353  : 	pDphsettar_st->tarseg1 = 0;		   	/* MVP :03/19/96 */
; 354  : 
; 355  : 	pDphsettar_st->nimp = 0;		   	/* MVP :03/19/96 */
; 356  : 
; 357  : 	pDphsettar_st->timecos10 = 0;	   	/* MVP :03/19/96 */
; 358  : 
; 359  : 	pDphsettar_st->timecos15 = 0;	   	/* MVP :03/19/96 */
; 360  : 
; 361  : 	pDphsettar_st->timecosvib = 0;	/* MVP :03/19/96 */
; 362  : 	/* MVP : 03/15/96 Do required initialization of certain elements of  DPH_T structure    */
; 363  : 	pDph_t->initpardelay = 0;
; 364  : 	/* MVP: 03/18/96 */
; 365  : 	for (i = 0; i < VOICE_PARS; i++)
; 366  : 		pDph_t->parstochip[i] = 0;
; 367  : 	pDph_t->shrink=0;
; 368  : 	pDph_t->shrib=0;
; 369  : 	pDph_t->shrif=0;
; 370  : 
; 371  : #ifdef PH_SWAPDATA
; 372  : 	pDph_t->PHSwapCnt=0; //Foe evan balaban
; 373  : #endif
; 374  : 
; 375  : #ifdef GERMAN
; 376  : 		pDph_t->modulcount=0;	 	/* for uvular /R/ modulation 			*/
; 377  : 		pDph_t->new_sentence=0;  	/* for german sentence intonation 		*/
; 378  : 		pDph_t->old_delay=0;	   	/* for intonation 						*/	
; 379  : 		pDph_t->nstep=0;
; 380  : 		pDph_t->gain=0;
; 381  : 		pDph_t->tarold=0;
; 382  : 		pDph_t->dur1=0;
; 383  : 		pDph_t->slope=0;
; 384  : 		pDph_t->oldval=0;
; 385  : 		pDph_t->tcount=0;
; 386  : 		pDph_t->dirchange=0;
; 387  : 		pDph_t->osil=0;
; 388  : 		memset(pDph_t->pars,0,sizeof(SENT_PARS)*MAXSPA);
; 389  : 		pDph_t->hat_seen=0;
; 390  : 		pDph_t->wordcount=0;
; 391  : 		memset(pDph_t->Intonation,0,sizeof(SENTENCE_INTONATION));
; 392  : 		pDph_t->old_delay=0;
; 393  : #endif
; 394  : #endif
; 395  : 
; 396  : 	/* MVP : Initialize the speaker param arrays voidef,voidef_8 here */
; 397  : 	/* NAL : Initialize the speaker param arrays tunedef,tunedef_8 here */
; 398  : 
; 399  : 	pDph_t->voidef_8[0] = paul_8;

  0007c	c7 86 10 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6160], OFFSET FLAT:_paul_8

; 400  : 	pDph_t->voidef_8[1] = betty_8;

  00086	c7 86 14 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6164], OFFSET FLAT:_betty_8

; 401  : 	pDph_t->voidef_8[2] = harry_8;

  00090	c7 86 18 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6168], OFFSET FLAT:_harry_8

; 402  : 	pDph_t->voidef_8[3] = frank_8;

  0009a	c7 86 1c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6172], OFFSET FLAT:_frank_8

; 403  : 	pDph_t->voidef_8[4] = dennis_8;
; 404  : 	pDph_t->voidef_8[5] = kit_8;
; 405  : 	pDph_t->voidef_8[6] = ursula_8;
; 406  : 	pDph_t->voidef_8[7] = rita_8;
; 407  : 	pDph_t->voidef_8[8] = wendy_8;
; 408  : 	pDph_t->voidef_8[9] = pDph_t->var_val;

  000a4	8d 86 88 18 00
	00		 lea	 eax, DWORD PTR [esi+6280]
  000aa	c7 86 20 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6176], OFFSET FLAT:_dennis_8
  000b4	c7 86 24 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6180], OFFSET FLAT:_kit_8
  000be	89 86 34 18 00
	00		 mov	 DWORD PTR [esi+6196], eax

; 409  : 
; 410  : 	pDph_t->voidef[0] = paul;
; 411  : 	pDph_t->voidef[1] = betty;
; 412  : 	pDph_t->voidef[2] = harry;
; 413  : 	pDph_t->voidef[3] = frank;
; 414  : 	pDph_t->voidef[4] = dennis;
; 415  : 	pDph_t->voidef[5] = kit;
; 416  : 	pDph_t->voidef[6] = ursula;
; 417  : 	pDph_t->voidef[7] = rita;
; 418  : 	pDph_t->voidef[8] = wendy;
; 419  : 	pDph_t->voidef[9] = pDph_t->var_val;

  000c4	89 86 0c 18 00
	00		 mov	 DWORD PTR [esi+6156], eax

; 420  : 
; 421  : 	pDph_t->tunedef_8[0] = paul_8_tune;
; 422  : 	pDph_t->tunedef_8[1] = betty_8_tune;
; 423  : 	pDph_t->tunedef_8[2] = harry_8_tune;
; 424  : 	pDph_t->tunedef_8[3] = frank_8_tune;
; 425  : 	pDph_t->tunedef_8[4] = dennis_8_tune;
; 426  : 	pDph_t->tunedef_8[5] = kit_8_tune;
; 427  : 	pDph_t->tunedef_8[6] = ursula_8_tune;
; 428  : 	pDph_t->tunedef_8[7] = rita_8_tune;
; 429  : 	pDph_t->tunedef_8[8] = wendy_8_tune;
; 430  : 	pDph_t->tunedef_8[9] = val_tune;
; 431  : 
; 432  : 	pDph_t->tunedef[0] = paul_tune;
; 433  : 	pDph_t->tunedef[1] = betty_tune;
; 434  : 	pDph_t->tunedef[2] = harry_tune;
; 435  : 	pDph_t->tunedef[3] = frank_tune;
; 436  : 	pDph_t->tunedef[4] = dennis_tune;
; 437  : 	pDph_t->tunedef[5] = kit_tune;
; 438  : 	pDph_t->tunedef[6] = ursula_tune;
; 439  : 	pDph_t->tunedef[7] = rita_tune;
; 440  : 	pDph_t->tunedef[8] = wendy_tune;
; 441  : 	pDph_t->tunedef[9] = val_tune;
; 442  : 
; 443  : #ifdef MSDOS
; 444  : 	pKsd_t->lang_curr = LANG_none;	/* KM added for initilizing lang tables */
; 445  : #endif
; 446  : 
; 447  : #ifdef MSDOS
; 448  : #ifdef ENGLISH_US
; 449  : 		default_lang (LANG_english, LANG_ph_ready);
; 450  : #endif
; 451  : #ifdef ENGLISH_UK
; 452  : 		default_lang (LANG_british, LANG_ph_ready);
; 453  : #endif
; 454  : #ifdef SPANISH_SP
; 455  : 		default_lang (LANG_spanish, LANG_ph_ready);
; 456  : #endif
; 457  : #ifdef SPANISH_LA
; 458  : 		default_lang (LANG_latin_american, LANG_ph_ready);
; 459  : #endif
; 460  : #ifdef GERMAN                        
; 461  : 		default_lang (LANG_german, LANG_ph_ready);
; 462  : #endif
; 463  : #ifdef FRENCH
; 464  : 		default_lang (LANG_french, LANG_ph_ready);
; 465  : #endif
; 466  : 
; 467  : 	create_process (kltask, 4, data_seg, stack_start, 0);
; 468  : 
; 469  : #else
; 470  : #ifdef ENGLISH_US
; 471  : 		default_lang (pKsd_t, LANG_english, LANG_ph_ready);

  000ca	6a 02		 push	 2
  000cc	c7 86 28 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6184], OFFSET FLAT:_ursula_8
  000d6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_val_tune
  000db	6a 00		 push	 0
  000dd	c7 86 2c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6188], OFFSET FLAT:_rita_8
  000e7	55		 push	 ebp
  000e8	c7 86 30 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6192], OFFSET FLAT:_wendy_8
  000f2	c7 86 e8 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6120], OFFSET FLAT:_paul
  000fc	c7 86 ec 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6124], OFFSET FLAT:_betty
  00106	c7 86 f0 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6128], OFFSET FLAT:_harry
  00110	c7 86 f4 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6132], OFFSET FLAT:_frank
  0011a	c7 86 f8 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6136], OFFSET FLAT:_dennis
  00124	c7 86 fc 17 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6140], OFFSET FLAT:_kit
  0012e	c7 86 00 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6144], OFFSET FLAT:_ursula
  00138	c7 86 04 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6148], OFFSET FLAT:_rita
  00142	c7 86 08 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6152], OFFSET FLAT:_wendy
  0014c	c7 86 60 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6240], OFFSET FLAT:_paul_8_tune
  00156	c7 86 64 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6244], OFFSET FLAT:_betty_8_tune
  00160	c7 86 68 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6248], OFFSET FLAT:_harry_8_tune
  0016a	c7 86 6c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6252], OFFSET FLAT:_frank_8_tune
  00174	c7 86 70 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6256], OFFSET FLAT:_dennis_8_tune
  0017e	c7 86 74 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6260], OFFSET FLAT:_kit_8_tune
  00188	c7 86 78 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6264], OFFSET FLAT:_ursula_8_tune
  00192	c7 86 7c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6268], OFFSET FLAT:_rita_8_tune
  0019c	c7 86 80 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6272], OFFSET FLAT:_wendy_8_tune
  001a6	89 86 84 18 00
	00		 mov	 DWORD PTR [esi+6276], eax
  001ac	c7 86 38 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6200], OFFSET FLAT:_paul_tune
  001b6	c7 86 3c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6204], OFFSET FLAT:_betty_tune
  001c0	c7 86 40 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6208], OFFSET FLAT:_harry_tune
  001ca	c7 86 44 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6212], OFFSET FLAT:_frank_tune
  001d4	c7 86 48 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6216], OFFSET FLAT:_dennis_tune
  001de	c7 86 4c 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6220], OFFSET FLAT:_kit_tune
  001e8	c7 86 50 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6224], OFFSET FLAT:_ursula_tune
  001f2	c7 86 54 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6228], OFFSET FLAT:_rita_tune
  001fc	c7 86 58 18 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+6232], OFFSET FLAT:_wendy_tune
  00206	89 86 5c 18 00
	00		 mov	 DWORD PTR [esi+6236], eax
  0020c	e8 00 00 00 00	 call	 _default_lang

; 472  : #endif
; 473  : #ifdef ENGLISH_UK
; 474  : 		default_lang (pKsd_t, LANG_british, LANG_ph_ready);
; 475  : #endif
; 476  : #ifdef SPANISH_SP
; 477  : 		default_lang (pKsd_t, LANG_spanish, LANG_ph_ready);
; 478  : #endif
; 479  : #ifdef SPANISH_LA
; 480  : 		default_lang (pKsd_t, LANG_latin_american, LANG_ph_ready);
; 481  : #endif
; 482  : #ifdef GERMAN
; 483  : 		default_lang (pKsd_t, LANG_german, LANG_ph_ready);
; 484  : #endif
; 485  : #ifdef FRENCH
; 486  : 		default_lang (pKsd_t, LANG_french, LANG_ph_ready);
; 487  : #endif
; 488  : 
; 489  : 	kltask (phTTS);

  00211	57		 push	 edi
  00212	e8 00 00 00 00	 call	 _kltask

; 490  : 	/* Free the allocated instance specific structure,before the thread returns */
; 491  : 	FreePHInstanceData (pDph_t);

  00217	56		 push	 esi
  00218	e8 00 00 00 00	 call	 _FreePHInstanceData
  0021d	83 c4 14	 add	 esp, 20			; 00000014H

; 492  : 	phTTS->pPHThreadData = pDph_t = NULL;

  00220	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 493  : #endif
; 494  : #if defined (MSDOS) || defined (WIN32)
; 495  : 	return 0;						/* No error MVP */

  00227	33 c0		 xor	 eax, eax
  00229	5f		 pop	 edi
  0022a	5e		 pop	 esi
  0022b	5d		 pop	 ebp
  0022c	5b		 pop	 ebx

; 496  : #endif
; 497  : #if defined (__osf__) || defined (__linux__)
; 498  : 		OP_ExitThread(MMSYSERR_NOERROR);
; 499  : 		OP_THREAD_RETURN;
; 500  : #endif
; 501  : }

  0022d	c2 04 00	 ret	 4
_ph_main@4 ENDP
_TEXT	ENDS
EXTRN	__imp__free:NEAR
EXTRN	_spcfree:NEAR
_TEXT	SEGMENT
_pDph_t$ = 8
_FreePHInstanceData PROC NEAR

; 505  : {

  00230	56		 push	 esi

; 506  : if (pDph_t->pSTphsettar)

  00231	8b 74 24 08	 mov	 esi, DWORD PTR _pDph_t$[esp]
  00235	57		 push	 edi
  00236	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__free
  0023c	8b 86 10 2c 00
	00		 mov	 eax, DWORD PTR [esi+11280]
  00242	85 c0		 test	 eax, eax
  00244	74 06		 je	 SHORT $L71342

; 507  :      free (pDph_t->pSTphsettar);

  00246	50		 push	 eax
  00247	ff d7		 call	 edi
  00249	83 c4 04	 add	 esp, 4
$L71342:

; 508  :      pDph_t->pSTphsettar = NULL;
; 509  :      
; 510  :      // tek 13aug96 have to free the last delaypars
; 511  :      if(pDph_t->delaypars)

  0024c	8b 86 e0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11232]
  00252	c7 86 10 2c 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+11280], 0
  0025c	85 c0		 test	 eax, eax
  0025e	74 09		 je	 SHORT $L71344

; 512  :      spcfree(pDph_t->delaypars);

  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 _spcfree
  00266	83 c4 04	 add	 esp, 4
$L71344:

; 513  :      
; 514  :      if (pDph_t)

  00269	85 f6		 test	 esi, esi
  0026b	74 06		 je	 SHORT $L71345

; 515  :      free (pDph_t);

  0026d	56		 push	 esi
  0026e	ff d7		 call	 edi
  00270	83 c4 04	 add	 esp, 4
$L71345:
  00273	5f		 pop	 edi
  00274	5e		 pop	 esi

; 516  :      
; 517  : pDph_t = NULL;
; 518  :      
; 519  :      }

  00275	c3		 ret	 0
_FreePHInstanceData ENDP
_TEXT	ENDS
END
