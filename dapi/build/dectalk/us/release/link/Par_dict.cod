	TITLE	D:\work\product\dapi\src\Cmd\Par_dict.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_par_dict_lookup
PUBLIC	_par_dict_find_word
PUBLIC	_par_dict_ufind_word
EXTRN	__imp__fprintf:NEAR
EXTRN	__imp__printf:NEAR
_DATA	SEGMENT
$SG70238 DB	0aH, '(%s)(PUHIT)', 00H
	ORG $+3
$SG70239 DB	0aH, '(%s)(PUHIT)', 00H
	ORG $+3
$SG70244 DB	0aH, '(%s)(PHIT)', 00H
$SG70245 DB	0aH, '(%s)(PHIT)', 00H
$SG70248 DB	0aH, '(%s)(PMISS)', 00H
	ORG $+3
$SG70249 DB	0aH, '(%s)(PMISS)', 00H
_DATA	ENDS
_TEXT	SEGMENT
_pKsd_t$ = 8
_word$ = 12
_in_flag$ = 16
_DICT_ENTRY$ = -260
_DICT_HEAD$ = -264
_temp_word$ = -256
_flag$ = -268
_par_dict_lookup PROC NEAR

; 130  : {

  00000	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00006	53		 push	 ebx

; 131  : 	long DICT_ENTRY=0;
; 132  : 	long UDICT_ENTRY=0;
; 133  : 
; 134  : 	struct dic_entry _far * huge *DICT_HEAD=0; 
; 135  : 
; 136  : #ifdef MSDOS
; 137  : 	char far * far *UDICT_HEAD=0; 
; 138  : #else
; 139  : 	struct dic_entry _far * _far *UDICT_HEAD=0; 
; 140  : #endif
; 141  : 
; 142  : 	char temp_word[256];
; 143  : 	short flag=0;
; 144  : 	short word_size=0;
; 145  : 
; 146  : 	// move these checks up here. MGS
; 147  : 	if (word == NULL)

  00007	8b 9c 24 18 01
	00 00		 mov	 ebx, DWORD PTR _word$[esp+268]
  0000e	55		 push	 ebp
  0000f	56		 push	 esi
  00010	85 db		 test	 ebx, ebx
  00012	57		 push	 edi
  00013	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _flag$[esp+284], 0

; 148  : 	{
; 149  : 		return(MISS);

  0001b	0f 84 b2 01 00
	00		 je	 $L70246

; 150  : 	}
; 151  : 
; 152  : 	/* return MISS if receive null string */
; 153  : 	if(word[0] == '\0')

  00021	80 3b 00	 cmp	 BYTE PTR [ebx], 0

; 154  : 	{
; 155  : 		return(MISS);

  00024	0f 84 a9 01 00
	00		 je	 $L70246

; 156  : 	}
; 157  : 
; 158  : 
; 159  : 	// 015	MGS		10/14/1999	BATS#876 fix for UK phone numbers (part of it) 
; 160  : 	// fixed the dictionary search so it woud know where the end of a clause was.
; 161  : 	if (in_flag==1)

  0002a	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR _in_flag$[esp+280]
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	3b c2		 cmp	 eax, edx
  00038	75 36		 jne	 SHORT $L70231

; 162  : 	{		
; 163  : 		word_size = strlen(word);

  0003a	8b fb		 mov	 edi, ebx
  0003c	83 c9 ff	 or	 ecx, -1
  0003f	33 c0		 xor	 eax, eax
  00041	f2 ae		 repne scasb
  00043	f7 d1		 not	 ecx
  00045	49		 dec	 ecx

; 164  : 		if (word[word_size-1] == '.')

  00046	0f bf c1	 movsx	 eax, cx
  00049	80 7c 18 ff 2e	 cmp	 BYTE PTR [eax+ebx-1], 46 ; 0000002eH
  0004e	75 20		 jne	 SHORT $L70231

; 165  : 		{
; 166  : 			memcpy(temp_word,word,word_size-1);

  00050	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00053	8b f3		 mov	 esi, ebx
  00055	8b e9		 mov	 ebp, ecx
  00057	8d 7c 24 1c	 lea	 edi, DWORD PTR _temp_word$[esp+284]
  0005b	c1 e9 02	 shr	 ecx, 2
  0005e	f3 a5		 rep movsd
  00060	8b cd		 mov	 ecx, ebp

; 167  : 			temp_word[word_size-1] = '\0';
; 168  : 			flag=1;

  00062	89 54 24 10	 mov	 DWORD PTR _flag$[esp+284], edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	c6 44 04 1b 00	 mov	 BYTE PTR _temp_word$[esp+eax+283], 0
$L70231:

; 169  : 		}
; 170  : 	}
; 171  : 	/* decide which language, point to right dictionary entry */
; 172  : 	/* GL 09/25/1997 use array structure for dictionary entry */
; 173  : 	DICT_ENTRY = pKsd_t->fdic_entries[pKsd_t->lang_curr]; 

  00070	8b b4 24 20 01
	00 00		 mov	 esi, DWORD PTR _pKsd_t$[esp+280]
  00077	8b 86 f8 00 00
	00		 mov	 eax, DWORD PTR [esi+248]

; 174  : 	DICT_HEAD = (struct dic_entry **)pKsd_t->fdic[pKsd_t->lang_curr];
; 175  : 
; 176  : 	UDICT_ENTRY = pKsd_t->udic_entries[pKsd_t->lang_curr]; 

  0007d	8b 7c 86 54	 mov	 edi, DWORD PTR [esi+eax*4+84]
  00081	8b 4c 86 1c	 mov	 ecx, DWORD PTR [esi+eax*4+28]
  00085	8b 14 86	 mov	 edx, DWORD PTR [esi+eax*4]

; 177  : #ifdef MSDOS
; 178  :     UDICT_HEAD = (char far * far *)pKsd_t->udic[pKsd_t->lang_curr];
; 179  : #else
; 180  :     UDICT_HEAD = (struct dic_entry **)pKsd_t->udic[pKsd_t->lang_curr];

  00088	8b 6c 86 38	 mov	 ebp, DWORD PTR [esi+eax*4+56]

; 181  : #endif
; 182  : 
; 183  : 
; 184  : 
; 185  : 	/* return the search result HIT/MISS from user dictionary search */
; 186  : 	if (UDICT_ENTRY != 0 && ((par_dict_ufind_word(UDICT_ENTRY,UDICT_HEAD,word) != MISS) ||
; 187  : 		(flag == 1 && par_dict_ufind_word(UDICT_ENTRY,UDICT_HEAD,temp_word) != MISS)))

  0008c	85 ff		 test	 edi, edi
  0008e	89 4c 24 18	 mov	 DWORD PTR _DICT_ENTRY$[esp+284], ecx
  00092	89 54 24 14	 mov	 DWORD PTR _DICT_HEAD$[esp+284], edx
  00096	74 7f		 je	 SHORT $L70234
  00098	53		 push	 ebx
  00099	55		 push	 ebp
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 _par_dict_ufind_word
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a3	85 c0		 test	 eax, eax
  000a5	75 1b		 jne	 SHORT $L70235
  000a7	66 83 7c 24 10
	01		 cmp	 WORD PTR _flag$[esp+284], 1
  000ad	75 64		 jne	 SHORT $L70374
  000af	8d 44 24 1c	 lea	 eax, DWORD PTR _temp_word$[esp+284]
  000b3	50		 push	 eax
  000b4	55		 push	 ebp
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 _par_dict_ufind_word
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	85 c0		 test	 eax, eax
  000c0	74 51		 je	 SHORT $L70374
$L70235:

; 188  : 	{
; 189  : 		/* debug switch */
; 190  : 		if (DT_DBG(CMD_DBG,0x020))

  000c2	66 8b 86 78 04
	00 00		 mov	 ax, WORD PTR [esi+1144]
  000c9	f6 c4 80	 test	 ah, -128		; ffffff80H
  000cc	0f 84 b8 00 00
	00		 je	 $L70236
  000d2	a8 20		 test	 al, 32			; 00000020H
  000d4	0f 84 b0 00 00
	00		 je	 $L70236

; 191  : 		{
; 192  : #ifndef MSDOS
; 193  : 			if (pKsd_t->dbglog)		/* mfg added for dbglog.txt suport*/

  000da	8b b6 7c 04 00
	00		 mov	 esi, DWORD PTR [esi+1148]
  000e0	85 f6		 test	 esi, esi
  000e2	74 10		 je	 SHORT $L70237

; 194  : 				fprintf(pKsd_t->dbglog,"\n(%s)(PUHIT)",word);

  000e4	53		 push	 ebx
  000e5	68 00 00 00 00	 push	 OFFSET FLAT:$SG70238
  000ea	56		 push	 esi
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L70237:

; 195  : #endif
; 196  : 			printf("\n(%s)(PUHIT)",word);		

  000f4	53		 push	 ebx
  000f5	68 00 00 00 00	 push	 OFFSET FLAT:$SG70239
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00100	83 c4 08	 add	 esp, 8

; 197  : 		}
; 198  : 		//printf("%s UHIT\n",word);
; 199  : 		return(HIT);

  00103	b8 01 00 00 00	 mov	 eax, 1
  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5d		 pop	 ebp
  0010b	5b		 pop	 ebx

; 231  : 
; 232  : }

  0010c	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00112	c3		 ret	 0
$L70374:

; 197  : 		}
; 198  : 		//printf("%s UHIT\n",word);
; 199  : 		return(HIT);

  00113	8b 4c 24 18	 mov	 ecx, DWORD PTR _DICT_ENTRY$[esp+284]
$L70234:

; 200  : 	}
; 201  : 	
; 202  : 	/* do regular dictionary search if miss in user dictionary */
; 203  : 	/* return the search result HIT/MISS */
; 204  : 	if (DICT_ENTRY != 0 && ((par_dict_find_word(DICT_ENTRY,DICT_HEAD,word) != MISS)||
; 205  : 	   (flag == 1 && par_dict_find_word(DICT_ENTRY,DICT_HEAD,temp_word) != MISS)))

  00117	85 c9		 test	 ecx, ecx
  00119	74 7f		 je	 SHORT $L70240
  0011b	8b 54 24 14	 mov	 edx, DWORD PTR _DICT_HEAD$[esp+284]
  0011f	53		 push	 ebx
  00120	52		 push	 edx
  00121	51		 push	 ecx
  00122	e8 00 00 00 00	 call	 _par_dict_find_word
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012a	85 c0		 test	 eax, eax
  0012c	75 23		 jne	 SHORT $L70241
  0012e	66 83 7c 24 10
	01		 cmp	 WORD PTR _flag$[esp+284], 1
  00134	75 64		 jne	 SHORT $L70240
  00136	8b 4c 24 14	 mov	 ecx, DWORD PTR _DICT_HEAD$[esp+284]
  0013a	8b 54 24 18	 mov	 edx, DWORD PTR _DICT_ENTRY$[esp+284]
  0013e	8d 44 24 1c	 lea	 eax, DWORD PTR _temp_word$[esp+284]
  00142	50		 push	 eax
  00143	51		 push	 ecx
  00144	52		 push	 edx
  00145	e8 00 00 00 00	 call	 _par_dict_find_word
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014d	85 c0		 test	 eax, eax
  0014f	74 49		 je	 SHORT $L70240
$L70241:

; 206  : 	{
; 207  : 		/* debug switch */
; 208  : 		if (DT_DBG(CMD_DBG,0x020))

  00151	66 8b 86 78 04
	00 00		 mov	 ax, WORD PTR [esi+1144]
  00158	f6 c4 80	 test	 ah, -128		; ffffff80H
  0015b	74 2d		 je	 SHORT $L70236
  0015d	a8 20		 test	 al, 32			; 00000020H
  0015f	74 29		 je	 SHORT $L70236

; 209  : 		{
; 210  : #ifndef MSDOS
; 211  : 			if (pKsd_t->dbglog)		/* mfg added for dbglog.txt suport*/

  00161	8b b6 7c 04 00
	00		 mov	 esi, DWORD PTR [esi+1148]
  00167	85 f6		 test	 esi, esi
  00169	74 10		 je	 SHORT $L70243

; 212  : 				fprintf(pKsd_t->dbglog,"\n(%s)(PHIT)",word);

  0016b	53		 push	 ebx
  0016c	68 00 00 00 00	 push	 OFFSET FLAT:$SG70244
  00171	56		 push	 esi
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH
$L70243:

; 213  : #endif
; 214  : 			printf("\n(%s)(PHIT)",word);

  0017b	53		 push	 ebx
  0017c	68 00 00 00 00	 push	 OFFSET FLAT:$SG70245
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00187	83 c4 08	 add	 esp, 8
$L70236:
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5d		 pop	 ebp

; 215  : 		}
; 216  : 		   //printf("%s HIT\n",word);
; 217  : 		   return(HIT);

  0018d	b8 01 00 00 00	 mov	 eax, 1
  00192	5b		 pop	 ebx

; 231  : 
; 232  : }

  00193	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00199	c3		 ret	 0
$L70240:

; 218  : 	}
; 219  : 
; 220  : 	/* debug switch */
; 221  : 	if (DT_DBG(CMD_DBG,0x020))

  0019a	66 8b 86 78 04
	00 00		 mov	 ax, WORD PTR [esi+1144]
  001a1	f6 c4 80	 test	 ah, -128		; ffffff80H
  001a4	74 2d		 je	 SHORT $L70246
  001a6	a8 20		 test	 al, 32			; 00000020H
  001a8	74 29		 je	 SHORT $L70246

; 222  : 	{
; 223  : #ifndef MSDOS
; 224  : 		if (pKsd_t->dbglog)		/* mfg added for dbglog.txt suport*/

  001aa	8b b6 7c 04 00
	00		 mov	 esi, DWORD PTR [esi+1148]
  001b0	85 f6		 test	 esi, esi
  001b2	74 10		 je	 SHORT $L70247

; 225  : 			fprintf(pKsd_t->dbglog,"\n(%s)(PMISS)",word);

  001b4	53		 push	 ebx
  001b5	68 00 00 00 00	 push	 OFFSET FLAT:$SG70248
  001ba	56		 push	 esi
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  001c1	83 c4 0c	 add	 esp, 12			; 0000000cH
$L70247:

; 226  : #endif
; 227  : 		printf("\n(%s)(PMISS)",word);

  001c4	53		 push	 ebx
  001c5	68 00 00 00 00	 push	 OFFSET FLAT:$SG70249
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  001d0	83 c4 08	 add	 esp, 8
$L70246:
  001d3	5f		 pop	 edi
  001d4	5e		 pop	 esi
  001d5	5d		 pop	 ebp

; 228  : 	}
; 229  : 	//printf("%s %d %x MISS\n",word,strlen(word),word[0]);
; 230  : 	return(MISS);

  001d6	33 c0		 xor	 eax, eax
  001d8	5b		 pop	 ebx

; 231  : 
; 232  : }

  001d9	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  001df	c3		 ret	 0
_par_dict_lookup ENDP
_TEXT	ENDS
PUBLIC	_par_dict_dlook
_TEXT	SEGMENT
_DICT_ENTRY$ = 8
_DICT_HEAD$ = 12
_word$ = 16
_pent$ = 8
_par_dict_find_word PROC NEAR

; 257  : {

  001e0	53		 push	 ebx

; 258  : 	long offset;  	/* how far we move to do the next lookup */
; 259  : 	int stat;	/* what the lookup returned */
; 260  : 	long base;	/* where we are looking now */
; 261  : 	long limit;
; 262  : 
; 263  : 	long new_base = 0;		/* where we'll go look.. */
; 264  : 	
; 265  :    
; 266  :    	struct   dic_entry far *pent;		 /* MVP MI New */
; 267  : /*	unsigned short cap;*/	/* the word is capitalized */ 
; 268  :                                              
; 269  : 	
; 270  : 	
; 271  : /* Use the correct KS dic entry based on language being compiled */
; 272  : 	limit = DICT_ENTRY;/* this is last_index+1 */
; 273  : 
; 274  : 	offset = limit>>1; /* pretend that the last time through we 	*/

  001e1	8b 5c 24 08	 mov	 ebx, DWORD PTR _DICT_ENTRY$[esp]
  001e5	55		 push	 ebp

; 275  : 			   /* were offsetting by 1/2 the dic size, so	*/
; 276  : 			   /* that when we enter the loop and cut the	*/
; 277  : 			   /* offset in half we end up with 1/4 dic as 	*/
; 278  : 			   /* the first move.				*/
; 279  : 	base=offset;	   /* start in the middle of the dictionary.	*/
; 280  : 	                                                                  
; 281  : 	limit--;	    /* now = the last valid index.		*/
; 282  : 	                                                                  
; 283  : 	/* we now need to start searching, and continue until we either	*/
; 284  : 	/* have a hit or the offset has gone to 0. For dic sizes that 	*/
; 285  : 	/* are not a power of two, we may have to do one additional 	*/
; 286  : 	/* lookup after this loop completes.				*/
; 287  : 	        
; 288  : 	stat = MISS;	        
; 289  : 	do
; 290  : 	{
; 291  : 		offset = offset>>1;	/* narrow the range */
; 292  : 		if ( (stat=par_dict_dlook(DICT_ENTRY,DICT_HEAD,base,&pent,word)) == HIT)

  001e6	8b 6c 24 14	 mov	 ebp, DWORD PTR _word$[esp+4]
  001ea	8b 4c 24 10	 mov	 ecx, DWORD PTR _DICT_HEAD$[esp+4]
  001ee	56		 push	 esi
  001ef	57		 push	 edi
  001f0	8b fb		 mov	 edi, ebx
  001f2	d1 ff		 sar	 edi, 1
  001f4	8d 44 24 14	 lea	 eax, DWORD PTR _pent$[esp+12]
  001f8	8b f7		 mov	 esi, edi
  001fa	55		 push	 ebp
  001fb	50		 push	 eax
  001fc	56		 push	 esi
  001fd	51		 push	 ecx
  001fe	53		 push	 ebx
  001ff	d1 ff		 sar	 edi, 1
  00201	e8 00 00 00 00	 call	 _par_dict_dlook
  00206	83 c4 14	 add	 esp, 20			; 00000014H
  00209	83 f8 01	 cmp	 eax, 1
  0020c	74 2d		 je	 SHORT $L70279
$L70263:

; 293  : 			break; /* found it. */
; 294  : 		
; 295  : 		/* wasn't this one. Move to the next candidate. 	*/
; 296  : 		if (stat == LOOK_HIGHER)

  0020e	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00213	75 04		 jne	 SHORT $L70267

; 297  : 		{
; 298  : 		    base += offset;

  00215	03 f7		 add	 esi, edi

; 299  : 		}
; 300  : 	        else

  00217	eb 02		 jmp	 SHORT $L70264
$L70267:

; 301  : 	        {
; 302  : 		    base -= offset;

  00219	2b f7		 sub	 esi, edi
$L70264:

; 303  : 		}
; 304  : 	} while (offset != 0);

  0021b	85 ff		 test	 edi, edi
  0021d	74 26		 je	 SHORT $L70265
  0021f	8b 44 24 18	 mov	 eax, DWORD PTR _DICT_HEAD$[esp+12]
  00223	8d 54 24 14	 lea	 edx, DWORD PTR _pent$[esp+12]
  00227	55		 push	 ebp
  00228	52		 push	 edx
  00229	56		 push	 esi
  0022a	50		 push	 eax
  0022b	53		 push	 ebx
  0022c	d1 ff		 sar	 edi, 1
  0022e	e8 00 00 00 00	 call	 _par_dict_dlook
  00233	83 c4 14	 add	 esp, 20			; 00000014H
  00236	83 f8 01	 cmp	 eax, 1
  00239	75 d3		 jne	 SHORT $L70263
$L70279:
  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	5d		 pop	 ebp

; 332  : 		
; 333  : 	return(HIT);

  0023e	b8 01 00 00 00	 mov	 eax, 1
  00243	5b		 pop	 ebx

; 334  : 
; 335  : 
; 336  : } /* par_dict_find_word(word) */

  00244	c3		 ret	 0
$L70265:

; 305  : 	
; 306  : 	if (stat != HIT)

  00245	83 f8 01	 cmp	 eax, 1
  00248	74 f1		 je	 SHORT $L70279

; 307  : 	{
; 308  : 		/* have to keep looking in the same direction */
; 309  : 		if (stat == LOOK_HIGHER)

  0024a	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0024f	75 1f		 jne	 SHORT $L70270
$L70272:

; 310  : 		{
; 311  : 			while(stat == LOOK_HIGHER)
; 312  : 			{
; 313  : 				base++;
; 314  : 				stat = par_dict_dlook(DICT_ENTRY,DICT_HEAD,base,&pent,word);

  00251	8b 54 24 18	 mov	 edx, DWORD PTR _DICT_HEAD$[esp+12]
  00255	8d 4c 24 14	 lea	 ecx, DWORD PTR _pent$[esp+12]
  00259	46		 inc	 esi
  0025a	55		 push	 ebp
  0025b	51		 push	 ecx
  0025c	56		 push	 esi
  0025d	52		 push	 edx
  0025e	53		 push	 ebx
  0025f	e8 00 00 00 00	 call	 _par_dict_dlook
  00264	83 c4 14	 add	 esp, 20			; 00000014H
  00267	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0026c	74 e3		 je	 SHORT $L70272

; 315  : 			}
; 316  : 		}
; 317  : 		else 

  0026e	eb 24		 jmp	 SHORT $L70278
$L70270:

; 318  : 		{
; 319  : 			if (stat == LOOK_LOWER)

  00270	3d fe ff 00 00	 cmp	 eax, 65534		; 0000fffeH
  00275	75 1d		 jne	 SHORT $L70278
$L70277:

; 320  : 			{
; 321  : 		    	   while(stat == LOOK_LOWER)
; 322  : 		    	   {
; 323  : 		    		base--;
; 324  : 		    		stat = par_dict_dlook(DICT_ENTRY,DICT_HEAD,base,&pent,word);

  00277	8b 4c 24 18	 mov	 ecx, DWORD PTR _DICT_HEAD$[esp+12]
  0027b	8d 44 24 14	 lea	 eax, DWORD PTR _pent$[esp+12]
  0027f	4e		 dec	 esi
  00280	55		 push	 ebp
  00281	50		 push	 eax
  00282	56		 push	 esi
  00283	51		 push	 ecx
  00284	53		 push	 ebx
  00285	e8 00 00 00 00	 call	 _par_dict_dlook
  0028a	83 c4 14	 add	 esp, 20			; 00000014H
  0028d	3d fe ff 00 00	 cmp	 eax, 65534		; 0000fffeH
  00292	74 e3		 je	 SHORT $L70277
$L70278:

; 325  : 		    	   }
; 326  : 		    	}
; 327  : 		}
; 328  : 	} /* if (stat != HIT ) */
; 329  : 	                                     
; 330  : 	if (stat != HIT)

  00294	83 f8 01	 cmp	 eax, 1
  00297	74 a2		 je	 SHORT $L70279
  00299	5f		 pop	 edi
  0029a	5e		 pop	 esi
  0029b	5d		 pop	 ebp

; 331  : 	    return(MISS); /* all done. */

  0029c	33 c0		 xor	 eax, eax
  0029e	5b		 pop	 ebx

; 334  : 
; 335  : 
; 336  : } /* par_dict_find_word(word) */

  0029f	c3		 ret	 0
_par_dict_find_word ENDP
_TEXT	ENDS
PUBLIC	_par_dict_udlook
_TEXT	SEGMENT
_UDICT_ENTRY$ = 8
_UDICT_HEAD$ = 12
_word$ = 16
_par_dict_ufind_word PROC NEAR

; 363  : {

  002a0	53		 push	 ebx
  002a1	55		 push	 ebp

; 364  : 
; 365  : 	long first,base;
; 366  : 	long last;     
; 367  : 	int stat;
; 368  : 
; 369  : 	first = 0;					/* 0 is the bottom */
; 370  : 	last  =	UDICT_ENTRY - 1;		 	/* max number of entries */

  002a2	8b 6c 24 0c	 mov	 ebp, DWORD PTR _UDICT_ENTRY$[esp+4]
  002a6	56		 push	 esi
  002a7	57		 push	 edi
  002a8	33 db		 xor	 ebx, ebx
  002aa	8d 7d ff	 lea	 edi, DWORD PTR [ebp-1]

; 371  : 
; 372  : 	while (first <= last)				/* search until list is empty */

  002ad	85 ff		 test	 edi, edi
  002af	7c 33		 jl	 SHORT $L70293
$L70292:

; 373  : 	{
; 374  : 		base = (first + last) >> 1;		/* find the mid point for compare */
; 375  : 		if ((stat = par_dict_udlook(UDICT_ENTRY,UDICT_HEAD,base,word)) == LOOK_LOWER)							/* match */

  002b1	8b 44 24 1c	 mov	 eax, DWORD PTR _word$[esp+12]
  002b5	8b 4c 24 18	 mov	 ecx, DWORD PTR _UDICT_HEAD$[esp+12]
  002b9	8d 34 1f	 lea	 esi, DWORD PTR [edi+ebx]
  002bc	50		 push	 eax
  002bd	d1 fe		 sar	 esi, 1
  002bf	56		 push	 esi
  002c0	51		 push	 ecx
  002c1	55		 push	 ebp
  002c2	e8 00 00 00 00	 call	 _par_dict_udlook
  002c7	83 c4 10	 add	 esp, 16			; 00000010H
  002ca	3d fe ff 00 00	 cmp	 eax, 65534		; 0000fffeH
  002cf	75 05		 jne	 SHORT $L70294

; 376  : 		{
; 377  : 			last = base - 1;

  002d1	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]

; 378  : 		}
; 379  : 		else                                    /*search lower */

  002d4	eb 0a		 jmp	 SHORT $L70297
$L70294:

; 380  : 		{			
; 381  : 			if (stat == LOOK_HIGHER)	/* search higher */

  002d6	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  002db	75 0e		 jne	 SHORT $L70296

; 382  : 			{
; 383  : 				first = base + 1;

  002dd	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
$L70297:

; 371  : 
; 372  : 	while (first <= last)				/* search until list is empty */

  002e0	3b df		 cmp	 ebx, edi
  002e2	7e cd		 jle	 SHORT $L70292
$L70293:
  002e4	5f		 pop	 edi
  002e5	5e		 pop	 esi
  002e6	5d		 pop	 ebp

; 388  : 			}
; 389  : 		}    
; 390  : 	}
; 391  : 	return (MISS);

  002e7	33 c0		 xor	 eax, eax
  002e9	5b		 pop	 ebx

; 392  : 
; 393  : } /* par_dict_ufind_word */

  002ea	c3		 ret	 0
$L70296:
  002eb	5f		 pop	 edi
  002ec	5e		 pop	 esi
  002ed	5d		 pop	 ebp

; 384  : 			}
; 385  : 			else											
; 386  : 			{
; 387  : 				return(HIT);

  002ee	b8 01 00 00 00	 mov	 eax, 1
  002f3	5b		 pop	 ebx

; 392  : 
; 393  : } /* par_dict_ufind_word */

  002f4	c3		 ret	 0
_par_dict_ufind_word ENDP
_TEXT	ENDS
PUBLIC	_par_dict_where_to_look
EXTRN	_parser_char_types:BYTE
EXTRN	_par_upper:BYTE
_TEXT	SEGMENT
_DICT_ENTRY$ = 8
_DICT_HEAD$ = 12
_index$ = 16
_ppent$ = 20
_word$ = 24
_limit$ = 8
_par_dict_dlook PROC NEAR

; 421  : 	int	i;
; 422  : 	long limit;
; 423  : 	              
; 424  : 	limit = ((int)DICT_ENTRY) - 1;

  00300	8b 44 24 04	 mov	 eax, DWORD PTR _DICT_ENTRY$[esp-4]
  00304	55		 push	 ebp

; 425  : 
; 426  : 	/* first, bail out if we've fallen off the end of the list.. 	*/
; 427  : 	if (index<0)

  00305	8b 6c 24 10	 mov	 ebp, DWORD PTR _index$[esp]
  00309	48		 dec	 eax
  0030a	56		 push	 esi
  0030b	57		 push	 edi
  0030c	85 ed		 test	 ebp, ebp
  0030e	89 44 24 10	 mov	 DWORD PTR _limit$[esp+8], eax

; 428  : 	{
; 429  : 		return(LOOK_HIGHER);

  00312	7c 63		 jl	 SHORT $L70325

; 430  : 	}
; 431  : 	if (index>limit)

  00314	3b e8		 cmp	 ebp, eax
  00316	7e 09		 jle	 SHORT $L70313
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi

; 432  : 	{
; 433  : 		return(LOOK_LOWER);

  0031a	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  0031f	5d		 pop	 ebp

; 478  : }

  00320	c3		 ret	 0
$L70313:

; 434  : 	}
; 435  : 	
; 436  : 	*ppent = (struct dic_entry far *)DICT_HEAD[index];

  00321	8b 4c 24 14	 mov	 ecx, DWORD PTR _DICT_HEAD$[esp+8]
  00325	8b 54 24 1c	 mov	 edx, DWORD PTR _ppent$[esp+8]

; 437  : 	
; 438  : 
; 439  : 	/* this loop is written to 'continue' on matching charaters	*/
; 440  : 	for(i=0;(*ppent)->text[i] != '\0';i++)

  00329	8b 7c 24 20	 mov	 edi, DWORD PTR _word$[esp+8]
  0032d	33 c0		 xor	 eax, eax
  0032f	8b 34 a9	 mov	 esi, DWORD PTR [ecx+ebp*4]
  00332	89 32		 mov	 DWORD PTR [edx], esi
  00334	8a 4e 04	 mov	 cl, BYTE PTR [esi+4]
  00337	84 c9		 test	 cl, cl
  00339	74 30		 je	 SHORT $L70317
$L70315:

; 441  : 	{
; 442  : 		if(word[i] == '\0')

  0033b	8a 14 38	 mov	 dl, BYTE PTR [eax+edi]
  0033e	84 d2		 test	 dl, dl
  00340	74 48		 je	 SHORT $L70394

; 443  : 		{
; 444  : 			return(LOOK_LOWER);
; 445  : 		}
; 446  : 		if(word[i] == (*ppent)->text[i])

  00342	8a 4c 06 04	 mov	 cl, BYTE PTR [esi+eax+4]
  00346	3a d1		 cmp	 dl, cl
  00348	74 18		 je	 SHORT $L70316

; 447  : 		{
; 448  : 			continue;
; 449  : 		}
; 450  : 
; 451  : 		if(IS_LOWER((*ppent)->text[i])  && (word[i] == par_upper[(*ppent)->text[i]]))

  0034a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00350	f6 04 4d 00 00
	00 00 04	 test	 BYTE PTR _parser_char_types[ecx*2], 4
  00358	74 26		 je	 SHORT $L70320
  0035a	3a 91 00 00 00
	00		 cmp	 dl, BYTE PTR _par_upper[ecx]
  00360	75 1e		 jne	 SHORT $L70320
$L70316:

; 437  : 	
; 438  : 
; 439  : 	/* this loop is written to 'continue' on matching charaters	*/
; 440  : 	for(i=0;(*ppent)->text[i] != '\0';i++)

  00362	8a 4c 06 05	 mov	 cl, BYTE PTR [esi+eax+5]
  00366	40		 inc	 eax
  00367	84 c9		 test	 cl, cl
  00369	75 d0		 jne	 SHORT $L70315
$L70317:

; 464  : 	}
; 465  : 	
; 466  : 	/* if we got here, we got to the end of the dictionary string	*/
; 467  : 	/* without bailing out on a miscompare. 			*/
; 468  : 	/* if this is also the end of the incoming string, it's a hit.	*/
; 469  : 	if(word[i] == '\0')

  0036b	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]

; 470  : 	{
; 471  : 		if (word[i-1] == '.')

  0036e	b8 01 00 00 00	 mov	 eax, 1
  00373	84 c9		 test	 cl, cl
  00375	74 05		 je	 SHORT $L70308
$L70325:

; 472  : 				return(HIT);	// return HIT instead of ABBREV
; 473  :             else
; 474  : 				return(HIT);
; 475  : 	}
; 476  : 	/* was a match, but the incoming string was longer.. */
; 477  : 	return(LOOK_HIGHER);

  00377	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
$L70308:
  0037c	5f		 pop	 edi
  0037d	5e		 pop	 esi
  0037e	5d		 pop	 ebp

; 478  : }

  0037f	c3		 ret	 0
$L70320:

; 452  : 		   continue;
; 453  : 
; 454  : 		/* don't even ask where to look if we're at the edge */
; 455  : 		if (index==0)

  00380	85 ed		 test	 ebp, ebp

; 456  : 		{
; 457  : 			return(LOOK_HIGHER); /* bound.. */

  00382	74 f3		 je	 SHORT $L70325

; 458  : 		}
; 459  : 		if (index==limit)

  00384	3b 6c 24 10	 cmp	 ebp, DWORD PTR _limit$[esp+8]
  00388	75 09		 jne	 SHORT $L70322
$L70394:
  0038a	5f		 pop	 edi
  0038b	5e		 pop	 esi

; 460  : 		{
; 461  : 			return(LOOK_LOWER); /* boune.. */

  0038c	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  00391	5d		 pop	 ebp

; 478  : }

  00392	c3		 ret	 0
$L70322:

; 462  : 		}
; 463  : 		return(par_dict_where_to_look(*ppent,word));

  00393	57		 push	 edi
  00394	56		 push	 esi
  00395	e8 00 00 00 00	 call	 _par_dict_where_to_look
  0039a	83 c4 08	 add	 esp, 8
  0039d	5f		 pop	 edi
  0039e	5e		 pop	 esi
  0039f	5d		 pop	 ebp

; 478  : }

  003a0	c3		 ret	 0
_par_dict_dlook ENDP
_TEXT	ENDS
PUBLIC	_par_dict_where_to_ulook
_TEXT	SEGMENT
_UDICT_HEAD$ = 12
_uindex$ = 16
_word$ = 20
_par_dict_udlook PROC NEAR

; 509  : 	char _far *ent;
; 510  : 	int     i; 
; 511  : 
; 512  : 
; 513  :         /* add for WIN95.  6/03/96.  by MGS */
; 514  : #ifdef MSDOS
; 515  :         ent = UDICT_HEAD[uindex];
; 516  : #else
; 517  :         ent = UDICT_HEAD[uindex]->text;

  003b0	8b 44 24 0c	 mov	 eax, DWORD PTR _uindex$[esp-4]
  003b4	8b 4c 24 08	 mov	 ecx, DWORD PTR _UDICT_HEAD$[esp-4]
  003b8	53		 push	 ebx
  003b9	55		 push	 ebp
  003ba	56		 push	 esi
  003bb	8b 34 81	 mov	 esi, DWORD PTR [ecx+eax*4]

; 518  : #endif
; 519  : 
; 520  : 	for(i=0;ent[i] != '\0';i++)

  003be	8a 4e 04	 mov	 cl, BYTE PTR [esi+4]
  003c1	83 c6 04	 add	 esi, 4
  003c4	33 ed		 xor	 ebp, ebp
  003c6	57		 push	 edi
  003c7	84 c9		 test	 cl, cl
  003c9	74 46		 je	 SHORT $L70339
  003cb	8b 7c 24 20	 mov	 edi, DWORD PTR _word$[esp+12]
  003cf	8b c6		 mov	 eax, esi
  003d1	2b fe		 sub	 edi, esi
$L70337:

; 521  : 	{
; 522  : 		if(word[i] == ent[i])

  003d3	8a 14 07	 mov	 dl, BYTE PTR [edi+eax]
  003d6	8b da		 mov	 ebx, edx
  003d8	0f be c9	 movsx	 ecx, cl
  003db	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  003e1	3b d9		 cmp	 ebx, ecx
  003e3	74 23		 je	 SHORT $L70338

; 523  : 			continue;
; 524  : 		if(word[i] == '\0')

  003e5	84 d2		 test	 dl, dl
  003e7	74 3e		 je	 SHORT $L70398

; 527  : 		}
; 528  : 		if(IS_LOWER(ent[i])  && (word[i] == par_upper[ent[i]]))

  003e9	8a 08		 mov	 cl, BYTE PTR [eax]
  003eb	8b d9		 mov	 ebx, ecx
  003ed	81 e3 ff 00 00
	00		 and	 ebx, 255		; 000000ffH
  003f3	f6 04 5d 00 00
	00 00 04	 test	 BYTE PTR _parser_char_types[ebx*2], 4
  003fb	74 34		 je	 SHORT $L70342
  003fd	0f be c9	 movsx	 ecx, cl
  00400	3a 91 00 00 00
	00		 cmp	 dl, BYTE PTR _par_upper[ecx]
  00406	75 29		 jne	 SHORT $L70342
$L70338:

; 518  : #endif
; 519  : 
; 520  : 	for(i=0;ent[i] != '\0';i++)

  00408	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0040b	45		 inc	 ebp
  0040c	40		 inc	 eax
  0040d	84 c9		 test	 cl, cl
  0040f	75 c2		 jne	 SHORT $L70337
$L70339:

; 531  : 	}
; 532  : 	if(word[i] == '\0')

  00411	8b 44 24 20	 mov	 eax, DWORD PTR _word$[esp+12]
  00415	5f		 pop	 edi
  00416	5e		 pop	 esi
  00417	8a 04 28	 mov	 al, BYTE PTR [eax+ebp]
  0041a	5d		 pop	 ebp
  0041b	f6 d8		 neg	 al
  0041d	1b c0		 sbb	 eax, eax
  0041f	5b		 pop	 ebx
  00420	25 fe ff 00 00	 and	 eax, 65534		; 0000fffeH
  00425	40		 inc	 eax

; 533  : 	{
; 534  : 		return(HIT);
; 535  : 	}
; 536  : 	return(LOOK_HIGHER);
; 537  : }

  00426	c3		 ret	 0
$L70398:
  00427	5f		 pop	 edi
  00428	5e		 pop	 esi
  00429	5d		 pop	 ebp

; 525  : 		{
; 526  : 			return(LOOK_LOWER);

  0042a	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  0042f	5b		 pop	 ebx

; 533  : 	{
; 534  : 		return(HIT);
; 535  : 	}
; 536  : 	return(LOOK_HIGHER);
; 537  : }

  00430	c3		 ret	 0
$L70342:

; 529  : 			continue;                       
; 530  : 		return(par_dict_where_to_ulook(ent,word));

  00431	8b 54 24 20	 mov	 edx, DWORD PTR _word$[esp+12]
  00435	52		 push	 edx
  00436	56		 push	 esi
  00437	e8 00 00 00 00	 call	 _par_dict_where_to_ulook
  0043c	83 c4 08	 add	 esp, 8
  0043f	5f		 pop	 edi
  00440	5e		 pop	 esi
  00441	5d		 pop	 ebp
  00442	5b		 pop	 ebx

; 533  : 	{
; 534  : 		return(HIT);
; 535  : 	}
; 536  : 	return(LOOK_HIGHER);
; 537  : }

  00443	c3		 ret	 0
_par_dict_udlook ENDP
_pent$ = 8
_word$ = 12
_pivot_char$ = 12
_par_dict_where_to_look PROC NEAR

; 559  : {	

  00450	53		 push	 ebx
  00451	56		 push	 esi

; 560  : 	int	i;
; 561  : 	unsigned char	pivot_char;
; 562  :   	
; 563  : 	for(i=0;word[i];i++)

  00452	8b 74 24 10	 mov	 esi, DWORD PTR _word$[esp+4]
  00456	33 c9		 xor	 ecx, ecx
  00458	57		 push	 edi
  00459	8b 7c 24 10	 mov	 edi, DWORD PTR _pent$[esp+8]
  0045d	8a 06		 mov	 al, BYTE PTR [esi]
  0045f	84 c0		 test	 al, al
  00461	74 26		 je	 SHORT $L70404
$L70351:

; 564  : 	{
; 565  : 		pivot_char = par_upper[pent->text[i]];

  00463	33 d2		 xor	 edx, edx

; 566  : 		if(par_upper[word[i]] != pivot_char)

  00465	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0046a	8a 54 0f 04	 mov	 dl, BYTE PTR [edi+ecx+4]
  0046e	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR _par_upper[eax]
  00474	8a 92 00 00 00
	00		 mov	 dl, BYTE PTR _par_upper[edx]
  0047a	3a da		 cmp	 bl, dl
  0047c	75 0f		 jne	 SHORT $L70402
  0047e	8a 44 31 01	 mov	 al, BYTE PTR [ecx+esi+1]
  00482	41		 inc	 ecx
  00483	84 c0		 test	 al, al
  00485	75 dc		 jne	 SHORT $L70351

; 560  : 	int	i;
; 561  : 	unsigned char	pivot_char;
; 562  :   	
; 563  : 	for(i=0;word[i];i++)

  00487	eb 04		 jmp	 SHORT $L70402
$L70404:
  00489	8a 54 24 14	 mov	 dl, BYTE PTR _pivot_char$[esp+8]
$L70402:

; 567  : 			break;
; 568  : 	}	
; 569  : 
; 570  : 	if ( (word[i]=='\0') && (pent->text[i]=='\0'))

  0048d	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  00490	84 c0		 test	 al, al
  00492	75 11		 jne	 SHORT $L70355
  00494	8a 5c 39 04	 mov	 bl, BYTE PTR [ecx+edi+4]
  00498	84 db		 test	 bl, bl
  0049a	75 09		 jne	 SHORT $L70355
  0049c	5f		 pop	 edi
  0049d	5e		 pop	 esi

; 571  : 	{
; 572  : 		return(LOOK_HIGHER);

  0049e	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  004a3	5b		 pop	 ebx

; 576  : 	{
; 577  : 		return(LOOK_HIGHER);
; 578  : 	}
; 579  : 	
; 580  : 	return(LOOK_LOWER);
; 581  : }

  004a4	c3		 ret	 0
$L70355:

; 573  : 	}
; 574  : 	
; 575  : 	if(par_upper[word[i]] > pivot_char)

  004a5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004aa	5f		 pop	 edi
  004ab	5e		 pop	 esi
  004ac	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR _par_upper[eax]
  004b2	3a d3		 cmp	 dl, bl
  004b4	5b		 pop	 ebx
  004b5	1b c0		 sbb	 eax, eax
  004b7	f7 d8		 neg	 eax
  004b9	05 fe ff 00 00	 add	 eax, 65534		; 0000fffeH

; 576  : 	{
; 577  : 		return(LOOK_HIGHER);
; 578  : 	}
; 579  : 	
; 580  : 	return(LOOK_LOWER);
; 581  : }

  004be	c3		 ret	 0
_par_dict_where_to_look ENDP
_ent$ = 8
_word$ = 12
_pivot_char$ = 12
_par_dict_where_to_ulook PROC NEAR

; 602  : {	

  004c0	53		 push	 ebx
  004c1	56		 push	 esi
  004c2	57		 push	 edi

; 603  : 
; 604  : 	int	i;
; 605  : 	unsigned char	pivot_char;
; 606  : 	for(i=0;word[i];i++)

  004c3	8b 7c 24 14	 mov	 edi, DWORD PTR _word$[esp+8]
  004c7	33 db		 xor	 ebx, ebx
  004c9	8a 07		 mov	 al, BYTE PTR [edi]
  004cb	84 c0		 test	 al, al
  004cd	74 2a		 je	 SHORT $L70409
  004cf	8b 74 24 10	 mov	 esi, DWORD PTR _ent$[esp+8]
  004d3	8b cf		 mov	 ecx, edi
  004d5	2b f7		 sub	 esi, edi
$L70364:

; 607  : 	{
; 608  : 		pivot_char = par_upper[ent[i]];

  004d7	0f be 14 0e	 movsx	 edx, BYTE PTR [esi+ecx]

; 609  : 		if(par_upper[word[i]] != pivot_char)

  004db	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004e0	8a 92 00 00 00
	00		 mov	 dl, BYTE PTR _par_upper[edx]
  004e6	38 90 00 00 00
	00		 cmp	 BYTE PTR _par_upper[eax], dl
  004ec	75 0f		 jne	 SHORT $L70407
  004ee	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  004f1	43		 inc	 ebx
  004f2	41		 inc	 ecx
  004f3	84 c0		 test	 al, al
  004f5	75 e0		 jne	 SHORT $L70364

; 603  : 
; 604  : 	int	i;
; 605  : 	unsigned char	pivot_char;
; 606  : 	for(i=0;word[i];i++)

  004f7	eb 04		 jmp	 SHORT $L70407
$L70409:
  004f9	8a 54 24 14	 mov	 dl, BYTE PTR _pivot_char$[esp+8]
$L70407:

; 610  : 			break;
; 611  : 	}
; 612  : 	if(par_upper[word[i]] > pivot_char)

  004fd	33 c0		 xor	 eax, eax
  004ff	8a 04 3b	 mov	 al, BYTE PTR [ebx+edi]
  00502	5f		 pop	 edi
  00503	5e		 pop	 esi
  00504	8a 98 00 00 00
	00		 mov	 bl, BYTE PTR _par_upper[eax]
  0050a	3a d3		 cmp	 dl, bl
  0050c	5b		 pop	 ebx
  0050d	1b c0		 sbb	 eax, eax
  0050f	f7 d8		 neg	 eax
  00511	05 fe ff 00 00	 add	 eax, 65534		; 0000fffeH

; 613  : 	{
; 614  : 		return(LOOK_HIGHER);                         
; 615  : 	}
; 616  : 	return(LOOK_LOWER);
; 617  : }

  00516	c3		 ret	 0
_par_dict_where_to_ulook ENDP
_TEXT	ENDS
END
