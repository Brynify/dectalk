	TITLE	D:\work\product\dapi\src\Ph\ph_drwt0.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_oarcnt
PUBLIC	_f0msegtars
PUBLIC	_f0fsegtars
_BSS	SEGMENT
_oarcnt	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_f0msegtars DW	032H
	DW	03cH
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	064H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	064H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	07dH
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0fff6H
	DW	00H
	DW	00H
	DW	096H
	DW	0ffceH
	DW	0fff6H
	ORG $+2
_f0fsegtars DW	032H
	DW	050H
	DW	03cH
	DW	028H
	DW	014H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	014H
	DW	00H
	DW	01eH
	DW	032H
	DW	03cH
	DW	050H
	DW	032H
	DW	064H
	DW	01eH
	DW	03cH
	DW	050H
	DW	03cH
	DW	00H
	DW	01eH
	DW	050H
	DW	03cH
	DW	03cH
	DW	00H
	DW	00H
	DW	05aH
	DW	00H
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	0ffceH
	DW	00H
	DW	0ffceH
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	096H
	DW	0ffceH
	DW	0fff6H
	DW	00H
	DW	00H
	DW	096H
	DW	0ffceH
	DW	0fff6H
_DATA	ENDS
PUBLIC	_pht0draw
EXTRN	_TextToSpeechErrorHandler:NEAR
EXTRN	__imp__fprintf:NEAR
EXTRN	_dologphoneme:NEAR
EXTRN	_featb:BYTE
EXTRN	_getcosine:BYTE
_DATA	SEGMENT
	ORG $+2
$SG71333 DB	0aH, 00H
	ORG $+2
$SG71425 DB	0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_phTTS$ = 8
_pKsd_t$ = -4
_f0seg$ = -8
_pht0draw PROC NEAR

; 545  : {

  00000	83 ec 08	 sub	 esp, 8

; 546  : 
; 547  : 
; 548  : /*    Automatic variables */
; 549  :     
; 550  : #ifdef GRAPHF0
; 551  : 	int icnt;
; 552  : 	char prntbuf[121];
; 553  : #endif
; 554  : int temp,dtglst,pseudojitter;	
; 555  : 	PKSD_T pKsd_t;
; 556  : 	PDPH_T pDph_t;
; 557  :     PDPHSETTAR_ST pDphsettar;
; 558  : 	short f0seg=0,f0in=0;
; 559  : 
; 560  : 	pKsd_t = phTTS->pKernelShareData;

  00003	8b 44 24 0c	 mov	 eax, DWORD PTR _phTTS$[esp+4]
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi

; 561  : 	pDph_t = phTTS->pPHThreadData;

  0000a	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  0000d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00010	57		 push	 edi
  00011	89 4c 24 14	 mov	 DWORD PTR _pKsd_t$[esp+24], ecx

; 562  :    pDphsettar = pDph_t->pSTphsettar;
; 563  :  /* Initialize , GL  6/11/1996*/
; 564  :  /* this code is re-entrant and these variables must only be re-initialized at a hard or soft init*/
; 565  : 
; 566  :  /*pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0;*/
; 567  :    
; 568  : 
; 569  : 
; 570  : if (pDph_t->malfem == MALE)

  00015	66 83 be e4 14
	00 00 01	 cmp	 WORD PTR [esi+5348], 1
  0001d	8b be d0 2b 00
	00		 mov	 edi, DWORD PTR [esi+11216]
  00023	0f 85 16 0d 00
	00		 jne	 $L71241

; 571  : 		{	
; 572  : /*    Initialize */
; 573  : if (pDph_t->nf0ev <= -2) 

  00029	33 db		 xor	 ebx, ebx
  0002b	83 c9 ff	 or	 ecx, -1
  0002e	66 83 be 2a 23
	00 00 fe	 cmp	 WORD PTR [esi+9002], -2	; fffffffeH
  00036	0f 8f 06 04 00
	00		 jg	 $L71242

; 574  : 	{
; 575  : 
; 576  : 		/* Hard initialization */
; 577  : 		/* for now hardcode baseline for init experimentation eab 8/96*/
; 578  : 		/* EAB BUG- found problem with f0command, it needs to be a global variable
; 579  : 		or it sometimes doesn't get handled correctly*/
; 580  : 		pDph_t->clausepos=0;

  0003c	66 89 9e ca 14
	00 00		 mov	 WORD PTR [esi+5322], bx

; 581  : 		pDphsettar->phocur = SIL;

  00043	66 89 5f 44	 mov	 WORD PTR [edi+68], bx

; 582  : #ifdef GERMAN
; 583  : 		pDph_t->f0basetypes[0][0]=1157;
; 584  : 		pDph_t->f0basetypes[0][1]=1145;
; 585  : 		pDph_t->f0basetypes[0][2]=1139;
; 586  : 		pDph_t->f0basetypes[0][3]=1127;
; 587  : 		pDph_t->f0basetypes[0][4]=1113;
; 588  : 		pDph_t->f0basetypes[0][5]=1109;
; 589  : 		pDph_t->f0basetypes[0][6]=1095;
; 590  : 		pDph_t->f0basetypes[0][7]=1082;
; 591  : 		pDph_t->f0basetypes[0][8]=1079;
; 592  : 		pDph_t->f0basetypes[0][9]=1065;
; 593  : 		pDph_t->f0basetypes[0][10]=1053;
; 594  : 		pDph_t->f0basetypes[0][11]=1040;
; 595  : 		pDph_t->f0basetypes[0][12]=1038;
; 596  : 		pDph_t->f0basetypes[0][13]=1024;
; 597  : 		pDph_t->f0basetypes[0][14]=980;
; 598  : 		pDph_t->f0basetypes[0][15]=952;
; 599  : 		pDph_t->f0basetypes[0][16]=863;
; 600  : 
; 601  : 		/*eab  less drop for short phrases*/
; 602  : 	
; 603  : 			pDph_t->f0basetypes[4][0]=1160;
; 604  : 			pDph_t->f0basetypes[4][1]=1150;
; 605  : 			pDph_t->f0basetypes[4][2]=1140;
; 606  : 			pDph_t->f0basetypes[4][3]=1152;
; 607  : 			pDph_t->f0basetypes[4][4]=1132;
; 608  : 			pDph_t->f0basetypes[4][5]=1140;
; 609  : 			pDph_t->f0basetypes[4][6]=1130;
; 610  : 			pDph_t->f0basetypes[4][7]=1124;
; 611  : 			pDph_t->f0basetypes[4][8]=1110;
; 612  : 			pDph_t->f0basetypes[4][9]=1100;
; 613  : 			pDph_t->f0basetypes[4][10]=1090;
; 614  : 			pDph_t->f0basetypes[4][11]=1090;
; 615  : 			pDph_t->f0basetypes[4][12]=1080;
; 616  : 			pDph_t->f0basetypes[4][13]=1080;
; 617  : 			pDph_t->f0basetypes[4][14]=1070;
; 618  : 			pDph_t->f0basetypes[4][15]=1070;
; 619  : 			pDph_t->f0basetypes[4][16]=1060;
; 620  : 
; 621  : 			/* comma*/
; 622  : 		pDph_t->f0basetypes[1][0]=1157;
; 623  : 		pDph_t->f0basetypes[1][1]=1145;
; 624  : 		pDph_t->f0basetypes[1][2]=1139;
; 625  : 		pDph_t->f0basetypes[1][3]=1127;
; 626  : 		pDph_t->f0basetypes[1][4]=1113;
; 627  : 		pDph_t->f0basetypes[1][5]=1109;
; 628  : 		pDph_t->f0basetypes[1][6]=1085;
; 629  : 		pDph_t->f0basetypes[1][7]=1062;
; 630  : 		pDph_t->f0basetypes[1][8]=1049;
; 631  : 		pDph_t->f0basetypes[1][9]=1035;
; 632  : 		pDph_t->f0basetypes[1][10]=1023;
; 633  : 		pDph_t->f0basetypes[1][11]=1015;
; 634  : 		pDph_t->f0basetypes[1][12]=1005;
; 635  : 		pDph_t->f0basetypes[1][13]=1100;
; 636  : 		pDph_t->f0basetypes[1][14]=1100;
; 637  : 		pDph_t->f0basetypes[1][15]=1100;
; 638  : 
; 639  : 		/*exclamation*/
; 640  : 		pDph_t->f0basetypes[2][0]=1057+160;
; 641  : 		pDph_t->f0basetypes[2][1]=1085+160;
; 642  : 		pDph_t->f0basetypes[2][2]=1109+160;
; 643  : 		pDph_t->f0basetypes[2][3]=1117+160;
; 644  : 		pDph_t->f0basetypes[2][4]=1113+160;
; 645  : 		pDph_t->f0basetypes[2][5]=1149+160;
; 646  : 		pDph_t->f0basetypes[2][6]=1095+160;
; 647  : 		pDph_t->f0basetypes[2][7]=1082+160;
; 648  : 		pDph_t->f0basetypes[2][8]=1079+160;
; 649  : 		pDph_t->f0basetypes[2][9]=1065+160;
; 650  : 		pDph_t->f0basetypes[2][10]=1053+160;
; 651  : 		pDph_t->f0basetypes[2][11]=1040+160;
; 652  : 		pDph_t->f0basetypes[2][12]=1038+160;
; 653  : 		pDph_t->f0basetypes[2][13]=1024+160;
; 654  : 		pDph_t->f0basetypes[2][14]=980+160;
; 655  : 		pDph_t->f0basetypes[2][15]=852+160;
; 656  : 		pDph_t->f0basetypes[2][16]=843+160;
; 657  : 
; 658  : 			/*Question*/
; 659  : 		pDph_t->glotalize =0;
; 660  : 		pDphsettar->glide_step=0;
; 661  : 		pDph_t->f0basetypes[3][0]=1187;
; 662  : 		pDph_t->f0basetypes[3][1]=1165;
; 663  : 		pDph_t->f0basetypes[3][2]=1139;
; 664  : 		pDph_t->f0basetypes[3][3]=1127;
; 665  : 		pDph_t->f0basetypes[3][4]=1113;
; 666  : 		pDph_t->f0basetypes[3][5]=1109;
; 667  : 		pDph_t->f0basetypes[3][6]=1095;
; 668  : 		pDph_t->f0basetypes[3][7]=1082;
; 669  : 		pDph_t->f0basetypes[3][8]=1079;
; 670  : 		pDph_t->f0basetypes[3][9]=1065;
; 671  : 		pDph_t->f0basetypes[3][10]=1053;
; 672  : 		pDph_t->f0basetypes[3][11]=940;
; 673  : 		pDph_t->f0basetypes[3][12]=938;
; 674  : 		pDph_t->f0basetypes[3][13]=924;
; 675  : 		pDph_t->f0basetypes[3][14]=1010;
; 676  : 		pDph_t->f0basetypes[3][15]=1014;
; 677  : 		pDph_t->f0basetypes[3][16]=1018;
; 678  : 
; 679  : 		
; 680  : 
; 681  : 		//Tuned BATS 709
; 682  : 			/* DECLARATIVE*/
; 683  : #ifdef trynew
; 684  : 		pDph_t->f0basetypes[0][0]=1195;
; 685  : 		pDph_t->f0basetypes[0][1]=1185;
; 686  : 		pDph_t->f0basetypes[0][2]=1179;
; 687  : 		pDph_t->f0basetypes[0][3]=1167;
; 688  : 		pDph_t->f0basetypes[0][4]=1153;
; 689  : 		pDph_t->f0basetypes[0][5]=1149;
; 690  : 		pDph_t->f0basetypes[0][6]=1135;
; 691  : 		pDph_t->f0basetypes[0][7]=1122;
; 692  : 		pDph_t->f0basetypes[0][8]=1119;
; 693  : 		pDph_t->f0basetypes[0][9]=1105;
; 694  : 		pDph_t->f0basetypes[0][10]=1093;
; 695  : 		pDph_t->f0basetypes[0][11]=1081;
; 696  : 		pDph_t->f0basetypes[0][12]=1075;
; 697  : 		pDph_t->f0basetypes[0][13]=1052;
; 698  : 		pDph_t->f0basetypes[0][14]=1011;
; 699  : 		pDph_t->f0basetypes[0][15]=984;
; 700  : 		pDph_t->f0basetypes[0][16]=972;
; 701  : 			;
; 702  : 
; 703  : 		/*eab  less drop for short phrases*/
; 704  : 	
; 705  : 			pDph_t->f0basetypes[4][0]=1160;
; 706  : 			pDph_t->f0basetypes[4][1]=1150;
; 707  : 			pDph_t->f0basetypes[4][2]=1150;
; 708  : 			pDph_t->f0basetypes[4][3]=1152;
; 709  : 			pDph_t->f0basetypes[4][4]=1132;
; 710  : 			pDph_t->f0basetypes[4][5]=1120;
; 711  : 			pDph_t->f0basetypes[4][6]=1100;
; 712  : 			pDph_t->f0basetypes[4][7]=1104;
; 713  : 			pDph_t->f0basetypes[4][8]=1100;
; 714  : 			pDph_t->f0basetypes[4][9]=1080;
; 715  : 			pDph_t->f0basetypes[4][10]=1070;
; 716  : 			pDph_t->f0basetypes[4][11]=1060;
; 717  : 			pDph_t->f0basetypes[4][12]=1050;
; 718  : 			pDph_t->f0basetypes[4][13]=1040;
; 719  : 			pDph_t->f0basetypes[4][14]=1030;
; 720  : 			pDph_t->f0basetypes[4][15]=1000;
; 721  : 			pDph_t->f0basetypes[4][16]=1000;
; 722  : 
; 723  : 			/* comma*/
; 724  : 		pDph_t->f0basetypes[1][0]=1157;
; 725  : 		pDph_t->f0basetypes[1][1]=1145;
; 726  : 		pDph_t->f0basetypes[1][2]=1139;
; 727  : 		pDph_t->f0basetypes[1][3]=1127;
; 728  : 		pDph_t->f0basetypes[1][4]=1113;
; 729  : 		pDph_t->f0basetypes[1][5]=1109;
; 730  : 		pDph_t->f0basetypes[1][6]=1085;
; 731  : 		pDph_t->f0basetypes[1][7]=1062;
; 732  : 		pDph_t->f0basetypes[1][8]=1049;
; 733  : 		pDph_t->f0basetypes[1][9]=1025;
; 734  : 		pDph_t->f0basetypes[1][10]=1013;
; 735  : 		pDph_t->f0basetypes[1][11]=1000;
; 736  : 		pDph_t->f0basetypes[1][12]=1002;
; 737  : 		pDph_t->f0basetypes[1][13]=1030;
; 738  : 		pDph_t->f0basetypes[1][14]=1060;
; 739  : 		pDph_t->f0basetypes[1][15]=1010;
; 740  : 
; 741  : 		/*exclamation*/
; 742  : 		pDph_t->f0basetypes[2][0]=1157;
; 743  : 		pDph_t->f0basetypes[2][1]=1145;
; 744  : 		pDph_t->f0basetypes[2][2]=1139;
; 745  : 		pDph_t->f0basetypes[2][3]=1127;
; 746  : 		pDph_t->f0basetypes[2][4]=1113;
; 747  : 		pDph_t->f0basetypes[2][5]=1109;
; 748  : 		pDph_t->f0basetypes[2][6]=1095;
; 749  : 		pDph_t->f0basetypes[2][7]=1082;
; 750  : 		pDph_t->f0basetypes[2][8]=1079;
; 751  : 		pDph_t->f0basetypes[2][9]=1065;
; 752  : 		pDph_t->f0basetypes[2][10]=1053;
; 753  : 		pDph_t->f0basetypes[2][11]=1040;
; 754  : 		pDph_t->f0basetypes[2][12]=1038;
; 755  : 		pDph_t->f0basetypes[2][13]=1024;
; 756  : 		pDph_t->f0basetypes[2][14]=980+70;
; 757  : 		pDph_t->f0basetypes[2][15]=952+60;
; 758  : 		pDph_t->f0basetypes[2][16]=943+40;
; 759  : 
; 760  : 					/*Question*/
; 761  : 		pDph_t->glotalize =0;
; 762  : 		pDphsettar->glide_step=0;
; 763  : 		pDph_t->f0basetypes[3][0]=1187;
; 764  : 		pDph_t->f0basetypes[3][1]=1165;
; 765  : 		pDph_t->f0basetypes[3][2]=1139;
; 766  : 		pDph_t->f0basetypes[3][3]=1127;
; 767  : 		pDph_t->f0basetypes[3][4]=1113;
; 768  : 		pDph_t->f0basetypes[3][5]=1109;
; 769  : 		pDph_t->f0basetypes[3][6]=1095;
; 770  : 		pDph_t->f0basetypes[3][7]=1082;
; 771  : 		pDph_t->f0basetypes[3][8]=1079;
; 772  : 		pDph_t->f0basetypes[3][9]=1065;
; 773  : 		pDph_t->f0basetypes[3][10]=1053;
; 774  : 		pDph_t->f0basetypes[3][11]=940;
; 775  : 		pDph_t->f0basetypes[3][12]=938;
; 776  : 		pDph_t->f0basetypes[3][13]=924;
; 777  : 		pDph_t->f0basetypes[3][14]=1010;
; 778  : 		pDph_t->f0basetypes[3][15]=1014;
; 779  : 		pDph_t->f0basetypes[3][16]=1018;
; 780  : 
; 781  : #endif
; 782  : #endif
; 783  : 
; 784  : 		
; 785  : #ifdef SPANISH_LA
; 786  : 
; 787  : 
; 788  : 
; 789  : /* DECLARATIVE*/
; 790  : 
; 791  : 		pDph_t->f0basetypes[0][0]=1157;
; 792  : 		pDph_t->f0basetypes[0][1]=1145;
; 793  : 		pDph_t->f0basetypes[0][2]=1139;
; 794  : 		pDph_t->f0basetypes[0][3]=1127;
; 795  : 		pDph_t->f0basetypes[0][4]=1113;
; 796  : 		pDph_t->f0basetypes[0][5]=1109;
; 797  : 		pDph_t->f0basetypes[0][6]=1095;
; 798  : 		pDph_t->f0basetypes[0][7]=1082;
; 799  : 		pDph_t->f0basetypes[0][8]=1079;
; 800  : 		pDph_t->f0basetypes[0][9]=1075;
; 801  : 		pDph_t->f0basetypes[0][10]=1062;
; 802  : 		pDph_t->f0basetypes[0][11]=1059;
; 803  : 		pDph_t->f0basetypes[0][12]=1045;
; 804  : 		pDph_t->f0basetypes[0][13]=1032;
; 805  : 		pDph_t->f0basetypes[0][14]=1029;
; 806  : 		pDph_t->f0basetypes[0][15]=1015;
; 807  : 		pDph_t->f0basetypes[0][16]=1002;
; 808  : 
; 809  : 		
; 810  : 
; 811  : 		/*eab  less drop for short phrases*/
; 812  : 	
; 813  : 			pDph_t->f0basetypes[4][0]=1160;
; 814  : 			pDph_t->f0basetypes[4][1]=1150;
; 815  : 			pDph_t->f0basetypes[4][2]=1150;
; 816  : 			pDph_t->f0basetypes[4][3]=1152;
; 817  : 			pDph_t->f0basetypes[4][4]=1132;
; 818  : 			pDph_t->f0basetypes[4][5]=1120;
; 819  : 			pDph_t->f0basetypes[4][6]=1100;
; 820  : 			pDph_t->f0basetypes[4][7]=1104;
; 821  : 			pDph_t->f0basetypes[4][8]=1100;
; 822  : 			pDph_t->f0basetypes[4][9]=1080;
; 823  : 			pDph_t->f0basetypes[4][10]=1070;
; 824  : 			pDph_t->f0basetypes[4][11]=1060;
; 825  : 			pDph_t->f0basetypes[4][12]=1050;
; 826  : 			pDph_t->f0basetypes[4][13]=1040;
; 827  : 			pDph_t->f0basetypes[4][14]=1030;
; 828  : 			pDph_t->f0basetypes[4][15]=1010;
; 829  : 			pDph_t->f0basetypes[4][16]=990;
; 830  : 
; 831  : 			/* comma*/
; 832  : 		pDph_t->f0basetypes[1][0]=1157;
; 833  : 		pDph_t->f0basetypes[1][1]=1145;
; 834  : 		pDph_t->f0basetypes[1][2]=1139;
; 835  : 		pDph_t->f0basetypes[1][3]=1127;
; 836  : 		pDph_t->f0basetypes[1][4]=1113;
; 837  : 		pDph_t->f0basetypes[1][5]=1109;
; 838  : 		pDph_t->f0basetypes[1][6]=1085;
; 839  : 		pDph_t->f0basetypes[1][7]=1062;
; 840  : 		pDph_t->f0basetypes[1][8]=1049;
; 841  : 		pDph_t->f0basetypes[1][9]=1035;
; 842  : 		pDph_t->f0basetypes[1][10]=1043;
; 843  : 		pDph_t->f0basetypes[1][11]=1045;
; 844  : 		pDph_t->f0basetypes[1][12]=1035;
; 845  : 		pDph_t->f0basetypes[1][13]=1040;
; 846  : 		pDph_t->f0basetypes[1][14]=1067;
; 847  : 		pDph_t->f0basetypes[1][15]=1084;
; 848  : 
; 849  : 		/*exclamation*/
; 850  : 		pDph_t->f0basetypes[2][0]=1157;
; 851  : 		pDph_t->f0basetypes[2][1]=1145;
; 852  : 		pDph_t->f0basetypes[2][2]=1139;
; 853  : 		pDph_t->f0basetypes[2][3]=1127;
; 854  : 		pDph_t->f0basetypes[2][4]=1113;
; 855  : 		pDph_t->f0basetypes[2][5]=1109;
; 856  : 		pDph_t->f0basetypes[2][6]=1095;
; 857  : 		pDph_t->f0basetypes[2][7]=1082;
; 858  : 		pDph_t->f0basetypes[2][8]=1079;
; 859  : 		pDph_t->f0basetypes[2][9]=1065;
; 860  : 		pDph_t->f0basetypes[2][10]=1053;
; 861  : 		pDph_t->f0basetypes[2][11]=1040;
; 862  : 		pDph_t->f0basetypes[2][12]=1038;
; 863  : 		pDph_t->f0basetypes[2][13]=1024;
; 864  : 		pDph_t->f0basetypes[2][14]=980+70;
; 865  : 		pDph_t->f0basetypes[2][15]=952+60;
; 866  : 		pDph_t->f0basetypes[2][16]=943+40;
; 867  : 
; 868  : 					/*Question*/
; 869  : 		pDph_t->glotalize =0;
; 870  : 		pDphsettar->glide_step=0;
; 871  : 		pDph_t->f0basetypes[3][0]=1187;
; 872  : 		pDph_t->f0basetypes[3][1]=1165;
; 873  : 		pDph_t->f0basetypes[3][2]=1139;
; 874  : 		pDph_t->f0basetypes[3][3]=1127;
; 875  : 		pDph_t->f0basetypes[3][4]=1113;
; 876  : 		pDph_t->f0basetypes[3][5]=1109;
; 877  : 		pDph_t->f0basetypes[3][6]=1095;
; 878  : 		pDph_t->f0basetypes[3][7]=1082;
; 879  : 		pDph_t->f0basetypes[3][8]=1079;
; 880  : 		pDph_t->f0basetypes[3][9]=1065;
; 881  : 		pDph_t->f0basetypes[3][10]=1053;
; 882  : 		pDph_t->f0basetypes[3][11]=1043;
; 883  : 		pDph_t->f0basetypes[3][12]=1056;
; 884  : 		pDph_t->f0basetypes[3][13]=1067;
; 885  : 		pDph_t->f0basetypes[3][14]=1089;
; 886  : 		pDph_t->f0basetypes[3][15]=1092;
; 887  : 		pDph_t->f0basetypes[3][16]=1104;
; 888  : 
; 889  : #endif	
; 890  : 
; 891  : 		
; 892  : #ifdef SPANISH_SP
; 893  : 
; 894  : 
; 895  : 
; 896  : /* DECLARATIVE*/
; 897  : 
; 898  : 		pDph_t->f0basetypes[0][0]=1157;
; 899  : 		pDph_t->f0basetypes[0][1]=1145;
; 900  : 		pDph_t->f0basetypes[0][2]=1139;
; 901  : 		pDph_t->f0basetypes[0][3]=1127;
; 902  : 		pDph_t->f0basetypes[0][4]=1113;
; 903  : 		pDph_t->f0basetypes[0][5]=1109;
; 904  : 		pDph_t->f0basetypes[0][6]=1095;
; 905  : 		pDph_t->f0basetypes[0][7]=1082;
; 906  : 		pDph_t->f0basetypes[0][8]=1079;
; 907  : 		pDph_t->f0basetypes[0][9]=1075;
; 908  : 		pDph_t->f0basetypes[0][10]=1062;
; 909  : 		pDph_t->f0basetypes[0][11]=1059;
; 910  : 		pDph_t->f0basetypes[0][12]=1045;
; 911  : 		pDph_t->f0basetypes[0][13]=1032;
; 912  : 		pDph_t->f0basetypes[0][14]=1029;
; 913  : 		pDph_t->f0basetypes[0][15]=1015;
; 914  : 		pDph_t->f0basetypes[0][16]=1002;
; 915  : 
; 916  : 		
; 917  : 
; 918  : 		/*eab  less drop for short phrases*/
; 919  : 	
; 920  : 			pDph_t->f0basetypes[4][0]=1160;
; 921  : 			pDph_t->f0basetypes[4][1]=1150;
; 922  : 			pDph_t->f0basetypes[4][2]=1150;
; 923  : 			pDph_t->f0basetypes[4][3]=1152;
; 924  : 			pDph_t->f0basetypes[4][4]=1132;
; 925  : 			pDph_t->f0basetypes[4][5]=1120;
; 926  : 			pDph_t->f0basetypes[4][6]=1100;
; 927  : 			pDph_t->f0basetypes[4][7]=1104;
; 928  : 			pDph_t->f0basetypes[4][8]=1100;
; 929  : 			pDph_t->f0basetypes[4][9]=1080;
; 930  : 			pDph_t->f0basetypes[4][10]=1070;
; 931  : 			pDph_t->f0basetypes[4][11]=1060;
; 932  : 			pDph_t->f0basetypes[4][12]=1050;
; 933  : 			pDph_t->f0basetypes[4][13]=1040;
; 934  : 			pDph_t->f0basetypes[4][14]=1030;
; 935  : 			pDph_t->f0basetypes[4][15]=1010;
; 936  : 			pDph_t->f0basetypes[4][16]=990;
; 937  : 
; 938  : 			/* comma*/
; 939  : 		pDph_t->f0basetypes[1][0]=1157;
; 940  : 		pDph_t->f0basetypes[1][1]=1145;
; 941  : 		pDph_t->f0basetypes[1][2]=1139;
; 942  : 		pDph_t->f0basetypes[1][3]=1127;
; 943  : 		pDph_t->f0basetypes[1][4]=1113;
; 944  : 		pDph_t->f0basetypes[1][5]=1109;
; 945  : 		pDph_t->f0basetypes[1][6]=1085;
; 946  : 		pDph_t->f0basetypes[1][7]=1062;
; 947  : 		pDph_t->f0basetypes[1][8]=1049;
; 948  : 		pDph_t->f0basetypes[1][9]=1035;
; 949  : 		pDph_t->f0basetypes[1][10]=1043;
; 950  : 		pDph_t->f0basetypes[1][11]=1045;
; 951  : 		pDph_t->f0basetypes[1][12]=1035;
; 952  : 		pDph_t->f0basetypes[1][13]=1040;
; 953  : 		pDph_t->f0basetypes[1][14]=1067;
; 954  : 		pDph_t->f0basetypes[1][15]=1084;
; 955  : 
; 956  : 		/*exclamation*/
; 957  : 		pDph_t->f0basetypes[2][0]=1157;
; 958  : 		pDph_t->f0basetypes[2][1]=1145;
; 959  : 		pDph_t->f0basetypes[2][2]=1139;
; 960  : 		pDph_t->f0basetypes[2][3]=1127;
; 961  : 		pDph_t->f0basetypes[2][4]=1113;
; 962  : 		pDph_t->f0basetypes[2][5]=1109;
; 963  : 		pDph_t->f0basetypes[2][6]=1095;
; 964  : 		pDph_t->f0basetypes[2][7]=1082;
; 965  : 		pDph_t->f0basetypes[2][8]=1079;
; 966  : 		pDph_t->f0basetypes[2][9]=1065;
; 967  : 		pDph_t->f0basetypes[2][10]=1053;
; 968  : 		pDph_t->f0basetypes[2][11]=1040;
; 969  : 		pDph_t->f0basetypes[2][12]=1038;
; 970  : 		pDph_t->f0basetypes[2][13]=1024;
; 971  : 		pDph_t->f0basetypes[2][14]=980+70;
; 972  : 		pDph_t->f0basetypes[2][15]=952+60;
; 973  : 		pDph_t->f0basetypes[2][16]=943+40;
; 974  : 
; 975  : 					/*Question*/
; 976  : 		pDph_t->glotalize =0;
; 977  : 		pDphsettar->glide_step=0;
; 978  : 		pDph_t->f0basetypes[3][0]=1187;
; 979  : 		pDph_t->f0basetypes[3][1]=1165;
; 980  : 		pDph_t->f0basetypes[3][2]=1139;
; 981  : 		pDph_t->f0basetypes[3][3]=1127;
; 982  : 		pDph_t->f0basetypes[3][4]=1113;
; 983  : 		pDph_t->f0basetypes[3][5]=1109;
; 984  : 		pDph_t->f0basetypes[3][6]=1095;
; 985  : 		pDph_t->f0basetypes[3][7]=1082;
; 986  : 		pDph_t->f0basetypes[3][8]=1079;
; 987  : 		pDph_t->f0basetypes[3][9]=1065;
; 988  : 		pDph_t->f0basetypes[3][10]=1053;
; 989  : 		pDph_t->f0basetypes[3][11]=1043;
; 990  : 		pDph_t->f0basetypes[3][12]=1056;
; 991  : 		pDph_t->f0basetypes[3][13]=1067;
; 992  : 		pDph_t->f0basetypes[3][14]=1089;
; 993  : 		pDph_t->f0basetypes[3][15]=1092;
; 994  : 		pDph_t->f0basetypes[3][16]=1104;
; 995  : 
; 996  : #endif
; 997  : 
; 998  : 
; 999  : #ifdef ENGLISH_US
; 1000 : 
; 1001 : 
; 1002 : 
; 1003 : /* DECLARATIVE*/
; 1004 : 
; 1005 : 		pDph_t->f0basetypes[0][0]=1157;

  00047	66 c7 86 10 20
	00 00 85 04	 mov	 WORD PTR [esi+8208], 1157 ; 00000485H

; 1006 : 		pDph_t->f0basetypes[0][1]=1145;

  00050	66 c7 86 12 20
	00 00 79 04	 mov	 WORD PTR [esi+8210], 1145 ; 00000479H

; 1007 : 		pDph_t->f0basetypes[0][2]=1139;
; 1008 : 		pDph_t->f0basetypes[0][3]=1127;

  00059	bd 67 04 00 00	 mov	 ebp, 1127		; 00000467H
  0005e	66 c7 86 14 20
	00 00 73 04	 mov	 WORD PTR [esi+8212], 1139 ; 00000473H

; 1009 : 		pDph_t->f0basetypes[0][4]=1113;

  00067	ba 59 04 00 00	 mov	 edx, 1113		; 00000459H
  0006c	66 89 ae 16 20
	00 00		 mov	 WORD PTR [esi+8214], bp

; 1010 : 		pDph_t->f0basetypes[0][5]=1109;

  00073	b9 55 04 00 00	 mov	 ecx, 1109		; 00000455H
  00078	66 89 96 18 20
	00 00		 mov	 WORD PTR [esi+8216], dx
  0007f	66 89 8e 1a 20
	00 00		 mov	 WORD PTR [esi+8218], cx

; 1011 : 		pDph_t->f0basetypes[0][6]=1095;

  00086	66 c7 86 1c 20
	00 00 47 04	 mov	 WORD PTR [esi+8220], 1095 ; 00000447H

; 1012 : 		pDph_t->f0basetypes[0][7]=1082;

  0008f	66 c7 86 1e 20
	00 00 3a 04	 mov	 WORD PTR [esi+8222], 1082 ; 0000043aH

; 1013 : 		pDph_t->f0basetypes[0][8]=1079;

  00098	66 c7 86 20 20
	00 00 37 04	 mov	 WORD PTR [esi+8224], 1079 ; 00000437H

; 1014 : 		pDph_t->f0basetypes[0][9]=1065;

  000a1	66 c7 86 22 20
	00 00 29 04	 mov	 WORD PTR [esi+8226], 1065 ; 00000429H

; 1015 : 		pDph_t->f0basetypes[0][10]=1053;

  000aa	66 c7 86 24 20
	00 00 1d 04	 mov	 WORD PTR [esi+8228], 1053 ; 0000041dH

; 1016 : 		pDph_t->f0basetypes[0][11]=1040;

  000b3	66 c7 86 26 20
	00 00 10 04	 mov	 WORD PTR [esi+8230], 1040 ; 00000410H

; 1017 : 		pDph_t->f0basetypes[0][12]=1038;

  000bc	66 c7 86 28 20
	00 00 0e 04	 mov	 WORD PTR [esi+8232], 1038 ; 0000040eH

; 1018 : 		pDph_t->f0basetypes[0][13]=1024;

  000c5	66 c7 86 2a 20
	00 00 00 04	 mov	 WORD PTR [esi+8234], 1024 ; 00000400H

; 1019 : 		pDph_t->f0basetypes[0][14]=980;

  000ce	66 c7 86 2c 20
	00 00 d4 03	 mov	 WORD PTR [esi+8236], 980 ; 000003d4H

; 1020 : 		pDph_t->f0basetypes[0][15]=952;

  000d7	66 c7 86 2e 20
	00 00 b8 03	 mov	 WORD PTR [esi+8238], 952 ; 000003b8H

; 1021 : 		pDph_t->f0basetypes[0][16]=863;

  000e0	66 c7 86 30 20
	00 00 5f 03	 mov	 WORD PTR [esi+8240], 863 ; 0000035fH

; 1022 : 
; 1023 : 		/*eab  less drop for short phrases*/
; 1024 : 	
; 1025 : 			pDph_t->f0basetypes[4][0]=1160;

  000e9	66 c7 86 98 20
	00 00 88 04	 mov	 WORD PTR [esi+8344], 1160 ; 00000488H

; 1026 : 			pDph_t->f0basetypes[4][1]=1150;
; 1027 : 			pDph_t->f0basetypes[4][2]=1140;

  000f2	b8 74 04 00 00	 mov	 eax, 1140		; 00000474H
  000f7	66 c7 86 9a 20
	00 00 7e 04	 mov	 WORD PTR [esi+8346], 1150 ; 0000047eH
  00100	66 89 86 9c 20
	00 00		 mov	 WORD PTR [esi+8348], ax

; 1028 : 			pDph_t->f0basetypes[4][3]=1152;

  00107	66 c7 86 9e 20
	00 00 80 04	 mov	 WORD PTR [esi+8350], 1152 ; 00000480H

; 1029 : 			pDph_t->f0basetypes[4][4]=1132;

  00110	66 c7 86 a0 20
	00 00 6c 04	 mov	 WORD PTR [esi+8352], 1132 ; 0000046cH

; 1030 : 			pDph_t->f0basetypes[4][5]=1140;

  00119	66 89 86 a2 20
	00 00		 mov	 WORD PTR [esi+8354], ax

; 1031 : 			pDph_t->f0basetypes[4][6]=1130;

  00120	66 c7 86 a4 20
	00 00 6a 04	 mov	 WORD PTR [esi+8356], 1130 ; 0000046aH

; 1032 : 			pDph_t->f0basetypes[4][7]=1124;

  00129	66 c7 86 a6 20
	00 00 64 04	 mov	 WORD PTR [esi+8358], 1124 ; 00000464H

; 1033 : 			pDph_t->f0basetypes[4][8]=1110;

  00132	66 c7 86 a8 20
	00 00 56 04	 mov	 WORD PTR [esi+8360], 1110 ; 00000456H

; 1034 : 			pDph_t->f0basetypes[4][9]=1100;

  0013b	66 c7 86 aa 20
	00 00 4c 04	 mov	 WORD PTR [esi+8362], 1100 ; 0000044cH

; 1035 : 			pDph_t->f0basetypes[4][10]=1090;

  00144	66 c7 86 ac 20
	00 00 42 04	 mov	 WORD PTR [esi+8364], 1090 ; 00000442H

; 1036 : 			pDph_t->f0basetypes[4][11]=1090;

  0014d	66 c7 86 ae 20
	00 00 42 04	 mov	 WORD PTR [esi+8366], 1090 ; 00000442H

; 1037 : 			pDph_t->f0basetypes[4][12]=1080;

  00156	66 c7 86 b0 20
	00 00 38 04	 mov	 WORD PTR [esi+8368], 1080 ; 00000438H

; 1038 : 			pDph_t->f0basetypes[4][13]=1080;

  0015f	66 c7 86 b2 20
	00 00 38 04	 mov	 WORD PTR [esi+8370], 1080 ; 00000438H

; 1039 : 			pDph_t->f0basetypes[4][14]=1070;

  00168	66 c7 86 b4 20
	00 00 2e 04	 mov	 WORD PTR [esi+8372], 1070 ; 0000042eH

; 1040 : 			pDph_t->f0basetypes[4][15]=1070;

  00171	66 c7 86 b6 20
	00 00 2e 04	 mov	 WORD PTR [esi+8374], 1070 ; 0000042eH

; 1041 : 			pDph_t->f0basetypes[4][16]=1060;

  0017a	66 c7 86 b8 20
	00 00 24 04	 mov	 WORD PTR [esi+8376], 1060 ; 00000424H

; 1042 : 
; 1043 : 			/* comma*/
; 1044 : 		pDph_t->f0basetypes[1][0]=1157;

  00183	66 c7 86 32 20
	00 00 85 04	 mov	 WORD PTR [esi+8242], 1157 ; 00000485H

; 1045 : 		pDph_t->f0basetypes[1][1]=1145;

  0018c	66 c7 86 34 20
	00 00 79 04	 mov	 WORD PTR [esi+8244], 1145 ; 00000479H

; 1046 : 		pDph_t->f0basetypes[1][2]=1139;

  00195	66 c7 86 36 20
	00 00 73 04	 mov	 WORD PTR [esi+8246], 1139 ; 00000473H

; 1047 : 		pDph_t->f0basetypes[1][3]=1127;

  0019e	66 89 ae 38 20
	00 00		 mov	 WORD PTR [esi+8248], bp

; 1048 : 		pDph_t->f0basetypes[1][4]=1113;

  001a5	66 89 96 3a 20
	00 00		 mov	 WORD PTR [esi+8250], dx

; 1049 : 		pDph_t->f0basetypes[1][5]=1109;

  001ac	66 89 8e 3c 20
	00 00		 mov	 WORD PTR [esi+8252], cx

; 1050 : 		pDph_t->f0basetypes[1][6]=1085;

  001b3	66 c7 86 3e 20
	00 00 3d 04	 mov	 WORD PTR [esi+8254], 1085 ; 0000043dH

; 1051 : 		pDph_t->f0basetypes[1][7]=1062;

  001bc	66 c7 86 40 20
	00 00 26 04	 mov	 WORD PTR [esi+8256], 1062 ; 00000426H

; 1052 : 		pDph_t->f0basetypes[1][8]=1049;

  001c5	66 c7 86 42 20
	00 00 19 04	 mov	 WORD PTR [esi+8258], 1049 ; 00000419H

; 1053 : 		pDph_t->f0basetypes[1][9]=1035;

  001ce	66 c7 86 44 20
	00 00 0b 04	 mov	 WORD PTR [esi+8260], 1035 ; 0000040bH

; 1054 : 		pDph_t->f0basetypes[1][10]=1023;

  001d7	66 c7 86 46 20
	00 00 ff 03	 mov	 WORD PTR [esi+8262], 1023 ; 000003ffH

; 1055 : 		pDph_t->f0basetypes[1][11]=1015;

  001e0	66 c7 86 48 20
	00 00 f7 03	 mov	 WORD PTR [esi+8264], 1015 ; 000003f7H

; 1056 : 		pDph_t->f0basetypes[1][12]=1005;

  001e9	66 c7 86 4a 20
	00 00 ed 03	 mov	 WORD PTR [esi+8266], 1005 ; 000003edH

; 1057 : 		pDph_t->f0basetypes[1][13]=1010;

  001f2	66 c7 86 4c 20
	00 00 f2 03	 mov	 WORD PTR [esi+8268], 1010 ; 000003f2H

; 1058 : 		pDph_t->f0basetypes[1][14]=1017;

  001fb	66 c7 86 4e 20
	00 00 f9 03	 mov	 WORD PTR [esi+8270], 1017 ; 000003f9H

; 1059 : 		pDph_t->f0basetypes[1][15]=1024;

  00204	66 c7 86 50 20
	00 00 00 04	 mov	 WORD PTR [esi+8272], 1024 ; 00000400H

; 1060 : 
; 1061 : 		/*exclamation*/
; 1062 : 		pDph_t->f0basetypes[2][0]=1057+160;

  0020d	66 c7 86 54 20
	00 00 c1 04	 mov	 WORD PTR [esi+8276], 1217 ; 000004c1H

; 1063 : 		pDph_t->f0basetypes[2][1]=1085+160;

  00216	66 c7 86 56 20
	00 00 dd 04	 mov	 WORD PTR [esi+8278], 1245 ; 000004ddH

; 1064 : 		pDph_t->f0basetypes[2][2]=1109+160;

  0021f	66 c7 86 58 20
	00 00 f5 04	 mov	 WORD PTR [esi+8280], 1269 ; 000004f5H

; 1065 : 		pDph_t->f0basetypes[2][3]=1117+160;

  00228	66 c7 86 5a 20
	00 00 fd 04	 mov	 WORD PTR [esi+8282], 1277 ; 000004fdH

; 1066 : 		pDph_t->f0basetypes[2][4]=1113+160;

  00231	66 c7 86 5c 20
	00 00 f9 04	 mov	 WORD PTR [esi+8284], 1273 ; 000004f9H

; 1067 : 		pDph_t->f0basetypes[2][5]=1149+160;

  0023a	66 c7 86 5e 20
	00 00 1d 05	 mov	 WORD PTR [esi+8286], 1309 ; 0000051dH

; 1068 : 		pDph_t->f0basetypes[2][6]=1095+160;

  00243	66 c7 86 60 20
	00 00 e7 04	 mov	 WORD PTR [esi+8288], 1255 ; 000004e7H

; 1069 : 		pDph_t->f0basetypes[2][7]=1082+160;

  0024c	66 c7 86 62 20
	00 00 da 04	 mov	 WORD PTR [esi+8290], 1242 ; 000004daH

; 1070 : 		pDph_t->f0basetypes[2][8]=1079+160;

  00255	66 c7 86 64 20
	00 00 d7 04	 mov	 WORD PTR [esi+8292], 1239 ; 000004d7H

; 1071 : 		pDph_t->f0basetypes[2][9]=1065+160;

  0025e	66 c7 86 66 20
	00 00 c9 04	 mov	 WORD PTR [esi+8294], 1225 ; 000004c9H

; 1072 : 		pDph_t->f0basetypes[2][10]=1053+160;

  00267	66 c7 86 68 20
	00 00 bd 04	 mov	 WORD PTR [esi+8296], 1213 ; 000004bdH

; 1073 : 		pDph_t->f0basetypes[2][11]=1040+160;

  00270	66 c7 86 6a 20
	00 00 b0 04	 mov	 WORD PTR [esi+8298], 1200 ; 000004b0H

; 1074 : 		pDph_t->f0basetypes[2][12]=1038+160;

  00279	66 c7 86 6c 20
	00 00 ae 04	 mov	 WORD PTR [esi+8300], 1198 ; 000004aeH

; 1075 : 		pDph_t->f0basetypes[2][13]=1024+160;

  00282	66 c7 86 6e 20
	00 00 a0 04	 mov	 WORD PTR [esi+8302], 1184 ; 000004a0H

; 1076 : 		pDph_t->f0basetypes[2][14]=980+160;

  0028b	66 89 86 70 20
	00 00		 mov	 WORD PTR [esi+8304], ax

; 1077 : 		pDph_t->f0basetypes[2][15]=852+160;

  00292	66 c7 86 72 20
	00 00 f4 03	 mov	 WORD PTR [esi+8306], 1012 ; 000003f4H

; 1078 : 		pDph_t->f0basetypes[2][16]=843+160;

  0029b	66 c7 86 74 20
	00 00 eb 03	 mov	 WORD PTR [esi+8308], 1003 ; 000003ebH

; 1079 : 
; 1080 : 			/*Question*/
; 1081 : 		pDph_t->glotalize =0;

  002a4	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 1082 : 		pDphsettar->glide_step=0;

  002ab	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1083 : 		pDph_t->f0basetypes[3][0]=1187;

  002af	66 c7 86 76 20
	00 00 a3 04	 mov	 WORD PTR [esi+8310], 1187 ; 000004a3H

; 1084 : 		pDph_t->f0basetypes[3][1]=1165;

  002b8	66 c7 86 78 20
	00 00 8d 04	 mov	 WORD PTR [esi+8312], 1165 ; 0000048dH

; 1085 : 		pDph_t->f0basetypes[3][2]=1139;

  002c1	66 c7 86 7a 20
	00 00 73 04	 mov	 WORD PTR [esi+8314], 1139 ; 00000473H

; 1086 : 		pDph_t->f0basetypes[3][3]=1127;

  002ca	66 89 ae 7c 20
	00 00		 mov	 WORD PTR [esi+8316], bp

; 1087 : 		pDph_t->f0basetypes[3][4]=1113;

  002d1	66 89 96 7e 20
	00 00		 mov	 WORD PTR [esi+8318], dx

; 1088 : 		pDph_t->f0basetypes[3][5]=1109;

  002d8	66 89 8e 80 20
	00 00		 mov	 WORD PTR [esi+8320], cx

; 1089 : 		pDph_t->f0basetypes[3][6]=1095;

  002df	66 c7 86 82 20
	00 00 47 04	 mov	 WORD PTR [esi+8322], 1095 ; 00000447H

; 1090 : 		pDph_t->f0basetypes[3][7]=1082;

  002e8	66 c7 86 84 20
	00 00 3a 04	 mov	 WORD PTR [esi+8324], 1082 ; 0000043aH

; 1091 : 		pDph_t->f0basetypes[3][8]=1079;

  002f1	66 c7 86 86 20
	00 00 37 04	 mov	 WORD PTR [esi+8326], 1079 ; 00000437H

; 1092 : 		pDph_t->f0basetypes[3][9]=1065;

  002fa	66 c7 86 88 20
	00 00 29 04	 mov	 WORD PTR [esi+8328], 1065 ; 00000429H

; 1093 : 		pDph_t->f0basetypes[3][10]=1053;

  00303	66 c7 86 8a 20
	00 00 1d 04	 mov	 WORD PTR [esi+8330], 1053 ; 0000041dH

; 1094 : 		pDph_t->f0basetypes[3][11]=940;

  0030c	66 c7 86 8c 20
	00 00 ac 03	 mov	 WORD PTR [esi+8332], 940 ; 000003acH

; 1095 : 		pDph_t->f0basetypes[3][12]=938;

  00315	66 c7 86 8e 20
	00 00 aa 03	 mov	 WORD PTR [esi+8334], 938 ; 000003aaH

; 1096 : 		pDph_t->f0basetypes[3][13]=924;

  0031e	66 c7 86 90 20
	00 00 9c 03	 mov	 WORD PTR [esi+8336], 924 ; 0000039cH

; 1097 : 		pDph_t->f0basetypes[3][14]=1010;

  00327	66 c7 86 92 20
	00 00 f2 03	 mov	 WORD PTR [esi+8338], 1010 ; 000003f2H

; 1098 : 		pDph_t->f0basetypes[3][15]=1014;

  00330	66 c7 86 94 20
	00 00 f6 03	 mov	 WORD PTR [esi+8340], 1014 ; 000003f6H

; 1099 : 		pDph_t->f0basetypes[3][16]=1018;

  00339	66 c7 86 96 20
	00 00 fa 03	 mov	 WORD PTR [esi+8342], 1018 ; 000003faH

; 1100 : 
; 1101 : 
; 1102 : 
; 1103 : #endif
; 1104 : 
; 1105 : 
; 1106 : #ifdef ENGLISH_UK
; 1107 : 
; 1108 : /* DECLARATIVE Added base profile per caroline*/
; 1109 : 		pDph_t->f0basetypes[0][0]=1157;
; 1110 : 		pDph_t->f0basetypes[0][1]=1145;
; 1111 : 		pDph_t->f0basetypes[0][2]=1139;
; 1112 : 		pDph_t->f0basetypes[0][3]=1127;
; 1113 : 		pDph_t->f0basetypes[0][4]=1113;
; 1114 : 		pDph_t->f0basetypes[0][5]=1109;
; 1115 : 		pDph_t->f0basetypes[0][6]=1095;
; 1116 : 		pDph_t->f0basetypes[0][7]=1082;
; 1117 : 		pDph_t->f0basetypes[0][8]=1079;
; 1118 : 		pDph_t->f0basetypes[0][9]=1065;
; 1119 : 		pDph_t->f0basetypes[0][10]=1053;
; 1120 : 		pDph_t->f0basetypes[0][11]=1040;
; 1121 : 		pDph_t->f0basetypes[0][12]=1038;
; 1122 : 		pDph_t->f0basetypes[0][13]=1024;
; 1123 : 		pDph_t->f0basetypes[0][14]=1040;
; 1124 : 		pDph_t->f0basetypes[0][15]=1050;
; 1125 : 		pDph_t->f0basetypes[0][16]=1060;
; 1126 : 
; 1127 : 
; 1128 : 			/*exclamation*/
; 1129 : 		pDph_t->f0basetypes[2][0]=1157;
; 1130 : 		pDph_t->f0basetypes[2][1]=1145;
; 1131 : 		pDph_t->f0basetypes[2][2]=1139;
; 1132 : 		pDph_t->f0basetypes[2][3]=1127;
; 1133 : 		pDph_t->f0basetypes[2][4]=1113;
; 1134 : 		pDph_t->f0basetypes[2][5]=1109;
; 1135 : 		pDph_t->f0basetypes[2][6]=1095;
; 1136 : 		pDph_t->f0basetypes[2][7]=1082;
; 1137 : 		pDph_t->f0basetypes[2][8]=1079;
; 1138 : 		pDph_t->f0basetypes[2][9]=1065;
; 1139 : 		pDph_t->f0basetypes[2][10]=1053;
; 1140 : 		pDph_t->f0basetypes[2][11]=1040;
; 1141 : 		pDph_t->f0basetypes[2][12]=1038;
; 1142 : 		pDph_t->f0basetypes[2][13]=1024;
; 1143 : 		pDph_t->f0basetypes[2][14]=980;
; 1144 : 		pDph_t->f0basetypes[2][15]=952;
; 1145 : 		pDph_t->f0basetypes[2][16]=943;
; 1146 : 		
; 1147 : 
; 1148 : 
; 1149 : 
; 1150 : 		/*eab  less drop for short phrases*/
; 1151 : 	
; 1152 : 			pDph_t->f0basetypes[4][0]=1160;
; 1153 : 			pDph_t->f0basetypes[4][1]=1150;
; 1154 : 			pDph_t->f0basetypes[4][2]=1150;
; 1155 : 			pDph_t->f0basetypes[4][3]=1152;
; 1156 : 			pDph_t->f0basetypes[4][4]=1132;
; 1157 : 			pDph_t->f0basetypes[4][5]=1120;
; 1158 : 			pDph_t->f0basetypes[4][6]=1100;
; 1159 : 			pDph_t->f0basetypes[4][7]=1104;
; 1160 : 			pDph_t->f0basetypes[4][8]=1100;
; 1161 : 			pDph_t->f0basetypes[4][9]=1080;
; 1162 : 			pDph_t->f0basetypes[4][10]=1070;
; 1163 : 			pDph_t->f0basetypes[4][11]=1060;
; 1164 : 			pDph_t->f0basetypes[4][12]=1050;
; 1165 : 			pDph_t->f0basetypes[4][13]=1040;
; 1166 : 			pDph_t->f0basetypes[4][14]=1030;
; 1167 : 			pDph_t->f0basetypes[4][15]=1000;
; 1168 : 			pDph_t->f0basetypes[4][16]=1000;
; 1169 : 
; 1170 : 			
; 1171 : 					/*Question*/
; 1172 : 		pDph_t->glotalize =0;
; 1173 : 		pDphsettar->glide_step=0;
; 1174 : 		pDph_t->f0basetypes[3][0]=1187;
; 1175 : 		pDph_t->f0basetypes[3][1]=1165;
; 1176 : 		pDph_t->f0basetypes[3][2]=1139;
; 1177 : 		pDph_t->f0basetypes[3][3]=1127;
; 1178 : 		pDph_t->f0basetypes[3][4]=1113;
; 1179 : 		pDph_t->f0basetypes[3][5]=1109;
; 1180 : 		pDph_t->f0basetypes[3][6]=1095;
; 1181 : 		pDph_t->f0basetypes[3][7]=1082;
; 1182 : 		pDph_t->f0basetypes[3][8]=1079;
; 1183 : 		pDph_t->f0basetypes[3][9]=1065;
; 1184 : 		pDph_t->f0basetypes[3][10]=1053;
; 1185 : 		pDph_t->f0basetypes[3][11]=940;
; 1186 : 		pDph_t->f0basetypes[3][12]=938;
; 1187 : 		pDph_t->f0basetypes[3][13]=924;
; 1188 : 		pDph_t->f0basetypes[3][14]=1010;
; 1189 : 		pDph_t->f0basetypes[3][15]=1014;
; 1190 : 		pDph_t->f0basetypes[3][16]=1018;
; 1191 : 
; 1192 : 				/* comma*/
; 1193 : 		pDph_t->f0basetypes[1][0]=1157;
; 1194 : 		pDph_t->f0basetypes[1][1]=1145;
; 1195 : 		pDph_t->f0basetypes[1][2]=1139;
; 1196 : 		pDph_t->f0basetypes[1][3]=1127;
; 1197 : 		pDph_t->f0basetypes[1][4]=1113;
; 1198 : 		pDph_t->f0basetypes[1][5]=1109;
; 1199 : 		pDph_t->f0basetypes[1][6]=1085;
; 1200 : 		pDph_t->f0basetypes[1][7]=1062;
; 1201 : 		pDph_t->f0basetypes[1][8]=1049;
; 1202 : 		pDph_t->f0basetypes[1][9]=1035;
; 1203 : 		pDph_t->f0basetypes[1][10]=1043;
; 1204 : 		pDph_t->f0basetypes[1][11]=1055;
; 1205 : 		pDph_t->f0basetypes[1][12]=1065;
; 1206 : 		pDph_t->f0basetypes[1][13]=1080;
; 1207 : 		pDph_t->f0basetypes[1][14]=1097;
; 1208 : 		pDph_t->f0basetypes[1][15]=1114;
; 1209 : 
; 1210 : #endif /*ENGLISH_UK*/
; 1211 : 	
; 1212 : 		/* redundant and incorrectly placed code since a soft init automatically follows a hard init
; 1213 : 		the code only has to be in once*/
; 1214 : 
; 1215 : 
; 1216 : /*        Time since last reset of baseline fall, in frames */
; 1217 : 		pDphsettar->nframb = 0;

  00342	66 89 5f 48	 mov	 WORD PTR [edi+72], bx

; 1218 : 
; 1219 : 		pDphsettar->basetime =0;

  00346	66 89 5f 36	 mov	 WORD PTR [edi+54], bx

; 1220 : 		pDphsettar->basecntr =0;

  0034a	66 89 5f 32	 mov	 WORD PTR [edi+50], bx

; 1221 : 		pDphsettar->f0delta =0;

  0034e	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 1222 : 
; 1223 : 	
; 1224 : 
; 1225 : 		/*eab 4/11/97 Moved these variables to a proper place of initlaization*/
; 1226 : 		pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0;	

  00355	66 89 9f 80 00
	00 00		 mov	 WORD PTR [edi+128], bx
  0035c	66 89 9f 82 00
	00 00		 mov	 WORD PTR [edi+130], bx
  00363	66 89 9f 84 00
	00 00		 mov	 WORD PTR [edi+132], bx

; 1227 : 	
; 1228 : /*        If within 32 ms (5 frames) of nframg, glottal stop gesture */
; 1229 : /*        is in progress */
; 1230 : 		pDphsettar->tglstp = -200;

  0036a	66 c7 47 50 38
	ff		 mov	 WORD PTR [edi+80], -200	; ffffff38H

; 1231 : 			
; 1232 : /*        Set filter memory to init baseline fall (f0 in hz*10) */
; 1233 : 		pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;

  00370	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  00377	66 c1 e2 03	 shl	 dx, 3
  0037b	66 89 57 58	 mov	 WORD PTR [edi+88], dx

; 1234 : 		pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;

  0037f	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  00386	66 c1 e0 03	 shl	 ax, 3
  0038a	66 89 47 5a	 mov	 WORD PTR [edi+90], ax

; 1235 : 		oarcnt = 0;

  0038e	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1236 : 		pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  00394	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 1237 : 		pDphsettar->f0slas2 = 0;

  0039b	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 1238 : 		pDph_t->f0 = pDphsettar->f0basestart;

  003a2	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]

; 1239 : 		pDphsettar->tarhat = 0;
; 1240 : 		pDphsettar->tarimp = 0;
; 1241 : 		pDphsettar->delimp = 0;
; 1242 : 
; 1243 : /*      Set smoothing constants for ( critical-damped? ) 2nd-order sys  */
; 1244 : 
; 1245 : 		pDphsettar->f0a2 = pDph_t->f0_lp_filter;	/* Impulse and hat commands */
; 1246 : 		pDphsettar->f0b = FRAC_ONE - pDphsettar->f0a2;

  003a9	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  003ae	66 89 8e 78 03
	00 00		 mov	 WORD PTR [esi+888], cx
  003b5	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx
  003b9	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx
  003bd	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
  003c4	66 8b 86 a8 18
	00 00		 mov	 ax, WORD PTR [esi+6312]

; 1247 : 		pDphsettar->f0a1 = pDphsettar->f0a2 << F0SHFT;
; 1248 : 
; 1249 : 		pDphsettar->f0sa2 =  F_SEG_LOWPASS;	/* Segmental influences */
; 1250 : 
; 1251 : 		pDphsettar->f0sb = FRAC_ONE - pDphsettar->f0sa2;
; 1252 : 		pDphsettar->f0sa1 = pDphsettar->f0sa2 << F0SHFT;
; 1253 : 
; 1254 : /*      Variables  relevent only if f0mode >= SINGING */
; 1255 : 
; 1256 : 		pDphsettar->newnote = pDphsettar->f0basestart;
; 1257 : 		pDphsettar->delnote = 0;

  003cb	66 89 9f 90 00
	00 00		 mov	 WORD PTR [edi+144], bx
  003d2	2b d0		 sub	 edx, eax
  003d4	66 89 47 60	 mov	 WORD PTR [edi+96], ax
  003d8	66 89 57 62	 mov	 WORD PTR [edi+98], dx
  003dc	66 8b 47 60	 mov	 ax, WORD PTR [edi+96]
  003e0	66 c1 e0 03	 shl	 ax, 3
  003e4	66 89 47 64	 mov	 WORD PTR [edi+100], ax
  003e8	66 c7 87 a0 00
	00 00 b8 0b	 mov	 WORD PTR [edi+160], 3000 ; 00000bb8H
  003f1	66 c7 87 a2 00
	00 00 48 34	 mov	 WORD PTR [edi+162], 13384 ; 00003448H
  003fa	66 8b 8f a0 00
	00 00		 mov	 cx, WORD PTR [edi+160]
  00401	66 c1 e1 03	 shl	 cx, 3
  00405	66 89 8f a4 00
	00 00		 mov	 WORD PTR [edi+164], cx
  0040c	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  00413	66 89 97 8e 00
	00 00		 mov	 WORD PTR [edi+142], dx

; 1258 : 		pDphsettar->delcum = 0;

  0041a	66 89 9f 92 00
	00 00		 mov	 WORD PTR [edi+146], bx

; 1259 : 		pDphsettar->f0start = pDph_t->f0;

  00421	66 8b 86 78 03
	00 00		 mov	 ax, WORD PTR [esi+888]

; 1260 : 		pDphsettar->vibsw = 0;

  00428	66 89 9f 8c 00
	00 00		 mov	 WORD PTR [edi+140], bx
  0042f	66 89 87 94 00
	00 00		 mov	 WORD PTR [edi+148], ax

; 1261 : 
; 1262 : /*      Initialize pointer to f0 command string */
; 1263 : 
; 1264 : 		pDph_t->nf0ev = -1;

  00436	66 c7 86 2a 23
	00 00 ff ff	 mov	 WORD PTR [esi+9002], -1
  0043f	83 c9 ff	 or	 ecx, -1
$L71242:

; 1265 : 	}
; 1266 : 
; 1267 : /*    Reinit pointer and time of first f0 command if new clause */
; 1268 :     if( pDph_t->nf0ev == -1 ) 

  00442	66 39 8e 2a 23
	00 00		 cmp	 WORD PTR [esi+9002], cx
  00449	0f 85 f0 01 00
	00		 jne	 $L71502

; 1269 : 	{		
; 1270 : 		 /* Soft initialization */
; 1271 : 
; 1272 : 	pDph_t->enddrop =0;
; 1273 : /*	  Set Beginning and final frequency of baseline fall */
; 1274 : 	switch (pDph_t->clausetype)
; 1275 : 	{

  0044f	0f bf 86 c0 03
	00 00		 movsx	 eax, WORD PTR [esi+960]
  00456	83 f8 03	 cmp	 eax, 3
  00459	66 89 9e 34 23
	00 00		 mov	 WORD PTR [esi+9012], bx
  00460	0f 87 a9 00 00
	00		 ja	 $L71260
  00466	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71531[eax*4]
$L71248:

; 1276 : 	case 0: /*  declarative  */
; 1277 : 		if(pDph_t->number_words > 1)

  0046d	66 83 be 06 20
	00 00 01	 cmp	 WORD PTR [esi+8198], 1
  00475	7e 0e		 jle	 SHORT $L71249

; 1278 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  00477	8d 96 10 20 00
	00		 lea	 edx, DWORD PTR [esi+8208]
  0047d	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx

; 1279 : 		else

  00483	eb 7c		 jmp	 SHORT $L71258
$L71249:

; 1280 : 			pDph_t->f0baseline = pDph_t->f0basetypes[4];

  00485	8d 86 98 20 00
	00		 lea	 eax, DWORD PTR [esi+8344]

; 1281 : 		pDph_t->clausepos=0;
; 1282 : 		pDph_t->dcommacnt =0;
; 1283 : 			break; //BATS 704

  0048b	eb 6e		 jmp	 SHORT $L71520
$L71251:

; 1284 : 
; 1285 : 	case 1: /*  comma  First one goes up but later ones are more declarative*/
; 1286 : 			// But long ones tend to be declarative! eab 4/15/00
; 1287 : 		pDph_t->dcommacnt++;

  0048d	66 ff 86 ce 14
	00 00		 inc	 WORD PTR [esi+5326]
  00494	66 8b 86 ce 14
	00 00		 mov	 ax, WORD PTR [esi+5326]

; 1288 : 		if(pDph_t->dcommacnt == 1)

  0049b	66 3d 01 00	 cmp	 ax, 1
  0049f	75 0e		 jne	 SHORT $L71521

; 1289 : 			pDph_t->f0baseline = pDph_t->f0basetypes[1];

  004a1	8d 96 32 20 00
	00		 lea	 edx, DWORD PTR [esi+8242]
  004a7	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx

; 1290 : 		else if(pDph_t->dcommacnt > 1)

  004ad	eb 0e		 jmp	 SHORT $L71254
$L71521:
  004af	7e 0c		 jle	 SHORT $L71254

; 1291 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  004b1	8d 86 10 20 00
	00		 lea	 eax, DWORD PTR [esi+8208]
  004b7	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax
$L71254:

; 1292 : 		if(pDph_t->number_words > 4)

  004bd	66 83 be 06 20
	00 00 04	 cmp	 WORD PTR [esi+8198], 4
  004c5	7e 48		 jle	 SHORT $L71260

; 1293 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  004c7	8d 96 10 20 00
	00		 lea	 edx, DWORD PTR [esi+8208]
  004cd	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx

; 1294 : 
; 1295 : 		break; //BATS 704

  004d3	eb 3a		 jmp	 SHORT $L71260
$L71256:

; 1296 : 		
; 1297 : 	case 2: /*  exclaimatory  */
; 1298 : 		//4/15/00 EAB short one clasify as exclamatory but long ones suffer
; 1299 : 		//from the don't know which part to emphasize problem so better devalrative.
; 1300 : 		if(pDph_t->number_words > 2)

  004d5	66 83 be 06 20
	00 00 02	 cmp	 WORD PTR [esi+8198], 2
  004dd	7e 08		 jle	 SHORT $L71257

; 1301 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  004df	8d 86 10 20 00
	00		 lea	 eax, DWORD PTR [esi+8208]

; 1302 : 		else

  004e5	eb 14		 jmp	 SHORT $L71520
$L71257:

; 1303 : 			pDph_t->f0baseline = pDph_t->f0basetypes[2];

  004e7	8d 96 54 20 00
	00		 lea	 edx, DWORD PTR [esi+8276]
  004ed	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx

; 1304 : 		pDph_t->clausepos =0;
; 1305 : 		pDph_t->dcommacnt =0;
; 1306 : 		break;

  004f3	eb 0c		 jmp	 SHORT $L71258
$L71259:

; 1307 : 		
; 1308 : 
; 1309 : 	case 3: /*  question  */
; 1310 : 		pDph_t->f0baseline = pDph_t->f0basetypes[3];

  004f5	8d 86 76 20 00
	00		 lea	 eax, DWORD PTR [esi+8310]
$L71520:
  004fb	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax
$L71258:

; 1311 : 		pDph_t->clausepos =0;

  00501	66 89 9e ca 14
	00 00		 mov	 WORD PTR [esi+5322], bx

; 1312 : 		pDph_t->dcommacnt =0;

  00508	66 89 9e ce 14
	00 00		 mov	 WORD PTR [esi+5326], bx
$L71260:

; 1313 : 		break;
; 1314 : 
; 1315 : 	default:
; 1316 : 
; 1317 : 		break;
; 1318 : 
; 1319 : 
; 1320 : 	}
; 1321 : 	/*	  Set Beginning and final frequency of baseline fall */
; 1322 : 		pDphsettar->f0basestart = pDph_t->f0baseline[0];

  0050f	8b 96 0c 20 00
	00		 mov	 edx, DWORD PTR [esi+8204]
  00515	66 8b 02	 mov	 ax, WORD PTR [edx]
  00518	66 89 87 86 00
	00 00		 mov	 WORD PTR [edi+134], ax

; 1323 : 	
; 1324 : 		pDphsettar->f0endfall = pDph_t->f0baseline[16];

  0051f	8b 96 0c 20 00
	00		 mov	 edx, DWORD PTR [esi+8204]
  00525	66 8b 42 20	 mov	 ax, WORD PTR [edx+32]
  00529	66 89 87 8a 00
	00 00		 mov	 WORD PTR [edi+138], ax

; 1325 : 
; 1326 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 1327 : 	    pDphsettar->endfall = pDphsettar->f0endfall;
; 1328 : 
; 1329 : 			
; 1330 : 
; 1331 : 
; 1332 : 
; 1333 : 		oarcnt=0;

  00530	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1334 : 
; 1335 : 	
; 1336 : 
; 1337 : 
; 1338 : #ifdef SPANISH
; 1339 : 		if (pDph_t->special_phrase == 1)
; 1340 : 		{
; 1341 : 			pDphsettar->beginfall = pDphsettar->f0basestart - 50 + pDph_t->delta_special;
; 1342 : 			pDphsettar->endfall = pDphsettar->f0endfall - 100; /* lastf0-(f0basefall>>1); */
; 1343 : 			pDph_t->special_phrase = 0; 
; 1344 : 		}
; 1345 : 		else
; 1346 : 		{
; 1347 : 			pDphsettar->lastbase=pDphsettar->f0basestart<<2;
; 1348 : 			pDphsettar->beginfall = pDphsettar->f0basestart;
; 1349 : 			pDphsettar->endfall = pDphsettar->f0endfall;
; 1350 : 		}
; 1351 : #else
; 1352 : 		
; 1353 : 		pDphsettar->lastbase=pDphsettar->f0basestart<<2;

  00536	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]

; 1354 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 1355 : 		pDphsettar->endfall = pDphsettar->f0endfall;
; 1356 : 		
; 1357 : #ifdef DEBUGF0
; 1358 : 			WINprintf ("At newpar sw %d %d	beginfall and endfall \n", pDphsettar->beginfall, pDphsettar->endfall);
; 1359 : #endif
; 1360 : 	
; 1361 : #endif
; 1362 : 	    pDphsettar->nframb = 0;

  0053d	66 89 5f 48	 mov	 WORD PTR [edi+72], bx
  00541	66 89 47 6e	 mov	 WORD PTR [edi+110], ax

; 1363 : 		pDphsettar->basetime=0;

  00545	66 89 5f 36	 mov	 WORD PTR [edi+54], bx
  00549	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00550	66 8b 87 8a 00
	00 00		 mov	 ax, WORD PTR [edi+138]

; 1364 : 		pDphsettar->basecntr =0;

  00557	66 89 5f 32	 mov	 WORD PTR [edi+50], bx
  0055b	66 89 57 72	 mov	 WORD PTR [edi+114], dx
  0055f	66 89 47 7a	 mov	 WORD PTR [edi+122], ax

; 1365 : 		pDphsettar->f0delta =0;

  00563	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 1366 : 		pDph_t->special_phrase = 0;

  0056a	66 89 9e cc 2b
	00 00		 mov	 WORD PTR [esi+11212], bx

; 1367 : 		oarcnt=0;

  00571	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1368 : /*	  Raise baseline for first sentence of a paragraph */
; 1369 : 	    if (pDph_t->newparagsw != FALSE) 

  00577	38 9e 72 17 00
	00		 cmp	 BYTE PTR [esi+6002], bl
  0057d	74 10		 je	 SHORT $L71261

; 1370 : 		{
; 1371 : 		pDphsettar->beginfall += 120;

  0057f	66 83 47 6e 78	 add	 WORD PTR [edi+110], 120	; 00000078H

; 1372 : 		pDphsettar->endfall += 70;

  00584	66 83 47 7a 46	 add	 WORD PTR [edi+122], 70	; 00000046H

; 1373 : 		pDph_t->newparagsw = FALSE;

  00589	88 9e 72 17 00
	00		 mov	 BYTE PTR [esi+6002], bl
$L71261:

; 1374 : 	    }
; 1375 : 
; 1376 : /*        Time between 0 and first  f0 command, in frames */
; 1377 :             pDphsettar->dtimf0 = pDph_t->f0tim[0];

  0058f	66 8b 96 ba 20
	00 00		 mov	 dx, WORD PTR [esi+8378]

; 1378 : /*         Pointer into dur and phone arrays */
; 1379 :             pDphsettar->np_drawt0 = -1;

  00596	66 89 4f 74	 mov	 WORD PTR [edi+116], cx
  0059a	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 1380 :             pDphsettar->npg = -1;

  0059e	66 89 4f 76	 mov	 WORD PTR [edi+118], cx

; 1381 :             pDph_t->nf0ev = 0;

  005a2	66 89 9e 2a 23
	00 00		 mov	 WORD PTR [esi+9002], bx

; 1382 : 
; 1383 : 
; 1384 : 
; 1385 : 			/*        Time since last f0 command, in frames */
; 1386 : 
; 1387 : /* INITIALIZE NFRAM TO DELAY THROUGH FILTER THIS USED TO BE IN AND WAS NOT IN
; 1388 :  88 STUFF BUT IS REALLY NEEDED*/
; 1389 : 				oarcnt=0;

  005a9	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1390 : 		pDphsettar->nframs = 0;
; 1391 : 		pDphsettar->nfram =0;
; 1392 :         pDphsettar->nframg = 0;
; 1393 :  /*eab 0 works much better 
; 1394 :  6- ((pDph_t->f0_lp_filter-1300)>>8);*/
; 1395 :  
; 1396 : 	    if (pDph_t->f0mode< SINGING) 
; 1397 : 		{
; 1398 : 			pDphsettar->nfram = pDphsettar->nframs >> 1;
; 1399 : 	    }
; 1400 : 	    else 
; 1401 : 		{
; 1402 : 			pDphsettar->nfram = 0;	/* Start note slightly early if singing */
; 1403 : 	    }
; 1404 : 
; 1405 : 
; 1406 : 		
; 1407 : 
; 1408 : 
; 1409 : /* Time since beginning of cur phonetic segment, in frames */
; 1410 : 		pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;

  005af	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  005b6	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  005ba	66 c1 e0 03	 shl	 ax, 3
  005be	66 89 47 58	 mov	 WORD PTR [edi+88], ax

; 1411 :         pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;

  005c2	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]
  005c9	66 c1 e1 03	 shl	 cx, 3
  005cd	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx
  005d1	66 89 5f 4c	 mov	 WORD PTR [edi+76], bx
  005d5	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  005d9	66 89 4f 5a	 mov	 WORD PTR [edi+90], cx

; 1412 : 		oarcnt=0;

  005dd	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 1413 : 	    pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  005e3	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 1414 : 	    pDphsettar->f0slas2 = 0;

  005ea	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 1415 :         pDph_t->f0 = pDphsettar->f0basestart;

  005f1	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  005f8	66 89 96 78 03
	00 00		 mov	 WORD PTR [esi+888], dx

; 1416 :         pDphsettar->nframs = 0;		

  005ff	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx

; 1417 : 		/* Used in computing segmental effects */
; 1418 : 
; 1419 : 	
; 1420 : /*        Extra time, in frames, used to delay or advance f0 gesture assoc. */
; 1421 : /*        with a particular segment, e.g. at delayed vot, or anticipate in V-V */
; 1422 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS; /* Start gesture toward next seg early */

  00603	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH

; 1423 : /*        Duration of current segment, in frames */
; 1424 :             pDphsettar->segdur = 0;

  00609	66 89 5f 54	 mov	 WORD PTR [edi+84], bx

; 1425 :             pDphsettar->segdrg = 0;

  0060d	66 89 5f 56	 mov	 WORD PTR [edi+86], bx

; 1426 : 			pDph_t->lastallo=0;

  00611	66 89 9e 02 20
	00 00		 mov	 WORD PTR [esi+8194], bx

; 1427 : 			pDph_t->keepallo=0;

  00618	66 89 9e 00 20
	00 00		 mov	 WORD PTR [esi+8192], bx

; 1428 : #ifdef GFAPHF0
; 1429 : 			pDph_t->lastone=-1;
; 1430 : 			pDph_t->keepdur=0;
; 1431 : #endif
; 1432 : 			pDph_t->glotalize =0;

  0061f	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 1433 : 			pDphsettar->glide_step=0;

  00626	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1434 : 			pDphsettar->glide_tot=0;

  0062a	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 1435 : 			pDphsettar->glide_inc =0;

  0062e	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 1436 : /*	  Must be at bottom of hat */
; 1437 : 	    pDphsettar->tarhat = 0;	    /* should be anyway, except for emergency halt */

  00632	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 1438 : 		pDph_t->addjit = 305;

  00636	66 c7 86 c2 03
	00 00 31 01	 mov	 WORD PTR [esi+962], 305	; 00000131H
$L71502:

; 1439 : 	
; 1440 : 	
; 1441 :         }
; 1442 : /*    End of initialization */
; 1443 : 
; 1444 : 
; 1445 : 
; 1446 : /*  See if new f0 commands issued					*/
; 1447 : /*    To get f0 commands to occur at right times, need to take		*/
; 1448 : /*    into account delay introduced by low-pass filter. Response to	*/
; 1449 : /*    a step command begins xx frames earlier than f0time[] request	*/
; 1450 : /*    so f0 gets half-way to target at nominal step onset time		*/
; 1451 : 
; 1452 :         while ((pDphsettar->nfram >= pDphsettar->dtimf0) && 
; 1453 : 			(pDph_t->nf0ev < pDph_t->nf0tot)) 

  0063f	66 8b 4f 46	 mov	 cx, WORD PTR [edi+70]
  00643	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  00647	66 3b ca	 cmp	 cx, dx
  0064a	0f 8c 6c 01 00
	00		 jl	 $L71266
$L71265:
  00650	66 8b ae 2a 23
	00 00		 mov	 bp, WORD PTR [esi+9002]
  00657	66 3b ae 2c 23
	00 00		 cmp	 bp, WORD PTR [esi+9004]
  0065e	0f 8d 58 01 00
	00		 jge	 $L71266

; 1454 : 		{
; 1455 : 			
; 1456 :             pDphsettar->f0command = pDph_t->f0tar[pDph_t->nf0ev];	/* New target f0 */

  00664	0f bf ed	 movsx	 ebp, bp
  00667	8d 47 38	 lea	 eax, DWORD PTR [edi+56]

; 1457 : 			pDphsettar->type = pDph_t->f0type[pDph_t->nf0ev];
; 1458 :             pDphsettar->nfram -= pDphsettar->dtimf0;

  0066a	2b ca		 sub	 ecx, edx
  0066c	66 8b ac 6e ba
	18 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6330]
  00674	66 89 28	 mov	 WORD PTR [eax], bp
  00677	0f bf ae 2a 23
	00 00		 movsx	 ebp, WORD PTR [esi+9002]
  0067e	66 8b ac 6e 26
	1b 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6950]
  00686	66 89 4f 46	 mov	 WORD PTR [edi+70], cx
  0068a	66 89 6f 40	 mov	 WORD PTR [edi+64], bp

; 1459 : 				/* eab 1/10/98 added length parameter*/
; 1460 : 			pDphsettar->length = pDph_t->f0length[pDph_t->nf0ev];

  0068e	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  00695	66 8b 94 4e 92
	1d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+7570]
  0069d	66 89 57 42	 mov	 WORD PTR [edi+66], dx

; 1461 : 
; 1462 : 	    if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  006a1	66 83 be 74 17
	00 00 06	 cmp	 WORD PTR [esi+6004], 6
  006a9	75 29		 jne	 SHORT $L71267

; 1463 : 	        pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  006ab	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  006b2	66 8b 94 4e ba
	20 00 00	 mov	 dx, WORD PTR [esi+ecx*2+8378]
  006ba	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 1464 : 		pDph_t->nf0ev++;

  006be	66 ff 86 2a 23
	00 00		 inc	 WORD PTR [esi+9002]
$L71273:

; 1465 : 		set_user_target(pDph_t,&pDphsettar->f0command);

  006c5	50		 push	 eax
  006c6	56		 push	 esi
  006c7	e8 00 00 00 00	 call	 _set_user_target
  006cc	83 c4 08	 add	 esp, 8

; 1466 : 	    }
; 1467 : 	    else {

  006cf	e9 d7 00 00 00	 jmp	 $L71270
$L71267:

; 1468 : 		pDph_t->nf0ev++;	/* Achieve target at next time */

  006d4	66 ff 86 2a 23
	00 00		 inc	 WORD PTR [esi+9002]

; 1469 : 	    pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  006db	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  006e2	66 8b 94 4e ba
	20 00 00	 mov	 dx, WORD PTR [esi+ecx*2+8378]

; 1470 : 		switch(pDphsettar->type)
; 1471 : 		{

  006ea	0f bf 4f 40	 movsx	 ecx, WORD PTR [edi+64]
  006ee	83 f9 05	 cmp	 ecx, 5
  006f1	66 89 57 66	 mov	 WORD PTR [edi+102], dx
  006f5	0f 87 b0 00 00
	00		 ja	 $L71270
  006fb	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L71532[ecx*4]
$L71274:

; 1472 : 		case USER: /*user specified f0 target*/
; 1473 : 			set_user_target(pDph_t,&pDphsettar->f0command);
; 1474 : 			break;
; 1475 : 
; 1476 : 		case F0_RESET: /* f0 reset*/
; 1477 : 
; 1478 : 			 pDphsettar->tarhat = 0;		/* Go to bottom of hat pattern 

  00702	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 1479 : 												and for UK init glide, note glide is not ifdefed _uk becuase
; 1480 : 											it is a command we ant to allow others to use*/
; 1481 : 			 pDph_t->glotalize =0;

  00706	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 1482 : 			 pDphsettar->glide_step=0;

  0070d	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 1483 : 			 pDphsettar->glide_tot=0;

  00711	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 1484 : 			 pDphsettar->glide_inc=0;

  00715	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 1485 : 			 break; //BATS 704

  00719	e9 8d 00 00 00	 jmp	 $L71270
$L71275:

; 1486 : 		case STEP:
; 1487 : #ifdef ENGLISH_UK
; 1488 : 			break;
; 1489 : #endif
; 1490 :              pDphsettar->tarhat += pDphsettar->f0command;

  0071e	66 8b 00	 mov	 ax, WORD PTR [eax]
  00721	66 01 47 5c	 add	 WORD PTR [edi+92], ax

; 1491 : 			/* Command is a step, reset pDphsettar->tarhat */
; 1492 : 
; 1493 : 			if (pDphsettar->f0command < 0) 

  00725	66 3b c3	 cmp	 ax, bx
  00728	7d 13		 jge	 SHORT $L71276

; 1494 : 			{	/* Cancel previous impulse if step */
; 1495 : 					/* is of opposite sign */
; 1496 : 				if (pDphsettar->tarimp > 0) 

  0072a	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  0072e	7e 7b		 jle	 SHORT $L71270

; 1497 : 				{   
; 1498 : 					pDphsettar->tarimp = 0;

  00730	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1499 : 					pDphsettar->delimp = 0;

  00734	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 1500 : 				}
; 1501 :             }
; 1502 : 			else

  0073b	eb 6e		 jmp	 SHORT $L71270
$L71276:

; 1503 : 			{
; 1504 : 				if (pDphsettar->tarimp < 0) 

  0073d	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  00741	7d 68		 jge	 SHORT $L71270

; 1505 : 				{
; 1506 : 					pDphsettar->tarimp = 0;

  00743	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1507 : 					pDphsettar->delimp = 0;

  00747	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 1508 : 				}
; 1509 : 			}
; 1510 : 			break;

  0074e	eb 5b		 jmp	 SHORT $L71270
$L71280:

; 1511 : 		case GLIDE:/* eab 1/10/98 work in progress */
; 1512 : 				
; 1513 : 			pDphsettar->glide_step = pDphsettar->f0command;

  00750	66 8b 00	 mov	 ax, WORD PTR [eax]

; 1514 : 			pDphsettar->glide_inc =(pDphsettar->glide_step/pDphsettar->length);

  00753	0f bf 4f 42	 movsx	 ecx, WORD PTR [edi+66]
  00757	66 89 47 3a	 mov	 WORD PTR [edi+58], ax
  0075b	0f bf c0	 movsx	 eax, ax
  0075e	99		 cdq
  0075f	f7 f9		 idiv	 ecx
  00761	66 89 47 3c	 mov	 WORD PTR [edi+60], ax

; 1515 : 			
; 1516 : 			break;

  00765	eb 44		 jmp	 SHORT $L71270
$L71281:

; 1517 : 			
; 1518 : 		case GLOTAL:
; 1519 : #ifdef ENGLISH_UK
; 1520 : 			break;
; 1521 : #endif
; 1522 : 			pDph_t->enddrop= -pDphsettar->f0command;

  00767	66 8b 10	 mov	 dx, WORD PTR [eax]

; 1523 : 			pDph_t->glotalize =1;

  0076a	66 c7 86 3a 23
	00 00 01 00	 mov	 WORD PTR [esi+9018], 1
  00773	66 f7 da	 neg	 dx
  00776	66 89 96 34 23
	00 00		 mov	 WORD PTR [esi+9012], dx

; 1524 : 			break;

  0077d	eb 2c		 jmp	 SHORT $L71270
$L71282:

; 1525 : 				
; 1526 : 		case IMPULSE:
; 1527 : 
; 1528 : 				/* Odd, command is impulse  */
; 1529 : /*	          Impulse realized as 24-frame "step plus ramp" from f0command */
; 1530 : /*	          to three times focommand */
; 1531 : 					/* eab old ocde used to have an impulse as a 2*f0command that would be realized as an 
; 1532 : 					16 frame wide pulse. This new scheme proposed by Dennis Klatt uses 
; 1533 : 					imp=f0command+(f0command _ f0command>>4 meaning it will take 16 farmes to
; 1534 : 					reach double height. The old one never reached target so this new approach I think 
; 1535 : 					presently has two problems it's dealyed too much and it lasts too long causing higher f0 values
; 1536 : 					and more percieved effect. I want to try it differently starting out close to the old code with a pulse command that 
; 1537 : 					trails off.
; 1538 : 					with a downward slope think of it as a rectangular pulse with a triangle placed on
; 1539 : 					top instead of a second rectangular pulse- by the way it's not working correctly at
; 1540 : 					the moment*/
; 1541 : 			pDphsettar->tarimp = pDphsettar->f0command;

  0077f	66 8b 00	 mov	 ax, WORD PTR [eax]

; 1542 : 			
; 1543 : 			pDphsettar->delimp = pDphsettar->f0command>>2;
; 1544 : 			// pDphsettar->nimp = 24 - ((pDph_t->f0_lp_filter-1300)>>8);
; 1545 : 			pDphsettar->nimp = 20 - ((pDph_t->f0_lp_filter-1300)>>8);

  00782	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00787	66 89 47 5e	 mov	 WORD PTR [edi+94], ax
  0078b	66 c1 f8 02	 sar	 ax, 2
  0078f	66 89 87 9e 00
	00 00		 mov	 WORD PTR [edi+158], ax
  00796	0f bf 86 a8 18
	00 00		 movsx	 eax, WORD PTR [esi+6312]
  0079d	2d 14 05 00 00	 sub	 eax, 1300		; 00000514H
  007a2	c1 f8 08	 sar	 eax, 8
  007a5	2b c8		 sub	 ecx, eax
  007a7	66 89 4f 78	 mov	 WORD PTR [edi+120], cx
$L71270:
  007ab	66 8b 4f 46	 mov	 cx, WORD PTR [edi+70]
  007af	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  007b3	66 3b ca	 cmp	 cx, dx
  007b6	0f 8d 94 fe ff
	ff		 jge	 $L71265
$L71266:

; 1546 : 			break;
; 1547 : 
; 1548 : 		}
; 1549 : 		}
; 1550 : 		
; 1551 : 		
; 1552 :             
; 1553 : 
; 1554 : /*        Loop back to look for more f0 commands */
; 1555 :         }
; 1556 : #ifdef  ENDDROP
; 1557 : 
; 1558 : 		/*EAB Drop pitch rapidly at  end of utterance
; 1559 : 		enddrop now reflects pitch dropoff at end of utterance and not final creek
; 1560 : 		hence the removal of the tcumdur stuff
; 1561 : 		9/19/97 */
; 1562 : 		if(  pDph_t->enddrop 
; 1563 : 			&& pDph_t->glotalize  && pDph_t->number_words >= 3)
; 1564 : 		{
; 1565 : 			 if(pDphsettar->tarbas > 500)
; 1566 : 			 {
; 1567 : 				 pDph_t->enddrop += pDph_t->enddrop>>1;
; 1568 : 			 }
; 1569 : 
; 1570 : 		}
; 1571 : 		
; 1572 : #endif
; 1573 : 					
; 1574 : 
; 1575 : 
; 1576 : 
; 1577 : 
; 1578 : 		/* 8/96 eab have baseline follow profile in basline array*/
; 1579 : 		/* since we use nframb <<4 and array is 16 then stepsize == tcumdur*16/16
; 1580 : 		This code works by starting from a base value and then a difference bewteeen where we are
; 1581 : 		and where we want to be is done modulo sixteen, The lastbase keeps the acutal position,
; 1582 : 		we don't enforce the values in the code but targets them over time. F0delta is a cumulative
; 1583 : 		offset since the last synchro point i.e. every sixteen */
; 1584 : 		if(pDphsettar->nframb << 4 >= pDphsettar->basetime )

  007bc	66 8b 47 36	 mov	 ax, WORD PTR [edi+54]
  007c0	0f bf 57 48	 movsx	 edx, WORD PTR [edi+72]
  007c4	0f bf c8	 movsx	 ecx, ax
  007c7	c1 e2 04	 shl	 edx, 4
  007ca	3b d1		 cmp	 edx, ecx
  007cc	7c 47		 jl	 SHORT $L71285

; 1585 : 		{
; 1586 : 					
; 1587 : 			pDphsettar->basestep=(pDphsettar->lastbase>>2)-pDph_t->f0baseline[pDphsettar->basecntr+1];

  007ce	0f bf 57 32	 movsx	 edx, WORD PTR [edi+50]
  007d2	66 8b 6f 72	 mov	 bp, WORD PTR [edi+114]
  007d6	8b 8e 0c 20 00
	00		 mov	 ecx, DWORD PTR [esi+8204]
  007dc	66 c1 fd 02	 sar	 bp, 2
  007e0	66 2b 6c 51 02	 sub	 bp, WORD PTR [ecx+edx*2+2]
  007e5	66 89 6f 34	 mov	 WORD PTR [edi+52], bp

; 1588 : 		/*WINprintf("pos %d target %d step %d bas %d act %d \n",pDphsettar->basecntr,
; 1589 : 		pDph_t->f0baseline[pDphsettar->basecntr], pDphsettar->basestep, pDphsettar->lastbase,
; 1590 : 		pDphsettar->tarbas);*/
; 1591 : 			pDphsettar->basetime += pDph_t->tcumdur;

  007e9	66 03 86 28 23
	00 00		 add	 ax, WORD PTR [esi+9000]
  007f0	66 89 47 36	 mov	 WORD PTR [edi+54], ax

; 1592 : 			if(pDphsettar->basecntr <=15)

  007f4	66 8b 47 32	 mov	 ax, WORD PTR [edi+50]
  007f8	66 3d 0f 00	 cmp	 ax, 15			; 0000000fH
  007fc	7f 05		 jg	 SHORT $L71284

; 1593 : 			{
; 1594 : 				pDphsettar->basecntr++;

  007fe	40		 inc	 eax
  007ff	66 89 47 32	 mov	 WORD PTR [edi+50], ax
$L71284:

; 1595 : 				 
; 1596 : 			}
; 1597 : 		if (pDph_t->tcumdur == 0)	

  00803	66 39 9e 28 23
	00 00		 cmp	 WORD PTR [esi+9000], bx
  0080a	75 09		 jne	 SHORT $L71285

; 1598 : 			pDph_t->tcumdur = 1;

  0080c	66 c7 86 28 23
	00 00 01 00	 mov	 WORD PTR [esi+9000], 1
$L71285:

; 1599 : 		
; 1600 : 		}
; 1601 : 		
; 1602 : 		
; 1603 : 		pDphsettar->f0delta = pDphsettar->basestep<<6;

  00815	66 8b 47 34	 mov	 ax, WORD PTR [edi+52]
  00819	66 c1 e0 06	 shl	 ax, 6
  0081d	66 89 87 9c 00
	00 00		 mov	 WORD PTR [edi+156], ax

; 1604 : 		temp = (((pDphsettar->f0delta)/pDph_t->tcumdur));
; 1605 : 		pDphsettar->lastbase -= (((pDphsettar->f0delta)/pDph_t->tcumdur));

  00824	0f bf 8e 28 23
	00 00		 movsx	 ecx, WORD PTR [esi+9000]
  0082b	0f bf c0	 movsx	 eax, ax
  0082e	99		 cdq
  0082f	f7 f9		 idiv	 ecx
  00831	66 29 47 72	 sub	 WORD PTR [edi+114], ax

; 1606 : 
; 1607 : 
; 1608 : 			
; 1609 : 	//	if(	pDphsettar->tarbas > 500)
; 1610 : 	//	{
; 1611 : 			/* Pitch falls are less pronounced for some speakers 
; 1612 : 						 * to reduce impression of assertive personality */
; 1613 : 				pDph_t->scaled_enddrop= frac4mul ( pDph_t->enddrop, pDph_t->assertiveness);

  00835	0f bf 86 34 23
	00 00		 movsx	 eax, WORD PTR [esi+9012]
  0083c	0f bf 96 a6 18
	00 00		 movsx	 edx, WORD PTR [esi+6310]
  00843	0f af c2	 imul	 eax, edx
  00846	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00849	66 89 86 38 23
	00 00		 mov	 WORD PTR [esi+9016], ax

; 1614 : 				pDphsettar->tarbas = (pDphsettar->lastbase>>2)-pDph_t->scaled_enddrop;

  00850	66 8b 4f 72	 mov	 cx, WORD PTR [edi+114]
  00854	66 c1 f9 02	 sar	 cx, 2
  00858	2b c8		 sub	 ecx, eax

; 1615 : 	//	}
; 1616 : 	//	else
; 1617 : 	//			pDphsettar->tarbas = pDphsettar->lastbase>>2;
; 1618 : 	
; 1619 : 
; 1620 :   //WINprintf("dur %d pDphsettar->tarbas %d phon %d \n",pDphsettar->basetime,pDphsettar->tarbas,pDph_t->allophons[pDphsettar->np_drawt0]);
; 1621 : 
; 1622 : 	pDphsettar->nframb++;

  0085a	66 ff 47 48	 inc	 WORD PTR [edi+72]

; 1623 : 
; 1624 : 
; 1625 : 
; 1626 : 
; 1627 : /*    Impulse duration fixed at 24 frames, count down to zero */
; 1628 : /*    (actually, duration is function of speaker def par "quickness" */
; 1629 : 
; 1630 :         if (--pDphsettar->nimp < 0) {

  0085e	66 ff 4f 78	 dec	 WORD PTR [edi+120]
  00862	66 39 5f 78	 cmp	 WORD PTR [edi+120], bx
  00866	66 89 8f 96 00
	00 00		 mov	 WORD PTR [edi+150], cx
  0086d	7d 0b		 jge	 SHORT $L71287

; 1631 : 	    pDphsettar->tarimp = 0;

  0086f	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 1632 : 	    pDphsettar->delimp = 0;

  00873	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
$L71287:

; 1633 : 	}
; 1634 : 
; 1635 : 
; 1636 : /*    Segmental effect on f0, reset pDphsettar->tarseg if time exceeds cum dur */
; 1637 : 
; 1638 :         if ((pDphsettar->nframs >= (pDphsettar->segdur + pDphsettar->extrad)) 
; 1639 : 			&& (pDphsettar->np_drawt0 < (pDph_t->nallotot-1))) {

  0087a	66 8b 47 54	 mov	 ax, WORD PTR [edi+84]
  0087e	66 8b 4f 4a	 mov	 cx, WORD PTR [edi+74]
  00882	0f bf d0	 movsx	 edx, ax
  00885	0f bf 47 4e	 movsx	 eax, WORD PTR [edi+78]
  00889	03 d0		 add	 edx, eax
  0088b	0f bf c1	 movsx	 eax, cx
  0088e	3b c2		 cmp	 eax, edx
  00890	0f 8c e2 00 00
	00		 jl	 $L71296
  00896	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  0089a	0f bf 96 e2 14
	00 00		 movsx	 edx, WORD PTR [esi+5346]
  008a1	0f bf e8	 movsx	 ebp, ax
  008a4	4a		 dec	 edx
  008a5	3b ea		 cmp	 ebp, edx
  008a7	0f 8d cb 00 00
	00		 jge	 $L71296

; 1640 : 		
; 1641 : 			pDphsettar->nframs -= pDphsettar->segdur;

  008ad	66 8b 57 54	 mov	 dx, WORD PTR [edi+84]
  008b1	2b ca		 sub	 ecx, edx

; 1642 :             pDphsettar->segdur = pDph_t->allodurs[++pDphsettar->np_drawt0];

  008b3	40		 inc	 eax
  008b4	66 89 4f 4a	 mov	 WORD PTR [edi+74], cx
  008b8	66 89 47 74	 mov	 WORD PTR [edi+116], ax
  008bc	0f bf c8	 movsx	 ecx, ax

; 1643 :             pDphsettar->phocur = pDph_t->allophons[pDphsettar->np_drawt0];
; 1644 : 			
; 1645 : 				/* EAB Found long standing bug-- due to the compensation for the delay through the filters
; 1646 : 			the first phoneme is getting cheated on duration */
; 1647 : 			if(pDphsettar->np_drawt0 == 1)

  008bf	66 3d 01 00	 cmp	 ax, 1
  008c3	66 8b 94 4e 78
	0d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+3448]
  008cb	66 89 57 54	 mov	 WORD PTR [edi+84], dx
  008cf	66 8b 94 4e c6
	03 00 00	 mov	 dx, WORD PTR [esi+ecx*2+966]
  008d7	66 89 57 44	 mov	 WORD PTR [edi+68], dx
  008db	75 06		 jne	 SHORT $L71289

; 1648 : 			{
; 1649 : 				 pDphsettar->nframs = -DELAY_SEG_LOWPASS;

  008dd	66 c7 47 4a fd
	ff		 mov	 WORD PTR [edi+74], -3	; fffffffdH
$L71289:

; 1650 : 			}
; 1651 : 			
; 1652 :             if (pDphsettar->np_drawt0 < pDph_t->nallotot)  

  008e3	66 3b 86 e2 14
	00 00		 cmp	 ax, WORD PTR [esi+5346]
  008ea	7d 0c		 jge	 SHORT $L71290

; 1653 : 					pDphsettar->phonex_drawt0 = pDph_t->allophons[pDphsettar->np_drawt0+1];

  008ec	66 8b 84 4e c8
	03 00 00	 mov	 ax, WORD PTR [esi+ecx*2+968]
  008f4	66 89 47 68	 mov	 WORD PTR [edi+104], ax
$L71290:

; 1654 : 		
; 1655 : 
; 1656 : /*        Set next f0 segmental incremental target */
; 1657 : 
; 1658 : 	   //f0seg = pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[phocur].f0segtars;
; 1659 : 	f0seg = f0msegtars[pDphsettar->phocur];

  008f8	0f bf 47 44	 movsx	 eax, WORD PTR [edi+68]
  008fc	d1 e0		 shl	 eax, 1
  008fe	66 8b 90 00 00
	00 00		 mov	 dx, WORD PTR _f0msegtars[eax]
  00905	89 54 24 10	 mov	 DWORD PTR _f0seg$[esp+24], edx

; 1660 : /*	  Effect is half as much in unstressed segments */
; 1661 : #ifndef GERMAN /*The Fstress marker isn't valid for the whole segment so this is wrong as often as right
; 1662 : 	I need time to sort out what Fstress etc should really be doing*/
; 1663 : 	    if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  00909	8a 94 8e 34 06
	00 00		 mov	 dl, BYTE PTR [esi+ecx*4+1588]
  00910	f6 c2 03	 test	 dl, 3

; 1664 : 		f0seg = f0seg >> 1;

  00913	66 8b 54 24 10	 mov	 dx, WORD PTR _f0seg$[esp+24]
  00918	75 03		 jne	 SHORT $L71291
  0091a	66 d1 fa	 sar	 dx, 1
$L71291:

; 1665 : 	    }
; 1666 : #endif
; 1667 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS;	/* Assume like V-V trans */
; 1668 : 						/* so start new target early */
; 1669 : /*        Delay start of f0 rise for upcoming voiceless segment until boundary */
; 1670 :             if ((featb[pDphsettar->phonex_drawt0] & FVOICD) IS_MINUS) {

  0091d	0f bf 6f 68	 movsx	 ebp, WORD PTR [edi+104]
  00921	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH
  00927	f6 04 6d 00 00
	00 00 02	 test	 BYTE PTR _featb[ebp*2], 2
  0092f	75 04		 jne	 SHORT $L71292

; 1671 :                 pDphsettar->extrad = 0;			/* All of rise during voicless */

  00931	66 89 5f 4e	 mov	 WORD PTR [edi+78], bx
$L71292:

; 1672 :             }
; 1673 : /*        Delay f0 fall from voiceless plosive until vot (when glottis closes)*/
; 1674 :         if ((featb[pDphsettar->phocur] & FVOICD) IS_MINUS) 

  00935	f6 80 00 00 00
	00 02		 test	 BYTE PTR _featb[eax], 2
  0093c	75 32		 jne	 SHORT $L71293

; 1675 : 		{	
; 1676 : 			pDphsettar->tarseg1 = f0seg;  /* Gesture fast, go to only 1 lpfilter */

  0093e	66 89 57 6c	 mov	 WORD PTR [edi+108], dx

; 1677 : 			pDphsettar->tarseg = 0;

  00942	66 89 5f 6a	 mov	 WORD PTR [edi+106], bx

; 1678 : 			pDphsettar->extrad = 1;	/* -V fric, fall starts at voicing onset */

  00946	66 c7 47 4e 01
	00		 mov	 WORD PTR [edi+78], 1

; 1679 : 	        if ((featb[pDphsettar->phocur] & FPLOSV) IS_PLUS) {

  0094c	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR _featb[eax]
  00952	f6 c2 40	 test	 dl, 64			; 00000040H
  00955	74 21		 je	 SHORT $L71296

; 1680 : 	            pDphsettar->extrad = 5;		/* -V plos, assume VOT = 32 ms */

  00957	66 c7 47 4e 05
	00		 mov	 WORD PTR [edi+78], 5

; 1681 : 		    if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  0095d	8a 84 8e 34 06
	00 00		 mov	 al, BYTE PTR [esi+ecx*4+1588]
  00964	a8 03		 test	 al, 3
  00966	75 10		 jne	 SHORT $L71296

; 1682 : 			pDphsettar->extrad = 3;

  00968	66 c7 47 4e 03
	00		 mov	 WORD PTR [edi+78], 3

; 1683 : 		    }
; 1684 : 		}
; 1685 :             }
; 1686 : 	    else {

  0096e	eb 08		 jmp	 SHORT $L71296
$L71293:

; 1687 : 		pDphsettar->tarseg = f0seg;	  /* Normal gesture for voiced segments is */

  00970	66 89 57 6a	 mov	 WORD PTR [edi+106], dx

; 1688 : 		pDphsettar->tarseg1 = 0;	  /* slow, use both segmental 1-pole filters */

  00974	66 89 5f 6c	 mov	 WORD PTR [edi+108], bx
$L71296:

; 1689 : 	    }
; 1690 :         }
; 1691 : 
; 1692 : /*    Glottal stop gesture, test at beginning of each phoneme */
; 1693 : /* eab 11/22/97 per caroline remove glotalization */
; 1694 : #ifndef ENGLISH_UK
; 1695 : 	set_tglst(pDph_t);		

  00978	56		 push	 esi
  00979	e8 00 00 00 00	 call	 _set_tglst
  0097e	83 c4 04	 add	 esp, 4

; 1696 : #endif
; 1697 : 	/* Set times of f0 fall pDphsettar->tglstp,pDphsettar->tglstn */
; 1698 : 
; 1699 : 	if (pDph_t->f0mode< SINGING) {

  00981	66 83 be 74 17
	00 00 04	 cmp	 WORD PTR [esi+6004], 4
  00989	0f 8d 00 01 00
	00		 jge	 $L71297

; 1700 : 
; 1701 : /*	  Filter f0 step and impulse commands to produce next value f0 */
; 1702 : 		/* increment gilde towards target and cancel increment when as close as poss to target
; 1703 : 		eab 1/21/98 */
; 1704 : 		pDphsettar->glide_tot += pDphsettar->glide_inc;

  0098f	66 8b 47 3c	 mov	 ax, WORD PTR [edi+60]
  00993	66 01 47 3e	 add	 WORD PTR [edi+62], ax

; 1705 : //	WINprintf("male %d %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0]);
; 1706 : 		pDphsettar->glide_step -= pDphsettar->glide_inc;

  00997	66 29 47 3a	 sub	 WORD PTR [edi+58], ax
  0099b	66 8b 4f 3a	 mov	 cx, WORD PTR [edi+58]

; 1707 : 		/*EAB 1/10/98 set glide_inc to zero if we've reached target*/
; 1708 : 		if(pDphsettar->glide_inc > 0 )

  0099f	66 3b c3	 cmp	 ax, bx
  009a2	7e 07		 jle	 SHORT $L71522

; 1709 : 		{
; 1710 : 			if ( pDphsettar->glide_step <= pDphsettar->glide_inc)

  009a4	66 3b c8	 cmp	 cx, ax
  009a7	7f 0d		 jg	 SHORT $L71302

; 1711 : 			{
; 1712 : 				pDphsettar->glide_inc =0;
; 1713 : 			}
; 1714 : 		}
; 1715 : 		else

  009a9	eb 07		 jmp	 SHORT $L71523
$L71522:

; 1716 : 		if(pDphsettar->glide_inc < 0 )

  009ab	7d 09		 jge	 SHORT $L71302

; 1717 : 		{
; 1718 : 			if ( pDphsettar->glide_step >= pDphsettar->glide_inc)

  009ad	66 3b c8	 cmp	 cx, ax
  009b0	7c 04		 jl	 SHORT $L71302
$L71523:

; 1719 : 			{
; 1720 : 				pDphsettar->glide_inc =0;

  009b2	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx
$L71302:

; 1721 : 			}
; 1722 : 		}
; 1723 : #ifdef GERMAN //olivertest BATS 709
; 1724 : 		/* nEED TO DETERMINE HOW TO DECREASE THIS*/
; 1725 : 		if((pDphsettar->glide_inc == 0 )
; 1726 : 			&& pDphsettar->glide_tot > 0)
; 1727 : 		{
; 1728 : 			pDphsettar->glide_tot -=30;
; 1729 : 		}
; 1730 : #endif //german
; 1731 :             f0in = (pDphsettar->tarbas + pDphsettar->tarhat + (pDphsettar->tarimp));

  009b6	66 8b 47 5e	 mov	 ax, WORD PTR [edi+94]
  009ba	66 8b 6f 5c	 mov	 bp, WORD PTR [edi+92]
  009be	66 03 e8	 add	 bp, ax
  009c1	66 03 af 96 00
	00 00		 add	 bp, WORD PTR [edi+150]

; 1732 : #ifdef DEBUGF0
; 1733 : 	WINprintf(" tarbas %d,tarbat %d tarimp %d \n",pDphsettar->tarbas,pDphsettar->tarhat,pDphsettar->tarimp);
; 1734 : #endif
; 1735 : 	//debug code deleted eab 1/10/98
; 1736 : 	    if (pDphsettar->tarimp != 0)   

  009c8	66 3b c3	 cmp	 ax, bx
  009cb	74 0e		 je	 SHORT $L71303

; 1737 : 			pDphsettar->tarimp += pDphsettar->delimp;

  009cd	66 8b 8f 9e 00
	00 00		 mov	 cx, WORD PTR [edi+158]
  009d4	66 03 c8	 add	 cx, ax
  009d7	66 89 4f 5e	 mov	 WORD PTR [edi+94], cx
$L71303:

; 1738 : 					/* Strange way to  */
; 1739 : 					/* make f0 rise gradually for a	  */
; 1740 : 					/* stress-impulse command	  */
; 1741 : 					//	pDphsettar->delimp -=1;
; 1742 : 					pDphsettar->delimp= pDphsettar->delimp>>1;
; 1743 : /*	  Reduce segmental tongue height effect of sonorants toward */
; 1744 : /*	  end of segment (98% per frame)  */
; 1745 : 
; 1746 : 			pDph_t->arg1 = pDphsettar->tarseg; 

  009db	66 8b 57 6a	 mov	 dx, WORD PTR [edi+106]
  009df	66 d1 bf 9e 00
	00 00		 sar	 WORD PTR [edi+158], 1
  009e6	66 89 96 f8 14
	00 00		 mov	 WORD PTR [esi+5368], dx

; 1747 :             pDph_t->arg2 = 16064;    

  009ed	66 c7 86 fa 14
	00 00 c0 3e	 mov	 WORD PTR [esi+5370], 16064 ; 00003ec0H

; 1748 :             pDphsettar->tarseg = mlsh1(pDph_t->arg1,pDph_t->arg2);

  009f6	0f bf 86 f8 14
	00 00		 movsx	 eax, WORD PTR [esi+5368]
  009fd	8b c8		 mov	 ecx, eax
  009ff	c1 e1 06	 shl	 ecx, 6
  00a02	2b c8		 sub	 ecx, eax
  00a04	c1 e1 02	 shl	 ecx, 2
  00a07	2b c8		 sub	 ecx, eax

; 1749 : 
; 1750 : 	/* eab new code 4/6/98 to add in a segmental dc offset based on f1 to account for shifts due to 
; 1751 : 	vocal tract postition as implemented this effect is quite weak (better safe than sorry) no time for a long
; 1752 : 			detailed evaluation but this should add some positive variability eab 6/13/98 wrong sign*/
; 1753 : 			/* olivertest */
; 1754 : 				//eab 10/20/98 Reduce effect further for Spanish 
; 1755 : #ifdef SPANISH
; 1756 : 			temp = ((pDph_t->parstochip[1] ));
; 1757 : 			f0in +=(350-temp)>>2;
; 1758 : #else
; 1759 : 			temp = ((pDph_t->parstochip[1] ));
; 1760 : 			f0in +=(350-temp)>>1;

  00a09	b8 5e 01 00 00	 mov	 eax, 350		; 0000015eH
  00a0e	c1 e1 06	 shl	 ecx, 6
  00a11	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00a14	66 89 4f 6a	 mov	 WORD PTR [edi+106], cx
  00a18	0f bf 96 7c 03
	00 00		 movsx	 edx, WORD PTR [esi+892]
  00a1f	2b c2		 sub	 eax, edx
  00a21	d1 f8		 sar	 eax, 1
  00a23	03 e8		 add	 ebp, eax

; 1761 : #endif
; 1762 : 
; 1763 : 
; 1764 : 			//WINprintf("tarseg = %d f0in %d \n,",(pDphsettar->tarseg +pDphsettar->tarseg1),f0in);
; 1765 : 	    filter_seg_commands(pDph_t,f0in);	/* Input is pDphsettar->tarseg1, output is pDphsettar->f0s */

  00a25	55		 push	 ebp
  00a26	56		 push	 esi
  00a27	e8 00 00 00 00	 call	 _filter_seg_commands

; 1766 : #ifdef REMOVENWSLATER
; 1767 : 		pDph_t->f0s += frac4mul(pDph_t->f0s, pDph_t->f0segscalefac+7000);
; 1768 : #endif
; 1769 : 		
; 1770 : 	    filter_commands(pDph_t,f0in);		/* Input is f0in, output is f0  */

  00a2c	55		 push	 ebp
  00a2d	56		 push	 esi
  00a2e	e8 00 00 00 00	 call	 _filter_commands

; 1771 : 		
; 1772 : 		/* Add in glide value to F0 eab 1/21/98 */
; 1773 : 		//Olivertest 
; 1774 : 	    pDph_t->f0prime = pDph_t->f0+ pDph_t->f0s +pDphsettar->glide_tot;	/* This will be spdef-scaled output value */

  00a33	66 8b 8e 78 03
	00 00		 mov	 cx, WORD PTR [esi+888]
  00a3a	83 c4 10	 add	 esp, 16			; 00000010H
  00a3d	66 03 8e 76 03
	00 00		 add	 cx, WORD PTR [esi+886]
  00a44	66 03 4f 3e	 add	 cx, WORD PTR [edi+62]
  00a48	66 89 8e 2e 23
	00 00		 mov	 WORD PTR [esi+9006], cx

; 1775 : #ifdef DEBUGF0
; 1776 : 		WINprintf("maleseg %d %d \n", pDph_t->f0s,pDphsettar->tarseg1); 
; 1777 : 		WINprintf("male %d %d %d pDph_t->f0 %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0],
; 1778 : 			pDph_t->f0prime, pDph_t->f0); 
; 1779 : #endif
; 1780 : 
; 1781 : 	/* 11/23/97 Eab creek for male voice only for now*/
; 1782 : 		/*BATS 709 EAB 7/15/98 left number_words >5 out in ad code this
; 1783 : 		isn't right or wrong but for overall perception not creeking except for longer
; 1784 : 			utternce should be better */
; 1785 : #ifdef CREEKMALE
; 1786 : 		if( pDphsettar->nframb >  pDph_t->tcumdur-4
; 1787 : 			&& pDph_t->clausetype == DECLARATIVE 
; 1788 : 			&& pDph_t->number_words > 5 )

  00a4f	0f bf 96 28 23
	00 00		 movsx	 edx, WORD PTR [esi+9000]
  00a56	0f bf 47 48	 movsx	 eax, WORD PTR [edi+72]
  00a5a	83 ea 04	 sub	 edx, 4
  00a5d	3b c2		 cmp	 eax, edx
  00a5f	7e 25		 jle	 SHORT $L71304
  00a61	66 39 9e c0 03
	00 00		 cmp	 WORD PTR [esi+960], bx
  00a68	75 1c		 jne	 SHORT $L71304
  00a6a	66 83 be 06 20
	00 00 05	 cmp	 WORD PTR [esi+8198], 5
  00a72	7e 12		 jle	 SHORT $L71304

; 1789 : 		{
; 1790 : 			pDph_t->avcreek = -6;

  00a74	66 c7 86 b6 03
	00 00 fa ff	 mov	 WORD PTR [esi+950], -6	; fffffffaH

; 1791 : 			pDph_t->f0prime = pDph_t->f0prime >>1;

  00a7d	66 d1 be 2e 23
	00 00		 sar	 WORD PTR [esi+9006], 1

; 1792 : 		}
; 1793 : 		else

  00a84	eb 12		 jmp	 SHORT $L71306
$L71304:

; 1794 : 		{
; 1795 : 			pDph_t->avcreek = 0;

  00a86	66 89 9e b6 03
	00 00		 mov	 WORD PTR [esi+950], bx

; 1796 : 		}
; 1797 : 
; 1798 : 	//WINprintf("phocur %d %d %d F0in %d \n",pDphsettar->phocur, pDphsettar->tarbas, pDph_t->enddrop, pDph_t->f0prime);
; 1799 : 
; 1800 : #endif
; 1801 : 
; 1802 : 	}
; 1803 : 
; 1804 : 	else 

  00a8d	eb 09		 jmp	 SHORT $L71306
$L71297:

; 1805 : 	{
; 1806 : 
; 1807 : /*	  Linear interpolation to 'pDphsettar->newnote' over 100 ms or phoneme duration */
; 1808 : 						/* Add vibratto if pDphsettar->vibsw=1  */
; 1809 : 	    linear_interp(pDph_t);

  00a8f	56		 push	 esi
  00a90	e8 00 00 00 00	 call	 _linear_interp
  00a95	83 c4 04	 add	 esp, 4
$L71306:

; 1810 : 	}
; 1811 : 
; 1812 : /*    Glottalization gesture */
; 1813 : /*    F0 dip by 60 Hz linear ramp in 8 frames each direction about pDphsettar->tglstp */
; 1814 : 	dtglst = pDphsettar->nframg - pDphsettar->tglstp;

  00a98	0f bf 4f 50	 movsx	 ecx, WORD PTR [edi+80]
  00a9c	0f bf 47 4c	 movsx	 eax, WORD PTR [edi+76]
  00aa0	2b c1		 sub	 eax, ecx

; 1815 : 	if ( dtglst < 0 )

  00aa2	79 02		 jns	 SHORT $L71307

; 1816 : 	     dtglst = (-dtglst);

  00aa4	f7 d8		 neg	 eax
$L71307:

; 1817 :         if (dtglst <= 7)

  00aa6	83 f8 07	 cmp	 eax, 7
  00aa9	7f 1a		 jg	 SHORT $L71308

; 1818 : 		{
; 1819 : #ifdef SPANISH
; 1820 : 
; 1821 :             pDph_t->f0prime += ((dtglst * 70) - 550)>>2;
; 1822 : #else
; 1823 : 			 pDph_t->f0prime += ((dtglst * 70) - 550);

  00aab	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00ab2	2b c8		 sub	 ecx, eax
  00ab4	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00ab7	8d 8c 12 da fd
	ff ff		 lea	 ecx, DWORD PTR [edx+edx-550]
  00abe	66 01 8e 2e 23
	00 00		 add	 WORD PTR [esi+9006], cx
$L71308:

; 1824 : #endif
; 1825 :             
; 1826 : 			
; 1827 : 		}
; 1828 : 	
; 1829 : /*	  And reduce AV somewhat (ugly code, but F0 computed before AV) */
; 1830 : 
; 1831 :         if (dtglst <= 5) 

  00ac5	83 f8 05	 cmp	 eax, 5
  00ac8	7f 10		 jg	 SHORT $L71309

; 1832 : 		{
; 1833 : 			pDph_t->avglstop = (6 - dtglst);	/* Global variable, used in PHDRAW.C */

  00aca	ba 06 00 00 00	 mov	 edx, 6
  00acf	2b d0		 sub	 edx, eax
  00ad1	66 89 96 b4 03
	00 00		 mov	 WORD PTR [esi+948], dx

; 1834 :         }
; 1835 : 	else 

  00ad8	eb 07		 jmp	 SHORT $L71310
$L71309:

; 1836 : 		{
; 1837 : 		pDph_t->avglstop = 0;

  00ada	66 89 9e b4 03
	00 00		 mov	 WORD PTR [esi+948], bx
$L71310:

; 1838 : 		}
; 1839 : 
; 1840 : /*    Add f0 drift or flutter (approx 3 and 5-Hz sine waves, each +/-1.0 Hz) */
; 1841 : 	if (pDph_t->f0mode< SINGING) {

  00ae1	ba 04 00 00 00	 mov	 edx, 4
  00ae6	66 39 96 74 17
	00 00		 cmp	 WORD PTR [esi+6004], dx
  00aed	0f 8d f5 00 00
	00		 jge	 $L71318

; 1842 : 	    pDphsettar->timecos5 += 131;		/* Prime number to reduce coincidence */

  00af3	66 81 47 7e 83
	00		 add	 WORD PTR [edi+126], 131	; 00000083H
  00af9	66 8b 47 7e	 mov	 ax, WORD PTR [edi+126]

; 1843 : 	    if (pDphsettar->timecos5 > TWOPI)    pDphsettar->timecos5 -= TWOPI;

  00afd	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  00b01	7e 09		 jle	 SHORT $L71312
  00b03	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  00b08	66 89 47 7e	 mov	 WORD PTR [edi+126], ax
$L71312:

; 1844 : 	    pDphsettar->timecos3 += 79;

  00b0c	66 83 47 7c 4f	 add	 WORD PTR [edi+124], 79	; 0000004fH
  00b11	66 8b 47 7c	 mov	 ax, WORD PTR [edi+124]

; 1845 : 	    if (pDphsettar->timecos3 > TWOPI)    pDphsettar->timecos3 -= TWOPI;

  00b15	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  00b19	7e 09		 jle	 SHORT $L71313
  00b1b	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  00b20	66 89 47 7c	 mov	 WORD PTR [edi+124], ax
$L71313:

; 1846 : 	    pseudojitter = getcosine[pDphsettar->timecos5>>6]
; 1847 : 			 - getcosine[pDphsettar->timecos3>>6];

  00b24	0f bf 47 7c	 movsx	 eax, WORD PTR [edi+124]
  00b28	c1 f8 06	 sar	 eax, 6
  00b2b	0f bf 0c 45 00
	00 00 00	 movsx	 ecx, WORD PTR _getcosine[eax*2]
  00b33	0f bf 47 7e	 movsx	 eax, WORD PTR [edi+126]
  00b37	c1 f8 06	 sar	 eax, 6
  00b3a	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _getcosine[eax*2]
  00b42	2b c1		 sub	 eax, ecx

; 1848 : 	    pDph_t->arg1 = pseudojitter;

  00b44	66 89 86 f8 14
	00 00		 mov	 WORD PTR [esi+5368], ax

; 1849 : 		/* eab found flutter is not a speaker def yet*/
; 1850 : 	    pDph_t->arg2 = pDph_t->f0flutter;

  00b4b	66 8b 8e 74 03
	00 00		 mov	 cx, WORD PTR [esi+884]
  00b52	66 89 8e fa 14
	00 00		 mov	 WORD PTR [esi+5370], cx

; 1851 : 		/* "FLUTTER" spdef parameter, 10% -> +/-1 Hz, */
; 1852 : 	    pDph_t->f0prime += mlsh1(pDph_t->arg1,pDph_t->arg2);	

  00b59	0f bf ae f8 14
	00 00		 movsx	 ebp, WORD PTR [esi+5368]
  00b60	0f bf c9	 movsx	 ecx, cx
  00b63	0f af e9	 imul	 ebp, ecx
  00b66	c1 fd 0e	 sar	 ebp, 14			; 0000000eH
  00b69	66 01 ae 2e 23
	00 00		 add	 WORD PTR [esi+9006], bp

; 1853 : 		if(pDph_t->clausetype == 2)

  00b70	66 83 be c0 03
	00 00 02	 cmp	 WORD PTR [esi+960], 2
  00b78	66 8b 8e 2e 23
	00 00		 mov	 cx, WORD PTR [esi+9006]
  00b7f	75 27		 jne	 SHORT $L71314

; 1854 : 		{
; 1855 : 			pDph_t->f0prime += mlsh1(pseudojitter,pDph_t->addjit);

  00b81	0f bf ae c2 03
	00 00		 movsx	 ebp, WORD PTR [esi+962]
  00b88	0f af e8	 imul	 ebp, eax
  00b8b	c1 fd 0e	 sar	 ebp, 14			; 0000000eH
  00b8e	03 e9		 add	 ebp, ecx
  00b90	66 89 ae 2e 23
	00 00		 mov	 WORD PTR [esi+9006], bp

; 1856 : 			pDph_t->addjit = -pDph_t->addjit;

  00b97	66 8b 86 c2 03
	00 00		 mov	 ax, WORD PTR [esi+962]
  00b9e	66 f7 d8	 neg	 ax
  00ba1	66 89 86 c2 03
	00 00		 mov	 WORD PTR [esi+962], ax
$L71314:

; 1857 : 		}
; 1858 : 			
; 1859 : 		
; 1860 : 		/*  100% corresp. to +/- 10 Hz max flutter */
; 1861 : 	}
; 1862 : 
; 1863 : /*    Introduce variability to period at startup from a voiceless interval */
; 1864 : /*	not implemented */
; 1865 : 
; 1866 : /*    Scale f0 according to current speaker definition, the number 120 is
; 1867 :  *    the nominal average pitch of Paul's voice (AP in spdef)  */
; 1868 : 
; 1869 : 	if (pDph_t->f0mode< SINGING) {

  00ba8	66 39 96 74 17
	00 00		 cmp	 WORD PTR [esi+6004], dx
  00baf	7d 37		 jge	 SHORT $L71318

; 1870 : 		if(pDph_t->clausetype == 2)

  00bb1	66 83 be c0 03
	00 00 02	 cmp	 WORD PTR [esi+960], 2

; 1871 : 		{
; 1872 : 			pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1000), pDph_t->f0scalefac+1000);

  00bb9	0f bf 8e b2 18
	00 00		 movsx	 ecx, WORD PTR [esi+6322]
  00bc0	75 06		 jne	 SHORT $L71316
  00bc2	81 c1 e8 03 00
	00		 add	 ecx, 1000		; 000003e8H
$L71316:

; 1873 : 				
; 1874 : 		}
; 1875 : 		else
; 1876 : 		{
; 1877 : 			pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1000), pDph_t->f0scalefac);

  00bc8	0f bf 86 2e 23
	00 00		 movsx	 eax, WORD PTR [esi+9006]
  00bcf	2d e8 03 00 00	 sub	 eax, 1000		; 000003e8H
  00bd4	0f af c8	 imul	 ecx, eax
  00bd7	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00bda	66 03 8e b0 18
	00 00		 add	 cx, WORD PTR [esi+6320]
  00be1	66 89 8e 2e 23
	00 00		 mov	 WORD PTR [esi+9006], cx
$L71318:

; 1878 : 		}
; 1879 : 	}
; 1880 : 		
; 1881 : /*    See if f0 exceeds legal bounds, truncate  */
; 1882 :         if (pDph_t->f0prime > HIGHEST_F0) {

  00be8	66 8b 86 2e 23
	00 00		 mov	 ax, WORD PTR [esi+9006]
  00bef	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  00bf3	7e 0b		 jle	 SHORT $L71320

; 1883 : 	    pDph_t->f0prime = HIGHEST_F0;

  00bf5	66 c7 86 2e 23
	00 00 01 14	 mov	 WORD PTR [esi+9006], 5121 ; 00001401H

; 1884 : 	}
; 1885 :         else if (pDph_t->f0prime < LOWEST_F0) {

  00bfe	eb 0f		 jmp	 SHORT $L71322
$L71320:
  00c00	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  00c04	7d 09		 jge	 SHORT $L71322

; 1886 : 	    pDph_t->f0prime = LOWEST_F0;

  00c06	66 c7 86 2e 23
	00 00 f4 01	 mov	 WORD PTR [esi+9006], 500 ; 000001f4H
$L71322:

; 1887 : 	}
; 1888 : 
; 1889 : /*    Change from Middle C = 256 Hz (A = 430.4) to A = 440 Hz (SHOULD RE-DO */
; 1890 : /*    TABLE INSTEAD) */
; 1891 : 	if (pDph_t->f0mode== SINGING) {

  00c0f	66 39 96 74 17
	00 00		 cmp	 WORD PTR [esi+6004], dx
  00c16	75 22		 jne	 SHORT $L71323

; 1892 : 	    pDph_t->f0prime = frac4mul(pDph_t->f0prime,4190);

  00c18	0f bf 86 2e 23
	00 00		 movsx	 eax, WORD PTR [esi+9006]
  00c1f	8b c8		 mov	 ecx, eax
  00c21	c1 e1 06	 shl	 ecx, 6
  00c24	03 c8		 add	 ecx, eax
  00c26	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00c29	c1 e2 04	 shl	 edx, 4
  00c2c	2b d0		 sub	 edx, eax
  00c2e	d1 e2		 shl	 edx, 1
  00c30	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00c33	66 89 96 2e 23
	00 00		 mov	 WORD PTR [esi+9006], dx
$L71323:

; 1893 : 	}
; 1894 : 
; 1895 : /*    Save value of period t0 in parameter array  */
; 1896 : /*    (ONLY ESSENTIAL DIVIDE INSTRUCTION IN ALL OF DECTALK) */
; 1897 : 	pDph_t->arg1 = 400;

  00c3a	66 c7 86 f8 14
	00 00 90 01	 mov	 WORD PTR [esi+5368], 400 ; 00000190H

; 1898 : 	/* 2/12/99  eab adjusted for sample in vtm.c*/
; 1899 : 	pDph_t->arg2 = 1000;

  00c43	66 c7 86 fa 14
	00 00 e8 03	 mov	 WORD PTR [esi+5370], 1000 ; 000003e8H

; 1900 : 	pDph_t->arg3 = pDph_t->f0prime;

  00c4c	66 8b 8e 2e 23
	00 00		 mov	 cx, WORD PTR [esi+9006]
  00c53	66 89 8e fc 14
	00 00		 mov	 WORD PTR [esi+5372], cx

; 1901 :         temp = muldv(pDph_t->arg1, pDph_t->arg2, pDph_t->arg3);
; 1902 : 		pDph_t->parstochip[OUT_T0]  = temp;

  00c5a	0f bf 86 f8 14
	00 00		 movsx	 eax, WORD PTR [esi+5368]
  00c61	0f bf 96 fa 14
	00 00		 movsx	 edx, WORD PTR [esi+5370]
  00c68	0f af c2	 imul	 eax, edx
  00c6b	0f bf c9	 movsx	 ecx, cx
  00c6e	99		 cdq
  00c6f	f7 f9		 idiv	 ecx
  00c71	66 89 86 8c 03
	00 00		 mov	 WORD PTR [esi+908], ax

; 1903 : #ifdef HLSYN
; 1904 : 	pDph_t->parstochip[OUT_T0]  =pDph_t->f0prime;
; 1905 : #endif 
; 1906 : 
; 1907 : 
; 1908 : 
; 1909 : #ifdef GRAPHF0
; 1910 : 
; 1911 : 	for (icnt=0;icnt<=120;icnt++)
; 1912 : 	{
; 1913 : 		prntbuf[icnt]=' ';
; 1914 : 	}
; 1915 : 	prntbuf[120]='\0';
; 1916 : 	if(pDph_t->malfem == FEMALE) /* Female or childs voice scale to fit*/
; 1917 : 		icnt=((pDph_t->f0prime)/30);
; 1918 : 	else
; 1919 : 		icnt=((pDph_t->f0prime)/10)-50;
; 1920 : 	if(icnt >=120)
; 1921 : 		icnt=119;
; 1922 : 	prntbuf[icnt]='*';
; 1923 : 	WINprintf("%d",pDph_t->f0prime);
; 1924 : 	WINprintf("%s\n",prntbuf);
; 1925 : 
; 1926 : 
; 1927 : #endif
; 1928 : /*
; 1929 : 	WINprintf("TARBAS %d phone %d  tarhat=%3d tarimp=%3d  f0 =%d \n",
; 1930 :         pDphsettar->tarbas,pDph_t->allophons[pDphsettar->npg],pDphsettar->tarhat, pDphsettar->tarimp,
; 1931 : 		pDph_t->f0prime); */
; 1932 : //	 if(0)
; 1933 : //	 pDph_t->parstochip[OUT_T0]=of0array[oarcnt++];
; 1934 : 
; 1935 : 	/* debug switch */
; 1936 : 	if (((pKsd_t->logflag) & LOG_OUTPHON) || DT_DBG(PH_DBG,0x008))

  00c78	8b 44 24 14	 mov	 eax, DWORD PTR _pKsd_t$[esp+24]
  00c7c	f6 80 04 02 00
	00 20		 test	 BYTE PTR [eax+516], 32	; 00000020H
  00c83	75 18		 jne	 SHORT $L71326
  00c85	66 8b 80 78 04
	00 00		 mov	 ax, WORD PTR [eax+1144]
  00c8c	f6 c4 20	 test	 ah, 32			; 00000020H
  00c8f	0f 84 ca 0d 00
	00		 je	 $L71327
  00c95	a8 08		 test	 al, 8
  00c97	0f 84 c2 0d 00
	00		 je	 $L71327
$L71326:

; 1937 : 	{
; 1938 : #ifdef MSDBG4
; 1939 : if (pDphsettar->lastone==-1)
; 1940 : {
; 1941 : 	for (keepdur=0;keepdur<TOT_ALLOPHONES;keepdur++)
; 1942 : 	{
; 1943 : 		printf("phone#=%d == %c%c\n",keepdur,pKsd_t->arpabet[keepdur <<1],pKsd_t->arpabet[(keepdur <<1)+1]);
; 1944 : 	}  
; 1945 : }
; 1946 : #endif
; 1947 : 		/* if (np == 0 && allophons[np] == SIL) { lastone=np; }                  */
; 1948 : 		if (pDphsettar->np_drawt0 != pDphsettar->lastone)

  00c9d	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  00ca1	66 3b 47 70	 cmp	 ax, WORD PTR [edi+112]
  00ca5	0f 84 b4 0d 00
	00		 je	 $L71327

; 1949 : 		{
; 1950 : #ifdef MSDBG4 
; 1951 : 	printf("lastone=%d f0prime=%d\n",pDphsettar->lastone,pDph_t->f0prime/10);
; 1952 : 	printf ("allophons[%d]=%d ", pDphsettar->np_drawt0, pDph_t->allophons[pDphsettar->np_drawt0]);
; 1953 : 	printf ("allodurs[%d]=%d\n", pDphsettar->np_drawt0, pDph_t->allodurs[pDphsettar->np_drawt0]*64/10);
; 1954 : #endif
; 1955 : 			if ((pDphsettar->np_drawt0 >= 0))

  00cab	66 3b c3	 cmp	 ax, bx
  00cae	0f 8c a3 0d 00
	00		 jl	 $L71332

; 1956 : 			{
; 1957 :  
; 1958 : #ifdef MSDOS
; 1959 : 				/*WAIT_PRINT;*/
; 1960 : 				dologphoneme (pDph_t->allophons[pDphsettar->np_drawt0],
; 1961 : 							  (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 1962 : 							  (pDph_t->f0prime / 10));
; 1963 : 				printf("\n");
; 1964 : 				/*SIGNAL_PRINT;*/
; 1965 : #else
; 1966 : 				dologphoneme (phTTS, pDph_t->allophons[pDphsettar->np_drawt0],
; 1967 : 						(short)  (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 1968 : 						(short) (pDph_t->f0prime / 10));

  00cb4	0f bf 8e 2e 23
	00 00		 movsx	 ecx, WORD PTR [esi+9006]
  00cbb	0f bf e8	 movsx	 ebp, ax
  00cbe	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00cc3	f7 e9		 imul	 ecx
  00cc5	c1 fa 02	 sar	 edx, 2
  00cc8	8b c2		 mov	 eax, edx
  00cca	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00ccd	03 d0		 add	 edx, eax
  00ccf	0f bf 84 6e 78
	0d 00 00	 movsx	 eax, WORD PTR [esi+ebp*2+3448]
  00cd7	52		 push	 edx
  00cd8	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00cdb	c1 e1 03	 shl	 ecx, 3
  00cde	2b c8		 sub	 ecx, eax
  00ce0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00ce5	f7 e9		 imul	 ecx
  00ce7	c1 fa 02	 sar	 edx, 2
  00cea	8b ca		 mov	 ecx, edx
  00cec	8b 44 24 20	 mov	 eax, DWORD PTR _phTTS$[esp+24]
  00cf0	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00cf3	03 d1		 add	 edx, ecx
  00cf5	52		 push	 edx
  00cf6	66 8b 94 6e c6
	03 00 00	 mov	 dx, WORD PTR [esi+ebp*2+966]
  00cfe	52		 push	 edx
  00cff	50		 push	 eax
  00d00	e8 00 00 00 00	 call	 _dologphoneme

; 1969 : #ifdef PRINTFDEBUG
; 1970 : 				printf ("\n");
; 1971 : #endif
; 1972 : 				if (pKsd_t->logflag & LOG_OUTPHON)

  00d05	8b 4c 24 24	 mov	 ecx, DWORD PTR _pKsd_t$[esp+40]
  00d09	83 c4 10	 add	 esp, 16			; 00000010H
  00d0c	f6 81 04 02 00
	00 20		 test	 BYTE PTR [ecx+516], 32	; 00000020H
  00d13	0f 84 3e 0d 00
	00		 je	 $L71332

; 1973 : 				{
; 1974 : 					if (fprintf (phTTS->pLogFile, "\n") < 0)

  00d19	8b 74 24 1c	 mov	 esi, DWORD PTR _phTTS$[esp+20]
  00d1d	68 00 00 00 00	 push	 OFFSET FLAT:$SG71333
  00d22	8b 96 98 00 00
	00		 mov	 edx, DWORD PTR [esi+152]
  00d28	52		 push	 edx
  00d29	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  00d2f	83 c4 08	 add	 esp, 8
  00d32	85 c0		 test	 eax, eax
  00d34	0f 8d 1d 0d 00
	00		 jge	 $L71332

; 1975 : 					{
; 1976 : 						TextToSpeechErrorHandler (phTTS,
; 1977 : 												  ERROR_WRITING_FILE,
; 1978 : 												  0L);
; 1979 : 					}
; 1980 : 				}
; 1981 : #endif
; 1982 : 			}
; 1983 : 			/* keepdur = (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10); */		/* eab need to keep orig value of dur */ 
; 1984 : 			/* keepallo = pDph_t->allophons[pDphsettar->np_drawt0]; */
; 1985 : 			pDphsettar->lastone = pDphsettar->np_drawt0;
; 1986 : 		}
; 1987 : 	}
; 1988 : 
; 1989 : /*    Increment time counters */
; 1990 :         pDphsettar->nfram++;
; 1991 :         pDphsettar->nframs++;
; 1992 :         pDphsettar->nframg++;
; 1993 : 
; 1994 : #ifndef MSDOS
; 1995 : 	//eab BATS 887 this is the wrong place to output them....
; 1996 : 	//pDph_t->parstochip[OUT_PH] = pDph_t->allophons[pDphsettar->np_drawt0];
; 1997 : 	//pDph_t->parstochip[OUT_DU] = pDph_t->allodurs[pDphsettar->np_drawt0];
; 1998 : #endif
; 1999 : 
; 2000 : 	
; 2001 :   
; 2002 : 
; 2003 : }/*end of if malfem==male*/
; 2004 : else

  00d3a	e9 0c 0d 00 00	 jmp	 $L71525
$L71241:

; 2005 : {
; 2006 : 	 if (pDph_t->nf0ev <= -2) 

  00d3f	33 db		 xor	 ebx, ebx
  00d41	83 c9 ff	 or	 ecx, -1
  00d44	66 83 be 2a 23
	00 00 fe	 cmp	 WORD PTR [esi+9002], -2	; fffffffeH
  00d4c	0f 8f 0e 04 00
	00		 jg	 $L71335

; 2007 : 	{
; 2008 : 		/* Hard initialization */
; 2009 : 		/* for now hardcode baseline for init experimentation eab 8/96*/
; 2010 : 		/* eab BUG- found problem with f0command, it needs to be a global variable
; 2011 : 		or it sometimes doesn't get handled correctly*/
; 2012 : 		pDph_t->clausepos=0;

  00d52	66 89 9e ca 14
	00 00		 mov	 WORD PTR [esi+5322], bx

; 2013 : 		pDphsettar->phocur = SIL;

  00d59	66 89 5f 44	 mov	 WORD PTR [edi+68], bx

; 2014 : 		
; 2015 : 		/*Question*/
; 2016 : 		pDph_t->glotalize =0;

  00d5d	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 2017 : 		pDphsettar->glide_step=0;

  00d64	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 2018 : 
; 2019 : 
; 2020 : #ifdef GERMAN
; 2021 : 
; 2022 : 	
; 2023 : 			/* DECLARATIVE*/		/*
; 2024 : 		pDph_t->f0basetypes[0][0]=1887; 
; 2025 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2026 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2027 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2028 : 		pDph_t->f0basetypes[0][4]=1813; 
; 2029 : 		pDph_t->f0basetypes[0][5]=1809; 
; 2030 : 		pDph_t->f0basetypes[0][6]=1795; 
; 2031 : 		pDph_t->f0basetypes[0][7]=1782; 
; 2032 : 		pDph_t->f0basetypes[0][8]=1779; 
; 2033 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2034 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2035 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2036 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2037 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2038 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2039 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2040 : 		pDph_t->f0basetypes[0][16]=1678; */
; 2041 : 			/* DECLARATIVE*/		
; 2042 : 		pDph_t->f0basetypes[0][0]=2270; 
; 2043 : 		pDph_t->f0basetypes[0][1]=2270; 
; 2044 : 		pDph_t->f0basetypes[0][2]=2265;
; 2045 : 		pDph_t->f0basetypes[0][3]=2222;
; 2046 : 		pDph_t->f0basetypes[0][4]=2120;
; 2047 : 		pDph_t->f0basetypes[0][5]=1930;
; 2048 : 		pDph_t->f0basetypes[0][6]=1910;
; 2049 : 		pDph_t->f0basetypes[0][7]=1900;
; 2050 : 		pDph_t->f0basetypes[0][8]=1870;
; 2051 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2052 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2053 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2054 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2055 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2056 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2057 : 		pDph_t->f0basetypes[0][15]=1600; 
; 2058 : 		pDph_t->f0basetypes[0][16]=1560; 
; 2059 : 
; 2060 : 		/*comma*/
; 2061 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2062 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2063 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2064 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2065 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2066 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2067 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2068 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2069 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2070 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2071 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2072 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2073 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2074 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2075 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2076 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2077 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2078 : 
; 2079 : 		/*excalamatory*/
; 2080 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2081 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2082 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2083 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2084 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2085 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2086 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2087 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2088 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2089 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2090 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2091 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2092 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2093 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2094 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2095 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2096 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2097 : 
; 2098 : 		/*question*/
; 2099 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2100 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2101 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2102 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2103 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2104 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2105 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2106 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2107 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2108 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2109 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2110 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2111 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2112 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2113 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2114 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2115 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2116 : 
; 2117 : 		
; 2118 : 			/* short phrase */	
; 2119 : 			pDph_t->f0basetypes[4][0]=1890; 
; 2120 : 			pDph_t->f0basetypes[4][1]=1880; 
; 2121 : 			pDph_t->f0basetypes[4][2]=1870; 
; 2122 : 			pDph_t->f0basetypes[4][3]=1850; 
; 2123 : 			pDph_t->f0basetypes[4][4]=1860; 
; 2124 : 			pDph_t->f0basetypes[4][5]=1840; 
; 2125 : 			pDph_t->f0basetypes[4][6]=1820; 
; 2126 : 			pDph_t->f0basetypes[4][7]=1814; 
; 2127 : 			pDph_t->f0basetypes[4][8]=1828; 
; 2128 : 			pDph_t->f0basetypes[4][9]=1804; 
; 2129 : 			pDph_t->f0basetypes[4][10]=1790; 
; 2130 : 			pDph_t->f0basetypes[4][11]=1780; 
; 2131 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2132 : 			pDph_t->f0basetypes[4][13]=1760; 
; 2133 : 			pDph_t->f0basetypes[4][14]=1750; 
; 2134 : 			pDph_t->f0basetypes[4][15]=1732; 
; 2135 : 			pDph_t->f0basetypes[4][16]=1700; 
; 2136 : 
; 2137 : #endif
; 2138 : 			
; 2139 : #ifdef  ENGLISH_US 
; 2140 : 
; 2141 : 
; 2142 : 		/* DECLARATIVE*/		
; 2143 : 
; 2144 : 		pDph_t->f0basetypes[0][0]=1887; 

  00d68	66 c7 86 10 20
	00 00 5f 07	 mov	 WORD PTR [esi+8208], 1887 ; 0000075fH

; 2145 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2146 : 		pDph_t->f0basetypes[0][2]=1839; 

  00d71	bd 2f 07 00 00	 mov	 ebp, 1839		; 0000072fH
  00d76	66 c7 86 12 20
	00 00 49 07	 mov	 WORD PTR [esi+8210], 1865 ; 00000749H

; 2147 : 		pDph_t->f0basetypes[0][3]=1827; 

  00d7f	ba 23 07 00 00	 mov	 edx, 1827		; 00000723H
  00d84	66 89 ae 14 20
	00 00		 mov	 WORD PTR [esi+8212], bp

; 2148 : 		pDph_t->f0basetypes[0][4]=1813; 

  00d8b	b9 15 07 00 00	 mov	 ecx, 1813		; 00000715H
  00d90	66 89 96 16 20
	00 00		 mov	 WORD PTR [esi+8214], dx

; 2149 : 		pDph_t->f0basetypes[0][5]=1809; 

  00d97	b8 11 07 00 00	 mov	 eax, 1809		; 00000711H
  00d9c	66 89 8e 18 20
	00 00		 mov	 WORD PTR [esi+8216], cx
  00da3	66 89 86 1a 20
	00 00		 mov	 WORD PTR [esi+8218], ax

; 2150 : 		pDph_t->f0basetypes[0][6]=1795; 

  00daa	66 c7 86 1c 20
	00 00 03 07	 mov	 WORD PTR [esi+8220], 1795 ; 00000703H

; 2151 : 		pDph_t->f0basetypes[0][7]=1782; 

  00db3	66 c7 86 1e 20
	00 00 f6 06	 mov	 WORD PTR [esi+8222], 1782 ; 000006f6H

; 2152 : 		pDph_t->f0basetypes[0][8]=1779; 

  00dbc	66 c7 86 20 20
	00 00 f3 06	 mov	 WORD PTR [esi+8224], 1779 ; 000006f3H

; 2153 : 		pDph_t->f0basetypes[0][9]=1765; 

  00dc5	66 c7 86 22 20
	00 00 e5 06	 mov	 WORD PTR [esi+8226], 1765 ; 000006e5H

; 2154 : 		pDph_t->f0basetypes[0][10]=1763; 

  00dce	66 c7 86 24 20
	00 00 e3 06	 mov	 WORD PTR [esi+8228], 1763 ; 000006e3H

; 2155 : 		pDph_t->f0basetypes[0][11]=1750; 

  00dd7	66 c7 86 26 20
	00 00 d6 06	 mov	 WORD PTR [esi+8230], 1750 ; 000006d6H

; 2156 : 		pDph_t->f0basetypes[0][12]=1738; 

  00de0	66 c7 86 28 20
	00 00 ca 06	 mov	 WORD PTR [esi+8232], 1738 ; 000006caH

; 2157 : 		pDph_t->f0basetypes[0][13]=1714; 

  00de9	66 c7 86 2a 20
	00 00 b2 06	 mov	 WORD PTR [esi+8234], 1714 ; 000006b2H

; 2158 : 		pDph_t->f0basetypes[0][14]=1700; 

  00df2	66 c7 86 2c 20
	00 00 a4 06	 mov	 WORD PTR [esi+8236], 1700 ; 000006a4H

; 2159 : 		pDph_t->f0basetypes[0][15]=1694; 

  00dfb	66 c7 86 2e 20
	00 00 9e 06	 mov	 WORD PTR [esi+8238], 1694 ; 0000069eH

; 2160 : 		pDph_t->f0basetypes[0][16]=1678; 

  00e04	66 c7 86 30 20
	00 00 8e 06	 mov	 WORD PTR [esi+8240], 1678 ; 0000068eH

; 2161 : 
; 2162 : 		/*comma*/
; 2163 : 		pDph_t->f0basetypes[1][0]=1887; 

  00e0d	66 c7 86 32 20
	00 00 5f 07	 mov	 WORD PTR [esi+8242], 1887 ; 0000075fH

; 2164 : 		pDph_t->f0basetypes[1][1]=1865; 

  00e16	66 c7 86 34 20
	00 00 49 07	 mov	 WORD PTR [esi+8244], 1865 ; 00000749H

; 2165 : 		pDph_t->f0basetypes[1][2]=1839; 

  00e1f	66 89 ae 36 20
	00 00		 mov	 WORD PTR [esi+8246], bp

; 2166 : 		pDph_t->f0basetypes[1][3]=1827; 

  00e26	66 89 96 38 20
	00 00		 mov	 WORD PTR [esi+8248], dx

; 2167 : 		pDph_t->f0basetypes[1][4]=1813; 

  00e2d	66 89 8e 3a 20
	00 00		 mov	 WORD PTR [esi+8250], cx

; 2168 : 		pDph_t->f0basetypes[1][5]=1809; 

  00e34	66 89 86 3c 20
	00 00		 mov	 WORD PTR [esi+8252], ax

; 2169 : 		pDph_t->f0basetypes[1][6]=1785; 

  00e3b	66 c7 86 3e 20
	00 00 f9 06	 mov	 WORD PTR [esi+8254], 1785 ; 000006f9H

; 2170 : 		pDph_t->f0basetypes[1][7]=1762; 

  00e44	66 c7 86 40 20
	00 00 e2 06	 mov	 WORD PTR [esi+8256], 1762 ; 000006e2H

; 2171 : 		pDph_t->f0basetypes[1][8]=1749; 

  00e4d	66 c7 86 42 20
	00 00 d5 06	 mov	 WORD PTR [esi+8258], 1749 ; 000006d5H

; 2172 : 		pDph_t->f0basetypes[1][9]=1725; 

  00e56	66 c7 86 44 20
	00 00 bd 06	 mov	 WORD PTR [esi+8260], 1725 ; 000006bdH

; 2173 : 		pDph_t->f0basetypes[1][10]=1703; 

  00e5f	66 c7 86 46 20
	00 00 a7 06	 mov	 WORD PTR [esi+8262], 1703 ; 000006a7H

; 2174 : 		pDph_t->f0basetypes[1][11]=1710; 

  00e68	66 c7 86 48 20
	00 00 ae 06	 mov	 WORD PTR [esi+8264], 1710 ; 000006aeH

; 2175 : 		pDph_t->f0basetypes[1][12]=1718; 

  00e71	66 c7 86 4a 20
	00 00 b6 06	 mov	 WORD PTR [esi+8266], 1718 ; 000006b6H

; 2176 : 		pDph_t->f0basetypes[1][13]=1764; 

  00e7a	66 c7 86 4c 20
	00 00 e4 06	 mov	 WORD PTR [esi+8268], 1764 ; 000006e4H

; 2177 : 		pDph_t->f0basetypes[1][14]=1750; 

  00e83	66 c7 86 4e 20
	00 00 d6 06	 mov	 WORD PTR [esi+8270], 1750 ; 000006d6H

; 2178 : 		pDph_t->f0basetypes[1][15]=1744; 

  00e8c	66 c7 86 50 20
	00 00 d0 06	 mov	 WORD PTR [esi+8272], 1744 ; 000006d0H

; 2179 : 		pDph_t->f0basetypes[1][16]=1738; 

  00e95	66 c7 86 52 20
	00 00 ca 06	 mov	 WORD PTR [esi+8274], 1738 ; 000006caH

; 2180 : 
; 2181 : 		/*excalamatory*/
; 2182 : 		pDph_t->f0basetypes[2][0]=1887; 

  00e9e	66 c7 86 54 20
	00 00 5f 07	 mov	 WORD PTR [esi+8276], 1887 ; 0000075fH

; 2183 : 		pDph_t->f0basetypes[2][1]=1865; 

  00ea7	66 c7 86 56 20
	00 00 49 07	 mov	 WORD PTR [esi+8278], 1865 ; 00000749H

; 2184 : 		pDph_t->f0basetypes[2][2]=1839; 

  00eb0	66 89 ae 58 20
	00 00		 mov	 WORD PTR [esi+8280], bp

; 2185 : 		pDph_t->f0basetypes[2][3]=1827; 

  00eb7	66 89 96 5a 20
	00 00		 mov	 WORD PTR [esi+8282], dx

; 2186 : 		pDph_t->f0basetypes[2][4]=1813; 

  00ebe	66 89 8e 5c 20
	00 00		 mov	 WORD PTR [esi+8284], cx

; 2187 : 		pDph_t->f0basetypes[2][5]=1809; 

  00ec5	66 89 86 5e 20
	00 00		 mov	 WORD PTR [esi+8286], ax

; 2188 : 		pDph_t->f0basetypes[2][6]=1785; 

  00ecc	66 c7 86 60 20
	00 00 f9 06	 mov	 WORD PTR [esi+8288], 1785 ; 000006f9H

; 2189 : 		pDph_t->f0basetypes[2][7]=1762; 

  00ed5	66 c7 86 62 20
	00 00 e2 06	 mov	 WORD PTR [esi+8290], 1762 ; 000006e2H

; 2190 : 		pDph_t->f0basetypes[2][8]=1749; 

  00ede	66 c7 86 64 20
	00 00 d5 06	 mov	 WORD PTR [esi+8292], 1749 ; 000006d5H

; 2191 : 		pDph_t->f0basetypes[2][9]=1725; 

  00ee7	66 c7 86 66 20
	00 00 bd 06	 mov	 WORD PTR [esi+8294], 1725 ; 000006bdH

; 2192 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2193 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2194 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2195 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2196 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2197 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2198 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2199 : 
; 2200 : 		/*question*/
; 2201 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2202 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2203 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2204 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2205 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2206 : 		pDph_t->f0basetypes[3][5]=1809; 

  00ef0	66 89 86 80 20
	00 00		 mov	 WORD PTR [esi+8320], ax
  00ef7	66 c7 86 68 20
	00 00 aa 06	 mov	 WORD PTR [esi+8296], 1706 ; 000006aaH

; 2207 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2208 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2209 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2210 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2211 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2212 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2213 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2214 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2215 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2216 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2217 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2218 : 
; 2219 : 		
; 2220 : 			/* short phrase */	
; 2221 : 			pDph_t->f0basetypes[4][0]=1890; 
; 2222 : 			pDph_t->f0basetypes[4][1]=1880; 

  00f00	b8 58 07 00 00	 mov	 eax, 1880		; 00000758H
  00f05	66 c7 86 98 20
	00 00 62 07	 mov	 WORD PTR [esi+8344], 1890 ; 00000762H
  00f0e	66 89 86 9a 20
	00 00		 mov	 WORD PTR [esi+8346], ax

; 2223 : 			pDph_t->f0basetypes[4][2]=1880; 

  00f15	66 89 86 9c 20
	00 00		 mov	 WORD PTR [esi+8348], ax
  00f1c	66 c7 86 6a 20
	00 00 c2 07	 mov	 WORD PTR [esi+8298], 1986 ; 000007c2H
  00f25	66 c7 86 6c 20
	00 00 ae 07	 mov	 WORD PTR [esi+8300], 1966 ; 000007aeH
  00f2e	66 c7 86 6e 20
	00 00 98 07	 mov	 WORD PTR [esi+8302], 1944 ; 00000798H
  00f37	66 c7 86 70 20
	00 00 76 07	 mov	 WORD PTR [esi+8304], 1910 ; 00000776H
  00f40	66 c7 86 72 20
	00 00 5c 07	 mov	 WORD PTR [esi+8306], 1884 ; 0000075cH
  00f49	66 c7 86 74 20
	00 00 42 07	 mov	 WORD PTR [esi+8308], 1858 ; 00000742H
  00f52	66 c7 86 76 20
	00 00 5f 07	 mov	 WORD PTR [esi+8310], 1887 ; 0000075fH
  00f5b	66 c7 86 78 20
	00 00 49 07	 mov	 WORD PTR [esi+8312], 1865 ; 00000749H
  00f64	66 89 ae 7a 20
	00 00		 mov	 WORD PTR [esi+8314], bp
  00f6b	66 89 96 7c 20
	00 00		 mov	 WORD PTR [esi+8316], dx
  00f72	66 89 8e 7e 20
	00 00		 mov	 WORD PTR [esi+8318], cx
  00f79	66 c7 86 82 20
	00 00 f9 06	 mov	 WORD PTR [esi+8322], 1785 ; 000006f9H
  00f82	66 c7 86 84 20
	00 00 e2 06	 mov	 WORD PTR [esi+8324], 1762 ; 000006e2H
  00f8b	66 c7 86 86 20
	00 00 d5 06	 mov	 WORD PTR [esi+8326], 1749 ; 000006d5H
  00f94	66 c7 86 88 20
	00 00 bd 06	 mov	 WORD PTR [esi+8328], 1725 ; 000006bdH
  00f9d	66 c7 86 8a 20
	00 00 a7 06	 mov	 WORD PTR [esi+8330], 1703 ; 000006a7H
  00fa6	66 c7 86 8c 20
	00 00 bc 07	 mov	 WORD PTR [esi+8332], 1980 ; 000007bcH
  00faf	66 c7 86 8e 20
	00 00 b0 07	 mov	 WORD PTR [esi+8334], 1968 ; 000007b0H
  00fb8	66 c7 86 90 20
	00 00 98 07	 mov	 WORD PTR [esi+8336], 1944 ; 00000798H
  00fc1	66 c7 86 92 20
	00 00 a8 07	 mov	 WORD PTR [esi+8338], 1960 ; 000007a8H
  00fca	66 c7 86 94 20
	00 00 b6 07	 mov	 WORD PTR [esi+8340], 1974 ; 000007b6H
  00fd3	66 c7 86 96 20
	00 00 b6 06	 mov	 WORD PTR [esi+8342], 1718 ; 000006b6H

; 2224 : 			pDph_t->f0basetypes[4][3]=1870; 

  00fdc	b8 4e 07 00 00	 mov	 eax, 1870		; 0000074eH
  00fe1	66 89 86 9e 20
	00 00		 mov	 WORD PTR [esi+8350], ax

; 2225 : 			pDph_t->f0basetypes[4][4]=1870; 

  00fe8	66 89 86 a0 20
	00 00		 mov	 WORD PTR [esi+8352], ax

; 2226 : 			pDph_t->f0basetypes[4][5]=1860; 

  00fef	b8 44 07 00 00	 mov	 eax, 1860		; 00000744H
  00ff4	66 89 86 a2 20
	00 00		 mov	 WORD PTR [esi+8354], ax

; 2227 : 			pDph_t->f0basetypes[4][6]=1860; 

  00ffb	66 89 86 a4 20
	00 00		 mov	 WORD PTR [esi+8356], ax

; 2228 : 			pDph_t->f0basetypes[4][7]=1854; 

  01002	66 c7 86 a6 20
	00 00 3e 07	 mov	 WORD PTR [esi+8358], 1854 ; 0000073eH

; 2229 : 			pDph_t->f0basetypes[4][8]=1858; 

  0100b	66 c7 86 a8 20
	00 00 42 07	 mov	 WORD PTR [esi+8360], 1858 ; 00000742H

; 2230 : 			pDph_t->f0basetypes[4][9]=1844; 

  01014	66 c7 86 aa 20
	00 00 34 07	 mov	 WORD PTR [esi+8362], 1844 ; 00000734H

; 2231 : 			pDph_t->f0basetypes[4][10]=1840; 
; 2232 : 			pDph_t->f0basetypes[4][11]=1830; 

  0101d	b8 26 07 00 00	 mov	 eax, 1830		; 00000726H
  01022	66 c7 86 ac 20
	00 00 30 07	 mov	 WORD PTR [esi+8364], 1840 ; 00000730H
  0102b	66 89 86 ae 20
	00 00		 mov	 WORD PTR [esi+8366], ax

; 2233 : 			pDph_t->f0basetypes[4][12]=1830; 

  01032	66 89 86 b0 20
	00 00		 mov	 WORD PTR [esi+8368], ax

; 2234 : 			pDph_t->f0basetypes[4][13]=1820; 

  01039	b8 1c 07 00 00	 mov	 eax, 1820		; 0000071cH
  0103e	66 89 86 b2 20
	00 00		 mov	 WORD PTR [esi+8370], ax

; 2235 : 			pDph_t->f0basetypes[4][14]=1820; 

  01045	66 89 86 b4 20
	00 00		 mov	 WORD PTR [esi+8372], ax

; 2236 : 			pDph_t->f0basetypes[4][15]=1812; 

  0104c	66 c7 86 b6 20
	00 00 14 07	 mov	 WORD PTR [esi+8374], 1812 ; 00000714H

; 2237 : 			pDph_t->f0basetypes[4][16]=1810; 

  01055	66 c7 86 b8 20
	00 00 12 07	 mov	 WORD PTR [esi+8376], 1810 ; 00000712H

; 2238 : 
; 2239 : 
; 2240 : 			/* short phrase 
; 2241 : 			pDph_t->f0basetypes[4][0]=1830; 
; 2242 : 			pDph_t->f0basetypes[4][1]=2040; 
; 2243 : 			pDph_t->f0basetypes[4][2]=1920; 
; 2244 : 			pDph_t->f0basetypes[4][3]=2000; 
; 2245 : 			pDph_t->f0basetypes[4][4]=1960; 
; 2246 : 			pDph_t->f0basetypes[4][5]=1920; 
; 2247 : 			pDph_t->f0basetypes[4][6]=1910; 
; 2248 : 			pDph_t->f0basetypes[4][7]=1804; 
; 2249 : 			pDph_t->f0basetypes[4][8]=1801; 
; 2250 : 			pDph_t->f0basetypes[4][9]=1794; 
; 2251 : 			pDph_t->f0basetypes[4][10]=1780; 
; 2252 : 			pDph_t->f0basetypes[4][11]=1790; 
; 2253 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2254 : 			pDph_t->f0basetypes[4][13]=1750; 
; 2255 : 			pDph_t->f0basetypes[4][14]=1730; 
; 2256 : 			pDph_t->f0basetypes[4][15]=1720; 
; 2257 : 			pDph_t->f0basetypes[4][16]=1710; 
; 2258 : 			*/
; 2259 : 
; 2260 : #endif
; 2261 : 
; 2262 : #ifdef SPANISH
; 2263 : 
; 2264 : 
; 2265 : 		/* DECLARATIVE*/		
; 2266 : 		pDph_t->f0basetypes[0][0]=1887; 
; 2267 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2268 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2269 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2270 : 		pDph_t->f0basetypes[0][4]=1813; 
; 2271 : 		pDph_t->f0basetypes[0][5]=1809; 
; 2272 : 		pDph_t->f0basetypes[0][6]=1795; 
; 2273 : 		pDph_t->f0basetypes[0][7]=1782; 
; 2274 : 		pDph_t->f0basetypes[0][8]=1779; 
; 2275 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2276 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2277 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2278 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2279 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2280 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2281 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2282 : 		pDph_t->f0basetypes[0][16]=1678; 
; 2283 : 
; 2284 : 		/*comma*/
; 2285 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2286 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2287 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2288 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2289 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2290 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2291 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2292 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2293 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2294 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2295 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2296 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2297 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2298 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2299 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2300 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2301 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2302 : 
; 2303 : 		/*excalamatory*/
; 2304 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2305 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2306 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2307 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2308 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2309 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2310 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2311 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2312 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2313 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2314 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2315 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2316 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2317 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2318 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2319 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2320 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2321 : 
; 2322 : 		/*question*/
; 2323 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2324 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2325 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2326 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2327 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2328 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2329 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2330 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2331 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2332 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2333 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2334 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2335 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2336 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2337 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2338 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2339 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2340 : 
; 2341 : 		
; 2342 : 			/* short phrase */	
; 2343 : 			pDph_t->f0basetypes[4][0]=1890; 
; 2344 : 			pDph_t->f0basetypes[4][1]=1880; 
; 2345 : 			pDph_t->f0basetypes[4][2]=1870; 
; 2346 : 			pDph_t->f0basetypes[4][3]=1850; 
; 2347 : 			pDph_t->f0basetypes[4][4]=1860; 
; 2348 : 			pDph_t->f0basetypes[4][5]=1840; 
; 2349 : 			pDph_t->f0basetypes[4][6]=1820; 
; 2350 : 			pDph_t->f0basetypes[4][7]=1814; 
; 2351 : 			pDph_t->f0basetypes[4][8]=1828; 
; 2352 : 			pDph_t->f0basetypes[4][9]=1804; 
; 2353 : 			pDph_t->f0basetypes[4][10]=1790; 
; 2354 : 			pDph_t->f0basetypes[4][11]=1780; 
; 2355 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2356 : 			pDph_t->f0basetypes[4][13]=1760; 
; 2357 : 			pDph_t->f0basetypes[4][14]=1750; 
; 2358 : 			pDph_t->f0basetypes[4][15]=1732; 
; 2359 : 			pDph_t->f0basetypes[4][16]=1700; 
; 2360 : 
; 2361 : 
; 2362 : 			/* short phrase 
; 2363 : 			pDph_t->f0basetypes[4][0]=1830; 
; 2364 : 			pDph_t->f0basetypes[4][1]=2040; 
; 2365 : 			pDph_t->f0basetypes[4][2]=1920; 
; 2366 : 			pDph_t->f0basetypes[4][3]=2000; 
; 2367 : 			pDph_t->f0basetypes[4][4]=1960; 
; 2368 : 			pDph_t->f0basetypes[4][5]=1920; 
; 2369 : 			pDph_t->f0basetypes[4][6]=1910; 
; 2370 : 			pDph_t->f0basetypes[4][7]=1804; 
; 2371 : 			pDph_t->f0basetypes[4][8]=1801; 
; 2372 : 			pDph_t->f0basetypes[4][9]=1794; 
; 2373 : 			pDph_t->f0basetypes[4][10]=1780; 
; 2374 : 			pDph_t->f0basetypes[4][11]=1790; 
; 2375 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2376 : 			pDph_t->f0basetypes[4][13]=1750; 
; 2377 : 			pDph_t->f0basetypes[4][14]=1730; 
; 2378 : 			pDph_t->f0basetypes[4][15]=1720; 
; 2379 : 			pDph_t->f0basetypes[4][16]=1710; 
; 2380 : 			*/
; 2381 : 
; 2382 : #endif
; 2383 : 
; 2384 : 
; 2385 : #ifdef ENGLISH_UK
; 2386 : 
; 2387 : 		/* DECLARATIVE*/		
; 2388 : 		pDph_t->f0basetypes[0][0]=1887; 
; 2389 : 		pDph_t->f0basetypes[0][1]=1865; 
; 2390 : 		pDph_t->f0basetypes[0][2]=1839; 
; 2391 : 		pDph_t->f0basetypes[0][3]=1827; 
; 2392 : 		pDph_t->f0basetypes[0][4]=1813; 
; 2393 : 		pDph_t->f0basetypes[0][5]=1809; 
; 2394 : 		pDph_t->f0basetypes[0][6]=1795; 
; 2395 : 		pDph_t->f0basetypes[0][7]=1782; 
; 2396 : 		pDph_t->f0basetypes[0][8]=1779; 
; 2397 : 		pDph_t->f0basetypes[0][9]=1765; 
; 2398 : 		pDph_t->f0basetypes[0][10]=1763; 
; 2399 : 		pDph_t->f0basetypes[0][11]=1750; 
; 2400 : 		pDph_t->f0basetypes[0][12]=1738; 
; 2401 : 		pDph_t->f0basetypes[0][13]=1714; 
; 2402 : 		pDph_t->f0basetypes[0][14]=1700; 
; 2403 : 		pDph_t->f0basetypes[0][15]=1694; 
; 2404 : 		pDph_t->f0basetypes[0][16]=1688; 
; 2405 : 
; 2406 : 		/*comma*/
; 2407 : 		pDph_t->f0basetypes[1][0]=1887; 
; 2408 : 		pDph_t->f0basetypes[1][1]=1865; 
; 2409 : 		pDph_t->f0basetypes[1][2]=1839; 
; 2410 : 		pDph_t->f0basetypes[1][3]=1827; 
; 2411 : 		pDph_t->f0basetypes[1][4]=1813; 
; 2412 : 		pDph_t->f0basetypes[1][5]=1809; 
; 2413 : 		pDph_t->f0basetypes[1][6]=1785; 
; 2414 : 		pDph_t->f0basetypes[1][7]=1762; 
; 2415 : 		pDph_t->f0basetypes[1][8]=1749; 
; 2416 : 		pDph_t->f0basetypes[1][9]=1725; 
; 2417 : 		pDph_t->f0basetypes[1][10]=1703; 
; 2418 : 		pDph_t->f0basetypes[1][11]=1710; 
; 2419 : 		pDph_t->f0basetypes[1][12]=1718; 
; 2420 : 		pDph_t->f0basetypes[1][13]=1764; 
; 2421 : 		pDph_t->f0basetypes[1][14]=1810; 
; 2422 : 		pDph_t->f0basetypes[1][15]=1864; 
; 2423 : 		pDph_t->f0basetypes[1][16]=1928; 
; 2424 : 
; 2425 : 		/*excalamatory*/
; 2426 : 		pDph_t->f0basetypes[2][0]=1887; 
; 2427 : 		pDph_t->f0basetypes[2][1]=1865; 
; 2428 : 		pDph_t->f0basetypes[2][2]=1839; 
; 2429 : 		pDph_t->f0basetypes[2][3]=1827; 
; 2430 : 		pDph_t->f0basetypes[2][4]=1813; 
; 2431 : 		pDph_t->f0basetypes[2][5]=1809; 
; 2432 : 		pDph_t->f0basetypes[2][6]=1785; 
; 2433 : 		pDph_t->f0basetypes[2][7]=1762; 
; 2434 : 		pDph_t->f0basetypes[2][8]=1749; 
; 2435 : 		pDph_t->f0basetypes[2][9]=1725; 
; 2436 : 		pDph_t->f0basetypes[2][10]=1706; 
; 2437 : 		pDph_t->f0basetypes[2][11]=1986; 
; 2438 : 		pDph_t->f0basetypes[2][12]=1966; 
; 2439 : 		pDph_t->f0basetypes[2][13]=1944; 
; 2440 : 		pDph_t->f0basetypes[2][14]=1910; 
; 2441 : 		pDph_t->f0basetypes[2][15]=1884; 
; 2442 : 		pDph_t->f0basetypes[2][16]=1858; 
; 2443 : 
; 2444 : 		/*question*/
; 2445 : 		pDph_t->f0basetypes[3][0]=1887; 
; 2446 : 		pDph_t->f0basetypes[3][1]=1865; 
; 2447 : 		pDph_t->f0basetypes[3][2]=1839; 
; 2448 : 		pDph_t->f0basetypes[3][3]=1827; 
; 2449 : 		pDph_t->f0basetypes[3][4]=1813; 
; 2450 : 		pDph_t->f0basetypes[3][5]=1809; 
; 2451 : 		pDph_t->f0basetypes[3][6]=1785; 
; 2452 : 		pDph_t->f0basetypes[3][7]=1762; 
; 2453 : 		pDph_t->f0basetypes[3][8]=1749; 
; 2454 : 		pDph_t->f0basetypes[3][9]=1725; 
; 2455 : 		pDph_t->f0basetypes[3][10]=1703; 
; 2456 : 		pDph_t->f0basetypes[3][11]=1980; 
; 2457 : 		pDph_t->f0basetypes[3][12]=1968; 
; 2458 : 		pDph_t->f0basetypes[3][13]=1944; 
; 2459 : 		pDph_t->f0basetypes[3][14]=1960; 
; 2460 : 		pDph_t->f0basetypes[3][15]=1974; 
; 2461 : 		pDph_t->f0basetypes[3][16]=1718; 
; 2462 : 
; 2463 : 		
; 2464 : 			/* short phrase */	
; 2465 : 			pDph_t->f0basetypes[4][0]=1890; 
; 2466 : 			pDph_t->f0basetypes[4][1]=1880; 
; 2467 : 			pDph_t->f0basetypes[4][2]=1870; 
; 2468 : 			pDph_t->f0basetypes[4][3]=1850; 
; 2469 : 			pDph_t->f0basetypes[4][4]=1860; 
; 2470 : 			pDph_t->f0basetypes[4][5]=1840; 
; 2471 : 			pDph_t->f0basetypes[4][6]=1820; 
; 2472 : 			pDph_t->f0basetypes[4][7]=1814; 
; 2473 : 			pDph_t->f0basetypes[4][8]=1828; 
; 2474 : 			pDph_t->f0basetypes[4][9]=1804; 
; 2475 : 			pDph_t->f0basetypes[4][10]=1790; 
; 2476 : 			pDph_t->f0basetypes[4][11]=1780; 
; 2477 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2478 : 			pDph_t->f0basetypes[4][13]=1760; 
; 2479 : 			pDph_t->f0basetypes[4][14]=1750; 
; 2480 : 			pDph_t->f0basetypes[4][15]=1742; 
; 2481 : 			pDph_t->f0basetypes[4][16]=1730; 
; 2482 : 
; 2483 : 
; 2484 : 			/* short phrase 
; 2485 : 			pDph_t->f0basetypes[4][0]=1830; 
; 2486 : 			pDph_t->f0basetypes[4][1]=2040; 
; 2487 : 			pDph_t->f0basetypes[4][2]=1920; 
; 2488 : 			pDph_t->f0basetypes[4][3]=2000; 
; 2489 : 			pDph_t->f0basetypes[4][4]=1960; 
; 2490 : 			pDph_t->f0basetypes[4][5]=1920; 
; 2491 : 			pDph_t->f0basetypes[4][6]=1910; 
; 2492 : 			pDph_t->f0basetypes[4][7]=1804; 
; 2493 : 			pDph_t->f0basetypes[4][8]=1801; 
; 2494 : 			pDph_t->f0basetypes[4][9]=1794; 
; 2495 : 			pDph_t->f0basetypes[4][10]=1780; 
; 2496 : 			pDph_t->f0basetypes[4][11]=1790; 
; 2497 : 			pDph_t->f0basetypes[4][12]=1770; 
; 2498 : 			pDph_t->f0basetypes[4][13]=1750; 
; 2499 : 			pDph_t->f0basetypes[4][14]=1730; 
; 2500 : 			pDph_t->f0basetypes[4][15]=1720; 
; 2501 : 			pDph_t->f0basetypes[4][16]=1710; 
; 2502 : 			*/
; 2503 : #endif
; 2504 : 
; 2505 : 
; 2506 : 			
; 2507 : 
; 2508 : /*        Time since last reset of baseline fall, in frames */
; 2509 : 		pDphsettar->nframb = 0;

  0105e	66 89 5f 48	 mov	 WORD PTR [edi+72], bx

; 2510 : 
; 2511 : 		pDphsettar->basetime =0;

  01062	66 89 5f 36	 mov	 WORD PTR [edi+54], bx

; 2512 : 		pDphsettar->basecntr =0;

  01066	66 89 5f 32	 mov	 WORD PTR [edi+50], bx

; 2513 : 		pDphsettar->f0delta =0;

  0106a	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 2514 : 
; 2515 : 	
; 2516 : 
; 2517 : 		/*eab 4/11/97 Moved these variables to a proper place of initlaization*/
; 2518 : 		pDphsettar->timecos10=0; pDphsettar->timecos15=0; pDphsettar->timecosvib=0;	

  01071	66 89 9f 80 00
	00 00		 mov	 WORD PTR [edi+128], bx
  01078	66 89 9f 82 00
	00 00		 mov	 WORD PTR [edi+130], bx
  0107f	66 89 9f 84 00
	00 00		 mov	 WORD PTR [edi+132], bx

; 2519 : 	
; 2520 : /*        If within 32 ms (5 frames) of nframg, glottal stop gesture */
; 2521 : /*        is in progress */
; 2522 : 		pDphsettar->tglstp = -200;

  01086	66 c7 47 50 38
	ff		 mov	 WORD PTR [edi+80], -200	; ffffff38H

; 2523 : 			
; 2524 : /*        Set filter memory to init baseline fall (f0 in hz*10) */
; 2525 : 		/* eab 7/22/98 changed to >>1 to account for scaling of female voice*/
; 2526 : 		pDphsettar->f0las1 = (pDphsettar->f0basestart << F0SHFT)>>1;

  0108c	0f bf 8f 86 00
	00 00		 movsx	 ecx, WORD PTR [edi+134]
  01093	c1 e1 03	 shl	 ecx, 3
  01096	d1 f9		 sar	 ecx, 1
  01098	66 89 4f 58	 mov	 WORD PTR [edi+88], cx

; 2527 : 		pDphsettar->f0las2 = (pDphsettar->f0basestart << F0SHFT)>>1;
; 2528 : 		oarcnt = 0;
; 2529 : 		pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */
; 2530 : 		pDphsettar->f0slas2 = 0;
; 2531 : 		pDph_t->f0 = pDphsettar->f0basestart;
; 2532 : 		pDphsettar->tarhat = 0;
; 2533 : 		pDphsettar->tarimp = 0;
; 2534 : 		pDphsettar->delimp = 0;
; 2535 : 
; 2536 : /*      Set smoothing constants for ( critical-damped? ) 2nd-order sys  */
; 2537 : 
; 2538 : 		pDphsettar->f0a2 = pDph_t->f0_lp_filter;	/* Impulse and hat commands */
; 2539 : 		pDphsettar->f0b = FRAC_ONE - pDphsettar->f0a2;

  0109c	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  010a1	0f bf 97 86 00
	00 00		 movsx	 edx, WORD PTR [edi+134]
  010a8	c1 e2 03	 shl	 edx, 3
  010ab	d1 fa		 sar	 edx, 1
  010ad	66 89 57 5a	 mov	 WORD PTR [edi+90], dx
  010b1	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx
  010b7	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx
  010be	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx
  010c5	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]
  010cc	66 89 86 78 03
	00 00		 mov	 WORD PTR [esi+888], ax
  010d3	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx
  010d7	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx
  010db	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
  010e2	66 8b 86 a8 18
	00 00		 mov	 ax, WORD PTR [esi+6312]

; 2540 : 		pDphsettar->f0a1 = pDphsettar->f0a2 << F0SHFT;
; 2541 : 
; 2542 : 		pDphsettar->f0sa2 =  F_SEG_LOWPASS;	/* Segmental influences */
; 2543 : 
; 2544 : 		pDphsettar->f0sb = FRAC_ONE - pDphsettar->f0sa2;
; 2545 : 		pDphsettar->f0sa1 = pDphsettar->f0sa2 << F0SHFT;
; 2546 : 
; 2547 : /*      Variables  relevent only if f0mode >= SINGING */
; 2548 : 
; 2549 : 		pDphsettar->newnote = pDphsettar->f0basestart;
; 2550 : 		pDphsettar->delnote = 0;

  010e9	66 89 9f 90 00
	00 00		 mov	 WORD PTR [edi+144], bx
  010f0	2b c8		 sub	 ecx, eax
  010f2	66 89 47 60	 mov	 WORD PTR [edi+96], ax
  010f6	66 89 4f 62	 mov	 WORD PTR [edi+98], cx
  010fa	66 8b 57 60	 mov	 dx, WORD PTR [edi+96]
  010fe	66 c1 e2 03	 shl	 dx, 3
  01102	66 89 57 64	 mov	 WORD PTR [edi+100], dx
  01106	66 c7 87 a0 00
	00 00 b8 0b	 mov	 WORD PTR [edi+160], 3000 ; 00000bb8H
  0110f	66 c7 87 a2 00
	00 00 48 34	 mov	 WORD PTR [edi+162], 13384 ; 00003448H
  01118	66 8b 87 a0 00
	00 00		 mov	 ax, WORD PTR [edi+160]
  0111f	66 c1 e0 03	 shl	 ax, 3
  01123	66 89 87 a4 00
	00 00		 mov	 WORD PTR [edi+164], ax
  0112a	66 8b 8f 86 00
	00 00		 mov	 cx, WORD PTR [edi+134]
  01131	66 89 8f 8e 00
	00 00		 mov	 WORD PTR [edi+142], cx

; 2551 : 		pDphsettar->delcum = 0;

  01138	66 89 9f 92 00
	00 00		 mov	 WORD PTR [edi+146], bx

; 2552 : 		pDphsettar->f0start = pDph_t->f0;

  0113f	66 8b 96 78 03
	00 00		 mov	 dx, WORD PTR [esi+888]

; 2553 : 		pDphsettar->vibsw = 0;

  01146	66 89 9f 8c 00
	00 00		 mov	 WORD PTR [edi+140], bx
  0114d	66 89 97 94 00
	00 00		 mov	 WORD PTR [edi+148], dx

; 2554 : 
; 2555 : /*      Initialize pointer to f0 command string */
; 2556 : 
; 2557 : 		pDph_t->nf0ev = -1;

  01154	66 c7 86 2a 23
	00 00 ff ff	 mov	 WORD PTR [esi+9002], -1
  0115d	83 c9 ff	 or	 ecx, -1
$L71335:

; 2558 : 	}
; 2559 : 
; 2560 : /*    Reinit pointer and time of first f0 command if new clause */
; 2561 :     if( pDph_t->nf0ev == -1 ) 

  01160	66 39 8e 2a 23
	00 00		 cmp	 WORD PTR [esi+9002], cx
  01167	0f 85 f2 01 00
	00		 jne	 $L71503

; 2562 : 	{		
; 2563 : 		 /* Soft initialization */
; 2564 : 
; 2565 : 	pDph_t->enddrop =0;
; 2566 : /*	  Set Beginning and final frequency of baseline fall */
; 2567 : 	switch (pDph_t->clausetype)
; 2568 : 	{

  0116d	0f bf 86 c0 03
	00 00		 movsx	 eax, WORD PTR [esi+960]
  01174	83 f8 03	 cmp	 eax, 3
  01177	66 89 9e 34 23
	00 00		 mov	 WORD PTR [esi+9012], bx
  0117e	0f 87 a9 00 00
	00		 ja	 $L71353
  01184	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L71533[eax*4]
$L71341:

; 2569 : 	case 0: /*  declarative  */
; 2570 : 		if(pDph_t->number_words > 1)

  0118b	66 83 be 06 20
	00 00 01	 cmp	 WORD PTR [esi+8198], 1
  01193	7e 0e		 jle	 SHORT $L71342

; 2571 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  01195	8d 86 10 20 00
	00		 lea	 eax, DWORD PTR [esi+8208]
  0119b	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax

; 2572 : 		else

  011a1	eb 7c		 jmp	 SHORT $L71351
$L71342:

; 2573 : 			pDph_t->f0baseline = pDph_t->f0basetypes[4];

  011a3	8d 96 98 20 00
	00		 lea	 edx, DWORD PTR [esi+8344]

; 2574 : 		pDph_t->clausepos=0;
; 2575 : 		pDph_t->dcommacnt =0;
; 2576 : 			break; //BATS 704

  011a9	eb 6e		 jmp	 SHORT $L71526
$L71344:

; 2577 : 	case 1: /*  comma  First one goes up but later ones are more declarative*/
; 2578 : 			// But long ones tend to be declarative! eab 4/15/00
; 2579 : 		pDph_t->dcommacnt++;

  011ab	66 ff 86 ce 14
	00 00		 inc	 WORD PTR [esi+5326]
  011b2	66 8b 86 ce 14
	00 00		 mov	 ax, WORD PTR [esi+5326]

; 2580 : 		if(pDph_t->dcommacnt == 1)

  011b9	66 3d 01 00	 cmp	 ax, 1
  011bd	75 0e		 jne	 SHORT $L71527

; 2581 : 			pDph_t->f0baseline = pDph_t->f0basetypes[1];

  011bf	8d 86 32 20 00
	00		 lea	 eax, DWORD PTR [esi+8242]
  011c5	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax

; 2582 : 		else if(pDph_t->dcommacnt > 1)

  011cb	eb 0e		 jmp	 SHORT $L71347
$L71527:
  011cd	7e 0c		 jle	 SHORT $L71347

; 2583 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  011cf	8d 96 10 20 00
	00		 lea	 edx, DWORD PTR [esi+8208]
  011d5	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx
$L71347:

; 2584 : 		if(pDph_t->number_words > 4)

  011db	66 83 be 06 20
	00 00 04	 cmp	 WORD PTR [esi+8198], 4
  011e3	7e 48		 jle	 SHORT $L71353

; 2585 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  011e5	8d 86 10 20 00
	00		 lea	 eax, DWORD PTR [esi+8208]
  011eb	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax

; 2586 : 
; 2587 : 		break; //BATS 704

  011f1	eb 3a		 jmp	 SHORT $L71353
$L71349:

; 2588 : 		
; 2589 : 	case 2: /*  exclaimatory  */
; 2590 : 		//4/15/00 EAB short one clasify as exclamatory but long ones suffer
; 2591 : 		//from the don't know which part to emphasize problem so better devalrative.
; 2592 : 		if(pDph_t->number_words > 2)

  011f3	66 83 be 06 20
	00 00 02	 cmp	 WORD PTR [esi+8198], 2
  011fb	7e 08		 jle	 SHORT $L71350

; 2593 : 			pDph_t->f0baseline = pDph_t->f0basetypes[0];

  011fd	8d 96 10 20 00
	00		 lea	 edx, DWORD PTR [esi+8208]

; 2594 : 		else

  01203	eb 14		 jmp	 SHORT $L71526
$L71350:

; 2595 : 			pDph_t->f0baseline = pDph_t->f0basetypes[2];

  01205	8d 86 54 20 00
	00		 lea	 eax, DWORD PTR [esi+8276]
  0120b	89 86 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], eax

; 2596 : 		pDph_t->clausepos =0;
; 2597 : 		pDph_t->dcommacnt =0;
; 2598 : 		break;

  01211	eb 0c		 jmp	 SHORT $L71351
$L71352:

; 2599 : 		
; 2600 : 		
; 2601 : 
; 2602 : 	case 3: /*  question  */
; 2603 : 		pDph_t->f0baseline = pDph_t->f0basetypes[3];

  01213	8d 96 76 20 00
	00		 lea	 edx, DWORD PTR [esi+8310]
$L71526:
  01219	89 96 0c 20 00
	00		 mov	 DWORD PTR [esi+8204], edx
$L71351:

; 2604 : 		pDph_t->clausepos =0;

  0121f	66 89 9e ca 14
	00 00		 mov	 WORD PTR [esi+5322], bx

; 2605 : 		pDph_t->dcommacnt =0;

  01226	66 89 9e ce 14
	00 00		 mov	 WORD PTR [esi+5326], bx
$L71353:

; 2606 : 		break;
; 2607 : 
; 2608 : 	default:
; 2609 : 
; 2610 : 		break;
; 2611 : 
; 2612 : 
; 2613 : 	}
; 2614 : 	/*	  Set Beginning and final frequency of baseline fall */
; 2615 : 		pDphsettar->f0basestart = pDph_t->f0baseline[0];

  0122d	8b 86 0c 20 00
	00		 mov	 eax, DWORD PTR [esi+8204]
  01233	66 8b 10	 mov	 dx, WORD PTR [eax]
  01236	66 89 97 86 00
	00 00		 mov	 WORD PTR [edi+134], dx

; 2616 : 	
; 2617 : 		pDphsettar->f0endfall = pDph_t->f0baseline[16];

  0123d	8b 86 0c 20 00
	00		 mov	 eax, DWORD PTR [esi+8204]
  01243	66 8b 50 20	 mov	 dx, WORD PTR [eax+32]
  01247	66 89 97 8a 00
	00 00		 mov	 WORD PTR [edi+138], dx

; 2618 : 
; 2619 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 2620 : 	    pDphsettar->endfall = pDphsettar->f0endfall;
; 2621 : 
; 2622 : 			
; 2623 : 
; 2624 : 
; 2625 : 
; 2626 : 		oarcnt=0;

  0124e	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2627 : 
; 2628 : 	
; 2629 : 
; 2630 : 
; 2631 : #ifdef SPANISH
; 2632 : 		if (pDph_t->special_phrase == 1)
; 2633 : 		{
; 2634 : 			pDphsettar->beginfall = pDphsettar->f0basestart - 50 + pDph_t->delta_special;
; 2635 : 			pDphsettar->endfall = pDphsettar->f0endfall - 100; /* lastf0-(f0basefall>>1); */
; 2636 : 			pDph_t->special_phrase = 0; 
; 2637 : 		}
; 2638 : 		else
; 2639 : 		{
; 2640 : 			pDphsettar->lastbase=pDphsettar->f0basestart<<2;
; 2641 : 			pDphsettar->beginfall = pDphsettar->f0basestart;
; 2642 : 			pDphsettar->endfall = pDphsettar->f0endfall;
; 2643 : 		}
; 2644 : #else
; 2645 : 		
; 2646 : 		pDphsettar->lastbase=pDphsettar->f0basestart<<2;

  01254	66 8b 87 86 00
	00 00		 mov	 ax, WORD PTR [edi+134]

; 2647 : 		pDphsettar->beginfall = pDphsettar->f0basestart;
; 2648 : 		pDphsettar->endfall = pDphsettar->f0endfall;
; 2649 : 		
; 2650 : #ifdef DEBUGF0
; 2651 : 			WINprintf ("At newpar sw %d %d	beginfall and endfall \n", pDphsettar->beginfall, pDphsettar->endfall);
; 2652 : #endif
; 2653 : 	
; 2654 : #endif
; 2655 : 	    pDphsettar->nframb = 0;

  0125b	66 89 5f 48	 mov	 WORD PTR [edi+72], bx
  0125f	66 89 47 6e	 mov	 WORD PTR [edi+110], ax

; 2656 : 		pDphsettar->basetime=0;

  01263	66 89 5f 36	 mov	 WORD PTR [edi+54], bx
  01267	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  0126e	66 8b 87 8a 00
	00 00		 mov	 ax, WORD PTR [edi+138]

; 2657 : 		pDphsettar->basecntr =0;

  01275	66 89 5f 32	 mov	 WORD PTR [edi+50], bx
  01279	66 89 57 72	 mov	 WORD PTR [edi+114], dx
  0127d	66 89 47 7a	 mov	 WORD PTR [edi+122], ax

; 2658 : 		pDphsettar->f0delta =0;

  01281	66 89 9f 9c 00
	00 00		 mov	 WORD PTR [edi+156], bx

; 2659 : 		pDph_t->special_phrase = 0;

  01288	66 89 9e cc 2b
	00 00		 mov	 WORD PTR [esi+11212], bx

; 2660 : 		oarcnt=0;

  0128f	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2661 : /*	  Raise baseline for first sentence of a paragraph */
; 2662 : 	    if (pDph_t->newparagsw != FALSE) 

  01295	38 9e 72 17 00
	00		 cmp	 BYTE PTR [esi+6002], bl
  0129b	74 10		 je	 SHORT $L71354

; 2663 : 		{
; 2664 : 		pDphsettar->beginfall += 120;

  0129d	66 83 47 6e 78	 add	 WORD PTR [edi+110], 120	; 00000078H

; 2665 : 		pDphsettar->endfall += 70;

  012a2	66 83 47 7a 46	 add	 WORD PTR [edi+122], 70	; 00000046H

; 2666 : 		pDph_t->newparagsw = FALSE;

  012a7	88 9e 72 17 00
	00		 mov	 BYTE PTR [esi+6002], bl
$L71354:

; 2667 : 	    }
; 2668 : 
; 2669 : /*        Time between 0 and first  f0 command, in frames */
; 2670 :             pDphsettar->dtimf0 = pDph_t->f0tim[0];

  012ad	66 8b 96 ba 20
	00 00		 mov	 dx, WORD PTR [esi+8378]

; 2671 : /*         Pointer into dur and phone arrays */
; 2672 :             pDphsettar->np_drawt0 = -1;

  012b4	66 89 4f 74	 mov	 WORD PTR [edi+116], cx
  012b8	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 2673 :             pDphsettar->npg = -1;

  012bc	66 89 4f 76	 mov	 WORD PTR [edi+118], cx

; 2674 :             pDph_t->nf0ev = 0;

  012c0	66 89 9e 2a 23
	00 00		 mov	 WORD PTR [esi+9002], bx

; 2675 : 
; 2676 : 
; 2677 : 
; 2678 : 			/*        Time since last f0 command, in frames */
; 2679 : 
; 2680 : /* INITIALIZE NFRAM TO DELAY THROUGH FILTER THIS USED TO BE IN AND WAS NOT IN
; 2681 :  88 STUFF BUT IS REALLY NEEDED*/
; 2682 : 				oarcnt=0;

  012c7	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2683 : 		pDphsettar->nframs = 0;
; 2684 : 		pDphsettar->nfram =  0;
; 2685 :         pDphsettar->nframg = 0;
; 2686 :  /*eab 0 works much better 
; 2687 :  6- ((pDph_t->f0_lp_filter-1300)>>8);*/
; 2688 :  
; 2689 : 	    if (pDph_t->f0mode< SINGING) 
; 2690 : 		{
; 2691 : 			pDphsettar->nfram = pDphsettar->nframs >> 1;
; 2692 : 	    }
; 2693 : 	    else 
; 2694 : 		{
; 2695 : 			pDphsettar->nfram = 0;	/* Start note slightly early if singing */
; 2696 : 	    }
; 2697 : 
; 2698 : 
; 2699 : 		
; 2700 : 
; 2701 : 
; 2702 : /* Time since beginning of cur phonetic segment, in frames */
; 2703 : 	/* eab 7/22/98 changed to >>1 to account for scaling of female voice*/
; 2704 : 		pDphsettar->f0las1 = (pDphsettar->f0basestart << F0SHFT)>>1;

  012cd	0f bf 87 86 00
	00 00		 movsx	 eax, WORD PTR [edi+134]
  012d4	c1 e0 03	 shl	 eax, 3
  012d7	d1 f8		 sar	 eax, 1
  012d9	66 89 47 58	 mov	 WORD PTR [edi+88], ax
  012dd	66 89 5f 46	 mov	 WORD PTR [edi+70], bx

; 2705 : 		pDphsettar->f0las2 = (pDphsettar->f0basestart << F0SHFT)>>1;

  012e1	0f bf 8f 86 00
	00 00		 movsx	 ecx, WORD PTR [edi+134]
  012e8	c1 e1 03	 shl	 ecx, 3
  012eb	d1 f9		 sar	 ecx, 1
  012ed	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx
  012f1	66 89 5f 4c	 mov	 WORD PTR [edi+76], bx
  012f5	66 89 5f 46	 mov	 WORD PTR [edi+70], bx
  012f9	66 89 4f 5a	 mov	 WORD PTR [edi+90], cx

; 2706 : 		//pDphsettar->f0las1 = pDphsettar->f0basestart << F0SHFT;
; 2707 :         //pDphsettar->f0las2 = pDphsettar->f0basestart << F0SHFT;
; 2708 : 			oarcnt=0;

  012fd	89 1d 00 00 00
	00		 mov	 DWORD PTR _oarcnt, ebx

; 2709 : 	    pDphsettar->f0slas1 = 0;	/* Segmental filter avg output is zero */

  01303	66 89 9f 98 00
	00 00		 mov	 WORD PTR [edi+152], bx

; 2710 : 	    pDphsettar->f0slas2 = 0;

  0130a	66 89 9f 9a 00
	00 00		 mov	 WORD PTR [edi+154], bx

; 2711 :         pDph_t->f0 = pDphsettar->f0basestart;

  01311	66 8b 97 86 00
	00 00		 mov	 dx, WORD PTR [edi+134]
  01318	66 89 96 78 03
	00 00		 mov	 WORD PTR [esi+888], dx

; 2712 :         pDphsettar->nframs = 0;		

  0131f	66 89 5f 4a	 mov	 WORD PTR [edi+74], bx

; 2713 : 		/* Used in computing segmental effects */
; 2714 : 
; 2715 : 	
; 2716 : /*        Extra time, in frames, used to delay or advance f0 gesture assoc. */
; 2717 : /*        with a particular segment, e.g. at delayed vot, or anticipate in V-V */
; 2718 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS; /* Start gesture toward next seg early */

  01323	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH

; 2719 : /*        Duration of current segment, in frames */
; 2720 :             pDphsettar->segdur = 0;

  01329	66 89 5f 54	 mov	 WORD PTR [edi+84], bx

; 2721 :             pDphsettar->segdrg = 0;

  0132d	66 89 5f 56	 mov	 WORD PTR [edi+86], bx

; 2722 : 			pDph_t->lastallo=0;

  01331	66 89 9e 02 20
	00 00		 mov	 WORD PTR [esi+8194], bx

; 2723 : 			pDph_t->keepallo=0;

  01338	66 89 9e 00 20
	00 00		 mov	 WORD PTR [esi+8192], bx

; 2724 : #ifdef GFAPHF0
; 2725 : 			pDph_t->lastone=-1;
; 2726 : 			pDph_t->keepdur=0;
; 2727 : #endif
; 2728 : 			pDph_t->glotalize =0;

  0133f	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 2729 : 			pDphsettar->glide_step=0;

  01346	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 2730 : 			pDphsettar->glide_tot=0;

  0134a	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 2731 : 			pDphsettar->glide_inc =0;

  0134e	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 2732 : /*	  Must be at bottom of hat */
; 2733 : 	    pDphsettar->tarhat = 0;	    /* should be anyway, except for emergency halt */

  01352	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 2734 : 		pDph_t->addjit = 305;

  01356	66 c7 86 c2 03
	00 00 31 01	 mov	 WORD PTR [esi+962], 305	; 00000131H
$L71503:

; 2735 : 
; 2736 : 		
; 2737 :         }
; 2738 : /*    End of initialization */
; 2739 : 
; 2740 : 
; 2741 : 
; 2742 : /*  See if new f0 commands issued					*/
; 2743 : /*    To get f0 commands to occur at right times, need to take		*/
; 2744 : /*    into account delay introduced by low-pass filter. Response to	*/
; 2745 : /*    a step command begins xx frames earlier than f0time[] request	*/
; 2746 : /*    so f0 gets half-way to target at nominal step onset time		*/
; 2747 : 
; 2748 :         while ((pDphsettar->nfram >= pDphsettar->dtimf0) && 
; 2749 : 			(pDph_t->nf0ev < pDph_t->nf0tot)) 

  0135f	66 8b 4f 46	 mov	 cx, WORD PTR [edi+70]
  01363	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  01367	66 3b ca	 cmp	 cx, dx
  0136a	0f 8c 70 01 00
	00		 jl	 $L71359
$L71358:
  01370	66 8b ae 2a 23
	00 00		 mov	 bp, WORD PTR [esi+9002]
  01377	66 3b ae 2c 23
	00 00		 cmp	 bp, WORD PTR [esi+9004]
  0137e	0f 8d 5c 01 00
	00		 jge	 $L71359

; 2750 : 		{
; 2751 : 
; 2752 :             pDphsettar->f0command = pDph_t->f0tar[pDph_t->nf0ev];	/* New target f0 */

  01384	0f bf ed	 movsx	 ebp, bp
  01387	8d 47 38	 lea	 eax, DWORD PTR [edi+56]

; 2753 : 			pDphsettar->type = pDph_t->f0type[pDph_t->nf0ev];
; 2754 :             pDphsettar->nfram -= pDphsettar->dtimf0;

  0138a	2b ca		 sub	 ecx, edx
  0138c	66 8b ac 6e ba
	18 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6330]
  01394	66 89 28	 mov	 WORD PTR [eax], bp
  01397	0f bf ae 2a 23
	00 00		 movsx	 ebp, WORD PTR [esi+9002]
  0139e	66 8b ac 6e 26
	1b 00 00	 mov	 bp, WORD PTR [esi+ebp*2+6950]
  013a6	66 89 4f 46	 mov	 WORD PTR [edi+70], cx
  013aa	66 89 6f 40	 mov	 WORD PTR [edi+64], bp

; 2755 : 				/* eab 1/10/98 added length parameter*/
; 2756 : 			pDphsettar->length = pDph_t->f0length[pDph_t->nf0ev];

  013ae	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  013b5	66 8b 94 4e 92
	1d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+7570]
  013bd	66 89 57 42	 mov	 WORD PTR [edi+66], dx

; 2757 : 
; 2758 : 	    if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  013c1	66 83 be 74 17
	00 00 06	 cmp	 WORD PTR [esi+6004], 6
  013c9	75 29		 jne	 SHORT $L71360

; 2759 : 	        pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  013cb	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  013d2	66 8b 94 4e ba
	20 00 00	 mov	 dx, WORD PTR [esi+ecx*2+8378]
  013da	66 89 57 66	 mov	 WORD PTR [edi+102], dx

; 2760 : 		pDph_t->nf0ev++;

  013de	66 ff 86 2a 23
	00 00		 inc	 WORD PTR [esi+9002]
$L71366:

; 2761 : 		set_user_target(pDph_t,&pDphsettar->f0command);

  013e5	50		 push	 eax
  013e6	56		 push	 esi
  013e7	e8 00 00 00 00	 call	 _set_user_target
  013ec	83 c4 08	 add	 esp, 8

; 2762 : 	    }
; 2763 : 	    else {

  013ef	e9 db 00 00 00	 jmp	 $L71363
$L71360:

; 2764 : 		pDph_t->nf0ev++;	/* Achieve target at next time */

  013f4	66 ff 86 2a 23
	00 00		 inc	 WORD PTR [esi+9002]

; 2765 : 	    pDphsettar->dtimf0 = pDph_t->f0tim[pDph_t->nf0ev];

  013fb	0f bf 8e 2a 23
	00 00		 movsx	 ecx, WORD PTR [esi+9002]
  01402	66 8b 94 4e ba
	20 00 00	 mov	 dx, WORD PTR [esi+ecx*2+8378]

; 2766 : 		switch(pDphsettar->type)
; 2767 : 		{

  0140a	0f bf 4f 40	 movsx	 ecx, WORD PTR [edi+64]
  0140e	83 f9 05	 cmp	 ecx, 5
  01411	66 89 57 66	 mov	 WORD PTR [edi+102], dx
  01415	0f 87 b4 00 00
	00		 ja	 $L71363
  0141b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $L71534[ecx*4]
$L71367:

; 2768 : 		case USER: /*user specified f0 target*/
; 2769 : 			set_user_target(pDph_t,&pDphsettar->f0command);
; 2770 : 			break;
; 2771 : 
; 2772 : 		case F0_RESET: /* f0 reset*/
; 2773 : 
; 2774 : 			 pDphsettar->tarhat = 0;		/* Go to bottom of hat pattern 

  01422	66 89 5f 5c	 mov	 WORD PTR [edi+92], bx

; 2775 : 												and for UK init glide, note glide is not ifdefed _uk becuase
; 2776 : 											it is a command we ant to allow others to use*/
; 2777 : 			 pDph_t->glotalize =0;

  01426	66 89 9e 3a 23
	00 00		 mov	 WORD PTR [esi+9018], bx

; 2778 : 			 pDphsettar->glide_step=0;

  0142d	66 89 5f 3a	 mov	 WORD PTR [edi+58], bx

; 2779 : 			 pDphsettar->glide_tot=0;

  01431	66 89 5f 3e	 mov	 WORD PTR [edi+62], bx

; 2780 : 			 pDphsettar->glide_inc=0;

  01435	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx

; 2781 : 			 break;

  01439	e9 91 00 00 00	 jmp	 $L71363
$L71368:

; 2782 : 		case STEP:
; 2783 : #ifdef ENGLISH_UK
; 2784 : 			break;
; 2785 : #endif
; 2786 :              pDphsettar->tarhat += pDphsettar->f0command;

  0143e	66 8b 00	 mov	 ax, WORD PTR [eax]
  01441	66 01 47 5c	 add	 WORD PTR [edi+92], ax

; 2787 : 			/* Command is a step, reset pDphsettar->tarhat */
; 2788 : 
; 2789 : 			if (pDphsettar->f0command < 0) 

  01445	66 3b c3	 cmp	 ax, bx
  01448	7d 13		 jge	 SHORT $L71369

; 2790 : 			{	/* Cancel previous impulse if step */
; 2791 : 					/* is of opposite sign */
; 2792 : 				if (pDphsettar->tarimp > 0) 

  0144a	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  0144e	7e 7f		 jle	 SHORT $L71363

; 2793 : 				{   
; 2794 : 					pDphsettar->tarimp = 0;

  01450	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 2795 : 					pDphsettar->delimp = 0;

  01454	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 2796 : 				}
; 2797 :             }
; 2798 : 			else

  0145b	eb 72		 jmp	 SHORT $L71363
$L71369:

; 2799 : 			{
; 2800 : 				if (pDphsettar->tarimp < 0) 

  0145d	66 39 5f 5e	 cmp	 WORD PTR [edi+94], bx
  01461	7d 6c		 jge	 SHORT $L71363

; 2801 : 				{
; 2802 : 					pDphsettar->tarimp = 0;

  01463	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 2803 : 					pDphsettar->delimp = 0;

  01467	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx

; 2804 : 				}
; 2805 : 			}
; 2806 : 			break;

  0146e	eb 5f		 jmp	 SHORT $L71363
$L71373:

; 2807 : 		case GLIDE:/* eab 1/10/98 work in progress */
; 2808 : 				
; 2809 : 			pDphsettar->glide_step = pDphsettar->f0command;

  01470	66 8b 00	 mov	 ax, WORD PTR [eax]

; 2810 : 			pDphsettar->glide_inc =(pDphsettar->glide_step/pDphsettar->length);

  01473	0f bf 4f 42	 movsx	 ecx, WORD PTR [edi+66]
  01477	66 89 47 3a	 mov	 WORD PTR [edi+58], ax
  0147b	0f bf c0	 movsx	 eax, ax
  0147e	99		 cdq
  0147f	f7 f9		 idiv	 ecx
  01481	66 89 47 3c	 mov	 WORD PTR [edi+60], ax

; 2811 : 			
; 2812 : 			break;

  01485	eb 48		 jmp	 SHORT $L71363
$L71374:

; 2813 : 			
; 2814 : 		case GLOTAL:
; 2815 : #ifdef ENGLISH_UK
; 2816 : 			break;
; 2817 : #endif
; 2818 : 			pDph_t->enddrop= -pDphsettar->f0command;

  01487	66 8b 10	 mov	 dx, WORD PTR [eax]

; 2819 : 			pDph_t->glotalize =1;

  0148a	66 c7 86 3a 23
	00 00 01 00	 mov	 WORD PTR [esi+9018], 1
  01493	66 f7 da	 neg	 dx
  01496	66 89 96 34 23
	00 00		 mov	 WORD PTR [esi+9012], dx

; 2820 : 			break; //BATS 704	

  0149d	eb 30		 jmp	 SHORT $L71363
$L71375:

; 2821 : 		case IMPULSE:
; 2822 : 
; 2823 : 				/* Odd, command is impulse  */
; 2824 : /*	          Impulse realized as 24-frame "step plus ramp" from f0command */
; 2825 : /*	          to three times focommand */
; 2826 : 					/* eab old ocde used to have an impulse as a 2*f0command that would be realized as an 
; 2827 : 					16 frame wide pulse. This new scheme proposed by Dennis Klatt uses 
; 2828 : 					imp=f0command+(f0command _ f0command>>4 meaning it will take 16 farmes to
; 2829 : 					reach double height. The old one never reached target so this new approach I think 
; 2830 : 					presently has two problems it's dealyed too much and it lasts too long causing higher f0 values
; 2831 : 					and more percieved effect. I want to try it differently starting out close to the old code with a pulse command that 
; 2832 : 					trails off.
; 2833 : 					with a downward slope think of it as a rectangular pulse with a triangle placed on
; 2834 : 					top instead of a second rectangular pulse- by the way it's not working correctly at
; 2835 : 					the moment*/
; 2836 : 			pDphsettar->tarimp = pDphsettar->f0command<<1;

  0149f	66 8b 00	 mov	 ax, WORD PTR [eax]
  014a2	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 2837 : 			
; 2838 : 			pDphsettar->delimp = pDphsettar->f0command>>2;

  014a5	66 c1 f8 02	 sar	 ax, 2
  014a9	66 89 4f 5e	 mov	 WORD PTR [edi+94], cx
  014ad	66 89 87 9e 00
	00 00		 mov	 WORD PTR [edi+158], ax

; 2839 : 			// pDphsettar->nimp = 24 - ((pDph_t->f0_lp_filter-1300)>>8);
; 2840 : 			pDphsettar->nimp = 20 - ((pDph_t->f0_lp_filter-1300)>>8);

  014b4	0f bf 96 a8 18
	00 00		 movsx	 edx, WORD PTR [esi+6312]
  014bb	81 ea 14 05 00
	00		 sub	 edx, 1300		; 00000514H
  014c1	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  014c6	c1 fa 08	 sar	 edx, 8
  014c9	2b c2		 sub	 eax, edx
  014cb	66 89 47 78	 mov	 WORD PTR [edi+120], ax
$L71363:
  014cf	66 8b 4f 46	 mov	 cx, WORD PTR [edi+70]
  014d3	66 8b 57 66	 mov	 dx, WORD PTR [edi+102]
  014d7	66 3b ca	 cmp	 cx, dx
  014da	0f 8d 90 fe ff
	ff		 jge	 $L71358
$L71359:

; 2841 : 			break;
; 2842 : 
; 2843 : 		}
; 2844 : 		}
; 2845 : 		
; 2846 : 		
; 2847 :             
; 2848 : 
; 2849 : /*        Loop back to look for more f0 commands */
; 2850 :         }
; 2851 : #ifdef  ENDDROP
; 2852 : 			/*EAB Drop pitch rapidly at  end of utterance
; 2853 : 		enddrop now reflects pitch dropoff at end of utterance and not final creek
; 2854 : 		hence the removal of the tcumdur stuff
; 2855 : 		9/19/97 */
; 2856 : 		if(  pDph_t->enddrop 
; 2857 : 			&& pDph_t->glotalize  && pDph_t->number_words >= 3)
; 2858 : 		{
; 2859 : 			 if(pDphsettar->tarbas > 500)
; 2860 : 			 {
; 2861 : 				 pDph_t->enddrop += pDph_t->enddrop>>1;
; 2862 : 			 }
; 2863 : 
; 2864 : 		}
; 2865 : 
; 2866 : #endif
; 2867 : 					
; 2868 : 
; 2869 : 
; 2870 : 
; 2871 : 
; 2872 : 		/* 8/96 eab have baseline follow profile in basline array*/
; 2873 : 		/* since we use nframb <<4 and array is 16 then stepsize == tcumdur*16/16
; 2874 : 		This code works by starting from a base value and then a difference bewteeen where we are
; 2875 : 		and where we want to be is done modulo sixteen, The lastbase keeps the acutal position,
; 2876 : 		we don't enforce the values int he code but targets them over time. F0delta is a cumulative
; 2877 : 		offset since hte last synchro point i.e. every sixteen */
; 2878 : 		if(pDphsettar->nframb<<4 >= pDphsettar->basetime)

  014e0	66 8b 47 36	 mov	 ax, WORD PTR [edi+54]
  014e4	0f bf 4f 48	 movsx	 ecx, WORD PTR [edi+72]
  014e8	0f bf d0	 movsx	 edx, ax
  014eb	c1 e1 04	 shl	 ecx, 4
  014ee	3b ca		 cmp	 ecx, edx
  014f0	7c 47		 jl	 SHORT $L71378

; 2879 : 		{
; 2880 : 					
; 2881 : 			pDphsettar->basestep=(pDphsettar->lastbase>>2)-pDph_t->f0baseline[pDphsettar->basecntr+1];

  014f2	0f bf 4f 32	 movsx	 ecx, WORD PTR [edi+50]
  014f6	66 8b 6f 72	 mov	 bp, WORD PTR [edi+114]
  014fa	8b 96 0c 20 00
	00		 mov	 edx, DWORD PTR [esi+8204]
  01500	66 c1 fd 02	 sar	 bp, 2
  01504	66 2b 6c 4a 02	 sub	 bp, WORD PTR [edx+ecx*2+2]
  01509	66 89 6f 34	 mov	 WORD PTR [edi+52], bp

; 2882 : 		/*WINprintf("pos %d target %d step %d bas %d act %d \n",pDphsettar->basecntr,
; 2883 : 		pDph_t->f0baseline[pDphsettar->basecntr], pDphsettar->basestep, pDphsettar->lastbase,
; 2884 : 		pDphsettar->tarbas);*/
; 2885 : 			pDphsettar->basetime += pDph_t->tcumdur;

  0150d	66 03 86 28 23
	00 00		 add	 ax, WORD PTR [esi+9000]
  01514	66 89 47 36	 mov	 WORD PTR [edi+54], ax

; 2886 : 			if(pDphsettar->basecntr <=15)

  01518	66 8b 47 32	 mov	 ax, WORD PTR [edi+50]
  0151c	66 3d 0f 00	 cmp	 ax, 15			; 0000000fH
  01520	7f 05		 jg	 SHORT $L71377

; 2887 : 			{
; 2888 : 				pDphsettar->basecntr++;

  01522	40		 inc	 eax
  01523	66 89 47 32	 mov	 WORD PTR [edi+50], ax
$L71377:

; 2889 : 				 
; 2890 : 			}
; 2891 : 		if (pDph_t->tcumdur == 0)	pDph_t->tcumdur = 1;

  01527	66 39 9e 28 23
	00 00		 cmp	 WORD PTR [esi+9000], bx
  0152e	75 09		 jne	 SHORT $L71378
  01530	66 c7 86 28 23
	00 00 01 00	 mov	 WORD PTR [esi+9000], 1
$L71378:

; 2892 : 
; 2893 : 
; 2894 : 	
; 2895 : 		
; 2896 : 		}
; 2897 : 		
; 2898 : 
; 2899 : 		pDphsettar->f0delta =pDphsettar->basestep<<6;

  01539	66 8b 47 34	 mov	 ax, WORD PTR [edi+52]
  0153d	66 c1 e0 06	 shl	 ax, 6
  01541	66 89 87 9c 00
	00 00		 mov	 WORD PTR [edi+156], ax

; 2900 : 		pDphsettar->lastbase -= (((pDphsettar->f0delta)/pDph_t->tcumdur));

  01548	0f bf 8e 28 23
	00 00		 movsx	 ecx, WORD PTR [esi+9000]
  0154f	0f bf c0	 movsx	 eax, ax
  01552	99		 cdq
  01553	f7 f9		 idiv	 ecx
  01555	66 29 47 72	 sub	 WORD PTR [edi+114], ax

; 2901 : 
; 2902 : 
; 2903 : 			
; 2904 : 		if(	pDphsettar->tarbas > 500)

  01559	66 81 bf 96 00
	00 00 f4 01	 cmp	 WORD PTR [edi+150], 500	; 000001f4H
  01562	66 8b 47 72	 mov	 ax, WORD PTR [edi+114]
  01566	7e 2e		 jle	 SHORT $L71379

; 2905 : 		{
; 2906 : 			/* Pitch falls are less pronounced for some speakers 
; 2907 : 						 * to reduce impression of assertive personality */
; 2908 : 				pDph_t->scaled_enddrop= frac4mul ( pDph_t->enddrop, pDph_t->assertiveness);

  01568	0f bf 86 34 23
	00 00		 movsx	 eax, WORD PTR [esi+9012]
  0156f	0f bf 96 a6 18
	00 00		 movsx	 edx, WORD PTR [esi+6310]
  01576	0f af c2	 imul	 eax, edx
  01579	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0157c	66 89 86 38 23
	00 00		 mov	 WORD PTR [esi+9016], ax

; 2909 : 				pDphsettar->tarbas = (pDphsettar->lastbase>>2)-pDph_t->scaled_enddrop;

  01583	66 8b 4f 72	 mov	 cx, WORD PTR [edi+114]
  01587	66 c1 f9 02	 sar	 cx, 2
  0158b	2b c8		 sub	 ecx, eax
  0158d	66 89 8f 96 00
	00 00		 mov	 WORD PTR [edi+150], cx

; 2910 : 		}
; 2911 : 		else

  01594	eb 0b		 jmp	 SHORT $L71381
$L71379:

; 2912 : 				pDphsettar->tarbas = pDphsettar->lastbase>>2;

  01596	66 c1 f8 02	 sar	 ax, 2
  0159a	66 89 87 96 00
	00 00		 mov	 WORD PTR [edi+150], ax
$L71381:

; 2913 : 	
; 2914 : 
; 2915 :   //WINprintf("dur %d pDphsettar->tarbas %d phon %d \n",pDphsettar->basetime,pDphsettar->tarbas,pDph_t->allophons[pDphsettar->np_drawt0]);
; 2916 : 
; 2917 : 	pDphsettar->nframb++;

  015a1	66 ff 47 48	 inc	 WORD PTR [edi+72]

; 2918 : 
; 2919 : 
; 2920 : 
; 2921 : 
; 2922 : /*    Impulse duration fixed at 24 frames, count down to zero */
; 2923 : /*    (actually, duration is function of speaker def par "quickness" */
; 2924 : 
; 2925 :         if (--pDphsettar->nimp < 0) {

  015a5	66 ff 4f 78	 dec	 WORD PTR [edi+120]
  015a9	66 39 5f 78	 cmp	 WORD PTR [edi+120], bx
  015ad	7d 0b		 jge	 SHORT $L71382

; 2926 : 	    pDphsettar->tarimp = 0;

  015af	66 89 5f 5e	 mov	 WORD PTR [edi+94], bx

; 2927 : 	    pDphsettar->delimp = 0;

  015b3	66 89 9f 9e 00
	00 00		 mov	 WORD PTR [edi+158], bx
$L71382:

; 2928 : 	}
; 2929 : 
; 2930 : 
; 2931 : /*    Segmental effect on f0, reset pDphsettar->tarseg if time exceeds cum dur */
; 2932 : 
; 2933 :         if ((pDphsettar->nframs >= (pDphsettar->segdur + pDphsettar->extrad)) 
; 2934 : 			&& (pDphsettar->np_drawt0 < (pDph_t->nallotot-1))) {

  015ba	66 8b 47 54	 mov	 ax, WORD PTR [edi+84]
  015be	66 8b 4f 4a	 mov	 cx, WORD PTR [edi+74]
  015c2	0f bf d0	 movsx	 edx, ax
  015c5	0f bf 47 4e	 movsx	 eax, WORD PTR [edi+78]
  015c9	03 d0		 add	 edx, eax
  015cb	0f bf c1	 movsx	 eax, cx
  015ce	3b c2		 cmp	 eax, edx
  015d0	0f 8c e2 00 00
	00		 jl	 $L71391
  015d6	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  015da	0f bf 96 e2 14
	00 00		 movsx	 edx, WORD PTR [esi+5346]
  015e1	0f bf e8	 movsx	 ebp, ax
  015e4	4a		 dec	 edx
  015e5	3b ea		 cmp	 ebp, edx
  015e7	0f 8d cb 00 00
	00		 jge	 $L71391

; 2935 : 		
; 2936 : 			pDphsettar->nframs -= pDphsettar->segdur;

  015ed	66 8b 57 54	 mov	 dx, WORD PTR [edi+84]
  015f1	2b ca		 sub	 ecx, edx

; 2937 :             pDphsettar->segdur = pDph_t->allodurs[++pDphsettar->np_drawt0];

  015f3	40		 inc	 eax
  015f4	66 89 4f 4a	 mov	 WORD PTR [edi+74], cx
  015f8	66 89 47 74	 mov	 WORD PTR [edi+116], ax
  015fc	0f bf c8	 movsx	 ecx, ax

; 2938 :             pDphsettar->phocur = pDph_t->allophons[pDphsettar->np_drawt0];
; 2939 : 				/* EAB Found long standing bug-- due to the compensation for the delay through the filters
; 2940 : 			the first phoneme is getting cheated on duration */
; 2941 : 			if(pDphsettar->np_drawt0 == 1)

  015ff	66 3d 01 00	 cmp	 ax, 1
  01603	66 8b 94 4e 78
	0d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+3448]
  0160b	66 89 57 54	 mov	 WORD PTR [edi+84], dx
  0160f	66 8b 94 4e c6
	03 00 00	 mov	 dx, WORD PTR [esi+ecx*2+966]
  01617	66 89 57 44	 mov	 WORD PTR [edi+68], dx
  0161b	75 06		 jne	 SHORT $L71384

; 2942 : 			{
; 2943 : 				 pDphsettar->nframs = -DELAY_SEG_LOWPASS;

  0161d	66 c7 47 4a fd
	ff		 mov	 WORD PTR [edi+74], -3	; fffffffdH
$L71384:

; 2944 : 			}
; 2945 : 			
; 2946 :             if (pDphsettar->np_drawt0 < pDph_t->nallotot)  

  01623	66 3b 86 e2 14
	00 00		 cmp	 ax, WORD PTR [esi+5346]
  0162a	7d 0c		 jge	 SHORT $L71385

; 2947 : 					pDphsettar->phonex_drawt0 = pDph_t->allophons[pDphsettar->np_drawt0+1];

  0162c	66 8b 84 4e c8
	03 00 00	 mov	 ax, WORD PTR [esi+ecx*2+968]
  01634	66 89 47 68	 mov	 WORD PTR [edi+104], ax
$L71385:

; 2948 : 		
; 2949 : 
; 2950 : /*        Set next f0 segmental incremental target */
; 2951 : 
; 2952 : 	   // f0seg = pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[phocur].f0segtars;
; 2953 : 	f0seg = f0fsegtars[pDphsettar->phocur];

  01638	0f bf 47 44	 movsx	 eax, WORD PTR [edi+68]
  0163c	d1 e0		 shl	 eax, 1
  0163e	66 8b 90 00 00
	00 00		 mov	 dx, WORD PTR _f0fsegtars[eax]
  01645	89 54 24 10	 mov	 DWORD PTR _f0seg$[esp+24], edx

; 2954 : /*	  Effect is half as much in unstressed segments */
; 2955 : #ifndef GERMAN /*The Fstress marker isn't valid for the hwole segment so this is wrong as ften as right
; 2956 : 	I need time to sort out what Fstress etc should really be doing*/
; 2957 : 	    if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  01649	8a 94 8e 34 06
	00 00		 mov	 dl, BYTE PTR [esi+ecx*4+1588]
  01650	f6 c2 03	 test	 dl, 3

; 2958 : 		f0seg = f0seg >> 1;

  01653	66 8b 54 24 10	 mov	 dx, WORD PTR _f0seg$[esp+24]
  01658	75 03		 jne	 SHORT $L71386
  0165a	66 d1 fa	 sar	 dx, 1
$L71386:

; 2959 : 	    }
; 2960 : #endif
; 2961 :             pDphsettar->extrad = -DELAY_SEG_LOWPASS;	/* Assume like V-V trans */
; 2962 : 						/* so start new target early */
; 2963 : /*        Delay start of f0 rise for upcoming voiceless segment until boundary */
; 2964 :             if ((featb[pDphsettar->phonex_drawt0] & FVOICD) IS_MINUS) {

  0165d	0f bf 6f 68	 movsx	 ebp, WORD PTR [edi+104]
  01661	66 c7 47 4e fd
	ff		 mov	 WORD PTR [edi+78], -3	; fffffffdH
  01667	f6 04 6d 00 00
	00 00 02	 test	 BYTE PTR _featb[ebp*2], 2
  0166f	75 04		 jne	 SHORT $L71387

; 2965 :                 pDphsettar->extrad = 0;			/* All of rise during voicless */

  01671	66 89 5f 4e	 mov	 WORD PTR [edi+78], bx
$L71387:

; 2966 :             }
; 2967 : /*        Delay f0 fall from voiceless plosive until vot (when glottis closes)*/
; 2968 :         if ((featb[pDphsettar->phocur] & FVOICD) IS_MINUS) 

  01675	f6 80 00 00 00
	00 02		 test	 BYTE PTR _featb[eax], 2
  0167c	75 32		 jne	 SHORT $L71388

; 2969 : 		{	
; 2970 : 			pDphsettar->tarseg1 = f0seg;  /* Gesture fast, go to only 1 lpfilter */

  0167e	66 89 57 6c	 mov	 WORD PTR [edi+108], dx

; 2971 : 			pDphsettar->tarseg = 0;

  01682	66 89 5f 6a	 mov	 WORD PTR [edi+106], bx

; 2972 : 			pDphsettar->extrad = 1;	/* -V fric, fall starts at voicing onset */

  01686	66 c7 47 4e 01
	00		 mov	 WORD PTR [edi+78], 1

; 2973 : 	        if ((featb[pDphsettar->phocur] & FPLOSV) IS_PLUS) {

  0168c	8a 90 00 00 00
	00		 mov	 dl, BYTE PTR _featb[eax]
  01692	f6 c2 40	 test	 dl, 64			; 00000040H
  01695	74 21		 je	 SHORT $L71391

; 2974 : 	            pDphsettar->extrad = 5;		/* -V plos, assume VOT = 32 ms */

  01697	66 c7 47 4e 05
	00		 mov	 WORD PTR [edi+78], 5

; 2975 : 		    if ((pDph_t->allofeats[pDphsettar->np_drawt0] & FSTRESS) IS_MINUS) {

  0169d	8a 84 8e 34 06
	00 00		 mov	 al, BYTE PTR [esi+ecx*4+1588]
  016a4	a8 03		 test	 al, 3
  016a6	75 10		 jne	 SHORT $L71391

; 2976 : 			pDphsettar->extrad = 3;

  016a8	66 c7 47 4e 03
	00		 mov	 WORD PTR [edi+78], 3

; 2977 : 		    }
; 2978 : 		}
; 2979 :             }
; 2980 : 	    else {

  016ae	eb 08		 jmp	 SHORT $L71391
$L71388:

; 2981 : 		pDphsettar->tarseg = f0seg;	  /* Normal gesture for voiced segments is */

  016b0	66 89 57 6a	 mov	 WORD PTR [edi+106], dx

; 2982 : 		pDphsettar->tarseg1 = 0;	  /* slow, use both segmental 1-pole filters */

  016b4	66 89 5f 6c	 mov	 WORD PTR [edi+108], bx
$L71391:

; 2983 : 	    }
; 2984 :         }
; 2985 : 
; 2986 : /*    Glottal stop gesture, test at beginning of each phoneme */
; 2987 : /* eab 11/22/97 per caroline remove glotalization */
; 2988 : #ifndef ENGLISH_UK
; 2989 : 	set_tglst(pDph_t);		

  016b8	56		 push	 esi
  016b9	e8 00 00 00 00	 call	 _set_tglst

; 2990 : #endif
; 2991 : 	/* Set times of f0 fall pDphsettar->tglstp,pDphsettar->tglstn */
; 2992 : 
; 2993 : 	if (pDph_t->f0mode< SINGING) {

  016be	bd 04 00 00 00	 mov	 ebp, 4
  016c3	83 c4 04	 add	 esp, 4
  016c6	66 39 ae 74 17
	00 00		 cmp	 WORD PTR [esi+6004], bp
  016cd	0f 8d d5 00 00
	00		 jge	 $L71392

; 2994 : 
; 2995 : /*	  Filter f0 step and impulse commands to produce next value f0 */
; 2996 : 		/* increment gilde towards target and cancel increment when as close as poss to target
; 2997 : 		eab 1/21/98 */
; 2998 : 		pDphsettar->glide_tot += pDphsettar->glide_inc;

  016d3	66 8b 47 3c	 mov	 ax, WORD PTR [edi+60]
  016d7	66 01 47 3e	 add	 WORD PTR [edi+62], ax

; 2999 : //	WINprintf("male %d %d \n", pDphsettar->glide_tot, pDph_t->allophons[pDphsettar->np_drawt0]);
; 3000 : 		pDphsettar->glide_step -= pDphsettar->glide_inc;

  016db	66 29 47 3a	 sub	 WORD PTR [edi+58], ax
  016df	66 8b 4f 3a	 mov	 cx, WORD PTR [edi+58]

; 3001 : 		/*EAB 1/10/98 set glide_inc to zero if we've reached target*/
; 3002 : 		if(pDphsettar->glide_inc > 0 )

  016e3	66 3b c3	 cmp	 ax, bx
  016e6	7e 07		 jle	 SHORT $L71528

; 3003 : 		{
; 3004 : 			if ( pDphsettar->glide_step <= pDphsettar->glide_inc)

  016e8	66 3b c8	 cmp	 cx, ax
  016eb	7f 0d		 jg	 SHORT $L71397

; 3005 : 			{
; 3006 : 				pDphsettar->glide_inc =0;
; 3007 : 			}
; 3008 : 		}
; 3009 : 		else

  016ed	eb 07		 jmp	 SHORT $L71529
$L71528:

; 3010 : 		if(pDphsettar->glide_inc < 0 )

  016ef	7d 09		 jge	 SHORT $L71397

; 3011 : 		{
; 3012 : 			if ( pDphsettar->glide_step >= pDphsettar->glide_inc)

  016f1	66 3b c8	 cmp	 cx, ax
  016f4	7c 04		 jl	 SHORT $L71397
$L71529:

; 3013 : 			{
; 3014 : 				pDphsettar->glide_inc =0;

  016f6	66 89 5f 3c	 mov	 WORD PTR [edi+60], bx
$L71397:

; 3015 : 			}
; 3016 : 		}
; 3017 : 		
; 3018 :             f0in = (pDphsettar->tarbas + pDphsettar->tarhat + pDphsettar->tarimp);

  016fa	66 8b 47 5e	 mov	 ax, WORD PTR [edi+94]
  016fe	66 8b 4f 5c	 mov	 cx, WORD PTR [edi+92]
  01702	66 03 c8	 add	 cx, ax
  01705	66 03 8f 96 00
	00 00		 add	 cx, WORD PTR [edi+150]

; 3019 : #ifdef DEBUGF0
; 3020 : 	WINprintf(" tarbas %d,tarbat %d tarimp %d \n",pDphsettar->tarbas,pDphsettar->tarhat,pDphsettar->tarimp);
; 3021 : #endif
; 3022 : 
; 3023 : 	//debug code deleted eab 1/10/98
; 3024 : 	    if (pDphsettar->tarimp != 0)   

  0170c	66 3b c3	 cmp	 ax, bx
  0170f	74 0e		 je	 SHORT $L71398

; 3025 : 			pDphsettar->tarimp += pDphsettar->delimp;

  01711	66 8b 97 9e 00
	00 00		 mov	 dx, WORD PTR [edi+158]
  01718	66 03 d0	 add	 dx, ax
  0171b	66 89 57 5e	 mov	 WORD PTR [edi+94], dx
$L71398:

; 3026 : 					/* Strange way to  */
; 3027 : 					/* make f0 rise gradually for a	  */
; 3028 : 					/* stress-impulse command	  */
; 3029 : 					//	pDphsettar->delimp -=1;
; 3030 : 					pDphsettar->delimp= pDphsettar->delimp>>1;
; 3031 : /*	  Reduce segmental tongue height effect of sonorants toward */
; 3032 : /*	  end of segment (98% per frame)  */
; 3033 : 
; 3034 : 			pDph_t->arg1 = pDphsettar->tarseg; 

  0171f	66 8b 47 6a	 mov	 ax, WORD PTR [edi+106]

; 3035 :             pDph_t->arg2 = 16064;    
; 3036 :             pDphsettar->tarseg = mlsh1(pDph_t->arg1,pDph_t->arg2);
; 3037 : 		
; 3038 : 	/* eab new code 4/6/98 to add in a segmental dc offset based on f1 to account for shifts due to 
; 3039 : 	vocal tract postition as implemented this effect is quite weak (better safe than sorry) no time for a long
; 3040 : 			detailed evaluation but this should add some positive variability*/
; 3041 : 			//eab 10/20/98 Reduce effect further for Spanish 
; 3042 : #ifdef SPANISH
; 3043 : 			temp = ((pDph_t->parstochip[1] ));
; 3044 : 			f0in +=(38-temp)>>2;
; 3045 : #else
; 3046 : 			temp = ((pDph_t->parstochip[1] ));
; 3047 : 			f0in +=(38-temp)>>1;

  01723	bd 26 00 00 00	 mov	 ebp, 38			; 00000026H
  01728	66 d1 bf 9e 00
	00 00		 sar	 WORD PTR [edi+158], 1
  0172f	66 89 86 f8 14
	00 00		 mov	 WORD PTR [esi+5368], ax
  01736	66 c7 86 fa 14
	00 00 c0 3e	 mov	 WORD PTR [esi+5370], 16064 ; 00003ec0H
  0173f	0f bf 86 f8 14
	00 00		 movsx	 eax, WORD PTR [esi+5368]
  01746	8b d0		 mov	 edx, eax
  01748	c1 e2 06	 shl	 edx, 6
  0174b	2b d0		 sub	 edx, eax
  0174d	c1 e2 02	 shl	 edx, 2
  01750	2b d0		 sub	 edx, eax
  01752	c1 e2 06	 shl	 edx, 6
  01755	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01758	66 89 57 6a	 mov	 WORD PTR [edi+106], dx

; 3048 : #endif
; 3049 : 
; 3050 : 			
; 3051 : 		
; 3052 : 
; 3053 : 			//WINprintf("tarseg = %d f0in %d \n,",(pDphsettar->tarseg +pDphsettar->tarseg1),f0in);
; 3054 : 		f0in=f0in>>1; //eab 7/21/98 scale to avoid overload

  0175c	0f bf 86 7c 03
	00 00		 movsx	 eax, WORD PTR [esi+892]
  01763	2b e8		 sub	 ebp, eax
  01765	d1 fd		 sar	 ebp, 1
  01767	66 03 e9	 add	 bp, cx
  0176a	66 d1 fd	 sar	 bp, 1

; 3055 : 	    filter_seg_commands(pDph_t,f0in);	/* Input is pDphsettar->tarseg, output is pDphsettar->f0s */

  0176d	55		 push	 ebp
  0176e	56		 push	 esi
  0176f	e8 00 00 00 00	 call	 _filter_seg_commands

; 3056 : #ifdef REMOVENWSLATER
; 3057 : 		pDph_t->f0s += frac4mul(pDph_t->f0s, pDph_t->f0segscalefac+7000);
; 3058 : #endif
; 3059 : 	
; 3060 : 	    filter_commands(pDph_t,f0in);		/* Input is f0in,   output is f0  */

  01774	55		 push	 ebp
  01775	56		 push	 esi
  01776	e8 00 00 00 00	 call	 _filter_commands

; 3061 : 	    pDph_t->f0 = pDph_t->f0<<1;

  0177b	66 d1 a6 78 03
	00 00		 shl	 WORD PTR [esi+888], 1
  01782	66 8b 86 78 03
	00 00		 mov	 ax, WORD PTR [esi+888]

; 3062 : 		     /* Add in glide value to F0 eab 1/21/98*/
; 3063 : 
; 3064 : 		     /* reduce segmental influence per Oliver*/
; 3065 : 	    pDph_t->f0prime = pDph_t->f0 + pDph_t->f0s +pDphsettar->glide_tot;	/* This will be spdef-scaled output value */

  01789	66 8b 8e 76 03
	00 00		 mov	 cx, WORD PTR [esi+886]
  01790	66 03 c8	 add	 cx, ax
  01793	83 c4 10	 add	 esp, 16			; 00000010H
  01796	66 03 4f 3e	 add	 cx, WORD PTR [edi+62]

; 3066 : 
; 3067 : #ifdef DEBUGF0
; 3068 : 		WINprintf("femalef0 %d \n", pDph_t->f0prime); 
; 3069 : 		WINprintf("female %d %d  pDph_t->f0 %d \n", pDphsettar->glide_tot, 
; 3070 : 			pDph_t->allophons[pDphsettar->np_drawt0], pDph_t->f0); 
; 3071 : #endif
; 3072 : 
; 3073 : 	
; 3074 : #ifdef CREEKFEMALE
; 3075 : 		if( pDphsettar->nframb >  pDph_t->tcumdur-4 
; 3076 : 			&& pDph_t->clausetype == DECLARATIVE 
; 3077 : 			&& pDph_t->number_words > 5)
; 3078 : 		{
; 3079 : 			pDph_t->avcreek = -6;
; 3080 : 			pDph_t->f0prime = pDph_t->f0prime >>1;
; 3081 : 		}
; 3082 : 		else
; 3083 : 		{
; 3084 : 			pDph_t->avcreek = 0;
; 3085 : 		}
; 3086 : 	
; 3087 : 	//	WINprintf( "phocur %d %d %d F0in %d \n",pDphsettar->phocur, pDphsettar->tarbas, pDph_t->enddrop, pDph_t->f0prime);
; 3088 : #endif
; 3089 : 
; 3090 : 	}
; 3091 : 
; 3092 : 	else {

  0179a	bd 04 00 00 00	 mov	 ebp, 4
  0179f	66 89 8e 2e 23
	00 00		 mov	 WORD PTR [esi+9006], cx
  017a6	eb 09		 jmp	 SHORT $L71399
$L71392:

; 3093 : 
; 3094 : /*	  Linear interpolation to 'pDphsettar->newnote' over 100 ms or phoneme duration */
; 3095 : 						/* Add vibratto if pDphsettar->vibsw=1  */
; 3096 : 	    linear_interp(pDph_t);

  017a8	56		 push	 esi
  017a9	e8 00 00 00 00	 call	 _linear_interp
  017ae	83 c4 04	 add	 esp, 4
$L71399:

; 3097 : 	}
; 3098 : 
; 3099 : /*    Glottalization gesture */
; 3100 : /*    F0 dip by 60 Hz linear ramp in 8 frames each direction about pDphsettar->tglstp */
; 3101 : 	dtglst = pDphsettar->nframg - pDphsettar->tglstp;

  017b1	0f bf 57 50	 movsx	 edx, WORD PTR [edi+80]
  017b5	0f bf 47 4c	 movsx	 eax, WORD PTR [edi+76]
  017b9	2b c2		 sub	 eax, edx

; 3102 : 	if (dtglst < 0)

  017bb	79 02		 jns	 SHORT $L71400

; 3103 : 	    dtglst = (-dtglst);

  017bd	f7 d8		 neg	 eax
$L71400:

; 3104 :         if (dtglst <= 7)

  017bf	83 f8 07	 cmp	 eax, 7
  017c2	7f 1a		 jg	 SHORT $L71401

; 3105 : 		{
; 3106 : 
; 3107 :             pDph_t->f0prime += ((dtglst * 70) - 550);

  017c4	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  017cb	2b c8		 sub	 ecx, eax
  017cd	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  017d0	8d 94 09 da fd
	ff ff		 lea	 edx, DWORD PTR [ecx+ecx-550]
  017d7	66 01 96 2e 23
	00 00		 add	 WORD PTR [esi+9006], dx
$L71401:

; 3108 : 			
; 3109 : 		}
; 3110 : 	
; 3111 : /*	  And reduce AV somewhat (ugly code, but F0 computed before AV) */
; 3112 :         if (dtglst <= 5) {

  017de	83 f8 05	 cmp	 eax, 5
  017e1	7f 10		 jg	 SHORT $L71402

; 3113 : 	    pDph_t->avglstop = (6 - dtglst);	/* Global variable, used in PHDRAW.C */

  017e3	b9 06 00 00 00	 mov	 ecx, 6
  017e8	2b c8		 sub	 ecx, eax
  017ea	66 89 8e b4 03
	00 00		 mov	 WORD PTR [esi+948], cx

; 3114 :         }
; 3115 : 	else 

  017f1	eb 07		 jmp	 SHORT $L71403
$L71402:

; 3116 : 		{
; 3117 : 		pDph_t->avglstop = 0;

  017f3	66 89 9e b4 03
	00 00		 mov	 WORD PTR [esi+948], bx
$L71403:

; 3118 : 	
; 3119 : 		}
; 3120 : 
; 3121 : /*    Add f0 drift or flutter (approx 3 and 5-Hz sine waves, each +/-1.0 Hz) */
; 3122 : 	if (pDph_t->f0mode< SINGING) {

  017fa	66 39 ae 74 17
	00 00		 cmp	 WORD PTR [esi+6004], bp
  01801	0f 8d fa 00 00
	00		 jge	 $L71411

; 3123 : 	    pDphsettar->timecos5 += 131;		/* Prime number to reduce coincidence */

  01807	66 81 47 7e 83
	00		 add	 WORD PTR [edi+126], 131	; 00000083H
  0180d	66 8b 47 7e	 mov	 ax, WORD PTR [edi+126]

; 3124 : 	    if (pDphsettar->timecos5 > TWOPI)    pDphsettar->timecos5 -= TWOPI;

  01811	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  01815	7e 09		 jle	 SHORT $L71405
  01817	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  0181c	66 89 47 7e	 mov	 WORD PTR [edi+126], ax
$L71405:

; 3125 : 	    pDphsettar->timecos3 += 79;

  01820	66 83 47 7c 4f	 add	 WORD PTR [edi+124], 79	; 0000004fH
  01825	66 8b 47 7c	 mov	 ax, WORD PTR [edi+124]

; 3126 : 	    if (pDphsettar->timecos3 > TWOPI)    pDphsettar->timecos3 -= TWOPI;

  01829	66 3d 00 10	 cmp	 ax, 4096		; 00001000H
  0182d	7e 09		 jle	 SHORT $L71406
  0182f	05 00 f0 ff ff	 add	 eax, -4096		; fffff000H
  01834	66 89 47 7c	 mov	 WORD PTR [edi+124], ax
$L71406:

; 3127 : 	    pseudojitter = getcosine[pDphsettar->timecos5>>6]
; 3128 : 			 - getcosine[pDphsettar->timecos3>>6];

  01838	0f bf 57 7c	 movsx	 edx, WORD PTR [edi+124]
  0183c	c1 fa 06	 sar	 edx, 6
  0183f	0f bf 0c 55 00
	00 00 00	 movsx	 ecx, WORD PTR _getcosine[edx*2]
  01847	0f bf 57 7e	 movsx	 edx, WORD PTR [edi+126]
  0184b	c1 fa 06	 sar	 edx, 6
  0184e	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _getcosine[edx*2]
  01856	2b c1		 sub	 eax, ecx

; 3129 : 	    pDph_t->arg1 = pseudojitter;

  01858	66 89 86 f8 14
	00 00		 mov	 WORD PTR [esi+5368], ax

; 3130 : 		/* eab found flutter is not a speaker def yet*/
; 3131 : 	    pDph_t->arg2 = pDph_t->f0flutter;//4/16/98 eab higher for female voice

  0185f	66 8b 8e 74 03
	00 00		 mov	 cx, WORD PTR [esi+884]
  01866	66 89 8e fa 14
	00 00		 mov	 WORD PTR [esi+5370], cx

; 3132 : 		/* "FLUTTER" spdef parameter, 10% -> +/-1 Hz, */
; 3133 : 	    //pDph_t->f0prime += mlsh1(pDph_t->arg1,pDph_t->arg2);	
; 3134 : 		if(pDph_t->clausetype == 2)

  0186d	66 83 be c0 03
	00 00 02	 cmp	 WORD PTR [esi+960], 2
  01875	75 21		 jne	 SHORT $L71407

; 3135 : 		{
; 3136 : 			pDph_t->f0prime += mlsh1(pseudojitter,pDph_t->arg2);

  01877	0f bf c9	 movsx	 ecx, cx
  0187a	0f af c8	 imul	 ecx, eax
  0187d	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  01880	66 01 8e 2e 23
	00 00		 add	 WORD PTR [esi+9006], cx

; 3137 : 			pDph_t->addjit = -pDph_t->addjit;

  01887	66 8b 96 c2 03
	00 00		 mov	 dx, WORD PTR [esi+962]
  0188e	66 f7 da	 neg	 dx
  01891	66 89 96 c2 03
	00 00		 mov	 WORD PTR [esi+962], dx
$L71407:

; 3138 : 		}
; 3139 : 		//WINprintf("after adjit %d \n",pDph_t->f0prime);
; 3140 : 		
; 3141 : 		/*  100% corresp. to +/- 10 Hz max flutter */
; 3142 : 	}
; 3143 : 
; 3144 : /*    Introduce variability to period at startup from a voiceless interval */
; 3145 : /*	  not implemented */
; 3146 : 
; 3147 : /*    Scale f0 according to current speaker definition, the number 120 is
; 3148 :  *    the nominal average pitch of Paul's voice (AP in spdef)  */
; 3149 : 	if (pDph_t->f0mode< SINGING) {

  01898	66 39 ae 74 17
	00 00		 cmp	 WORD PTR [esi+6004], bp
  0189f	7d 60		 jge	 SHORT $L71411

; 3150 : 		if(pDph_t->clausetype == 2)

  018a1	66 83 be c0 03
	00 00 02	 cmp	 WORD PTR [esi+960], 2
  018a9	75 2f		 jne	 SHORT $L71409

; 3151 : 		{
; 3152 : 			pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1800), pDph_t->f0scalefac+1000);

  018ab	0f bf 86 b2 18
	00 00		 movsx	 eax, WORD PTR [esi+6322]
  018b2	0f bf 8e 2e 23
	00 00		 movsx	 ecx, WORD PTR [esi+9006]
  018b9	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  018be	81 e9 08 07 00
	00		 sub	 ecx, 1800		; 00000708H
  018c4	0f af c1	 imul	 eax, ecx
  018c7	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  018ca	66 03 86 b0 18
	00 00		 add	 ax, WORD PTR [esi+6320]
  018d1	66 89 86 2e 23
	00 00		 mov	 WORD PTR [esi+9006], ax

; 3153 : 				
; 3154 : 		}
; 3155 : 		else

  018d8	eb 27		 jmp	 SHORT $L71411
$L71409:

; 3156 : 		{
; 3157 : 			pDph_t->f0prime = pDph_t->f0minimum	+ frac4mul((pDph_t->f0prime - 1800), pDph_t->f0scalefac);

  018da	0f bf 86 2e 23
	00 00		 movsx	 eax, WORD PTR [esi+9006]
  018e1	0f bf 96 b2 18
	00 00		 movsx	 edx, WORD PTR [esi+6322]
  018e8	2d 08 07 00 00	 sub	 eax, 1800		; 00000708H
  018ed	0f af d0	 imul	 edx, eax
  018f0	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  018f3	66 03 96 b0 18
	00 00		 add	 dx, WORD PTR [esi+6320]
  018fa	66 89 96 2e 23
	00 00		 mov	 WORD PTR [esi+9006], dx
$L71411:

; 3158 : 		}
; 3159 : 	}
; 3160 : 		
; 3161 : /*    See if f0 exceeds legal bounds, truncate  */
; 3162 :         if (pDph_t->f0prime > HIGHEST_F0) {

  01901	66 8b 86 2e 23
	00 00		 mov	 ax, WORD PTR [esi+9006]
  01908	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  0190c	7e 0b		 jle	 SHORT $L71413

; 3163 : 	    pDph_t->f0prime = HIGHEST_F0;

  0190e	66 c7 86 2e 23
	00 00 01 14	 mov	 WORD PTR [esi+9006], 5121 ; 00001401H

; 3164 : 	}
; 3165 :         else if (pDph_t->f0prime < LOWEST_F0) {

  01917	eb 0f		 jmp	 SHORT $L71415
$L71413:
  01919	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  0191d	7d 09		 jge	 SHORT $L71415

; 3166 : 	    pDph_t->f0prime = LOWEST_F0;

  0191f	66 c7 86 2e 23
	00 00 f4 01	 mov	 WORD PTR [esi+9006], 500 ; 000001f4H
$L71415:

; 3167 : 	}
; 3168 : 
; 3169 : /*    Change from Middle C = 256 Hz (A = 430.4) to A = 440 Hz (SHOULD RE-DO */
; 3170 : /*    TABLE INSTEAD) */
; 3171 : 	if (pDph_t->f0mode== SINGING) {

  01928	66 39 ae 74 17
	00 00		 cmp	 WORD PTR [esi+6004], bp
  0192f	75 22		 jne	 SHORT $L71416

; 3172 : 	    pDph_t->f0prime = frac4mul(pDph_t->f0prime,4190);

  01931	0f bf 86 2e 23
	00 00		 movsx	 eax, WORD PTR [esi+9006]
  01938	8b c8		 mov	 ecx, eax
  0193a	c1 e1 06	 shl	 ecx, 6
  0193d	03 c8		 add	 ecx, eax
  0193f	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  01942	c1 e2 04	 shl	 edx, 4
  01945	2b d0		 sub	 edx, eax
  01947	d1 e2		 shl	 edx, 1
  01949	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0194c	66 89 96 2e 23
	00 00		 mov	 WORD PTR [esi+9006], dx
$L71416:

; 3173 : 	}
; 3174 : 
; 3175 : /*    Save value of period t0 in parameter array  */
; 3176 : /*    (ONLY ESSENTIAL DIVIDE INSTRUCTION IN ALL OF DECTALK) */
; 3177 : 	pDph_t->arg1 = 400;

  01953	66 c7 86 f8 14
	00 00 90 01	 mov	 WORD PTR [esi+5368], 400 ; 00000190H

; 3178 : 	pDph_t->arg2 = 1000;

  0195c	66 c7 86 fa 14
	00 00 e8 03	 mov	 WORD PTR [esi+5370], 1000 ; 000003e8H

; 3179 : 	pDph_t->arg3 = pDph_t->f0prime;

  01965	66 8b 8e 2e 23
	00 00		 mov	 cx, WORD PTR [esi+9006]
  0196c	66 89 8e fc 14
	00 00		 mov	 WORD PTR [esi+5372], cx

; 3180 :     temp = muldv(pDph_t->arg1, pDph_t->arg2, pDph_t->arg3);
; 3181 : 	pDph_t->parstochip[OUT_T0] = temp;

  01973	0f bf 86 f8 14
	00 00		 movsx	 eax, WORD PTR [esi+5368]
  0197a	0f bf 96 fa 14
	00 00		 movsx	 edx, WORD PTR [esi+5370]
  01981	0f af c2	 imul	 eax, edx
  01984	0f bf c9	 movsx	 ecx, cx
  01987	99		 cdq
  01988	f7 f9		 idiv	 ecx
  0198a	66 89 86 8c 03
	00 00		 mov	 WORD PTR [esi+908], ax

; 3182 : 
; 3183 : #ifdef HLSYN
; 3184 : 		pDph_t->parstochip[OUT_T0]  =pDph_t->f0prime;
; 3185 : #endif
; 3186 : 
; 3187 : 
; 3188 : 
; 3189 : 
; 3190 : #ifdef GRAPHF0
; 3191 : 
; 3192 : 	for (icnt=0;icnt<=120;icnt++)
; 3193 : 		prntbuf[icnt]=' ';
; 3194 : 	prntbuf[120]='\0';
; 3195 : 	if(pDph_t->malfem == FEMALE) /* Female or childs voice scale to fit*/
; 3196 : 			icnt=((pDph_t->f0prime)/25);
; 3197 : 	else
; 3198 : 		icnt=((pDph_t->f0prime)/10)-50;
; 3199 : 	if(icnt >=120)
; 3200 : 		icnt=120;
; 3201 : 	prntbuf[icnt]='*';
; 3202 : 	WINprintf("%d",pDph_t->f0prime);
; 3203 : 	WINprintf("%s\n",prntbuf);
; 3204 : 
; 3205 : 
; 3206 : #endif
; 3207 : 
; 3208 : //	WINprintf("TARBAS %d phone %d  tarhat=%3d tarimp=%3d  f0 =%d \n",
; 3209 :   //      pDphsettar->tarbas,pDph_t->allophons[pDphsettar->npg],pDphsettar->tarhat, pDphsettar->tarimp,
; 3210 : 	//	pDph_t->f0prime); 
; 3211 : //	 if(0)
; 3212 : //	 pDph_t->parstochip[OUT_T0]=of0array[oarcnt++];
; 3213 : 
; 3214 : 	/* debug switch */
; 3215 : 	if (((pKsd_t->logflag) & LOG_OUTPHON) || DT_DBG(PH_DBG,0x008))

  01991	8b 44 24 14	 mov	 eax, DWORD PTR _pKsd_t$[esp+24]
  01995	f6 80 04 02 00
	00 20		 test	 BYTE PTR [eax+516], 32	; 00000020H
  0199c	75 18		 jne	 SHORT $L71419
  0199e	66 8b 80 78 04
	00 00		 mov	 ax, WORD PTR [eax+1144]
  019a5	f6 c4 20	 test	 ah, 32			; 00000020H
  019a8	0f 84 b1 00 00
	00		 je	 $L71327
  019ae	a8 08		 test	 al, 8
  019b0	0f 84 a9 00 00
	00		 je	 $L71327
$L71419:

; 3216 : 	{
; 3217 : #ifdef MSDBG4
; 3218 : if (pDphsettar->lastone==-1)
; 3219 : {
; 3220 : 	for (keepdur=0;keepdur<TOT_ALLOPHONES;keepdur++)
; 3221 : 	{
; 3222 : 		printf("phone#=%d == %c%c\n",keepdur,pKsd_t->arpabet[keepdur <<1],pKsd_t->arpabet[(keepdur <<1)+1]);
; 3223 : 	}  
; 3224 : }
; 3225 : #endif
; 3226 : 		/* if (np == 0 && allophons[np] == SIL) { lastone=np; }                  */
; 3227 : 		if (pDphsettar->np_drawt0 != pDphsettar->lastone)

  019b6	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  019ba	66 3b 47 70	 cmp	 ax, WORD PTR [edi+112]
  019be	0f 84 9b 00 00
	00		 je	 $L71327

; 3228 : 		{
; 3229 : #ifdef MSDBG4 
; 3230 : 	printf("lastone=%d f0prime=%d\n",pDphsettar->lastone,pDph_t->f0prime/10);
; 3231 : 	printf ("allophons[%d]=%d ", pDphsettar->np_drawt0, pDph_t->allophons[pDphsettar->np_drawt0]);
; 3232 : 	printf ("allodurs[%d]=%d\n", pDphsettar->np_drawt0, pDph_t->allodurs[pDphsettar->np_drawt0]*64/10);
; 3233 : #endif
; 3234 : 			if ((pDphsettar->np_drawt0 >= 0))

  019c4	66 3b c3	 cmp	 ax, bx
  019c7	0f 8c 8a 00 00
	00		 jl	 $L71332

; 3235 : 			{
; 3236 :  
; 3237 : #ifdef MSDOS
; 3238 : 				/*WAIT_PRINT;*/
; 3239 : 				dologphoneme (pDph_t->allophons[pDphsettar->np_drawt0],
; 3240 : 							  (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 3241 : 							  (pDph_t->f0prime / 10));
; 3242 : 				printf("\n");
; 3243 : 				/*SIGNAL_PRINT;*/
; 3244 : #else
; 3245 : 				dologphoneme (phTTS, pDph_t->allophons[pDphsettar->np_drawt0],
; 3246 : 							  (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10),
; 3247 : 						(short) (pDph_t->f0prime / 10));

  019cd	0f bf 8e 2e 23
	00 00		 movsx	 ecx, WORD PTR [esi+9006]
  019d4	0f bf e8	 movsx	 ebp, ax
  019d7	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  019dc	f7 e9		 imul	 ecx
  019de	c1 fa 02	 sar	 edx, 2
  019e1	8b c2		 mov	 eax, edx
  019e3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  019e6	03 d0		 add	 edx, eax
  019e8	0f bf 84 6e 78
	0d 00 00	 movsx	 eax, WORD PTR [esi+ebp*2+3448]
  019f0	52		 push	 edx
  019f1	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  019f4	c1 e1 03	 shl	 ecx, 3
  019f7	2b c8		 sub	 ecx, eax
  019f9	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  019fe	f7 e9		 imul	 ecx
  01a00	c1 fa 02	 sar	 edx, 2
  01a03	8b ca		 mov	 ecx, edx
  01a05	8b 44 24 20	 mov	 eax, DWORD PTR _phTTS$[esp+24]
  01a09	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01a0c	03 d1		 add	 edx, ecx
  01a0e	52		 push	 edx
  01a0f	66 8b 94 6e c6
	03 00 00	 mov	 dx, WORD PTR [esi+ebp*2+966]
  01a17	52		 push	 edx
  01a18	50		 push	 eax
  01a19	e8 00 00 00 00	 call	 _dologphoneme

; 3248 : #ifdef PRINTFDEBUG
; 3249 : 				printf ("\n");
; 3250 : #endif
; 3251 : 				if (pKsd_t->logflag & LOG_OUTPHON)

  01a1e	8b 4c 24 24	 mov	 ecx, DWORD PTR _pKsd_t$[esp+40]
  01a22	83 c4 10	 add	 esp, 16			; 00000010H
  01a25	f6 81 04 02 00
	00 20		 test	 BYTE PTR [ecx+516], 32	; 00000020H
  01a2c	74 29		 je	 SHORT $L71332

; 3252 : 				{
; 3253 : 					if (fprintf (phTTS->pLogFile, "\n") < 0)

  01a2e	8b 74 24 1c	 mov	 esi, DWORD PTR _phTTS$[esp+20]
  01a32	68 00 00 00 00	 push	 OFFSET FLAT:$SG71425
  01a37	8b 96 98 00 00
	00		 mov	 edx, DWORD PTR [esi+152]
  01a3d	52		 push	 edx
  01a3e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fprintf
  01a44	83 c4 08	 add	 esp, 8
  01a47	85 c0		 test	 eax, eax
  01a49	7d 0c		 jge	 SHORT $L71332
$L71525:

; 3254 : 					{
; 3255 : 						TextToSpeechErrorHandler (phTTS,
; 3256 : 												  ERROR_WRITING_FILE,
; 3257 : 												  0L);

  01a4b	53		 push	 ebx
  01a4c	6a 05		 push	 5
  01a4e	56		 push	 esi
  01a4f	e8 00 00 00 00	 call	 _TextToSpeechErrorHandler
  01a54	83 c4 0c	 add	 esp, 12			; 0000000cH
$L71332:

; 3258 : 					}
; 3259 : 				}
; 3260 : #endif
; 3261 : 			}
; 3262 : 			/* keepdur = (pDph_t->allodurs[pDphsettar->np_drawt0] * NSAMP_FRAME / 10); */		/* eab need to keep orig value of dur */ 
; 3263 : 			/* keepallo = pDph_t->allophons[pDphsettar->np_drawt0]; */
; 3264 : 			pDphsettar->lastone = pDphsettar->np_drawt0;

  01a57	66 8b 47 74	 mov	 ax, WORD PTR [edi+116]
  01a5b	66 89 47 70	 mov	 WORD PTR [edi+112], ax
$L71327:

; 3265 : 		}
; 3266 : 	}
; 3267 : 
; 3268 : /*    Increment time counters */
; 3269 :         pDphsettar->nfram++;

  01a5f	66 ff 47 46	 inc	 WORD PTR [edi+70]

; 3270 :         pDphsettar->nframs++;

  01a63	66 ff 47 4a	 inc	 WORD PTR [edi+74]

; 3271 :         pDphsettar->nframg++;

  01a67	66 ff 47 4c	 inc	 WORD PTR [edi+76]
  01a6b	5f		 pop	 edi
  01a6c	5e		 pop	 esi
  01a6d	5d		 pop	 ebp
  01a6e	5b		 pop	 ebx

; 3272 : 
; 3273 : #ifndef MSDOS
; 3274 : 			//eab BATS 887 this is the wrong place to output them....
; 3275 : 	//pDph_t->parstochip[OUT_PH] = pDph_t->allophons[pDphsettar->np_drawt0];
; 3276 : 	//pDph_t->parstochip[OUT_DU] = pDph_t->allodurs[pDphsettar->np_drawt0];
; 3277 : #endif
; 3278 : 
; 3279 : 	
; 3280 : 
; 3281 : } /* end of fem stuff*/
; 3282 : }

  01a6f	83 c4 08	 add	 esp, 8
  01a72	c3		 ret	 0
  01a73	90		 npad	 1
$L71531:
  01a74	00 00 00 00	 DD	 $L71248
  01a78	00 00 00 00	 DD	 $L71251
  01a7c	00 00 00 00	 DD	 $L71256
  01a80	00 00 00 00	 DD	 $L71259
$L71532:
  01a84	00 00 00 00	 DD	 $L71273
  01a88	00 00 00 00	 DD	 $L71282
  01a8c	00 00 00 00	 DD	 $L71275
  01a90	00 00 00 00	 DD	 $L71274
  01a94	00 00 00 00	 DD	 $L71281
  01a98	00 00 00 00	 DD	 $L71280
$L71533:
  01a9c	00 00 00 00	 DD	 $L71341
  01aa0	00 00 00 00	 DD	 $L71344
  01aa4	00 00 00 00	 DD	 $L71349
  01aa8	00 00 00 00	 DD	 $L71352
$L71534:
  01aac	00 00 00 00	 DD	 $L71366
  01ab0	00 00 00 00	 DD	 $L71375
  01ab4	00 00 00 00	 DD	 $L71368
  01ab8	00 00 00 00	 DD	 $L71367
  01abc	00 00 00 00	 DD	 $L71374
  01ac0	00 00 00 00	 DD	 $L71373
_pht0draw ENDP
_TEXT	ENDS
EXTRN	_notetab:BYTE
_TEXT	SEGMENT
_pDph_t$ = 8
_psF0command$ = 12
_set_user_target PROC NEAR

; 3292 : 	short trandur=0;
; 3293 :     PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;
; 3294 : 
; 3295 : 	if (*psF0command >= 2000)   *psF0command -= 2000;   /* 2000 is offset flag */

  01ad0	8b 54 24 08	 mov	 edx, DWORD PTR _psF0command$[esp-4]
  01ad4	56		 push	 esi
  01ad5	8b 74 24 08	 mov	 esi, DWORD PTR _pDph_t$[esp]
  01ad9	66 8b 02	 mov	 ax, WORD PTR [edx]
  01adc	8b 8e d0 2b 00
	00		 mov	 ecx, DWORD PTR [esi+11216]
  01ae2	66 3d d0 07	 cmp	 ax, 2000		; 000007d0H
  01ae6	7c 08		 jl	 SHORT $L71433
  01ae8	05 30 f8 ff ff	 add	 eax, -2000		; fffff830H
  01aed	66 89 02	 mov	 WORD PTR [edx], ax
$L71433:

; 3296 : 	if (*psF0command <= 37) {	/* Pointer to C5, highest possible sung note */

  01af0	66 8b 02	 mov	 ax, WORD PTR [edx]
  01af3	66 3d 25 00	 cmp	 ax, 37			; 00000025H
  01af7	7f 36		 jg	 SHORT $L71434

; 3297 : 
; 3298 : 	    pDphsettar->newnote = notetab[*psF0command-1];

  01af9	0f bf c0	 movsx	 eax, ax
  01afc	66 8b 14 45 fe
	ff ff ff	 mov	 dx, WORD PTR _notetab[eax*2-2]

; 3299 : 	    pDphsettar->vibsw = 1;

  01b04	66 c7 81 8c 00
	00 00 01 00	 mov	 WORD PTR [ecx+140], 1
  01b0d	66 89 91 8e 00
	00 00		 mov	 WORD PTR [ecx+142], dx

; 3300 : /*	  Set pDphsettar->delnote*4 so transition happens over 16 frames (100 ms) */
; 3301 : 	    pDphsettar->delnote = ((pDphsettar->newnote - pDph_t->f0) >> 2);

  01b14	0f bf 86 78 03
	00 00		 movsx	 eax, WORD PTR [esi+888]
  01b1b	0f bf d2	 movsx	 edx, dx
  01b1e	2b d0		 sub	 edx, eax
  01b20	c1 fa 02	 sar	 edx, 2
  01b23	66 89 91 90 00
	00 00		 mov	 WORD PTR [ecx+144], dx

; 3302 : 	}
; 3303 : 	else {						/* Straight-lines */

  01b2a	e9 b4 00 00 00	 jmp	 $L71444
$L71434:

; 3304 : 	    *psF0command *= 10;

  01b2f	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  01b32	d1 e0		 shl	 eax, 1

; 3305 : 	    if (*psF0command < LOWEST_F0) 

  01b34	66 3d f4 01	 cmp	 ax, 500			; 000001f4H
  01b38	66 89 02	 mov	 WORD PTR [edx], ax
  01b3b	7d 07		 jge	 SHORT $L71436

; 3306 : 		{
; 3307 : 			*psF0command = LOWEST_F0;

  01b3d	66 c7 02 f4 01	 mov	 WORD PTR [edx], 500	; 000001f4H

; 3308 : 	    }
; 3309 : 	    else if (*psF0command > HIGHEST_F0) 

  01b42	eb 0b		 jmp	 SHORT $L71438
$L71436:
  01b44	66 3d 01 14	 cmp	 ax, 5121		; 00001401H
  01b48	7e 05		 jle	 SHORT $L71438

; 3310 : 		{
; 3311 : 			*psF0command = HIGHEST_F0;

  01b4a	66 c7 02 01 14	 mov	 WORD PTR [edx], 5121	; 00001401H
$L71438:

; 3312 : 	    }
; 3313 : 	    pDphsettar->newnote = *psF0command;

  01b4f	66 8b 02	 mov	 ax, WORD PTR [edx]

; 3314 : 	    pDphsettar->vibsw = 0;

  01b52	66 c7 81 8c 00
	00 00 00 00	 mov	 WORD PTR [ecx+140], 0
  01b5b	66 89 81 8e 00
	00 00		 mov	 WORD PTR [ecx+142], ax

; 3315 : /*	  Compute duration of linear transition */
; 3316 : 	    if (pDph_t->f0mode== TIME_VALUE_SPECIFIED) {

  01b62	66 83 be 74 17
	00 00 06	 cmp	 WORD PTR [esi+6004], 6
  01b6a	75 12		 jne	 SHORT $L71439

; 3317 : 		trandur = pDphsettar->dtimf0;	

  01b6c	66 8b 51 66	 mov	 dx, WORD PTR [ecx+102]

; 3318 : 		/*		Dur since last f0 command		*/
; 3319 : /* OUT		printf("trandur = %d, target=%d, curf0=%d\n",
; 3320 : 		 trandur, pDphsettar->newnote, f0);  END OUT */
; 3321 : 		if (trandur == 0)  

  01b70	66 85 d2	 test	 dx, dx
  01b73	75 15		 jne	 SHORT $L71441

; 3322 : 			pDph_t->f0 = pDphsettar->newnote;

  01b75	66 89 86 78 03
	00 00		 mov	 WORD PTR [esi+888], ax

; 3323 : 	    }
; 3324 : 	    else {	

  01b7c	eb 0c		 jmp	 SHORT $L71441
$L71439:

; 3325 : 		trandur = pDph_t->allodurs[pDphsettar->npg+1];	/* Dur of cur phoneme */

  01b7e	0f bf 51 76	 movsx	 edx, WORD PTR [ecx+118]
  01b82	66 8b 94 56 7a
	0d 00 00	 mov	 dx, WORD PTR [esi+edx*2+3450]
$L71441:

; 3326 : 	    }
; 3327 : /*	  Compute incremental change to f0*10 every frame */
; 3328 : 	    pDphsettar->delnote = (pDphsettar->newnote - pDph_t->f0) << 2;	/* f0 change times 40 */

  01b8a	66 8b 81 8e 00
	00 00		 mov	 ax, WORD PTR [ecx+142]
  01b91	66 2b 86 78 03
	00 00		 sub	 ax, WORD PTR [esi+888]
  01b98	c1 e0 02	 shl	 eax, 2

; 3329 : 	    if (pDphsettar->delnote > 0) {

  01b9b	66 85 c0	 test	 ax, ax
  01b9e	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
  01ba5	7e 0b		 jle	 SHORT $L71442

; 3330 : 		pDphsettar->delnote += (trandur - 1);	/* Round upward */

  01ba7	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  01bab	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71442:

; 3331 : 	    }
; 3332 : 	    if (pDphsettar->delnote < 0) {

  01bb2	66 8b 81 90 00
	00 00		 mov	 ax, WORD PTR [ecx+144]
  01bb9	66 85 c0	 test	 ax, ax
  01bbc	7d 0a		 jge	 SHORT $L71443

; 3333 : 		pDphsettar->delnote -= (trandur - 1);	/* Round downward */

  01bbe	2b c2		 sub	 eax, edx
  01bc0	40		 inc	 eax
  01bc1	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71443:

; 3334 : 	    }
; 3335 : 	    if (trandur != 0) {

  01bc8	66 85 d2	 test	 dx, dx
  01bcb	74 16		 je	 SHORT $L71444

; 3336 : 		pDphsettar->delnote /= trandur;

  01bcd	0f bf 81 90 00
	00 00		 movsx	 eax, WORD PTR [ecx+144]
  01bd4	53		 push	 ebx
  01bd5	0f bf da	 movsx	 ebx, dx
  01bd8	99		 cdq
  01bd9	f7 fb		 idiv	 ebx
  01bdb	5b		 pop	 ebx
  01bdc	66 89 81 90 00
	00 00		 mov	 WORD PTR [ecx+144], ax
$L71444:

; 3337 : 	    }
; 3338 : /*	  ELSE INSTANTANEOUS JUMP, was  8-frame (50 ms) transition */
; 3339 : /*	  OUT	    else {
; 3340 : 	 	       pDphsettar->delnote = pDphsettar->delnote >> 1;
; 3341 : 		    }
; 3342 : 	  END OUT */
; 3343 : 	}
; 3344 : 	pDphsettar->delcum = 0;

  01be3	66 c7 81 92 00
	00 00 00 00	 mov	 WORD PTR [ecx+146], 0

; 3345 : 	pDphsettar->f0start = pDph_t->f0;

  01bec	66 8b 96 78 03
	00 00		 mov	 dx, WORD PTR [esi+888]
  01bf3	66 89 91 94 00
	00 00		 mov	 WORD PTR [ecx+148], dx
  01bfa	5e		 pop	 esi

; 3346 : }

  01bfb	c3		 ret	 0
_set_user_target ENDP
_TEXT	ENDS
EXTRN	_place:BYTE
_TEXT	SEGMENT
_pDph_t$ = 8
_set_tglst PROC NEAR

; 3355 : {

  01c00	56		 push	 esi

; 3356 : 	  PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01c01	8b 74 24 08	 mov	 esi, DWORD PTR _pDph_t$[esp]
  01c05	8b 86 d0 2b 00
	00		 mov	 eax, DWORD PTR [esi+11216]

; 3357 : 
; 3358 :         if (pDphsettar->nframg >= pDphsettar->segdrg) {

  01c0b	66 8b 48 4c	 mov	 cx, WORD PTR [eax+76]
  01c0f	66 8b 50 56	 mov	 dx, WORD PTR [eax+86]
  01c13	66 3b ca	 cmp	 cx, dx
  01c16	0f 8c ee 00 00
	00		 jl	 $L71449

; 3359 :             pDphsettar->nframg -= pDphsettar->segdrg;

  01c1c	2b ca		 sub	 ecx, edx

; 3360 :             pDphsettar->segdrg = pDph_t->allodurs[++pDphsettar->npg];

  01c1e	66 ff 40 76	 inc	 WORD PTR [eax+118]
  01c22	66 89 48 4c	 mov	 WORD PTR [eax+76], cx

; 3361 : /*        Cancel glottal stop gesture that occurred at last phone onset */
; 3362 :             if (pDphsettar->tglstp == 0)    

  01c26	66 83 78 50 00	 cmp	 WORD PTR [eax+80], 0
  01c2b	0f bf 48 76	 movsx	 ecx, WORD PTR [eax+118]
  01c2f	66 8b 94 4e 78
	0d 00 00	 mov	 dx, WORD PTR [esi+ecx*2+3448]
  01c37	66 89 50 56	 mov	 WORD PTR [eax+86], dx
  01c3b	ba 38 ff ff ff	 mov	 edx, -200		; ffffff38H
  01c40	75 07		 jne	 SHORT $L71537

; 3363 : 				pDphsettar->tglstp = -200;

  01c42	66 89 50 50	 mov	 WORD PTR [eax+80], dx

; 3364 : /*        Start second half of glottal stop gesture */
; 3365 :             if (pDphsettar->tglstp > 0) 

  01c46	66 85 d2	 test	 dx, dx
$L71537:
  01c49	7e 06		 jle	 SHORT $L71451

; 3366 : 			{
; 3367 : 			pDphsettar->tglstp = 0;

  01c4b	66 c7 40 50 00
	00		 mov	 WORD PTR [eax+80], 0
$L71451:
  01c51	53		 push	 ebx
  01c52	55		 push	 ebp

; 3368 : 			}
; 3369 : 
; 3370 : /*        Insert glottal stop after cur seg */
; 3371 : /*         if next segment a vowel? */
; 3372 : /*         and is next segment in first syllable? */
; 3373 : /*         and is current segment in word-final rime? */
; 3374 : /*         and is next segment not the diphthong /YU/? */
; 3375 :             pDphsettar->tglstn = -200;

  01c53	66 89 50 52	 mov	 WORD PTR [eax+82], dx

; 3376 :             if (((featb[pDph_t->allophons[pDphsettar->npg+1]] & FVOWEL) IS_PLUS)
; 3377 :               && ((pDph_t->allofeats[pDphsettar->npg+1] & (FMEDIALSYL & FFINALSYL)) IS_MINUS)
; 3378 :               && ((pDph_t->allofeats[pDphsettar->npg] & FBOUNDARY) >= FWBNEXT)
; 3379 :              /* && (pDph_t->allophons[pDphsettar->npg+1] != YU)*/) {

  01c57	66 8b ac 4e c8
	03 00 00	 mov	 bp, WORD PTR [esi+ecx*2+968]
  01c5f	0f bf d5	 movsx	 edx, bp
  01c62	57		 push	 edi
  01c63	f6 04 55 00 00
	00 00 04	 test	 BYTE PTR _featb[edx*2], 4
  01c6b	74 64		 je	 SHORT $L71458
  01c6d	f6 84 8e 38 06
	00 00 10	 test	 BYTE PTR [esi+ecx*4+1592], 16 ; 00000010H
  01c75	75 5a		 jne	 SHORT $L71458
  01c77	8b 9c 8e 34 06
	00 00		 mov	 ebx, DWORD PTR [esi+ecx*4+1588]
  01c7e	81 e3 e0 01 00
	00		 and	 ebx, 480		; 000001e0H
  01c84	83 fb 60	 cmp	 ebx, 96			; 00000060H
  01c87	72 48		 jb	 SHORT $L71458

; 3380 : /*	      If cur seg is vowel, don't do it unless vowel ident, or pbound */
; 3381 : 		if ((featb[pDph_t->allophons[pDphsettar->npg]] & FSYLL) IS_PLUS) {

  01c89	66 8b bc 4e c6
	03 00 00	 mov	 di, WORD PTR [esi+ecx*2+966]
  01c91	0f bf d7	 movsx	 edx, di
  01c94	66 8b 14 55 00
	00 00 00	 mov	 dx, WORD PTR _featb[edx*2]
  01c9c	f6 c2 01	 test	 dl, 1
  01c9f	74 19		 je	 SHORT $L71453

; 3382 : 		    if (((pDph_t->allophons[pDphsettar->npg] == pDph_t->allophons[pDphsettar->npg+1])
; 3383 : 		      && ((pDph_t->allofeats[pDphsettar->npg+1] & FSTRESS_1) IS_PLUS) )
; 3384 : 		      || ((pDph_t->allofeats[pDphsettar->npg] & FBOUNDARY) >= FVPNEXT)) {

  01ca1	66 3b fd	 cmp	 di, bp
  01ca4	75 0a		 jne	 SHORT $L71456
  01ca6	f6 84 8e 38 06
	00 00 01	 test	 BYTE PTR [esi+ecx*4+1592], 1
  01cae	75 19		 jne	 SHORT $L71455
$L71456:
  01cb0	81 fb a0 00 00
	00		 cmp	 ebx, 160		; 000000a0H
  01cb6	72 19		 jb	 SHORT $L71458

; 3385 : 			pDphsettar->tglstn = pDphsettar->segdrg;
; 3386 : 			}
; 3387 : 		}
; 3388 : /*	      If  next segment primary stressed, */
; 3389 : /*	      and if curr seg a consonant other than a plosive, do it */
; 3390 : 		else if ( ((featb[pDph_t->allophons[pDphsettar->npg]] & FPLOSV) IS_MINUS)

  01cb8	eb 0f		 jmp	 SHORT $L71455
$L71453:

; 3391 : 		  /*&& (pDph_t->allophons[pDphsettar->npg] != DX)*/
; 3392 : 	          && ((pDph_t->allofeats[pDphsettar->npg+1] & FSTRESS_1) IS_PLUS) ) {

  01cba	f6 c2 40	 test	 dl, 64			; 00000040H
  01cbd	75 12		 jne	 SHORT $L71458
  01cbf	f6 84 8e 38 06
	00 00 01	 test	 BYTE PTR [esi+ecx*4+1592], 1
  01cc7	74 08		 je	 SHORT $L71458
$L71455:

; 3393 : 	            pDphsettar->tglstn = pDphsettar->segdrg;

  01cc9	66 8b 50 56	 mov	 dx, WORD PTR [eax+86]
  01ccd	66 89 50 52	 mov	 WORD PTR [eax+82], dx
$L71458:

; 3394 : 		}
; 3395 :             }
; 3396 : /*        And at beginning and end of glottalized segs TQ and Q */
; 3397 :         //    if ((pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[pDph_t->allophons[pDphsettar->npg+1]].place & FGLOTAL) IS_PLUS) {
; 3398 :           //      pDphsettar->tglstn = pDphsettar->segdrg;
; 3399 : 
; 3400 :             //}
; 3401 :             //if ((pDph_t->gl_phones[pDph_t->gl_lang][pDph_t->gl_group].phonames[pDph_t->allophons[pDphsettar->npg]].place & FGLOTAL) IS_PLUS) 
; 3402 : 			//{
; 3403 :               //  pDphsettar->tglstn = pDphsettar->segdrg;
; 3404 :             //}
; 3405 : 
; 3406 : 		if ((place[pDph_t->allophons[pDphsettar->npg + 1]] & FGLOTAL) IS_PLUS)

  01cd1	0f bf bc 4e c8
	03 00 00	 movsx	 edi, WORD PTR [esi+ecx*2+968]
  01cd9	b2 20		 mov	 dl, 32			; 00000020H
  01cdb	84 14 7d 00 00
	00 00		 test	 BYTE PTR _place[edi*2], dl
  01ce2	74 08		 je	 SHORT $L71459

; 3407 : 		{
; 3408 : 			pDphsettar->tglstn = pDphsettar->segdrg;

  01ce4	66 8b 78 56	 mov	 di, WORD PTR [eax+86]
  01ce8	66 89 78 52	 mov	 WORD PTR [eax+82], di
$L71459:

; 3409 : 		}
; 3410 : 
; 3411 : 		if ((place[pDph_t->allophons[pDphsettar->npg]] & FGLOTAL) IS_PLUS)

  01cec	0f bf 8c 4e c6
	03 00 00	 movsx	 ecx, WORD PTR [esi+ecx*2+966]
  01cf4	5f		 pop	 edi
  01cf5	5d		 pop	 ebp
  01cf6	84 14 4d 00 00
	00 00		 test	 BYTE PTR _place[ecx*2], dl
  01cfd	5b		 pop	 ebx
  01cfe	74 23		 je	 SHORT $L71462

; 3412 : 		{
; 3413 : 			pDphsettar->tglstn = pDphsettar->segdrg;

  01d00	66 8b 50 56	 mov	 dx, WORD PTR [eax+86]
  01d04	5e		 pop	 esi
  01d05	66 89 50 52	 mov	 WORD PTR [eax+82], dx

; 3435 : 		
; 3436 : 	}
; 3437 : }

  01d09	c3		 ret	 0
$L71449:

; 3414 : 		}
; 3415 : #ifdef GERMAN
; 3416 : 		/*EAB 2/25/98 This is applying more broadly than  it suppose to I will review this with
; 3417 : 		oliver and refine it it doesn't check for stress in next syllable and is it the sequence der 
; 3418 : 		or the word wbound not being checked either*/
; 3419 : 		
; 3420 : 			/* Rule 1a: The word "der" the r is an allophonic glottal stop before an unstressed syllable */
; 3421 : 			if ((pDph_t->allophons[pDphsettar->npg] == R)
; 3422 : 				&& ((featb[pDph_t->allophons[pDphsettar->npg + 1]] & FVOWEL) IS_PLUS)
; 3423 : 				&& (pDph_t->allofeats[pDphsettar->npg] & FWBNEXT))
; 3424 : 			{
; 3425 : 				pDphsettar->tglstn = pDphsettar->segdrg;
; 3426 : 			}
; 3427 : #endif
; 3428 : 
; 3429 :        }
; 3430 : 
; 3431 : /*    Wait until current gl stop gesture over before setting time of next one */
; 3432 :         else if ((pDphsettar->nframg == 8) || (pDphsettar->nframg == (pDphsettar->segdrg - 1))) 

  01d0a	66 83 f9 08	 cmp	 cx, 8
  01d0e	74 0b		 je	 SHORT $L71463
  01d10	0f bf d2	 movsx	 edx, dx
  01d13	0f bf c9	 movsx	 ecx, cx
  01d16	4a		 dec	 edx
  01d17	3b ca		 cmp	 ecx, edx
  01d19	75 08		 jne	 SHORT $L71462
$L71463:

; 3433 : 		{
; 3434 : 	    pDphsettar->tglstp = pDphsettar->tglstn;

  01d1b	66 8b 50 52	 mov	 dx, WORD PTR [eax+82]
  01d1f	66 89 50 50	 mov	 WORD PTR [eax+80], dx
$L71462:
  01d23	5e		 pop	 esi

; 3435 : 		
; 3436 : 	}
; 3437 : }

  01d24	c3		 ret	 0
_set_tglst ENDP
_pDph_t$ = 8
_f0in$ = 12
_filter_commands PROC NEAR

; 3447 : 
; 3448 :         short f0outa, f0outb, f0outc, f0outd, f0out1, f0out2;
; 3449 : 	
; 3450 : 		 PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01d30	8b 44 24 04	 mov	 eax, DWORD PTR _pDph_t$[esp-4]
  01d34	56		 push	 esi
  01d35	57		 push	 edi
  01d36	8b 90 d0 2b 00
	00		 mov	 edx, DWORD PTR [eax+11216]

; 3451 : 
; 3452 : /*    First pole (separate into 2 poles to min truncation errors) */
; 3453 :         pDph_t->arg1 = pDphsettar->f0a1;

  01d3c	66 8b 4a 64	 mov	 cx, WORD PTR [edx+100]
  01d40	66 89 88 f8 14
	00 00		 mov	 WORD PTR [eax+5368], cx

; 3454 :         pDph_t->arg2 = f0in;

  01d47	66 8b 4c 24 10	 mov	 cx, WORD PTR _f0in$[esp+4]
  01d4c	66 89 88 fa 14
	00 00		 mov	 WORD PTR [eax+5370], cx

; 3455 :         f0outa = mlsh1(pDph_t->arg1,pDph_t->arg2);

  01d53	0f bf f1	 movsx	 esi, cx
  01d56	0f bf 88 f8 14
	00 00		 movsx	 ecx, WORD PTR [eax+5368]
  01d5d	0f af f1	 imul	 esi, ecx

; 3456 :         pDph_t->arg1 = pDphsettar->f0b;

  01d60	66 8b 4a 62	 mov	 cx, WORD PTR [edx+98]
  01d64	66 89 88 f8 14
	00 00		 mov	 WORD PTR [eax+5368], cx

; 3457 :         pDph_t->arg2 = pDphsettar->f0las1;

  01d6b	66 8b 4a 58	 mov	 cx, WORD PTR [edx+88]

; 3458 :         f0outb = mlsh1(pDph_t->arg1,pDph_t->arg2);
; 3459 :         f0out1 = f0outa + f0outb;

  01d6f	0f bf b8 f8 14
	00 00		 movsx	 edi, WORD PTR [eax+5368]
  01d76	66 89 88 fa 14
	00 00		 mov	 WORD PTR [eax+5370], cx
  01d7d	0f bf c9	 movsx	 ecx, cx
  01d80	0f af cf	 imul	 ecx, edi
  01d83	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  01d86	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  01d89	03 ce		 add	 ecx, esi

; 3460 :         pDphsettar->f0las1 = f0out1;
; 3461 : /*    Second pole */
; 3462 :         pDph_t->arg1 = pDphsettar->f0a2;

  01d8b	66 8b 72 60	 mov	 si, WORD PTR [edx+96]
  01d8f	66 89 4a 58	 mov	 WORD PTR [edx+88], cx
  01d93	66 89 b0 f8 14
	00 00		 mov	 WORD PTR [eax+5368], si

; 3463 :         pDph_t->arg2 = f0out1;

  01d9a	66 89 88 fa 14
	00 00		 mov	 WORD PTR [eax+5370], cx

; 3464 :         f0outc = mlsh1(pDph_t->arg1,pDph_t->arg2);

  01da1	0f bf f1	 movsx	 esi, cx
  01da4	0f bf 88 f8 14
	00 00		 movsx	 ecx, WORD PTR [eax+5368]
  01dab	0f af f1	 imul	 esi, ecx

; 3465 :         pDph_t->arg1 = pDphsettar->f0b;

  01dae	66 8b 4a 62	 mov	 cx, WORD PTR [edx+98]
  01db2	66 89 88 f8 14
	00 00		 mov	 WORD PTR [eax+5368], cx

; 3466 :         pDph_t->arg2 = pDphsettar->f0las2;

  01db9	66 8b 4a 5a	 mov	 cx, WORD PTR [edx+90]

; 3467 :         f0outd = mlsh1(pDph_t->arg1,pDph_t->arg2);
; 3468 :         f0out2 = f0outc + f0outd;

  01dbd	0f bf b8 f8 14
	00 00		 movsx	 edi, WORD PTR [eax+5368]
  01dc4	66 89 88 fa 14
	00 00		 mov	 WORD PTR [eax+5370], cx
  01dcb	0f bf c9	 movsx	 ecx, cx
  01dce	0f af cf	 imul	 ecx, edi
  01dd1	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  01dd4	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  01dd7	03 ce		 add	 ecx, esi
  01dd9	5f		 pop	 edi

; 3469 :         pDphsettar->f0las2 = f0out2;

  01dda	66 89 4a 5a	 mov	 WORD PTR [edx+90], cx
  01dde	5e		 pop	 esi

; 3470 :         pDph_t->f0 = f0out2 >> F0SHFT;	/* Unscaled fundamental frequency	   */

  01ddf	66 c1 f9 03	 sar	 cx, 3
  01de3	66 89 88 78 03
	00 00		 mov	 WORD PTR [eax+888], cx

; 3471 : 
; 3472 : #if 0
; 3473 : //	printf(
; 3474 : //"[%s] pDphsettar->tarbas=%4d pDphsettar->tarhat=%3d pDphsettar->tarimp=%3d tarsum=%4d\n",
; 3475 :  //        phprint(pDph_t->allophons[pDphsettar->npg]), pDphsettar->tarbas, pDphsettar->tarhat, pDphsettar->tarimp, f0in);
; 3476 : #endif
; 3477 : 
; 3478 : 
; 3479 : /*    (Check for overloads if change filter tc or size of impulses) */
; 3480 : #if 0
; 3481 : 	WINprintf("f0in=%6d   a=%6d b=%6d 1=%6d c=%6d d=%6d 2=%6d\n",
; 3482 : 	 f0in, f0outa, f0outb, f0out1, f0outc, f0outd, f0out2);
; 3483 : #endif
; 3484 : }

  01dea	c3		 ret	 0
_filter_commands ENDP
_pDph_t$ = 8
_filter_seg_commands PROC NEAR

; 3494 : 		Input is realy tarseg comment about f0in is wrong*/
; 3495 : 
; 3496 :         short f0souta, f0soutb, f0soutc, f0soutd, f0sout1, f0sout2;
; 3497 : 		PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01df0	8b 44 24 04	 mov	 eax, DWORD PTR _pDph_t$[esp-4]
  01df4	56		 push	 esi
  01df5	57		 push	 edi
  01df6	8b 88 d0 2b 00
	00		 mov	 ecx, DWORD PTR [eax+11216]

; 3498 : /*    First pole (separate into 2 poles to min truncation errors) */
; 3499 :         pDph_t->arg1 = pDphsettar->f0sa1;

  01dfc	66 8b 91 a4 00
	00 00		 mov	 dx, WORD PTR [ecx+164]
  01e03	66 89 90 f8 14
	00 00		 mov	 WORD PTR [eax+5368], dx

; 3500 :         pDph_t->arg2 = pDphsettar->tarseg;

  01e0a	66 8b 51 6a	 mov	 dx, WORD PTR [ecx+106]
  01e0e	66 89 90 fa 14
	00 00		 mov	 WORD PTR [eax+5370], dx

; 3501 :         f0souta = mlsh1(pDph_t->arg1,pDph_t->arg2);

  01e15	0f bf f2	 movsx	 esi, dx
  01e18	0f bf 90 f8 14
	00 00		 movsx	 edx, WORD PTR [eax+5368]
  01e1f	0f af f2	 imul	 esi, edx

; 3502 :         pDph_t->arg1 = pDphsettar->f0sb;

  01e22	66 8b 91 a2 00
	00 00		 mov	 dx, WORD PTR [ecx+162]
  01e29	66 89 90 f8 14
	00 00		 mov	 WORD PTR [eax+5368], dx

; 3503 :         pDph_t->arg2 = pDphsettar->f0slas1;

  01e30	66 8b 91 98 00
	00 00		 mov	 dx, WORD PTR [ecx+152]

; 3504 :         f0soutb = mlsh1(pDph_t->arg1,pDph_t->arg2);
; 3505 :         f0sout1 = f0souta + f0soutb;

  01e37	0f bf b8 f8 14
	00 00		 movsx	 edi, WORD PTR [eax+5368]
  01e3e	66 89 90 fa 14
	00 00		 mov	 WORD PTR [eax+5370], dx
  01e45	0f bf d2	 movsx	 edx, dx
  01e48	0f af d7	 imul	 edx, edi
  01e4b	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  01e4e	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01e51	03 d6		 add	 edx, esi

; 3506 :         pDphsettar->f0slas1 = f0sout1;
; 3507 : /*    Second pole */
; 3508 :         pDph_t->arg1 = pDphsettar->f0sa2;

  01e53	66 8b b1 a0 00
	00 00		 mov	 si, WORD PTR [ecx+160]
  01e5a	66 89 91 98 00
	00 00		 mov	 WORD PTR [ecx+152], dx
  01e61	66 89 b0 f8 14
	00 00		 mov	 WORD PTR [eax+5368], si

; 3509 :         pDph_t->arg2 = f0sout1 + (pDphsettar->tarseg1 << F0SHFT);	/* Use only one pole */

  01e68	66 8b 71 6c	 mov	 si, WORD PTR [ecx+108]
  01e6c	66 c1 e6 03	 shl	 si, 3
  01e70	03 d6		 add	 edx, esi
  01e72	66 89 90 fa 14
	00 00		 mov	 WORD PTR [eax+5370], dx

; 3510 :         f0soutc = mlsh1(pDph_t->arg1,pDph_t->arg2);

  01e79	0f bf f2	 movsx	 esi, dx
  01e7c	0f bf 90 f8 14
	00 00		 movsx	 edx, WORD PTR [eax+5368]
  01e83	0f af f2	 imul	 esi, edx

; 3511 :         pDph_t->arg1 = pDphsettar->f0sb;

  01e86	66 8b 91 a2 00
	00 00		 mov	 dx, WORD PTR [ecx+162]
  01e8d	66 89 90 f8 14
	00 00		 mov	 WORD PTR [eax+5368], dx

; 3512 :         pDph_t->arg2 = pDphsettar->f0slas2;

  01e94	66 8b 91 9a 00
	00 00		 mov	 dx, WORD PTR [ecx+154]

; 3513 :         f0soutd = mlsh1(pDph_t->arg1,pDph_t->arg2);
; 3514 :         f0sout2 = f0soutc + f0soutd;

  01e9b	0f bf b8 f8 14
	00 00		 movsx	 edi, WORD PTR [eax+5368]
  01ea2	66 89 90 fa 14
	00 00		 mov	 WORD PTR [eax+5370], dx
  01ea9	0f bf d2	 movsx	 edx, dx
  01eac	0f af d7	 imul	 edx, edi
  01eaf	c1 fe 0e	 sar	 esi, 14			; 0000000eH
  01eb2	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01eb5	03 d6		 add	 edx, esi
  01eb7	5f		 pop	 edi

; 3515 :         pDphsettar->f0slas2 = f0sout2;

  01eb8	66 89 91 9a 00
	00 00		 mov	 WORD PTR [ecx+154], dx
  01ebf	5e		 pop	 esi

; 3516 :         pDph_t->f0s = f0sout2 >> F0SHFT;  /* Unscaled fundamental frequency	   */

  01ec0	66 c1 fa 03	 sar	 dx, 3
  01ec4	66 89 90 76 03
	00 00		 mov	 WORD PTR [eax+886], dx

; 3517 : 
; 3518 : #if 0
; 3519 : 	WINprintf("[%s] pDphsettar->tarseg=%3d pDphsettar->tarseg1=%3d\n",
; 3520 : 	phprint(pDph_t->allophons[pDphsettar->npg]), pDphsettar->tarseg, pDphsettar->tarseg1);
; 3521 : #endif
; 3522 : /*    (Check for overloads if change filter tc or size of impulses) */
; 3523 : #if 0
; 3524 : 	WINprintf("  a=%6d b=%6d 1=%6d c=%6d d=%6d 2=%6d  pDphsettar->f0s=%4d\n",
; 3525 : 	 f0souta, f0soutb, f0sout1, f0soutc, f0soutd, f0sout2, pDphsettar->f0s);
; 3526 : #endif
; 3527 : }

  01ecb	c3		 ret	 0
_filter_seg_commands ENDP
_pDph_t$ = 8
_linear_interp PROC NEAR

; 3537 : 	PDPHSETTAR_ST pDphsettar = pDph_t->pSTphsettar;

  01ed0	8b 54 24 04	 mov	 edx, DWORD PTR _pDph_t$[esp-4]
  01ed4	56		 push	 esi
  01ed5	57		 push	 edi

; 3538 : 	pDphsettar->delcum += pDphsettar->delnote;
; 3539 : 	pDph_t->f0 = pDphsettar->f0start + (pDphsettar->delcum >> 2);
; 3540 : 
; 3541 : 	if (pDphsettar->delnote >= 0) {			/* Do not overshoot pDphsettar->newnote */

  01ed6	33 ff		 xor	 edi, edi
  01ed8	8b 82 d0 2b 00
	00		 mov	 eax, DWORD PTR [edx+11216]
  01ede	66 8b 88 90 00
	00 00		 mov	 cx, WORD PTR [eax+144]
  01ee5	66 01 88 92 00
	00 00		 add	 WORD PTR [eax+146], cx
  01eec	66 8b 88 92 00
	00 00		 mov	 cx, WORD PTR [eax+146]
  01ef3	66 c1 f9 02	 sar	 cx, 2
  01ef7	66 03 88 94 00
	00 00		 add	 cx, WORD PTR [eax+148]
  01efe	66 89 8a 78 03
	00 00		 mov	 WORD PTR [edx+888], cx
  01f05	66 39 b8 90 00
	00 00		 cmp	 WORD PTR [eax+144], di

; 3542 : 	    if (pDph_t->f0 > pDphsettar->newnote) {

  01f0c	66 8b b0 8e 00
	00 00		 mov	 si, WORD PTR [eax+142]
  01f13	7c 07		 jl	 SHORT $L71492
  01f15	66 3b ce	 cmp	 cx, si
  01f18	7e 2a		 jle	 SHORT $L71495

; 3543 : 		pDph_t->f0 = pDphsettar->newnote;
; 3544 : 		pDphsettar->f0start = pDphsettar->newnote;
; 3545 : 		pDphsettar->delcum = 0;
; 3546 : 		pDphsettar->delnote = 0;
; 3547 : 	    }
; 3548 : 	}
; 3549 : 	else {

  01f1a	eb 05		 jmp	 SHORT $L71541
$L71492:

; 3550 : 	    if (pDph_t->f0 < pDphsettar->newnote) {

  01f1c	66 3b ce	 cmp	 cx, si
  01f1f	7d 23		 jge	 SHORT $L71495
$L71541:

; 3551 : 		pDph_t->f0 = pDphsettar->newnote;

  01f21	66 89 b2 78 03
	00 00		 mov	 WORD PTR [edx+888], si

; 3552 : 		pDphsettar->f0start = pDphsettar->newnote;

  01f28	66 8b 88 8e 00
	00 00		 mov	 cx, WORD PTR [eax+142]
  01f2f	66 89 88 94 00
	00 00		 mov	 WORD PTR [eax+148], cx

; 3553 : 		pDphsettar->delcum = 0;

  01f36	66 89 b8 92 00
	00 00		 mov	 WORD PTR [eax+146], di

; 3554 : 		pDphsettar->delnote = 0;

  01f3d	66 89 b8 90 00
	00 00		 mov	 WORD PTR [eax+144], di
$L71495:

; 3555 : 	    }
; 3556 : 	}
; 3557 : 	pDph_t->f0prime = pDph_t->f0;				/* To be scaled by spdef */

  01f44	66 8b 8a 78 03
	00 00		 mov	 cx, WORD PTR [edx+888]
  01f4b	5f		 pop	 edi
  01f4c	66 89 8a 2e 23
	00 00		 mov	 WORD PTR [edx+9006], cx

; 3558 : 
; 3559 : 	if (pDphsettar->vibsw == 1) 

  01f53	66 83 b8 8c 00
	00 00 01	 cmp	 WORD PTR [eax+140], 1
  01f5b	5e		 pop	 esi
  01f5c	75 41		 jne	 SHORT $L71496

; 3560 : 	{			/* Singing */
; 3561 : /*	  Add vibratto of 6.2 Hz (25 frames/cycle), +/- 2.05 Hz ampl. */
; 3562 : 	    pDphsettar->timecosvib += 165;

  01f5e	66 81 80 84 00
	00 00 a5 00	 add	 WORD PTR [eax+132], 165	; 000000a5H
  01f67	66 8b 88 84 00
	00 00		 mov	 cx, WORD PTR [eax+132]

; 3563 : 	    if (pDphsettar->timecosvib > TWOPI)    

  01f6e	66 81 f9 00 10	 cmp	 cx, 4096		; 00001000H
  01f73	7e 0d		 jle	 SHORT $L71497

; 3564 : 			pDphsettar->timecosvib -= TWOPI;

  01f75	81 c1 00 f0 ff
	ff		 add	 ecx, -4096		; fffff000H
  01f7b	66 89 88 84 00
	00 00		 mov	 WORD PTR [eax+132], cx
$L71497:

; 3565 : 	    pDph_t->f0prime += getcosine[pDphsettar->timecosvib>>6] >> 3;

  01f82	0f bf 80 84 00
	00 00		 movsx	 eax, WORD PTR [eax+132]
  01f89	c1 f8 06	 sar	 eax, 6
  01f8c	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _getcosine[eax*2]
  01f94	66 c1 f9 03	 sar	 cx, 3
  01f98	66 01 8a 2e 23
	00 00		 add	 WORD PTR [edx+9006], cx
$L71496:

; 3566 : 	}
; 3567 : }

  01f9f	c3		 ret	 0
_linear_interp ENDP
_TEXT	ENDS
END
