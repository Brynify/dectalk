	TITLE	D:\work\product\dapi\src\Vtm\vtm.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_B0
PUBLIC	_azero_tab
PUBLIC	_bzero_tab
PUBLIC	_czero_tab
PUBLIC	_amptable
PUBLIC	_cosine_table
PUBLIC	_radius_table
PUBLIC	_tiltf
PUBLIC	_tiltbw
PUBLIC	_logtab
PUBLIC	_loginv
PUBLIC	_decaytab
PUBLIC	_Tgaintab
_DATA	SEGMENT
COMM	_radius:WORD
_B0	DW	04b0H
	DW	0476H
	DW	0440H
	DW	040eH
	DW	03dfH
	DW	03b4H
	DW	038bH
	DW	0365H
	DW	0341H
	DW	031fH
	DW	0300H
	DW	02e2H
	DW	02c6H
	DW	02abH
	DW	0292H
	DW	027aH
	DW	0264H
	DW	024eH
	DW	023aH
	DW	0227H
	DW	0215H
	DW	0203H
	DW	01f3H
	DW	01e3H
	DW	01d4H
	DW	01c6H
	DW	01b8H
	DW	01abH
	DW	019fH
	DW	0193H
	DW	0187H
	DW	017cH
	DW	0172H
	DW	0168H
	DW	015eH
	DW	0155H
	DW	014cH
	DW	0143H
	DW	013bH
	DW	0133H
	DW	012cH
	DW	0124H
	DW	011dH
	DW	0116H
	DW	0110H
	DW	0109H
	DW	0103H
	DW	0fdH
	DW	0f7H
	DW	0f2H
	DW	0edH
	DW	0e7H
	DW	0e2H
	DW	0ddH
	DW	0d9H
	DW	0d4H
	DW	0d0H
	DW	0ccH
	DW	0c7H
	DW	0c3H
	DW	0c0H
	DW	0bcH
	DW	0b8H
	DW	0b4H
	DW	0b1H
	DW	0aeH
	DW	0aaH
	DW	0a7H
	DW	0a4H
	DW	0a1H
	DW	09eH
	DW	09bH
	DW	099H
	DW	096H
	DW	093H
	DW	091H
	DW	08eH
	DW	08cH
	DW	089H
	DW	087H
	DW	085H
	DW	083H
	DW	080H
	DW	07eH
	DW	07cH
	DW	07aH
	DW	078H
	DW	077H
	DW	075H
	DW	073H
	DW	071H
	DW	06fH
	DW	06eH
	DW	06cH
	DW	06aH
	DW	069H
	DW	067H
	DW	066H
	DW	064H
	DW	063H
	DW	061H
	DW	060H
	DW	05fH
	DW	05dH
	DW	05cH
	DW	05bH
	DW	05aH
	DW	058H
	DW	057H
	DW	056H
	DW	055H
	DW	054H
	DW	053H
	DW	052H
	DW	050H
	DW	04fH
	DW	04eH
	DW	04dH
	DW	04cH
	DW	04bH
	DW	04bH
	DW	04aH
	DW	049H
	DW	048H
	DW	047H
	DW	046H
	DW	045H
	DW	044H
	DW	044H
	DW	043H
	DW	042H
	DW	041H
	DW	040H
	DW	040H
	DW	03fH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03cH
	DW	03bH
	DW	03bH
	DW	03aH
	DW	039H
	DW	039H
	DW	038H
	DW	038H
	DW	037H
	DW	037H
	DW	036H
	DW	036H
	DW	035H
	DW	035H
	DW	034H
	DW	034H
	DW	033H
	DW	033H
	DW	032H
	DW	032H
	DW	031H
	DW	031H
	DW	030H
	DW	030H
	DW	02fH
	DW	02fH
	DW	02eH
	DW	02eH
	DW	02dH
	DW	02dH
	DW	02cH
	DW	02cH
	DW	02bH
	DW	02bH
	DW	02aH
	DW	02aH
	DW	029H
	DW	029H
	DW	029H
	DW	029H
	DW	028H
	DW	028H
	DW	027H
	DW	027H
	DW	026H
	DW	026H
	DW	026H
	DW	026H
	DW	025H
	DW	025H
	DW	024H
	DW	024H
	DW	024H
	DW	024H
	DW	023H
	DW	023H
	DW	023H
	DW	023H
	DW	022H
	DW	022H
	DW	021H
	DW	021H
	DW	021H
	DW	021H
	DW	020H
	DW	020H
	DW	020H
	DW	020H
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01fH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01eH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01dH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01cH
	DW	01bH
	DW	01bH
_azero_tab DW	0f18H
	DW	0e1bH
	DW	0d4dH
	DW	0c87H
	DW	0bcaH
	DW	0b2dH
	DW	0a8cH
	DW	09fbH
	DW	0982H
	DW	0905H
	DW	0893H
	DW	082dH
	DW	07caH
	DW	0770H
	DW	071eH
	DW	06ceH
	DW	0685H
	DW	063eH
	DW	05fdH
	DW	05c1H
	DW	0587H
	DW	0551H
	DW	0520H
	DW	04efH
	DW	04c0H
	DW	0494H
	DW	046bH
	DW	0446H
	DW	0420H
	DW	03fcH
	DW	03dcH
	DW	03c3H
	DW	039eH
	DW	0381H
	DW	0365H
	ORG $+2
_bzero_tab DW	0e2e3H
	DW	0e4d0H
	DW	0e662H
	DW	0e7e5H
	DW	0e956H
	DW	0ea88H
	DW	0ebc3H
	DW	0ecddH
	DW	0edcaH
	DW	0eebeH
	DW	0ef9bH
	DW	0f064H
	DW	0f125H
	DW	0f1d4H
	DW	0f275H
	DW	0f310H
	DW	0f39fH
	DW	0f429H
	DW	0f4a7H
	DW	0f51cH
	DW	0f58eH
	DW	0f5f7H
	DW	0f658H
	DW	0f6b7H
	DW	0f713H
	DW	0f768H
	DW	0f7b8H
	DW	0f802H
	DW	0f84aH
	DW	0f891H
	DW	0f8d0H
	DW	0f90eH
	DW	0f949H
	DW	0f982H
	DW	0f9b7H
	ORG $+2
_czero_tab DW	0e5dH
	DW	0d6dH
	DW	0ca9H
	DW	0becH
	DW	0b38H
	DW	0aa3H
	DW	0a09H
	DW	0980H
	DW	090cH
	DW	0895H
	DW	0829H
	DW	07c8H
	DW	0769H
	DW	0714H
	DW	06c6H
	DW	067aH
	DW	0634H
	DW	05f1H
	DW	05b3H
	DW	057aH
	DW	0543H
	DW	0510H
	DW	04e0H
	DW	04b2H
	DW	0485H
	DW	045bH
	DW	0435H
	DW	0411H
	DW	03edH
	DW	03cbH
	DW	03acH
	DW	038eH
	DW	0371H
	DW	0355H
	DW	033bH
	ORG $+2
_amptable DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0eH
	DW	010H
	DW	012H
	DW	014H
	DW	016H
	DW	019H
	DW	01cH
	DW	020H
	DW	023H
	DW	028H
	DW	02dH
	DW	033H
	DW	039H
	DW	040H
	DW	047H
	DW	050H
	DW	05aH
	DW	065H
	DW	072H
	DW	080H
	DW	08eH
	DW	09fH
	DW	0b3H
	DW	0caH
	DW	0e3H
	DW	0100H
	DW	011cH
	DW	013eH
	DW	0167H
	DW	0195H
	DW	01c7H
	DW	0200H
	DW	0238H
	DW	027eH
	DW	02cfH
	DW	032bH
	DW	038fH
	DW	0400H
	DW	0471H
	DW	04fcH
	DW	059eH
	DW	0656H
	DW	071fH
	DW	0800H
	DW	08e1H
	DW	09f8H
	DW	0b3bH
	DW	0cacH
	DW	0e3dH
	DW	01000H
	DW	011c3H
	DW	013f0H
	DW	01677H
	DW	01958H
	DW	01c7bH
	DW	02000H
	DW	02385H
	DW	027dfH
	DW	02ceeH
	DW	032b0H
	DW	038f6H
	DW	04000H
	DW	047aeH
	DW	050a4H
	DW	05b85H
	DW	06666H
	DW	07333H
	DW	07fffH
_cosine_table DW 02000H
	DW	01fffH
	DW	01fffH
	DW	01fffH
	DW	01ffeH
	DW	01ffdH
	DW	01ffcH
	DW	01ffaH
	DW	01ff9H
	DW	01ff7H
	DW	01ff5H
	DW	01ff3H
	DW	01ff1H
	DW	01feeH
	DW	01febH
	DW	01fe8H
	DW	01fe5H
	DW	01fe2H
	DW	01fdeH
	DW	01fdaH
	DW	01fd6H
	DW	01fd2H
	DW	01fcdH
	DW	01fc9H
	DW	01fc4H
	DW	01fbfH
	DW	01fbaH
	DW	01fb4H
	DW	01faeH
	DW	01fa9H
	DW	01fa3H
	DW	01f9cH
	DW	01f96H
	DW	01f8fH
	DW	01f88H
	DW	01f81H
	DW	01f7aH
	DW	01f72H
	DW	01f6bH
	DW	01f63H
	DW	01f5aH
	DW	01f52H
	DW	01f4aH
	DW	01f41H
	DW	01f38H
	DW	01f2fH
	DW	01f25H
	DW	01f1cH
	DW	01f12H
	DW	01f08H
	DW	01efeH
	DW	01ef4H
	DW	01ee9H
	DW	01edfH
	DW	01ed4H
	DW	01ec8H
	DW	01ebdH
	DW	01eb2H
	DW	01ea6H
	DW	01e9aH
	DW	01e8eH
	DW	01e81H
	DW	01e75H
	DW	01e68H
	DW	01e5bH
	DW	01e4eH
	DW	01e41H
	DW	01e33H
	DW	01e26H
	DW	01e18H
	DW	01e0aH
	DW	01dfbH
	DW	01dedH
	DW	01ddeH
	DW	01dcfH
	DW	01dc0H
	DW	01db1H
	DW	01da2H
	DW	01d92H
	DW	01d82H
	DW	01d72H
	DW	01d62H
	DW	01d51H
	DW	01d41H
	DW	01d30H
	DW	01d1fH
	DW	01d0eH
	DW	01cfdH
	DW	01cebH
	DW	01cd9H
	DW	01cc7H
	DW	01cb5H
	DW	01ca3H
	DW	01c91H
	DW	01c7eH
	DW	01c6bH
	DW	01c58H
	DW	01c45H
	DW	01c32H
	DW	01c1eH
	DW	01c0aH
	DW	01bf6H
	DW	01be2H
	DW	01bceH
	DW	01bb9H
	DW	01ba5H
	DW	01b90H
	DW	01b7bH
	DW	01b66H
	DW	01b50H
	DW	01b3bH
	DW	01b25H
	DW	01b0fH
	DW	01af9H
	DW	01ae3H
	DW	01acdH
	DW	01ab6H
	DW	01a9fH
	DW	01a88H
	DW	01a71H
	DW	01a5aH
	DW	01a42H
	DW	01a2bH
	DW	01a13H
	DW	019fbH
	DW	019e3H
	DW	019cbH
	DW	019b2H
	DW	0199aH
	DW	01981H
	DW	01968H
	DW	0194fH
	DW	01935H
	DW	0191cH
	DW	01902H
	DW	018e9H
	DW	018cfH
	DW	018b5H
	DW	0189aH
	DW	01880H
	DW	01865H
	DW	0184bH
	DW	01830H
	DW	01815H
	DW	017faH
	DW	017deH
	DW	017c3H
	DW	017a7H
	DW	0178bH
	DW	0176fH
	DW	01753H
	DW	01737H
	DW	0171bH
	DW	016feH
	DW	016e1H
	DW	016c4H
	DW	016a7H
	DW	0168aH
	DW	0166dH
	DW	01650H
	DW	01632H
	DW	01614H
	DW	015f6H
	DW	015d8H
	DW	015baH
	DW	0159cH
	DW	0157dH
	DW	0155fH
	DW	01540H
	DW	01521H
	DW	01502H
	DW	014e3H
	DW	014c4H
	DW	014a4H
	DW	01485H
	DW	01465H
	DW	01445H
	DW	01426H
	DW	01406H
	DW	013e5H
	DW	013c5H
	DW	013a5H
	DW	01384H
	DW	01363H
	DW	01342H
	DW	01322H
	DW	01300H
	DW	012dfH
	DW	012beH
	DW	0129dH
	DW	0127bH
	DW	01259H
	DW	01238H
	DW	01216H
	DW	011f4H
	DW	011d1H
	DW	011afH
	DW	0118dH
	DW	0116aH
	DW	01148H
	DW	01125H
	DW	01102H
	DW	010dfH
	DW	010bcH
	DW	01099H
	DW	01076H
	DW	01052H
	DW	0102fH
	DW	0100bH
	DW	0fe8H
	DW	0fc4H
	DW	0fa0H
	DW	0f7cH
	DW	0f58H
	DW	0f34H
	DW	0f10H
	DW	0eebH
	DW	0ec7H
	DW	0ea2H
	DW	0e7dH
	DW	0e59H
	DW	0e34H
	DW	0e0fH
	DW	0deaH
	DW	0dc5H
	DW	0d9fH
	DW	0d7aH
	DW	0d55H
	DW	0d2fH
	DW	0d0aH
	DW	0ce4H
	DW	0cbeH
	DW	0c99H
	DW	0c73H
	DW	0c4dH
	DW	0c27H
	DW	0c01H
	DW	0bdaH
	DW	0bb4H
	DW	0b8eH
	DW	0b67H
	DW	0b41H
	DW	0b1aH
	DW	0af3H
	DW	0acdH
	DW	0aa6H
	DW	0a7fH
	DW	0a58H
	DW	0a31H
	DW	0a0aH
	DW	09e3H
	DW	09bcH
	DW	0995H
	DW	096dH
	DW	0946H
	DW	091eH
	DW	08f7H
	DW	08cfH
	DW	08a8H
	DW	0880H
	DW	0858H
	DW	0831H
	DW	0809H
	DW	07e1H
	DW	07b9H
	DW	0791H
	DW	0769H
	DW	0741H
	DW	0719H
	DW	06f0H
	DW	06c8H
	DW	06a0H
	DW	0678H
	DW	064fH
	DW	0627H
	DW	05ffH
	DW	05d6H
	DW	05aeH
	DW	0585H
	DW	055cH
	DW	0534H
	DW	050bH
	DW	04e3H
	DW	04baH
	DW	0491H
	DW	0468H
	DW	043fH
	DW	0417H
	DW	03eeH
	DW	03c5H
	DW	039cH
	DW	0373H
	DW	034aH
	DW	0321H
	DW	02f8H
	DW	02cfH
	DW	02a6H
	DW	027dH
	DW	0254H
	DW	022bH
	DW	0202H
	DW	01d9H
	DW	01b0H
	DW	0187H
	DW	015dH
	DW	0134H
	DW	010bH
	DW	0e2H
	DW	0b9H
	DW	090H
	DW	066H
	DW	03dH
	DW	014H
	DW	0ffecH
	DW	0ffc3H
	DW	0ff9aH
	DW	0ff70H
	DW	0ff47H
	DW	0ff1eH
	DW	0fef5H
	DW	0feccH
	DW	0fea3H
	DW	0fe79H
	DW	0fe50H
	DW	0fe27H
	DW	0fdfeH
	DW	0fdd5H
	DW	0fdacH
	DW	0fd83H
	DW	0fd5aH
	DW	0fd31H
	DW	0fd08H
	DW	0fcdfH
	DW	0fcb6H
	DW	0fc8dH
	DW	0fc64H
	DW	0fc3bH
	DW	0fc12H
	DW	0fbe9H
	DW	0fbc1H
	DW	0fb98H
	DW	0fb6fH
	DW	0fb46H
	DW	0fb1eH
	DW	0faf5H
	DW	0faccH
	DW	0faa4H
	DW	0fa7bH
	DW	0fa52H
	DW	0fa2aH
	DW	0fa01H
	DW	0f9d9H
	DW	0f9b1H
	DW	0f988H
	DW	0f960H
	DW	0f938H
	DW	0f910H
	DW	0f8e7H
	DW	0f8bfH
	DW	0f897H
	DW	0f86fH
	DW	0f847H
	DW	0f81fH
	DW	0f7f7H
	DW	0f7cfH
	DW	0f7a8H
	DW	0f780H
	DW	0f758H
	DW	0f731H
	DW	0f709H
	DW	0f6e2H
	DW	0f6baH
	DW	0f693H
	DW	0f66bH
	DW	0f644H
	DW	0f61dH
	DW	0f5f6H
	DW	0f5cfH
	DW	0f5a8H
	DW	0f581H
	DW	0f55aH
	DW	0f533H
	DW	0f50dH
	DW	0f4e6H
	DW	0f4bfH
	DW	0f499H
	DW	0f472H
	DW	0f44cH
	DW	0f426H
	DW	0f3ffH
	DW	0f3d9H
	DW	0f3b3H
	DW	0f38dH
	DW	0f367H
	DW	0f342H
	DW	0f31cH
	DW	0f2f6H
	DW	0f2d1H
	DW	0f2abH
	DW	0f286H
	DW	0f261H
	DW	0f23bH
	DW	0f216H
	DW	0f1f1H
	DW	0f1ccH
	DW	0f1a7H
	DW	0f183H
	DW	0f15eH
	DW	0f139H
	DW	0f115H
	DW	0f0f1H
	DW	0f0ccH
	DW	0f0a8H
	DW	0f084H
	DW	0f060H
	DW	0f03cH
	DW	0f018H
	DW	0eff5H
	DW	0efd1H
	DW	0efaeH
	DW	0ef8aH
	DW	0ef67H
	DW	0ef44H
	DW	0ef21H
	DW	0eefeH
	DW	0eedbH
	DW	0eeb8H
	DW	0ee96H
	DW	0ee73H
	DW	0ee51H
	DW	0ee2fH
	DW	0ee0cH
	DW	0edeaH
	DW	0edc9H
	DW	0eda7H
	DW	0ed85H
	DW	0ed63H
	DW	0ed42H
	DW	0ed21H
	DW	0ed00H
	DW	0ecdeH
	DW	0ecbeH
	DW	0ec9dH
	DW	0ec7cH
	DW	0ec5bH
	DW	0ec3bH
	DW	0ec1bH
	DW	0ebfbH
	DW	0ebdaH
	DW	0ebbbH
	DW	0eb9bH
	DW	0eb7bH
	DW	0eb5cH
	DW	0eb3cH
	DW	0eb1dH
	DW	0eafeH
	DW	0eadfH
	DW	0eac0H
	DW	0eaa1H
	DW	0ea83H
	DW	0ea64H
	DW	0ea46H
	DW	0ea28H
	DW	0ea0aH
	DW	0e9ecH
	DW	0e9ceH
	DW	0e9b1H
	DW	0e993H
	DW	0e976H
	DW	0e959H
	DW	0e93cH
	DW	0e91fH
	DW	0e902H
	DW	0e8e5H
	DW	0e8c9H
	DW	0e8adH
	DW	0e891H
	DW	0e875H
	DW	0e859H
	DW	0e83dH
	DW	0e822H
	DW	0e806H
	DW	0e7ebH
	DW	0e7d0H
	DW	0e7b5H
	DW	0e79bH
	DW	0e780H
	DW	0e766H
	DW	0e74bH
	DW	0e731H
	DW	0e717H
	DW	0e6feH
	DW	0e6e4H
	DW	0e6cbH
	DW	0e6b1H
	DW	0e698H
	DW	0e67fH
	DW	0e666H
	DW	0e64eH
	DW	0e635H
	DW	0e61dH
	DW	0e605H
	DW	0e5edH
	DW	0e5d5H
	DW	0e5beH
	DW	0e5a6H
	DW	0e58fH
	DW	0e578H
	DW	0e561H
	DW	0e54aH
	DW	0e533H
	DW	0e51dH
	DW	0e507H
	DW	0e4f1H
	DW	0e4dbH
	DW	0e4c5H
	DW	0e4b0H
	DW	0e49aH
	DW	0e485H
	DW	0e470H
	DW	0e45bH
	DW	0e447H
	DW	0e432H
	DW	0e41eH
	DW	0e40aH
	DW	0e3f6H
	DW	0e3e2H
	DW	0e3ceH
	DW	0e3bbH
	DW	0e3a8H
	DW	0e395H
	DW	0e382H
	DW	0e36fH
	DW	0e35dH
	DW	0e34bH
	DW	0e339H
	DW	0e327H
	DW	0e315H
	DW	0e303H
	DW	0e2f2H
	DW	0e2e1H
	DW	0e2d0H
	DW	0e2bfH
	DW	0e2afH
	DW	0e29eH
	DW	0e28eH
	DW	0e27eH
	DW	0e26eH
	DW	0e25eH
	DW	0e24fH
	DW	0e240H
	DW	0e231H
	DW	0e222H
	DW	0e213H
	DW	0e205H
	DW	0e1f6H
	DW	0e1e8H
	DW	0e1daH
	DW	0e1cdH
	DW	0e1bfH
	DW	0e1b2H
	DW	0e1a5H
	DW	0e198H
	DW	0e18bH
	DW	0e17fH
	DW	0e172H
	DW	0e166H
	DW	0e15aH
	DW	0e14eH
	DW	0e143H
	DW	0e138H
	DW	0e12cH
	DW	0e121H
	DW	0e117H
	DW	0e10cH
	DW	0e102H
	DW	0e0f8H
	DW	0e0eeH
	DW	0e0e4H
	DW	0e0dbH
	DW	0e0d1H
	DW	0e0c8H
	DW	0e0bfH
	DW	0e0b6H
	DW	0e0aeH
	DW	0e0a6H
	DW	0e09dH
	DW	0e095H
	DW	0e08eH
	DW	0e086H
	DW	0e07fH
	DW	0e078H
	DW	0e071H
	DW	0e06aH
	DW	0e064H
	DW	0e05dH
	DW	0e057H
	DW	0e052H
	DW	0e04cH
	DW	0e046H
	DW	0e041H
	DW	0e03cH
	DW	0e037H
	DW	0e033H
	DW	0e02eH
	DW	0e02aH
	DW	0e026H
	DW	0e022H
	DW	0e01eH
	DW	0e01bH
	DW	0e018H
	DW	0e015H
	DW	0e012H
	DW	0e00fH
	DW	0e00dH
	DW	0e00bH
	DW	0e009H
	DW	0e007H
	DW	0e006H
	DW	0e004H
	DW	0e003H
	DW	0e002H
	DW	0e001H
	DW	0e001H
	DW	0e001H
	DW	0e001H
_radius_table DW 01000H
	DW	0ff5H
	DW	0febH
	DW	0fe1H
	DW	0fd7H
	DW	0fccH
	DW	0fc2H
	DW	0fb8H
	DW	0faeH
	DW	0fa4H
	DW	0f9aH
	DW	0f90H
	DW	0f86H
	DW	0f7cH
	DW	0f72H
	DW	0f68H
	DW	0f5eH
	DW	0f54H
	DW	0f4aH
	DW	0f41H
	DW	0f37H
	DW	0f2dH
	DW	0f23H
	DW	0f19H
	DW	0f10H
	DW	0f06H
	DW	0efcH
	DW	0ef3H
	DW	0ee9H
	DW	0ee0H
	DW	0ed6H
	DW	0eccH
	DW	0ec3H
	DW	0eb9H
	DW	0eb0H
	DW	0ea7H
	DW	0e9dH
	DW	0e94H
	DW	0e8aH
	DW	0e81H
	DW	0e78H
	DW	0e6eH
	DW	0e65H
	DW	0e5cH
	DW	0e53H
	DW	0e49H
	DW	0e40H
	DW	0e37H
	DW	0e2eH
	DW	0e25H
	DW	0e1cH
	DW	0e13H
	DW	0e0aH
	DW	0e01H
	DW	0df8H
	DW	0defH
	DW	0de6H
	DW	0dddH
	DW	0dd4H
	DW	0dcbH
	DW	0dc2H
	DW	0db9H
	DW	0db0H
	DW	0da8H
	DW	0d9fH
	DW	0d96H
	DW	0d8dH
	DW	0d85H
	DW	0d7cH
	DW	0d73H
	DW	0d6bH
	DW	0d62H
	DW	0d59H
	DW	0d51H
	DW	0d48H
	DW	0d40H
	DW	0d37H
	DW	0d2fH
	DW	0d26H
	DW	0d1eH
	DW	0d15H
	DW	0d0dH
	DW	0d05H
	DW	0cfcH
	DW	0cf4H
	DW	0cecH
	DW	0ce3H
	DW	0cdbH
	DW	0cd3H
	DW	0ccbH
	DW	0cc2H
	DW	0cbaH
	DW	0cb2H
	DW	0caaH
	DW	0ca2H
	DW	0c9aH
	DW	0c91H
	DW	0c89H
	DW	0c81H
	DW	0c79H
	DW	0c71H
	DW	0c69H
	DW	0c61H
	DW	0c59H
	DW	0c51H
	DW	0c49H
	DW	0c42H
	DW	0c3aH
	DW	0c32H
	DW	0c2aH
	DW	0c22H
	DW	0c1aH
	DW	0c13H
	DW	0c0bH
	DW	0c03H
	DW	0bfbH
	DW	0bf4H
	DW	0becH
	DW	0be4H
	DW	0bddH
	DW	0bd5H
	DW	0bcdH
	DW	0bc6H
	DW	0bbeH
	DW	0bb7H
	DW	0bafH
	DW	0ba8H
	DW	0ba0H
	DW	0b99H
	DW	0b91H
	DW	0b8aH
	DW	0b82H
	DW	0b7bH
	DW	0b74H
	DW	0b6cH
	DW	0b65H
	DW	0b5eH
	DW	0b56H
	DW	0b4fH
	DW	0b48H
	DW	0b41H
	DW	0b39H
	DW	0b32H
	DW	0b2bH
	DW	0b24H
	DW	0b1dH
	DW	0b15H
	DW	0b0eH
	DW	0b07H
	DW	0b00H
	DW	0af9H
	DW	0af2H
	DW	0aebH
	DW	0ae4H
	DW	0addH
	DW	0ad6H
	DW	0acfH
	DW	0ac8H
	DW	0ac1H
	DW	0abaH
	DW	0ab3H
	DW	0aacH
	DW	0aa6H
	DW	0a9fH
	DW	0a98H
	DW	0a91H
	DW	0a8aH
	DW	0a84H
	DW	0a7dH
	DW	0a76H
	DW	0a6fH
	DW	0a69H
	DW	0a62H
	DW	0a5bH
	DW	0a55H
	DW	0a4eH
	DW	0a47H
	DW	0a41H
	DW	0a3aH
	DW	0a34H
	DW	0a2dH
	DW	0a26H
	DW	0a20H
	DW	0a19H
	DW	0a13H
	DW	0a0cH
	DW	0a06H
	DW	0a00H
	DW	09f9H
	DW	09f3H
	DW	09ecH
	DW	09e6H
	DW	09e0H
	DW	09d9H
	DW	09d3H
	DW	09cdH
	DW	09c6H
	DW	09c0H
	DW	09baH
	DW	09b3H
	DW	09adH
	DW	09a7H
	DW	09a1H
	DW	099bH
	DW	0994H
	DW	098eH
	DW	0988H
	DW	0982H
	DW	097cH
	DW	0976H
	DW	0970H
	DW	096aH
	DW	0964H
	DW	095eH
	DW	0958H
	DW	0952H
	DW	094cH
	DW	0946H
	DW	0940H
	DW	093aH
	DW	0934H
	DW	092eH
	DW	0928H
	DW	0922H
	DW	091cH
	DW	0916H
	DW	0911H
	DW	090bH
	DW	0905H
	DW	08ffH
	DW	08f9H
	DW	08f4H
	DW	08eeH
	DW	08e8H
	DW	08e2H
	DW	08ddH
	DW	08d7H
	DW	08d1H
	DW	08ccH
	DW	08c6H
	DW	08c0H
	DW	08bbH
	DW	08b5H
	DW	08afH
	DW	08aaH
	DW	08a4H
	DW	089fH
	DW	0899H
	DW	0894H
	DW	088eH
	DW	0889H
	DW	0883H
	DW	087eH
	DW	0878H
	DW	0873H
	DW	086dH
	DW	0868H
	DW	0863H
	DW	085dH
	DW	0858H
	DW	0852H
	DW	084dH
	DW	0848H
	DW	0842H
	DW	083dH
	DW	0838H
	DW	0833H
	DW	082dH
	DW	0828H
	DW	0823H
	DW	081eH
	DW	0818H
	DW	0813H
	DW	080eH
	DW	0809H
	DW	0804H
	DW	07feH
	DW	07f9H
	DW	07f4H
	DW	07efH
	DW	07eaH
	DW	07e5H
	DW	07e0H
	DW	07dbH
	DW	07d6H
	DW	07d1H
	DW	07ccH
	DW	07c7H
	DW	07c2H
	DW	07bdH
	DW	07b8H
	DW	07b3H
	DW	07aeH
	DW	07a9H
	DW	07a4H
	DW	079fH
	DW	079aH
	DW	0795H
	DW	0790H
	DW	078bH
	DW	0787H
	DW	0782H
	DW	077dH
	DW	0778H
	DW	0773H
	DW	076fH
	DW	076aH
	DW	0765H
	DW	0760H
	DW	075cH
	DW	0757H
	DW	0752H
	DW	074dH
	DW	0749H
	DW	0744H
	DW	073fH
	DW	073bH
	DW	0736H
	DW	0731H
	DW	072dH
	DW	0728H
	DW	0724H
	DW	071fH
	DW	071aH
	DW	0716H
	DW	0711H
	DW	070dH
	DW	0708H
	DW	0704H
	DW	06ffH
	DW	06fbH
	DW	06f6H
	DW	06f2H
	DW	06edH
	DW	06e9H
	DW	06e4H
	DW	06e0H
	DW	06dbH
	DW	06d7H
	DW	06d3H
	DW	06ceH
	DW	06caH
	DW	06c6H
	DW	06c1H
	DW	06bdH
	DW	06b9H
	DW	06b4H
	DW	06b0H
	DW	06acH
	DW	06a7H
	DW	06a3H
	DW	069fH
	DW	069bH
	DW	0696H
	DW	0692H
	DW	068eH
	DW	068aH
	DW	0685H
	DW	0681H
	DW	067dH
	DW	0679H
	DW	0675H
	DW	0671H
	DW	066cH
	DW	0668H
	DW	0664H
	DW	0660H
	DW	065cH
	DW	0658H
	DW	0654H
	DW	0650H
	DW	064cH
	DW	0648H
	DW	0644H
	DW	0640H
	DW	063cH
	DW	0638H
	DW	0634H
	DW	0630H
	DW	062cH
	DW	0628H
	DW	0624H
	DW	0620H
	DW	061cH
	DW	0618H
	DW	0614H
	DW	0610H
	DW	060cH
	DW	0608H
	DW	0604H
	DW	0601H
	DW	05fdH
	DW	05f9H
	DW	05f5H
	DW	05f1H
	DW	05edH
	DW	05e9H
	DW	05e6H
	DW	05e2H
	DW	05deH
	DW	05daH
	DW	05d7H
	DW	05d3H
	DW	05cfH
	DW	05cbH
	DW	05c8H
	DW	05c4H
	DW	05c0H
	DW	05bdH
	DW	05b9H
	DW	05b5H
	DW	05b1H
	DW	05aeH
	DW	05aaH
	DW	05a7H
	DW	05a3H
	DW	059fH
	DW	059cH
	DW	0598H
	DW	0594H
	DW	0591H
	DW	058dH
	DW	058aH
	DW	0586H
	DW	0583H
	DW	057fH
	DW	057cH
	DW	0578H
	DW	0575H
	DW	0571H
	DW	056dH
	DW	056aH
	DW	0567H
	DW	0563H
	DW	0560H
	DW	055cH
	DW	0559H
	DW	0555H
	DW	0552H
	DW	054eH
	DW	054bH
	DW	0548H
	DW	0544H
	DW	0541H
	DW	053dH
	DW	053aH
	DW	0537H
	DW	0533H
	DW	0530H
	DW	052dH
	DW	0529H
	DW	0526H
	DW	0523H
	DW	051fH
	DW	051cH
	DW	0519H
	DW	0516H
	DW	0512H
	DW	050fH
	DW	050cH
	DW	0509H
	DW	0505H
	DW	0502H
	DW	04ffH
	DW	04fcH
	DW	04f8H
	DW	04f5H
	DW	04f2H
	DW	04efH
	DW	04ecH
	DW	04e9H
	DW	04e5H
	DW	04e2H
	DW	04dfH
	DW	04dcH
	DW	04d9H
	DW	04d6H
	DW	04d3H
	DW	04d0H
	DW	04ccH
	DW	04c9H
	DW	04c6H
	DW	04c3H
	DW	04c0H
	DW	04bdH
	DW	04baH
	DW	04b7H
	DW	04b4H
	DW	04b1H
	DW	04aeH
	DW	04abH
	DW	04a8H
	DW	04a5H
	DW	04a2H
	DW	049fH
	DW	049cH
	DW	0499H
	DW	0496H
	DW	0493H
	DW	0490H
	DW	048dH
	DW	048aH
	DW	0487H
	DW	0485H
	DW	0482H
	DW	047fH
	DW	047cH
	DW	0479H
	DW	0476H
	DW	0473H
	DW	0470H
	DW	046dH
	DW	046bH
	DW	0468H
	DW	0465H
	DW	0462H
	DW	045fH
	DW	045dH
	DW	045aH
	DW	0457H
	DW	0454H
	DW	0451H
	DW	044fH
	DW	044cH
	DW	0449H
	DW	0446H
	DW	0444H
	DW	0441H
	DW	043eH
	DW	043bH
	DW	0439H
	DW	0436H
	DW	0433H
	DW	0430H
	DW	042eH
	DW	042bH
	DW	0428H
	DW	0426H
	DW	0423H
	DW	0420H
	DW	041eH
	DW	041bH
	DW	0418H
	DW	0416H
	DW	0413H
	DW	0411H
	DW	040eH
	DW	040bH
	DW	0409H
	DW	0406H
	DW	0404H
	DW	0401H
	DW	03feH
	DW	03fcH
	DW	03f9H
	DW	03f7H
	DW	03f4H
	DW	03f2H
	DW	03efH
	DW	03edH
	DW	03eaH
	DW	03e8H
	DW	03e5H
	DW	03e3H
	DW	03e0H
	DW	03deH
	DW	03dbH
	DW	03d9H
	DW	03d6H
	DW	03d4H
	DW	03d1H
	DW	03cfH
	DW	03ccH
	DW	03caH
	DW	03c7H
	DW	03c5H
	DW	03c3H
	DW	03c0H
	DW	03beH
	DW	03bbH
	DW	03b9H
	DW	03b7H
	DW	03b4H
	DW	03b2H
	DW	03afH
	DW	03adH
	DW	03abH
	DW	03a8H
	DW	03a6H
	DW	03a4H
	DW	03a1H
	DW	039fH
	DW	039dH
	DW	039aH
	DW	0398H
	DW	0396H
	DW	0393H
	DW	0391H
	DW	038fH
	DW	038cH
	DW	038aH
	DW	0388H
	DW	0386H
	DW	0383H
	DW	0381H
	DW	037fH
	DW	037dH
	DW	037aH
	DW	0378H
	DW	0376H
	DW	0374H
	DW	0371H
	DW	036fH
	DW	036dH
	DW	036bH
	DW	0369H
	DW	0366H
	DW	0364H
	DW	0362H
	DW	0360H
	DW	035eH
	DW	035cH
	DW	0359H
	DW	0357H
	DW	0355H
	ORG $+2
_tiltf	DW	01130H
	DW	010eaH
	DW	0ea6H
	DW	0cc6H
	DW	0b22H
	DW	09c4H
	DW	095aH
	DW	08f1H
	DW	0888H
	DW	0820H
	DW	07b9H
	DW	0753H
	DW	06eaH
	DW	0682H
	DW	061aH
	DW	05b2H
	DW	054aH
	DW	04e2H
	DW	04adH
	DW	0479H
	DW	0445H
	DW	0411H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_tiltbw	DW	0762H
	DW	0754H
	DW	0708H
	DW	06c4H
	DW	0688H
	DW	0656H
	DW	062cH
	DW	0602H
	DW	05d2H
	DW	05a6H
	DW	057bH
	DW	0550H
	DW	0526H
	DW	04fcH
	DW	04d3H
	DW	04abH
	DW	0482H
	DW	045aH
	DW	0441H
	DW	0427H
	DW	040eH
	DW	03f6H
	DW	03ddH
	DW	03a9H
	DW	0375H
	DW	0341H
	DW	030dH
	DW	02d9H
	DW	02a5H
	DW	0271H
	DW	0257H
	DW	023dH
	DW	0223H
	DW	0209H
	DW	01efH
	DW	01d5H
	DW	01baH
	DW	01a0H
	DW	0186H
	DW	016cH
	DW	0152H
	DW	0138H
_logtab	DW	00H
	DW	05aH
	DW	078H
	DW	08aH
	DW	096H
	DW	0a0H
	DW	0a8H
	DW	0aeH
	DW	0b4H
	DW	0b9H
	DW	0beH
	DW	0c2H
	DW	0c6H
	DW	0c9H
	DW	0ccH
	DW	0cfH
	DW	0d2H
	DW	0d5H
	DW	0d7H
	DW	0daH
	DW	0dcH
	DW	0deH
	DW	0e0H
	DW	0e2H
	DW	0e4H
	DW	0e6H
	DW	0e7H
	DW	0e9H
	DW	0ebH
	DW	0ecH
	DW	0eeH
	DW	0efH
	DW	0f0H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	0109H
	DW	010aH
	DW	010bH
	DW	010cH
	DW	010cH
	DW	010dH
	DW	010eH
	DW	010eH
	DW	010fH
	DW	0110H
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0114H
	DW	0115H
	DW	0115H
	DW	0116H
	DW	0116H
	DW	0117H
	DW	0118H
	DW	0118H
	DW	0119H
	DW	0119H
	DW	011aH
	DW	011aH
	DW	011bH
	DW	011bH
	DW	011cH
	DW	011cH
	DW	011dH
	DW	011dH
	DW	011eH
	DW	011eH
	DW	011fH
	DW	011fH
	DW	0120H
	DW	0120H
	DW	0120H
	DW	0121H
	DW	0121H
	DW	0122H
	DW	0122H
	DW	0123H
	DW	0123H
	DW	0124H
	DW	0124H
	DW	0124H
	DW	0125H
	DW	0125H
	DW	0126H
	DW	0126H
	DW	0126H
	DW	0127H
	DW	0127H
	DW	0127H
	DW	0128H
	DW	0128H
	DW	0129H
	DW	0129H
	DW	0129H
	DW	012aH
	DW	012aH
	DW	012aH
	DW	012bH
	DW	012bH
	DW	012cH
	DW	012cH
	DW	012cH
	DW	012dH
	DW	012dH
	DW	012dH
	DW	012eH
	DW	012eH
	DW	012eH
	DW	012fH
	DW	012fH
	DW	012fH
	DW	012fH
	DW	0130H
	DW	0130H
	DW	0130H
	DW	0131H
	DW	0131H
	DW	0131H
	DW	0132H
	DW	0132H
	DW	0132H
	DW	0133H
	DW	0133H
	DW	0133H
	DW	0133H
	DW	0134H
	DW	0134H
	DW	0134H
	DW	0135H
	DW	0135H
	DW	0135H
	DW	0135H
	DW	0136H
	DW	0136H
	DW	0136H
	DW	0136H
	DW	0137H
	DW	0137H
	DW	0137H
	DW	0138H
	DW	0138H
	DW	0138H
	DW	0138H
	DW	0139H
	DW	0139H
	DW	0139H
	DW	0139H
	DW	013aH
	DW	013aH
	DW	013aH
	DW	013aH
	DW	013bH
	DW	013bH
	DW	013bH
	DW	013bH
	DW	013cH
	DW	013cH
	DW	013cH
	DW	013cH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013dH
	DW	013eH
	DW	013eH
	DW	013eH
	DW	013eH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	013fH
	DW	0140H
	DW	0140H
	DW	0140H
	DW	0140H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0141H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0142H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0143H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0144H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0145H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0146H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0147H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0148H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	0149H
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014aH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014bH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014cH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014dH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014eH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	014fH
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0150H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0151H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0152H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0153H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0154H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0155H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0156H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0157H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0158H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	0159H
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015aH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015bH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015cH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015dH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015eH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	015fH
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0160H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0161H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0162H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0163H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0164H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0165H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0166H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0167H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0168H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	0169H
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016aH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016bH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016cH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016dH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016eH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	016fH
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0170H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0171H
	DW	0172H
	DW	0172H
	DW	0172H
_loginv	DW	07fffH
	DW	07d13H
	DW	07a38H
	DW	0776eH
	DW	074b3H
	DW	07209H
	DW	06f6fH
	DW	06ce3H
	DW	06a67H
	DW	067f9H
	DW	06599H
	DW	06347H
	DW	06102H
	DW	05ecbH
	DW	05ca1H
	DW	05a84H
	DW	05873H
	DW	0566dH
	DW	05474H
	DW	05287H
	DW	050a4H
	DW	04ecdH
	DW	04d00H
	DW	04b3eH
	DW	04986H
	DW	047d8H
	DW	04634H
	DW	0449aH
	DW	04309H
	DW	04181H
	DW	04002H
	DW	03e8cH
	DW	03d1eH
	DW	03bb9H
	DW	03a5cH
	DW	03906H
	DW	037b9H
	DW	03673H
	DW	03535H
	DW	033feH
	DW	032ceH
	DW	031a5H
	DW	03083H
	DW	02f67H
	DW	02e52H
	DW	02d43H
	DW	02c3bH
	DW	02b38H
	DW	02a3bH
	DW	02945H
	DW	02853H
	DW	02768H
	DW	02681H
	DW	025a0H
	DW	024c4H
	DW	023edH
	DW	0231bH
	DW	0224eH
	DW	02185H
	DW	020c1H
	DW	02002H
	DW	01f47H
	DW	01e90H
	DW	01dddH
	DW	01d2fH
	DW	01c84H
	DW	01bddH
	DW	01b3aH
	DW	01a9bH
	DW	01a00H
	DW	01968H
	DW	018d3H
	DW	01842H
	DW	017b4H
	DW	0172aH
	DW	016a2H
	DW	0161eH
	DW	0159dH
	DW	0151eH
	DW	014a3H
	DW	0142aH
	DW	013b4H
	DW	01341H
	DW	012d1H
	DW	01263H
	DW	011f7H
	DW	0118eH
	DW	01127H
	DW	010c3H
	DW	01061H
	DW	01001H
	DW	0fa4H
	DW	0f48H
	DW	0eefH
	DW	0e98H
	DW	0e42H
	DW	0defH
	DW	0d9dH
	DW	0d4eH
	DW	0d00H
	DW	0cb4H
	DW	0c6aH
	DW	0c21H
	DW	0bdaH
	DW	0b95H
	DW	0b51H
	DW	0b0fH
	DW	0aceH
	DW	0a8fH
	DW	0a52H
	DW	0a15H
	DW	09daH
	DW	09a1H
	DW	0968H
	DW	0931H
	DW	08fcH
	DW	08c7H
	DW	0894H
	DW	0862H
	DW	0831H
	DW	0801H
	DW	07d2H
	DW	07a4H
	DW	0778H
	DW	074cH
	DW	0721H
	DW	06f7H
	DW	06cfH
	DW	06a7H
	DW	0680H
	DW	065aH
	DW	0635H
	DW	0611H
	DW	05edH
	DW	05caH
	DW	05a9H
	DW	0588H
	DW	0567H
	DW	0548H
	DW	0529H
	DW	050bH
	DW	04edH
	DW	04d0H
	DW	04b4H
	DW	0499H
	DW	047eH
	DW	0463H
	DW	044aH
	DW	0431H
	DW	0418H
	DW	0400H
	DW	03e9H
	DW	03d2H
	DW	03bcH
	DW	03a6H
	DW	0390H
	DW	037cH
	DW	0367H
	DW	0353H
	DW	0340H
	DW	032dH
	DW	031aH
	DW	0308H
	DW	02f6H
	DW	02e5H
	DW	02d4H
	DW	02c4H
	DW	02b3H
	DW	02a4H
	DW	0294H
	DW	0285H
	DW	0276H
	DW	0268H
	DW	025aH
	DW	024cH
	DW	023fH
	DW	0232H
	DW	0225H
	DW	0218H
	DW	020cH
	DW	0200H
	DW	01f4H
	DW	01e9H
	DW	01deH
	DW	01d3H
	DW	01c8H
	DW	01beH
	DW	01b3H
	DW	01a9H
	DW	01a0H
	DW	0196H
	DW	018dH
	DW	0184H
	DW	017bH
	DW	0172H
	DW	016aH
	DW	0162H
	DW	015aH
	DW	0152H
	DW	014aH
_decaytab DW	0490H
	DW	0a81H
	DW	01416H
	DW	01d69H
	DW	024abH
	DW	02cacH
	DW	03391H
	DW	03983H
	DW	03ea8H
	DW	0454dH
	DW	04970H
	DW	04f81H
	DW	052ddH
	DW	05720H
	DW	0598eH
	DW	05da4H
	DW	060f3H
	DW	063aeH
	DW	0667dH
	DW	068cbH
	DW	06a5bH
	DW	06ca7H
	DW	06e3fH
	DW	06fd1H
	DW	070f4H
	DW	0729dH
	DW	07355H
	DW	0745eH
	DW	0753fH
	DW	07614H
	DW	076a8H
	DW	0774aH
	DW	077cbH
	DW	07849H
	DW	078ceH
	DW	07930H
	DW	0795dH
	DW	079a1H
	DW	07a0bH
	DW	07a3bH
	DW	07a4eH
	ORG $+2
_Tgaintab DW	01000H
	DW	01000H
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	0100eH
	DW	01018H
	DW	01018H
	DW	01018H
	DW	01018H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	01022H
	DW	0102cH
	DW	0102cH
	DW	0102cH
	DW	0102cH
	DW	0102cH
	DW	0102cH
	DW	01036H
	DW	01036H
	DW	01036H
	DW	01036H
	DW	01036H
	DW	01036H
	DW	01040H
	DW	01040H
	DW	01040H
	DW	01040H
	DW	01040H
_DATA	ENDS
PUBLIC	_d2pole_cf45
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_cf45 PROC NEAR

; 112  : {

  00000	56		 push	 esi

; 113  :   S16 acoef;
; 114  : 
; 115  :   /********************************************************************/
; 116  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 117  :   /*  10 KHz.                                                         */
; 118  :   /********************************************************************/
; 119  : 
; 120  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	83 f8 01	 cmp	 eax, 1
  0000a	75 21		 jne	 SHORT $L71379

; 121  :   {
; 122  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  0000c	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00010	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 123  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  00015	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0001a	0f af c2	 imul	 eax, edx
  0001d	0f af ca	 imul	 ecx, edx
  00020	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00023	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00026	24 fe		 and	 al, -2			; fffffffeH
  00028	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 124  :   }
; 125  :   else

  0002b	eb 28		 jmp	 SHORT $L71383
$L71379:

; 126  :   {
; 127  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $L71871

; 128  :     {
; 129  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00031	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00035	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 130  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0003a	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0003f	0f af c2	 imul	 eax, edx
  00042	0f af ca	 imul	 ecx, edx
  00045	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00048	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0004b	eb 08		 jmp	 SHORT $L71383
$L71871:
  0004d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00051	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71383:

; 131  :     }
; 132  :   }
; 133  : 
; 134  :   /********************************************************************/
; 135  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 136  :   /********************************************************************/
; 137  : 
; 138  :   if ( frequency >= 4500 )

  00055	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00059	7c 14		 jl	 SHORT $L71386

; 139  :   {
; 140  :     *bcoef = 0;

  0005b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _bcoef$[esp]

; 141  :     *ccoef = 0;

  0005f	8b 54 24 10	 mov	 edx, DWORD PTR _ccoef$[esp]
  00063	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00068	66 c7 02 00 00	 mov	 WORD PTR [edx], 0

; 142  :   }
; 143  :   else

  0006d	eb 4d		 jmp	 SHORT $L71387
$L71386:

; 144  :   {
; 145  :     /******************************************************************/
; 146  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 147  :     /******************************************************************/
; 148  : 
; 149  :     radius = radius_table[bandwidth >> 3];

  0006f	0f bf c9	 movsx	 ecx, cx

; 150  : 
; 151  :     /******************************************************************/
; 152  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 153  :     /******************************************************************/
; 154  : 
; 155  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00072	0f bf d0	 movsx	 edx, ax
  00075	c1 f9 03	 sar	 ecx, 3
  00078	c1 fa 03	 sar	 edx, 3
  0007b	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00083	57		 push	 edi
  00084	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  0008c	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx

; 156  : 
; 157  :     /******************************************************************/
; 158  :     /*  Let ccoef = - r^2                                             */
; 159  :     /******************************************************************/
; 160  : 
; 161  :     *ccoef = - frac4mul( radius, radius );

  00093	8b 54 24 14	 mov	 edx, DWORD PTR _ccoef$[esp+4]
  00097	0f bf c9	 movsx	 ecx, cx
  0009a	0f af c1	 imul	 eax, ecx
  0009d	8b 4c 24 10	 mov	 ecx, DWORD PTR _bcoef$[esp+4]
  000a1	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax
  000a7	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  000ae	8b f8		 mov	 edi, eax
  000b0	0f af f8	 imul	 edi, eax
  000b3	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  000b6	f7 df		 neg	 edi
  000b8	66 89 3a	 mov	 WORD PTR [edx], di
  000bb	5f		 pop	 edi
$L71387:

; 162  :   }
; 163  : 
; 164  :   /********************************************************************/
; 165  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 166  :   /********************************************************************/
; 167  : 
; 168  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  000bc	66 b8 00 10	 mov	 ax, 4096		; 00001000H
  000c0	66 2b 01	 sub	 ax, WORD PTR [ecx]
  000c3	66 2b 02	 sub	 ax, WORD PTR [edx]

; 169  :   
; 170  :   /********************************************************************/
; 171  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 172  :   /*  resonator in the high-order bits.                               */
; 173  :   /********************************************************************/
; 174  : 
; 175  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 176  : 
; 177  :   return( acoef );

  000c6	0f bf 54 24 1c	 movsx	 edx, WORD PTR _gain$[esp]
  000cb	66 89 86 1c 02
	00 00		 mov	 WORD PTR [esi+540], ax
  000d2	5e		 pop	 esi
  000d3	0f bf c0	 movsx	 eax, ax
  000d6	0f af c2	 imul	 eax, edx
  000d9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  000dc	24 fe		 and	 al, -2			; fffffffeH

; 178  : }

  000de	c3		 ret	 0
_d2pole_cf45 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_cf123
_TEXT	SEGMENT
_pVtm_t$ = 8
_pKsd_t$ = 12
_bcoef$ = 16
_ccoef$ = 20
_frequency$ = 24
_bandwidth$ = 28
_gain$ = 32
_d2pole_cf123 PROC NEAR

; 203  : {

  000e0	56		 push	 esi

; 204  :   S16 acoef;
; 205  : 
; 206  :   /********************************************************************/
; 207  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 208  :   /*  10 KHz.                                                         */
; 209  :   /********************************************************************/
; 210  : 
; 211  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  000e1	8b 74 24 08	 mov	 esi, DWORD PTR _pVtm_t$[esp]
  000e5	8b 06		 mov	 eax, DWORD PTR [esi]
  000e7	83 f8 01	 cmp	 eax, 1
  000ea	75 21		 jne	 SHORT $L71408

; 212  :   {
; 213  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  000ec	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  000f0	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 214  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  000f5	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  000fa	0f af c2	 imul	 eax, edx
  000fd	0f af ca	 imul	 ecx, edx
  00100	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  00103	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  00106	24 fe		 and	 al, -2			; fffffffeH
  00108	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 215  :   }
; 216  :   else

  0010b	eb 28		 jmp	 SHORT $L71412
$L71408:

; 217  :   {
; 218  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  0010d	85 c0		 test	 eax, eax
  0010f	75 1c		 jne	 SHORT $L71873

; 219  :     {
; 220  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  00111	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  00115	0f bf 44 24 18	 movsx	 eax, WORD PTR _frequency$[esp]

; 221  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  0011a	0f bf 4c 24 1c	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  0011f	0f af c2	 imul	 eax, edx
  00122	0f af ca	 imul	 ecx, edx
  00125	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00128	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0012b	eb 08		 jmp	 SHORT $L71412
$L71873:
  0012d	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00131	8b 44 24 18	 mov	 eax, DWORD PTR _frequency$[esp]
$L71412:

; 222  :     }
; 223  :   }
; 224  : 
; 225  :   /********************************************************************/
; 226  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 227  :   /********************************************************************/
; 228  : 
; 229  :   if ( frequency >= 4500 )

  00135	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00139	7c 11		 jl	 SHORT $L71415

; 230  :   {
; 231  :     frequency = pKsd_t->uiSampleRate >> 1;

  0013b	8b 44 24 0c	 mov	 eax, DWORD PTR _pKsd_t$[esp]
  0013f	8b 88 2c 02 00
	00		 mov	 ecx, DWORD PTR [eax+556]
  00145	8b c1		 mov	 eax, ecx
  00147	d1 e8		 shr	 eax, 1

; 232  :     bandwidth = pKsd_t->uiSampleRate >> 2;

  00149	c1 e9 02	 shr	 ecx, 2
$L71415:

; 233  :   }
; 234  : 
; 235  :   /********************************************************************/
; 236  :   /*  calculate radius = exp( -pi * T * bandwidth ).                  */
; 237  :   /********************************************************************/
; 238  : 
; 239  :   radius = radius_table[bandwidth >> 3];

  0014c	0f bf c9	 movsx	 ecx, cx

; 240  : 
; 241  :   /********************************************************************/
; 242  :   /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )               */
; 243  :   /********************************************************************/
; 244  : 
; 245  :   *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  0014f	0f bf d0	 movsx	 edx, ax
  00152	c1 f9 03	 sar	 ecx, 3
  00155	c1 fa 03	 sar	 edx, 3
  00158	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00160	0f bf 04 55 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[edx*2]
  00168	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  0016f	8b 54 24 10	 mov	 edx, DWORD PTR _bcoef$[esp]
  00173	0f bf c9	 movsx	 ecx, cx
  00176	0f af c1	 imul	 eax, ecx
  00179	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0017c	66 89 02	 mov	 WORD PTR [edx], ax

; 246  : 
; 247  :   /********************************************************************/
; 248  :   /*  Let ccoef = - r^2                                               */
; 249  :   /********************************************************************/
; 250  : 
; 251  :   *ccoef = - frac4mul( radius, radius );

  0017f	8b 4c 24 14	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00183	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0018a	0f af c0	 imul	 eax, eax
  0018d	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00190	f7 d8		 neg	 eax
  00192	66 89 01	 mov	 WORD PTR [ecx], ax

; 252  : 
; 253  :   /********************************************************************/
; 254  :   /*  Let acoef = 1.0 - bcoef - ccoef                                 */
; 255  :   /********************************************************************/
; 256  : 
; 257  :   pVtm_t->temp = 4096 - *bcoef - *ccoef;

  00195	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  00199	66 2b 0a	 sub	 cx, WORD PTR [edx]

; 258  :   
; 259  :   /********************************************************************/
; 260  :   /*  Adjust "acoef" by the gain term to keep output signal of the    */
; 261  :   /*  resonator in the high-order bits.                               */
; 262  :   /********************************************************************/
; 263  : 
; 264  :   acoef = frac4mul( gain, pVtm_t->temp ) << 1;
; 265  :   
; 266  :   return( acoef );

  0019c	0f bf 54 24 20	 movsx	 edx, WORD PTR _gain$[esp]
  001a1	2b c8		 sub	 ecx, eax
  001a3	0f bf c1	 movsx	 eax, cx
  001a6	0f af c2	 imul	 eax, edx
  001a9	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  001ac	66 89 8e 1c 02
	00 00		 mov	 WORD PTR [esi+540], cx
  001b3	24 fe		 and	 al, -2			; fffffffeH
  001b5	5e		 pop	 esi

; 267  : }

  001b6	c3		 ret	 0
_d2pole_cf123 ENDP
_TEXT	ENDS
PUBLIC	_d2pole_pf
_TEXT	SEGMENT
_pVtm_t$ = 8
_bcoef$ = 12
_ccoef$ = 16
_frequency$ = 20
_bandwidth$ = 24
_gain$ = 28
_d2pole_pf PROC NEAR

; 290  :   S16 acoef;
; 291  : 
; 292  :   /********************************************************************/
; 293  :   /*  Scale the frequency and bandwidth if the sample rate is not     */
; 294  :   /*  10 KHz.                                                         */
; 295  :   /********************************************************************/
; 296  : 
; 297  :   if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_DECREASE )

  001c0	8b 54 24 04	 mov	 edx, DWORD PTR _pVtm_t$[esp-4]
  001c4	56		 push	 esi
  001c5	8b 02		 mov	 eax, DWORD PTR [edx]
  001c7	83 f8 01	 cmp	 eax, 1
  001ca	75 21		 jne	 SHORT $L71434

; 298  :   {
; 299  :     frequency = frac1mul( pVtm_t->inv_rate_scale, frequency ) << 1;

  001cc	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001d0	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 300  :     bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth ) << 1;

  001d5	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001da	0f af c6	 imul	 eax, esi
  001dd	0f af ce	 imul	 ecx, esi
  001e0	c1 f8 0e	 sar	 eax, 14			; 0000000eH
  001e3	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  001e6	24 fe		 and	 al, -2			; fffffffeH
  001e8	83 e1 fe	 and	 ecx, -2			; fffffffeH

; 301  :   }
; 302  :   else

  001eb	eb 28		 jmp	 SHORT $L71438
$L71434:

; 303  :   {
; 304  :     if ( pVtm_t->uiSampleRateChange == SAMPLE_RATE_INCREASE )

  001ed	85 c0		 test	 eax, eax
  001ef	75 1c		 jne	 SHORT $L71875

; 305  :     {
; 306  :       frequency = frac1mul( pVtm_t->inv_rate_scale, frequency );

  001f1	0f bf 72 06	 movsx	 esi, WORD PTR [edx+6]
  001f5	0f bf 44 24 14	 movsx	 eax, WORD PTR _frequency$[esp]

; 307  :       bandwidth = frac1mul( pVtm_t->inv_rate_scale, bandwidth );

  001fa	0f bf 4c 24 18	 movsx	 ecx, WORD PTR _bandwidth$[esp]
  001ff	0f af c6	 imul	 eax, esi
  00202	0f af ce	 imul	 ecx, esi
  00205	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00208	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  0020b	eb 08		 jmp	 SHORT $L71438
$L71875:
  0020d	8b 4c 24 18	 mov	 ecx, DWORD PTR _bandwidth$[esp]
  00211	8b 44 24 14	 mov	 eax, DWORD PTR _frequency$[esp]
$L71438:

; 308  :     }
; 309  :   }
; 310  : 
; 311  :   /********************************************************************/
; 312  :   /*  Zap resonator if center frequency above maximum frequency.      */ 
; 313  :   /********************************************************************/
; 314  : 
; 315  :   if ( frequency >= 4500 )

  00215	66 3d 94 11	 cmp	 ax, 4500		; 00001194H
  00219	7c 16		 jl	 SHORT $L71441

; 316  :   {
; 317  :     *bcoef = 0;

  0021b	8b 44 24 0c	 mov	 eax, DWORD PTR _bcoef$[esp]

; 318  :     *ccoef = 0;

  0021f	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00223	5e		 pop	 esi
  00224	66 c7 00 00 00	 mov	 WORD PTR [eax], 0
  00229	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 319  :     acoef = 0;

  0022e	33 c0		 xor	 eax, eax

; 353  :   }
; 354  :   return( acoef );
; 355  : }

  00230	c3		 ret	 0
$L71441:

; 320  :   }
; 321  :   else
; 322  :   {
; 323  :     /******************************************************************/
; 324  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 325  :     /******************************************************************/
; 326  : 
; 327  :     radius = radius_table[bandwidth >> 3];

  00231	0f bf c9	 movsx	 ecx, cx

; 328  : 
; 329  :     /******************************************************************/
; 330  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 331  :     /******************************************************************/
; 332  : 
; 333  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  00234	0f bf c0	 movsx	 eax, ax
  00237	c1 f9 03	 sar	 ecx, 3
  0023a	c1 f8 03	 sar	 eax, 3
  0023d	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[ecx*2]
  00245	8b 74 24 0c	 mov	 esi, DWORD PTR _bcoef$[esp]
  00249	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _cosine_table[eax*2]
  00251	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  00258	0f bf c9	 movsx	 ecx, cx
  0025b	0f af c1	 imul	 eax, ecx
  0025e	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00261	66 89 06	 mov	 WORD PTR [esi], ax

; 334  : 
; 335  :     /******************************************************************/
; 336  :     /*  Let ccoef = - r^2                                             */
; 337  :     /******************************************************************/
; 338  : 
; 339  :     *ccoef = - frac4mul( radius, radius );

  00264	8b 4c 24 10	 mov	 ecx, DWORD PTR _ccoef$[esp]
  00268	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR _radius
  0026f	0f af c0	 imul	 eax, eax
  00272	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00275	f7 d8		 neg	 eax
  00277	66 89 01	 mov	 WORD PTR [ecx], ax

; 340  : 
; 341  :     /******************************************************************/
; 342  :     /*  Let acoef = 1.0 - bcoef - ccoef                               */
; 343  :     /******************************************************************/
; 344  : 
; 345  :     pVtm_t->temp = 4096 - *bcoef - *ccoef;

  0027a	66 b9 00 10	 mov	 cx, 4096		; 00001000H
  0027e	66 2b 0e	 sub	 cx, WORD PTR [esi]
  00281	5e		 pop	 esi
  00282	2b c8		 sub	 ecx, eax
  00284	66 89 8a 1c 02
	00 00		 mov	 WORD PTR [edx+540], cx

; 346  :   
; 347  :     /******************************************************************/
; 348  :     /*  Adjust "acoef" by the gain term to keep output signal of the  */
; 349  :     /*  resonator in the high-order bits.                             */
; 350  :     /******************************************************************/
; 351  : 
; 352  :     acoef = frac4mul( gain, pVtm_t->temp ) << 1;

  0028b	0f bf 54 24 18	 movsx	 edx, WORD PTR _gain$[esp-4]
  00290	0f bf c1	 movsx	 eax, cx
  00293	0f af c2	 imul	 eax, edx
  00296	c1 f8 0b	 sar	 eax, 11			; 0000000bH
  00299	24 fe		 and	 al, -2			; fffffffeH

; 353  :   }
; 354  :   return( acoef );
; 355  : }

  0029b	c3		 ret	 0
_d2pole_pf ENDP
_TEXT	ENDS
PUBLIC	_Notch_fc
_TEXT	SEGMENT
_bcoef$ = 12
_ccoef$ = 16
_acoef$ = 20
_frequency$ = 24
_bandwidth$ = 28
_gain$ = 32
_Notch_fc PROC NEAR

; 367  :     
; 368  :     /******************************************************************/
; 369  :     /*  calculate radius = exp( -pi * T * bandwidth ).                */
; 370  :     /******************************************************************/
; 371  : 
; 372  :     radius = radius_table[bandwidth >> 3];

  002a0	0f bf 44 24 18	 movsx	 eax, WORD PTR _bandwidth$[esp-4]

; 373  : 
; 374  :     /******************************************************************/
; 375  :     /*  bcoef = radius * 2 * cos( 2* pi * T * frequency )             */
; 376  :     /******************************************************************/
; 377  : 
; 378  :     *bcoef = frac4mul( radius, cosine_table[ frequency >> 3 ] );

  002a5	0f bf 54 24 14	 movsx	 edx, WORD PTR _frequency$[esp-4]
  002aa	c1 f8 03	 sar	 eax, 3
  002ad	c1 fa 03	 sar	 edx, 3
  002b0	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _radius_table[eax*2]
  002b8	8d 04 55 00 00
	00 00		 lea	 eax, DWORD PTR _cosine_table[edx*2]
  002bf	66 89 0d 00 00
	00 00		 mov	 WORD PTR _radius, cx
  002c6	0f bf c9	 movsx	 ecx, cx
  002c9	0f bf 10	 movsx	 edx, WORD PTR [eax]
  002cc	0f af d1	 imul	 edx, ecx
  002cf	8b 4c 24 08	 mov	 ecx, DWORD PTR _bcoef$[esp-4]
  002d3	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  002d6	66 89 11	 mov	 WORD PTR [ecx], dx

; 379  : 
; 380  :     /******************************************************************/
; 381  :     /*  Let ccoef = - r^2                                             */
; 382  :     /******************************************************************/
; 383  : 
; 384  :     *ccoef = - frac4mul( radius, radius );

  002d9	0f bf 0d 00 00
	00 00		 movsx	 ecx, WORD PTR _radius
  002e0	8b d1		 mov	 edx, ecx
  002e2	0f af d1	 imul	 edx, ecx
  002e5	8b 4c 24 0c	 mov	 ecx, DWORD PTR _ccoef$[esp-4]
  002e9	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  002ec	f7 da		 neg	 edx
  002ee	66 89 11	 mov	 WORD PTR [ecx], dx

; 385  : 
; 386  :     /******************************************************************/
; 387  :     /*  Let acoef = 1.0 - bcoef - ccoef                               */
; 388  :     /******************************************************************/
; 389  : 
; 390  :     *acoef = - frac4mul(gain,cosine_table[ frequency >> 3 ]);

  002f1	8b 4c 24 10	 mov	 ecx, DWORD PTR _acoef$[esp-4]
  002f5	0f bf 10	 movsx	 edx, WORD PTR [eax]
  002f8	0f bf 44 24 1c	 movsx	 eax, WORD PTR _gain$[esp-4]
  002fd	0f af d0	 imul	 edx, eax
  00300	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00303	f7 da		 neg	 edx
  00305	66 89 11	 mov	 WORD PTR [ecx], dx

; 391  :   
; 392  :    
; 393  : }

  00308	c3		 ret	 0
_Notch_fc ENDP
_TEXT	ENDS
PUBLIC	_speech_waveform_generator
PUBLIC	_getmax
PUBLIC	_setzeroabc
_TEXT	SEGMENT
_phTTS$ = 8
_ns$ = -44
_ABlin$ = -60
_APlin$ = -16
_noise$ = -100
_noiseb$ = -24
_T0inS4$ = -88
_FNPinHZ$ = -32
_Glot_step$ = -92
_F1inHZ$ = -72
_F2inHZ$ = -52
_F3inHZ$ = -56
_FZinHZ$ = -76
_B1inHZ$ = -80
_B2inHZ$ = -84
_B3inHZ$ = -28
_AVinDB$ = -36
_A5inDB$ = -44
_A6inDB$ = -60
_ABinDB$ = -92
_TILTDB$ = -108
_r2pa$ = -4
_r2pb$ = -110
_r2pc$ = -112
_r3pa$ = -8
_r3pb$ = -114
_r3pc$ = -116
_r4pa$ = -12
_r5pa$ = -64
_r6pa$ = -68
_abreth$ = -20
_OPENQ$ = -104
_pKsd_t$ = -48
_speech_waveform_generator PROC NEAR

; 268  : {

  00310	83 ec 74	 sub	 esp, 116		; 00000074H

; 269  :   
; 270  :   S16 *variabpars;
; 271  :   S32 temp0;       
; 272  :   S32 temp1;      /* MVP MI moved from vtm.h */
; 273  : #ifdef NOTCH_FILTER
; 274  :   S32 tem0;       
; 275  :   S32 tem1; 
; 276  : #endif
; 277  :   S16 b2p;       /*  Bandwidth of parallel 2th formant *//* MVP MI moved from vtm.h */
; 278  :   S16 b3p;       /*  Bandwidth of parallel 3th formant *//* MVP MI moved from vtm.h */
; 279  :   S16 out;       /*  Output signal from the vocal tract model*/ 
; 280  :   S16 nsr4;      /*  Counter of 4 samples in glottal source loop        */ 
; 281  :   U32 ns;        /*  Number of samples into current frame            */
; 282  :   S16 r3pg;      /*  amp of parameter F3 for iir filter                 */
; 283  :   S16 r2pg;      /*  amp of parameter F2 for iir filter                 */
; 284  :   S16 ABlin;     /*  AB linear ampl. control                            */
; 285  :   S16 APlin;     /*  AP linear ampl. control                            */
; 286  :   S16 voice;     /*  Current sample of voicing waveform                 */ 
; 287  :   S16 noise;     /*  Output of random number generator                  */
; 288  : #ifdef CLOSING_TIME
; 289  :   S16 Tgain;	// eab 4/22/99 gain of wang's closing time filter
; 290  : #endif
; 291  : #ifdef NEW_NOISE
; 292  :   S16 noiseb;	//eab 10/12/98 New noise variable
; 293  :   S16 noisef;
; 294  : #endif
; 295  :   S16 about;     /*  Output signal from bypass path                     */
; 296  :   S16 rnzout;    /*  Output signal from nasal zero                      */
; 297  :   S16 T0inS4;  /*  Voicing fund freq in Hz*10,      500 to 1650         */
; 298  : #ifdef NEW_VTM
; 299  :   S16 FNPinHZ;   /*Frequency of moveable nasal formant*/
; 300  :   S16 Glot_step;	/*step for voicing source to make almost sinusoidal for nasal variants*/
; 301  : //23  BATS 731 EAB 7/31/98 Init glotnoise
; 302  :   
; 303  :   
; 304  : #endif
; 305  : 
; 306  :   S16 F1inHZ;  /*  First formant freq in Hz,        200 to 1300         */
; 307  :   S16 F2inHZ;  /*  Second formant freq in Hz,       550 to 3000         */
; 308  :   S16 F3inHZ;  /*  Third formant freq in Hz,       1200 to 4800         */
; 309  :   S16 FZinHZ;  /*  Nasal zero freq in Hz,           248 to  528         */
; 310  :   S16 fzgain;
; 311  :   S16 fzgaina[20] ={
; 312  : 		200,200,200,200,200,200,800,800,800,800,
; 313  : 			1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
; 314  :   S16 B1inHZ;  /*  First formant bw in Hz,           40 to 1000         */
; 315  :   S16 B2inHZ;  /*  Second formant bw in Hz,          40 to 1000         */
; 316  :   S16 B3inHZ;  /*  Third formant bw in Hz,           40 to 1000         */
; 317  :   S16 AVinDB;  /*  Amp of voicing in dB,             0 to   70          */
; 318  :   S16 APinDB;  /*  Amp of aspiration in dB,          0 to   70          */
; 319  :   S16 A2inDB;  /*  Amp of F2 frication in dB,        0 to   80          */
; 320  :   S16 A3inDB;  /*  Amp of F3 frication in dB,        0 to   80          */
; 321  :   S16 A4inDB;  /*  Amp of F4 frication in dB,        0 to   80          */
; 322  :   S16 A5inDB;  /*  Amp of F5 frication in dB,        0 to   80          */
; 323  :   S16 A6inDB;  /*  Amp of F6                         0 to   80          */
; 324  :   S16 ABinDB;  /*  Amp of bypass fric. in dB,        0 to   80          */
; 325  :   S16 TILTDB;  /*  Voicing spectral tilt in dB,      0 to   24          */
; 326  :   
; 327  : #ifdef NEW_TILT
; 328  :   S16 rtltg;    //10/13/98 Parameter for new tilt filter
; 329  :   S16 Ftilt;
; 330  :   S16 BWtilt;
; 331  : 
; 332  : #endif
; 333  : 
; 334  :   S16 r2pa;      /*  "a" coef for parallel 2nd formant                  */
; 335  :   S16 r2pb;      /*  "b" coefficient                                    */
; 336  :   S16 r2pc;      /*  "c" coefficient                                    */
; 337  : 
; 338  :   S16 r3pa;      /*  "a" coef for parallel 3rd formant                  */
; 339  :   S16 r3pb;      /*  "b" coefficient                                    */
; 340  :   S16 r3pc;      /*  "c" coefficient                                    */
; 341  :   S16 r4pa;      /*  "a" coef for parallel 4th formant                  */
; 342  :   S16 r5pa;      /*  "a" coef for parallel 5th formant                  */
; 343  :   S16 r6pa;      /*  "a" coef for parallel 6th formant                  */
; 344  :   S16 r6pb = -5702; /*MVP : According to me it is a constant BILL       /*  "b" coefficient */
; 345  :   S16 r6pc = -1995; /*MVP : According to me it is a constant BILL       /*  "c" coefficient */
; 346  : 
; 347  : 
; 348  : #ifdef NEW_VTM
; 349  : 
; 350  :   S16 DiP;
; 351  :   S16 abreth;
; 352  :   S16 logf1;
; 353  : #endif
; 354  : #if defined UPGRADES1999 || defined NEW_VTM
; 355  :     S16 temp;
; 356  : 	S16 temp3;
; 357  : 	S16 ampsum;
; 358  : 
; 359  :     S16 OPENQ;		/* Open quotient */
; 360  : 	
; 361  : 	///* dynamic breathiness related to open quoient */
; 362  :  		
; 363  : #endif
; 364  : 		
; 365  :   
; 366  : #ifdef UPGRADES1999
; 367  :  
; 368  : #endif
; 369  : 
; 370  :   /* MVP MI */
; 371  :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  00313	8b 44 24 78	 mov	 eax, DWORD PTR _phTTS$[esp+112]
  00317	53		 push	 ebx
  00318	55		 push	 ebp
  00319	56		 push	 esi
  0031a	8b 70 14	 mov	 esi, DWORD PTR [eax+20]

; 372  :   PKSD_T pKsd_t = phTTS->pKernelShareData;

  0031d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00320	89 44 24 50	 mov	 DWORD PTR _pKsd_t$[esp+128], eax

; 373  : 
; 374  :   /********************************************************************/
; 375  :   /********************************************************************/
; 376  :   /*  READ VARIABLE PARAMETERS FOR ONE FRAME (64 SAMPLES) OF SPEECH   */
; 377  :   /*  Read 18 words of speech frame definition into temp store and    */
; 378  :   /*  move some parameters into active use immediately (voice-excited */
; 379  :   /*  ones are updated pitch synchronously to avoid waveform          */
; 380  :   /*  glitches ).                                                     */
; 381  :   /********************************************************************/
; 382  :   /********************************************************************/
; 383  : 
; 384  :   variabpars = &(pVtm_t->parambuff[1]);
; 385  : 
; 386  :   /*EAB If we just loaded a speaker def zero all vocal tract gains
; 387  : 		so that this looks like a silence packet (last packet of previous frame
; 388  : 		stuck here*/
; 389  : 
; 390  : /* EAB 26-MAY-1997 This code is for a problem of occasional popping. The problem was traced to two
; 391  : unrelated problems creating the same effect. First avlind was initalized but avlin was not. Depending
; 392  : on exactly when in the glotal phase and the present state of voicing the code was stopped it could 
; 393  : cause a non-zero value to propagate into the vocal tract during what should have been silence.
; 394  : The second bug is related to the smoothing variables not all be initalized properly so that it's 
; 395  : possible to smooth in a non-zero value into the silence packets that of necessity always follows a
; 396  : speaker definiton packet. To avoid this problem the code below forces the first two frames following
; 397  : a speaker definition back into being real silence frames(which they are suppose to be) with little 
; 398  : overhead fixing it here is just as functional as in PH but a lot safer and easier */
; 399  : 
; 400  : 
; 401  :   if(pVtm_t->ldspdef == 1 )

  00324	33 db		 xor	 ebx, ebx
  00326	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  0032c	57		 push	 edi
  0032d	83 f8 01	 cmp	 eax, 1
  00330	75 49		 jne	 SHORT $L71564

; 402  :   {
; 403  :    pVtm_t->ldspdef++;

  00332	c7 86 20 02 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+544], 2

; 404  :    variabpars[OUT_AV]=0;

  0033c	66 89 9e e6 00
	00 00		 mov	 WORD PTR [esi+230], bx

; 405  :    variabpars[OUT_AP]=0;

  00343	66 89 9e d2 00
	00 00		 mov	 WORD PTR [esi+210], bx

; 406  :    variabpars[OUT_A2]=0;

  0034a	66 89 9e d6 00
	00 00		 mov	 WORD PTR [esi+214], bx

; 407  :    variabpars[OUT_A3]=0;

  00351	66 89 9e d8 00
	00 00		 mov	 WORD PTR [esi+216], bx

; 408  :    variabpars[OUT_A4]=0;

  00358	66 89 9e da 00
	00 00		 mov	 WORD PTR [esi+218], bx

; 409  :    variabpars[OUT_A5]=0;

  0035f	66 89 9e dc 00
	00 00		 mov	 WORD PTR [esi+220], bx

; 410  :    variabpars[OUT_A6]=0;

  00366	66 89 9e de 00
	00 00		 mov	 WORD PTR [esi+222], bx

; 411  :    variabpars[OUT_AB]=0;

  0036d	66 89 9e e0 00
	00 00		 mov	 WORD PTR [esi+224], bx

; 412  :    pVtm_t->avlin = 0;

  00374	66 89 9e 04 02
	00 00		 mov	 WORD PTR [esi+516], bx
$L71564:

; 413  :   }
; 414  : 
; 415  :    if(pVtm_t->ldspdef >= 3)

  0037b	8b 86 20 02 00
	00		 mov	 eax, DWORD PTR [esi+544]
  00381	83 f8 03	 cmp	 eax, 3
  00384	7c 07		 jl	 SHORT $L71565

; 416  : 	   pVtm_t->ldspdef --;

  00386	48		 dec	 eax
  00387	89 86 20 02 00
	00		 mov	 DWORD PTR [esi+544], eax
$L71565:

; 417  :   /********************************************************************/
; 418  :   /********************************************************************/
; 419  :   /*                                                                  */
; 420  :   /*  Scaling for various sample rates is done in the following       */
; 421  :   /*  fashion.                                                        */
; 422  :   /*                                                                  */
; 423  :   /*  If the sample rate is modified then the formant frequencies,    */
; 424  :   /*  bandwidths, and the pitch period are all scaled. If the sample  */
; 425  :   /*  rate is decreased the fifth formant is eliminated, and the gain */
; 426  :   /*  r2pg is lowered to prevent overload.                            */
; 427  :   /*                                                                  */
; 428  :   /********************************************************************/
; 429  :   /********************************************************************/
; 430  : 
; 431  :   /********************************************************************/
; 432  :   /* T0inS4 is a time, so it should be scaled if fs != 10K.           */
; 433  :   /********************************************************************/
; 434  :   //variabpars[OUT_T0] =(short) (400000.0/variabpars[OUT_T0]);
; 435  :   T0inS4 = variabpars[OUT_T0];
; 436  : 
; 437  :   switch( pVtm_t->uiSampleRateChange )
; 438  :   {

  0038d	8b 3e		 mov	 edi, DWORD PTR [esi]
  0038f	66 8b 8e e4 00
	00 00		 mov	 cx, WORD PTR [esi+228]
  00396	8b c7		 mov	 eax, edi
  00398	89 4c 24 2c	 mov	 DWORD PTR _T0inS4$[esp+132], ecx
  0039c	2b c3		 sub	 eax, ebx
  0039e	74 12		 je	 SHORT $L71570
  003a0	48		 dec	 eax
  003a1	75 23		 jne	 SHORT $L71567

; 442  :     break;
; 443  : 
; 444  :   case SAMPLE_RATE_DECREASE:
; 445  : 
; 446  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 );

  003a3	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  003a7	0f bf c1	 movsx	 eax, cx
  003aa	0f af d0	 imul	 edx, eax
  003ad	c1 fa 0f	 sar	 edx, 15			; 0000000fH

; 447  :     break;

  003b0	eb 10		 jmp	 SHORT $L71888
$L71570:

; 439  :   case SAMPLE_RATE_INCREASE:
; 440  : 
; 441  :     T0inS4 = frac1mul( pVtm_t->rate_scale, T0inS4 ) << 1;

  003b2	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  003b6	0f bf c1	 movsx	 eax, cx
  003b9	0f af d0	 imul	 edx, eax
  003bc	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  003bf	83 e2 fe	 and	 edx, -2			; fffffffeH
$L71888:
  003c2	89 54 24 2c	 mov	 DWORD PTR _T0inS4$[esp+132], edx
$L71567:

; 671  : 
; 672  :   /********************************************************************/
; 673  :   /********************************************************************/
; 674  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 675  :   /********************************************************************/
; 676  :   /********************************************************************/
; 677  : 
; 678  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  003c6	0f bf 8e 26 01
	00 00		 movsx	 ecx, WORD PTR [esi+294]
  003cd	0f bf 96 d4 00
	00 00		 movsx	 edx, WORD PTR [esi+212]
  003d4	0f af d1	 imul	 edx, ecx
  003d7	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  003dc	2b c1		 sub	 eax, ecx
  003de	8b e8		 mov	 ebp, eax
  003e0	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  003e3	c1 fd 04	 sar	 ebp, 4
  003e6	03 d5		 add	 edx, ebp
  003e8	89 54 24 3c	 mov	 DWORD PTR _F1inHZ$[esp+132], edx
  003ec	0f bf 96 e8 00
	00 00		 movsx	 edx, WORD PTR [esi+232]
  003f3	0f af d1	 imul	 edx, ecx
  003f6	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  003f9	c1 f8 03	 sar	 eax, 3
  003fc	03 d0		 add	 edx, eax
  003fe	0f bf 86 ea 00
	00 00		 movsx	 eax, WORD PTR [esi+234]
  00405	0f af c1	 imul	 eax, ecx
  00408	66 8b 8e ec 00
	00 00		 mov	 cx, WORD PTR [esi+236]
  0040f	89 54 24 50	 mov	 DWORD PTR _F2inHZ$[esp+132], edx
  00413	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00416	89 44 24 4c	 mov	 DWORD PTR _F3inHZ$[esp+132], eax
  0041a	8b c7		 mov	 eax, edi
  0041c	2b c3		 sub	 eax, ebx
  0041e	89 4c 24 38	 mov	 DWORD PTR _FZinHZ$[esp+132], ecx
  00422	74 15		 je	 SHORT $L71585

; 448  : 
; 449  :   case NO_SAMPLE_RATE_CHANGE:
; 450  : 
; 451  :     break;
; 452  : 
; 453  :   default:
; 454  : 
; 455  :     break;
; 456  :   }
; 457  : 
; 458  :   /********************************************************************/
; 459  :   /*  Scale F1inHZ, F2inHZ, and F3inHZ up or down in frequency        */
; 460  :   /*  according to spdef fnscal. Use trick to reduce scaling          */
; 461  :   /*  performed if F1inHZ or F2inHZ is relatively low.                */
; 462  :   /********************************************************************/
; 463  : 
; 464  :   F1inHZ = variabpars[OUT_F1];
; 465  :   F1inHZ = frac4mul( F1inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 4);
; 466  :   F2inHZ = variabpars[OUT_F2];
; 467  :   F2inHZ = frac4mul( F2inHZ, pVtm_t->fnscal ) + ((4096 - (S32)pVtm_t->fnscal ) >> 3);
; 468  :   F3inHZ = variabpars[OUT_F3];
; 469  :   F3inHZ = frac4mul( F3inHZ, pVtm_t->fnscal );
; 470  : 
; 471  :   /********************************************************************/
; 472  :   /*  Scale the nasal anti-resonator frequency for the sample rate.   */
; 473  :   /********************************************************************/
; 474  : 
; 475  :   FZinHZ = variabpars[OUT_FZ];
; 476  :   
; 477  :   
; 478  : 
; 479  :   switch( pVtm_t->uiSampleRateChange )
; 480  :   {

  00424	48		 dec	 eax
  00425	75 23		 jne	 SHORT $L71582

; 484  :     break;
; 485  : 
; 486  :   case SAMPLE_RATE_DECREASE:
; 487  : 
; 488  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ ) << 1;

  00427	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  0042b	0f bf c1	 movsx	 eax, cx
  0042e	0f af d0	 imul	 edx, eax
  00431	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00434	83 e2 fe	 and	 edx, -2			; fffffffeH

; 489  :     break;

  00437	eb 0d		 jmp	 SHORT $L71889
$L71585:

; 481  :   case SAMPLE_RATE_INCREASE:
; 482  : 
; 483  :     FZinHZ = frac1mul( pVtm_t->inv_rate_scale, FZinHZ );

  00439	0f bf 56 06	 movsx	 edx, WORD PTR [esi+6]
  0043d	0f bf c1	 movsx	 eax, cx
  00440	0f af d0	 imul	 edx, eax
  00443	c1 fa 0f	 sar	 edx, 15			; 0000000fH
$L71889:
  00446	89 54 24 38	 mov	 DWORD PTR _FZinHZ$[esp+132], edx
$L71582:

; 490  : 
; 491  :   case NO_SAMPLE_RATE_CHANGE:
; 492  : 
; 493  :     break;
; 494  : 
; 495  :   default:
; 496  : 
; 497  :     break;
; 498  :   }
; 499  : 
; 500  : 
; 501  :   B1inHZ = variabpars[OUT_B1];
; 502  :   B2inHZ = variabpars[OUT_B2];
; 503  :   B3inHZ = variabpars[OUT_B3];
; 504  :   AVinDB = variabpars[OUT_AV];
; 505  :   APinDB = variabpars[OUT_AP];
; 506  :   A2inDB = variabpars[OUT_A2];
; 507  :   A3inDB = variabpars[OUT_A3];
; 508  :   A4inDB = variabpars[OUT_A4];
; 509  :   A5inDB = variabpars[OUT_A5];

  0044a	66 8b 9e dc 00
	00 00		 mov	 bx, WORD PTR [esi+220]
  00451	66 8b 8e ee 00
	00 00		 mov	 cx, WORD PTR [esi+238]

; 510  :   A6inDB = variabpars[OUT_A6];
; 511  :   ABinDB = variabpars[OUT_AB];
; 512  : 
; 513  : #ifndef NEW_TILT
; 514  : 
; 515  :   TILTDB = variabpars[OUT_TLT] - 12;  /* Tilt in dB at 3 kHz */
; 516  : 
; 517  : #else
; 518  :   TILTDB = variabpars[OUT_TLT];
; 519  : 
; 520  : //   TILTDB = frac4mul(819,temp /*variabpars[OUT_TLT]*/)+pVtm_t->oldtilt;             
; 521  : 
; 522  :  TILTDB = (TILTDB + pVtm_t->oldtilt)>>1;

  00458	0f bf ae 6c 01
	00 00		 movsx	 ebp, WORD PTR [esi+364]
  0045f	66 89 5c 24 58	 mov	 WORD PTR _A5inDB$[esp+132], bx
  00464	66 8b 9e de 00
	00 00		 mov	 bx, WORD PTR [esi+222]
  0046b	66 89 5c 24 48	 mov	 WORD PTR _A6inDB$[esp+132], bx
  00470	66 8b 9e e0 00
	00 00		 mov	 bx, WORD PTR [esi+224]
  00477	66 8b 96 f0 00
	00 00		 mov	 dx, WORD PTR [esi+240]
  0047e	66 8b 86 f2 00
	00 00		 mov	 ax, WORD PTR [esi+242]
  00485	66 89 5c 24 28	 mov	 WORD PTR _ABinDB$[esp+132], bx
  0048a	66 8b be da 00
	00 00		 mov	 di, WORD PTR [esi+218]
  00491	0f bf 9e e2 00
	00 00		 movsx	 ebx, WORD PTR [esi+226]
  00498	03 dd		 add	 ebx, ebp
  0049a	66 89 4c 24 34	 mov	 WORD PTR _B1inHZ$[esp+132], cx
  0049f	66 8b 8e e6 00
	00 00		 mov	 cx, WORD PTR [esi+230]
  004a6	66 89 54 24 30	 mov	 WORD PTR _B2inHZ$[esp+132], dx
  004ab	66 8b 96 d8 00
	00 00		 mov	 dx, WORD PTR [esi+216]
  004b2	66 89 44 24 68	 mov	 WORD PTR _B3inHZ$[esp+132], ax
  004b7	66 8b 86 d2 00
	00 00		 mov	 ax, WORD PTR [esi+210]
  004be	66 89 4c 24 60	 mov	 WORD PTR _AVinDB$[esp+132], cx
  004c3	66 8b 8e d6 00
	00 00		 mov	 cx, WORD PTR [esi+214]
  004ca	d1 fb		 sar	 ebx, 1

; 523  :   if(TILTDB < 0)

  004cc	66 85 db	 test	 bx, bx
  004cf	89 5c 24 18	 mov	 DWORD PTR _TILTDB$[esp+132], ebx
  004d3	7d 07		 jge	 SHORT $L71591

; 524  : 	  TILTDB= 1;	  

  004d5	bb 01 00 00 00	 mov	 ebx, 1

; 525  :   if(TILTDB >= 40)

  004da	eb 0b		 jmp	 SHORT $L71890
$L71591:
  004dc	66 83 fb 28	 cmp	 bx, 40			; 00000028H
  004e0	7c 09		 jl	 SHORT $L71592

; 526  : 	  TILTDB = 40;

  004e2	bb 28 00 00 00	 mov	 ebx, 40			; 00000028H
$L71890:
  004e7	89 5c 24 18	 mov	 DWORD PTR _TILTDB$[esp+132], ebx
$L71592:

; 527  :   pVtm_t->oldtilt=TILTDB;
; 528  : #endif
; 529  : #ifdef NEW_NOISE
; 530  :   APlin= amptable[APinDB ]; /*  Convert dB to linear        */
; 531  : #else
; 532  : 	APlin= amptable[APinDB + 10]; /*  Convert dB to linear        */
; 533  : #endif
; 534  : 
; 535  :   r2pg = amptable[A2inDB + 13]; /*  Convert dB to linear        */
; 536  :   r3pg = amptable[A3inDB + 10]; /*  Convert dB to linear        */
; 537  :   r4pa = amptable[A4inDB + 7];  /*  Convert dB to linear        */

  004eb	0f bf ff	 movsx	 edi, di
  004ee	66 89 9e 6c 01
	00 00		 mov	 WORD PTR [esi+364], bx

; 538  :   r5pa = amptable[A5inDB + 6];  /*  Convert dB to linear        */
; 539  :   r6pa = amptable[A6inDB + 5];  /*  Convert dB to linear        */
; 540  :   ABlin= amptable[ABinDB + 5];  /*  Convert dB to linear        */
; 541  : 
; 542  : #ifdef UPGRADES1999_OUT //EAB Cause's a re-init during breathiness which has ampsum=0
; 543  :   ampsum = A2inDB + A3inDB + A4inDB + A5inDB + A6inDB + ABinDB + APinDB + pVtm_t->avlind;
; 544  :  
; 545  : 	if (ampsum == 0) 
; 546  : 	{	
; 547  : 
; 548  : 		/* Always start plosive burst with */
; 549  : 		pVtm_t->randomx = 9;  /* same random sequence */
; 550  : 		/* random = 026541;  Set random number to initial seed */
; 551  : 	}
; 552  : #endif
; 553  : 
; 554  : #ifdef NEW_VTM
; 555  :   OPENQ = variabpars[OUT_OQ];		/* Open quotient */
; 556  :   FNPinHZ= variabpars[OUT_FNP];

  004f5	66 8b ae f8 00
	00 00		 mov	 bp, WORD PTR [esi+248]
  004fc	66 8b 1c 7d 0e
	00 00 00	 mov	 bx, WORD PTR _amptable[edi*2+14]
  00504	66 89 6c 24 64	 mov	 WORD PTR _FNPinHZ$[esp+132], bp
  00509	0f bf 7c 24 58	 movsx	 edi, WORD PTR _A5inDB$[esp+132]

; 557  :   
; 558  : #ifdef not_with_cf123 //It scales
; 559  :   
; 560  : switch( pVtm_t->uiSampleRateChange )
; 561  :   {
; 562  :   case SAMPLE_RATE_INCREASE:
; 563  : 
; 564  :     FNPinHZ = frac1mul( pVtm_t->inv_rate_scale, FNPinHZ );
; 565  :     break;
; 566  : 
; 567  :   case SAMPLE_RATE_DECREASE:
; 568  : 
; 569  :     FNPinHZ = frac1mul( pVtm_t->inv_rate_scale, FNPinHZ ) << 1;
; 570  :     break;
; 571  : 
; 572  :   case NO_SAMPLE_RATE_CHANGE:
; 573  : 
; 574  :     break;
; 575  : 
; 576  :   default:
; 577  : 
; 578  :     break;
; 579  :   }
; 580  : #endif
; 581  : 
; 582  : 
; 583  :   Glot_step = variabpars[OUT_GS];

  0050e	66 8b ae fa 00
	00 00		 mov	 bp, WORD PTR [esi+250]
  00515	66 8b 3c 7d 0c
	00 00 00	 mov	 di, WORD PTR _amptable[edi*2+12]
  0051d	66 89 7c 24 44	 mov	 WORD PTR _r5pa$[esp+132], di
  00522	0f bf 7c 24 48	 movsx	 edi, WORD PTR _A6inDB$[esp+132]
  00527	0f bf c0	 movsx	 eax, ax
  0052a	66 8b 3c 7d 0a
	00 00 00	 mov	 di, WORD PTR _amptable[edi*2+10]
  00532	66 89 7c 24 40	 mov	 WORD PTR _r6pa$[esp+132], di
  00537	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR _amptable[eax*2]
  0053f	0f bf 7c 24 28	 movsx	 edi, WORD PTR _ABinDB$[esp+132]
  00544	0f bf c9	 movsx	 ecx, cx
  00547	66 8b 3c 7d 0a
	00 00 00	 mov	 di, WORD PTR _amptable[edi*2+10]
  0054f	66 89 6c 24 28	 mov	 WORD PTR _Glot_step$[esp+132], bp
  00554	66 8b 0c 4d 1a
	00 00 00	 mov	 cx, WORD PTR _amptable[ecx*2+26]
  0055c	66 89 7c 24 48	 mov	 WORD PTR _ABlin$[esp+132], di
  00561	66 8b be fc 00
	00 00		 mov	 di, WORD PTR [esi+252]
  00568	0f bf d2	 movsx	 edx, dx

; 584  :   
; 585  : 
; 586  : #endif
; 587  : #ifdef NEW_VTM
; 588  : 
; 589  :    //DiP = variabpars[OUT_DP];
; 590  : 	
; 591  : 
; 592  : 
; 593  : 	/* TEMPORARY */
; 594  : 
; 595  : 	if (OPENQ > 95)    

  0056b	66 83 ff 5f	 cmp	 di, 95			; 0000005fH
  0056f	89 7c 24 1c	 mov	 DWORD PTR _OPENQ$[esp+132], edi
  00573	66 8b 14 55 14
	00 00 00	 mov	 dx, WORD PTR _amptable[edx*2+20]
  0057b	7e 09		 jle	 SHORT $L71593

; 596  : 		OPENQ = 95;

  0057d	bf 5f 00 00 00	 mov	 edi, 95			; 0000005fH
  00582	89 7c 24 1c	 mov	 DWORD PTR _OPENQ$[esp+132], edi
$L71593:

; 597  : 
; 598  : /*	  This new control variable modifies nopen, abreth, TILTDB, and B1.
; 599  :  *
; 600  :  *		 OPENQ		Perceived voice quality
; 601  :  *		-------		-----------------------
; 602  :  *		 0 - 30		creaky, pressed voice
; 603  :  *		35 - 65		normal voice
; 604  :  *		70 - 85		Breathy voice
; 605  :  *		90 - 100	whisper
; 606  :  *
; 607  :  *	   Within the range 10 to 75, OPENQ sets nopen =
; 608  :  *	    (OPENQ*T0)/100.  Actually use frac4mul(3200,(OPENQ*T0))>>7).
; 609  :  *	    Outside this range, nopen is truncted
; 610  :  *	    to a min of 0.1 * T0 and a max of 0.75 * T0.
; 611  :  *	   Within the range 0 to 100, OPENQ resets TILTDB =
; 612  :  *	    max[TILTDB,OPENQ-KZ].
; 613  :  *	    e.g. if KZ=60, TILTDB reaches max of 40 at OPENQ=100
; 614  :  *	   Within the range 0 to 100, OPENQ resets abreth =
; 615  :  *	    amptable[max{abrg,OPENQ-KX}].  Arg is truncated if above KY dB
; 616  :  *	    e.g. if KX=15 and KY = 60, abreth becomes 60 when OPENQ=75
; 617  :  *	   Within the range 70 to 100, OPENQ resets B1inHZ =
; 618  :  *	    B1inHZ + (OPENQ-70)*10
; 619  :  */
; 620  : 
; 621  : 
; 622  : 	temp = OPENQ - 10;	/* 10 determines OPENQ value at */

  00586	83 c7 f6	 add	 edi, -10		; fffffff6H

; 623  : 
; 624  : 	if (temp < 0)    

  00589	66 85 ff	 test	 di, di
  0058c	7d 04		 jge	 SHORT $L71594

; 625  : 		temp = 0;	/*  which attain max breathiness */

  0058e	33 ff		 xor	 edi, edi

; 626  : 
; 627  : 	if (temp > 55)  

  00590	eb 0b		 jmp	 SHORT $L71595
$L71594:
  00592	66 83 ff 37	 cmp	 di, 55			; 00000037H
  00596	7e 05		 jle	 SHORT $L71595

; 628  : 		temp = 55;	/* Max breathiness is 55 dB */

  00598	bf 37 00 00 00	 mov	 edi, 55			; 00000037H
$L71595:

; 629  : 	temp=temp-10; // to strong at moment eab 4/26/99
; 630  : 		//EAB Reduce further for release 3/00
; 631  : 	if (temp < pVtm_t->Aturb)    

  0059d	66 8b ae 28 01
	00 00		 mov	 bp, WORD PTR [esi+296]
  005a4	83 ef 0a	 sub	 edi, 10			; 0000000aH
  005a7	66 3b fd	 cmp	 di, bp
  005aa	7d 0a		 jge	 SHORT $L71596

; 632  : 		temp = pVtm_t->Aturb-(pVtm_t->Aturb>>1);

  005ac	66 8b fd	 mov	 di, bp
  005af	66 d1 ff	 sar	 di, 1
  005b2	2b ef		 sub	 ebp, edi
  005b4	8b fd		 mov	 edi, ebp
$L71596:

; 633  : 
; 634  : 	abreth = amptable[temp];

  005b6	0f bf ff	 movsx	 edi, di
  005b9	66 8b 3c 7d 00
	00 00 00	 mov	 di, WORD PTR _amptable[edi*2]
  005c1	66 89 7c 24 70	 mov	 WORD PTR _abreth$[esp+132], di

; 635  : 	
; 636  : 	temp = OPENQ - 60;		/* 0 <= OPENQ <= 100 */

  005c6	8b 7c 24 1c	 mov	 edi, DWORD PTR _OPENQ$[esp+132]
  005ca	83 c7 c4	 add	 edi, -60		; ffffffc4H

; 637  : 
; 638  : 	if (temp > TILTDB)   

  005cd	66 3b 7c 24 18	 cmp	 di, WORD PTR _TILTDB$[esp+132]
  005d2	7e 04		 jle	 SHORT $L71597

; 639  : 		TILTDB = temp;	/* Up to 40 dB of tilt */

  005d4	89 7c 24 18	 mov	 DWORD PTR _TILTDB$[esp+132], edi
$L71597:

; 640  : 	
; 641  : 	if (OPENQ >= 70) 

  005d8	8b 7c 24 1c	 mov	 edi, DWORD PTR _OPENQ$[esp+132]
  005dc	66 83 ff 46	 cmp	 di, 70			; 00000046H
  005e0	7c 22		 jl	 SHORT $L71598

; 642  : 	{
; 643  : 	    B1inHZ += (OPENQ-65) * 5;

  005e2	8b 6c 24 34	 mov	 ebp, DWORD PTR _B1inHZ$[esp+132]
  005e6	8d 6c 2f bf	 lea	 ebp, DWORD PTR [edi+ebp-65]
  005ea	8d ac bd fc fe
	ff ff		 lea	 ebp, DWORD PTR [ebp+edi*4-260]
  005f1	89 6c 24 34	 mov	 DWORD PTR _B1inHZ$[esp+132], ebp

; 644  : 	    B2inHZ += (OPENQ-65) * 2;

  005f5	8b 6c 24 30	 mov	 ebp, DWORD PTR _B2inHZ$[esp+132]
  005f9	8d bc 7d 7e ff
	ff ff		 lea	 edi, DWORD PTR [ebp+edi*2-130]
  00600	89 7c 24 30	 mov	 DWORD PTR _B2inHZ$[esp+132], edi
$L71598:

; 645  : 	}
; 646  : 
; 647  : #endif
; 648  : 
; 649  :   APlin = frac4mul( APlin, pVtm_t->APgain );  /*  Scale asp by spdef GV       */

  00604	0f bf be fa 01
	00 00		 movsx	 edi, WORD PTR [esi+506]
  0060b	0f bf c0	 movsx	 eax, ax
  0060e	0f af f8	 imul	 edi, eax

; 650  :   r2pg = frac1mul( r2pg, pVtm_t->AFgain );    /*  Scale A2 by spdef GF        */

  00611	0f bf 86 fc 01
	00 00		 movsx	 eax, WORD PTR [esi+508]
  00618	c1 ff 0c	 sar	 edi, 12			; 0000000cH
  0061b	89 7c 24 74	 mov	 DWORD PTR _APlin$[esp+132], edi

; 651  :   r3pg = frac1mul( r3pg, pVtm_t->AFgain );    /*  Scale A3 by spdef GF        */

  0061f	0f bf fa	 movsx	 edi, dx

; 652  :   r4pa = frac1mul( r4pa, pVtm_t->AFgain );    /*  Scale A4 by spdef GF        */

  00622	0f bf d3	 movsx	 edx, bx
  00625	0f af f8	 imul	 edi, eax
  00628	0f af d0	 imul	 edx, eax
  0062b	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0062e	89 54 24 78	 mov	 DWORD PTR _r4pa$[esp+132], edx

; 653  :   r5pa = frac1mul( r5pa, pVtm_t->AFgain );    /*  Scale A5 by spdef GF        */

  00632	0f bf 54 24 44	 movsx	 edx, WORD PTR _r5pa$[esp+132]
  00637	0f af d0	 imul	 edx, eax
  0063a	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0063d	89 54 24 44	 mov	 DWORD PTR _r5pa$[esp+132], edx

; 654  :   r6pa = frac1mul( r6pa, pVtm_t->AFgain );    /*  Scale A6 by spdef GF        */

  00641	0f bf 54 24 40	 movsx	 edx, WORD PTR _r6pa$[esp+132]
  00646	0f af d0	 imul	 edx, eax
  00649	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  0064c	0f bf c9	 movsx	 ecx, cx
  0064f	89 54 24 40	 mov	 DWORD PTR _r6pa$[esp+132], edx
  00653	0f af c8	 imul	 ecx, eax

; 655  :   ABlin = frac4mul( ABlin, pVtm_t->AFgain );  /*  Scale AB by spdef GF        */

  00656	0f bf 54 24 48	 movsx	 edx, WORD PTR _ABlin$[esp+132]
  0065b	0f af d0	 imul	 edx, eax
  0065e	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00661	c1 fa 0c	 sar	 edx, 12			; 0000000cH

; 656  : 
; 657  : 
; 658  :   /********************************************************************/
; 659  :   /*  Set coeficients of variable parallel resonator R2.              */
; 660  :   /********************************************************************/
; 661  : 
; 662  :   b2p = 210;
; 663  :   r2pa = d2pole_pf( pVtm_t,&r2pb, &r2pc, F2inHZ, b2p, r2pg );

  00664	51		 push	 ecx
  00665	8b 4c 24 54	 mov	 ecx, DWORD PTR _F2inHZ$[esp+136]
  00669	89 54 24 4c	 mov	 DWORD PTR _ABlin$[esp+136], edx
  0066d	68 d2 00 00 00	 push	 210			; 000000d2H
  00672	8d 54 24 1c	 lea	 edx, DWORD PTR _r2pc$[esp+140]
  00676	51		 push	 ecx
  00677	8d 44 24 22	 lea	 eax, DWORD PTR _r2pb$[esp+144]
  0067b	52		 push	 edx
  0067c	50		 push	 eax
  0067d	56		 push	 esi
  0067e	c1 ff 0f	 sar	 edi, 15			; 0000000fH
  00681	e8 00 00 00 00	 call	 _d2pole_pf

; 664  : 
; 665  :   /********************************************************************/
; 666  :   /*  Set coeficients of variable parallel resonator R3.              */
; 667  :   /********************************************************************/
; 668  : 
; 669  :   b3p = 280;
; 670  :   r3pa = d2pole_pf( pVtm_t,&r3pb, &r3pc, F3inHZ, b3p, r3pg );

  00686	8b 4c 24 64	 mov	 ecx, DWORD PTR _F3inHZ$[esp+156]
  0068a	57		 push	 edi
  0068b	89 84 24 9c 00
	00 00		 mov	 DWORD PTR _r2pa$[esp+160], eax
  00692	68 18 01 00 00	 push	 280			; 00000118H
  00697	8d 54 24 30	 lea	 edx, DWORD PTR _r3pc$[esp+164]
  0069b	51		 push	 ecx
  0069c	8d 44 24 36	 lea	 eax, DWORD PTR _r3pb$[esp+168]
  006a0	52		 push	 edx
  006a1	50		 push	 eax
  006a2	56		 push	 esi
  006a3	e8 00 00 00 00	 call	 _d2pole_pf
  006a8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR _r3pa$[esp+180], eax

; 671  : 
; 672  :   /********************************************************************/
; 673  :   /********************************************************************/
; 674  :   /*  MAIN LOOP. Calculate each sample of the current frame.          */
; 675  :   /********************************************************************/
; 676  :   /********************************************************************/
; 677  : 
; 678  :   for ( ns = 0; ns < pVtm_t->uiNumberOfSamplesPerFrame; ns++ )

  006af	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]
  006b5	83 c4 30	 add	 esp, 48			; 00000030H
  006b8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR _ns$[esp+132], 0
  006c0	85 c0		 test	 eax, eax
  006c2	0f 86 bb 0c 00
	00		 jbe	 $L71608
  006c8	8b 5c 24 3c	 mov	 ebx, DWORD PTR _F1inHZ$[esp+132]
  006cc	8b 6c 24 28	 mov	 ebp, DWORD PTR _Glot_step$[esp+132]
  006d0	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  006d3	89 4c 24 24	 mov	 DWORD PTR -96+[esp+132], ecx
  006d7	eb 08		 jmp	 SHORT $L71606
$L71884:

; 645  : 	}
; 646  : 
; 647  : #endif
; 648  : 
; 649  :   APlin = frac4mul( APlin, pVtm_t->APgain );  /*  Scale asp by spdef GV       */

  006d9	8b 6c 24 28	 mov	 ebp, DWORD PTR _Glot_step$[esp+132]
  006dd	8b 5c 24 3c	 mov	 ebx, DWORD PTR _F1inHZ$[esp+132]
$L71606:

; 679  :   {
; 680  :     /******************************************************************/
; 681  :     /******************************************************************/
; 682  :     /*  NOISE GENERATOR                                               */
; 683  :     /******************************************************************/
; 684  :     /******************************************************************/
; 685  : #ifndef ACI_LICENSE		//tscode 01may97 ...tek
; 686  : #ifdef NEW_NOISE
; 687  : 	  	 noisef = pVtm_t->randomx >> 2;

  006e1	66 8b 86 1e 02
	00 00		 mov	 ax, WORD PTR [esi+542]

; 688  : /*      pVtm_t->randomx = (pVtm_t->randomx * ranmul) + ranadd;*/
; 689  : 	pVtm_t->randomx = (pVtm_t->randomx * 20077) + 12345;

  006e8	8b c8		 mov	 ecx, eax
  006ea	66 8b d0	 mov	 dx, ax
  006ed	c1 e1 05	 shl	 ecx, 5
  006f0	2b c8		 sub	 ecx, eax
  006f2	66 c1 fa 02	 sar	 dx, 2
  006f6	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  006f9	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  006fc	d1 e1		 shl	 ecx, 1
  006fe	2b c8		 sub	 ecx, eax
  00700	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00703	8d 84 88 39 30
	00 00		 lea	 eax, DWORD PTR [eax+ecx*4+12345]
  0070a	66 89 86 1e 02
	00 00		 mov	 WORD PTR [esi+542], ax

; 690  : 	
; 691  : 
; 692  : 
; 693  : 
; 694  : 	/******************************************************************/
; 695  : 	/*  RANDOM NUMBER FOR FRICATION                    */
; 696  : 	/*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 697  : 	/*  filtering. noise = 4. * (.25 * input) + 0.75 * last noise                  */
; 698  : 	/******************************************************************/
; 699  : 
; 700  : 
; 701  : 	noise = noisef + frac1mul( 24576, pVtm_t->nolast);

  00711	0f bf 86 b0 01
	00 00		 movsx	 eax, WORD PTR [esi+432]

; 702  : 	pVtm_t->nolast = noisef;

  00718	66 89 96 b0 01
	00 00		 mov	 WORD PTR [esi+432], dx
  0071f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00722	c1 e1 0d	 shl	 ecx, 13			; 0000000dH
  00725	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00728	03 ca		 add	 ecx, edx

; 703  : 	
; 704  : 
; 705  : 	
; 706  : 
; 707  : 
; 708  : 	/******************************************************************/
; 709  : 	/*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 710  : 	/*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 711  : 	/*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 712  : 	/******************************************************************/
; 713  : 
; 714  : 	if( pVtm_t->nper < pVtm_t->nmod )

  0072a	66 8b 96 12 02
	00 00		 mov	 dx, WORD PTR [esi+530]
  00731	66 3b 96 1a 02
	00 00		 cmp	 dx, WORD PTR [esi+538]
  00738	89 4c 24 20	 mov	 DWORD PTR _noise$[esp+132], ecx
  0073c	7d 05		 jge	 SHORT $L71610

; 715  : 		noise >>= 1;

  0073e	66 d1 7c 24 20	 sar	 WORD PTR _noise$[esp+132], 1
$L71610:

; 716  : 
; 717  : 			/*  Random number for breathiness (first diff preemphasis) */
; 718  : 	noiseb = noise - pVtm_t->noblast;    /* BREATHINESS NOISE */

  00743	66 8b 4c 24 20	 mov	 cx, WORD PTR _noise$[esp+132]
  00748	8b 7c 24 54	 mov	 edi, DWORD PTR _pKsd_t$[esp+132]
  0074c	66 8b c1	 mov	 ax, cx
  0074f	c7 44 24 3c 04
	00 00 00	 mov	 DWORD PTR -72+[esp+132], 4
  00757	66 2b 86 ae 01
	00 00		 sub	 ax, WORD PTR [esi+430]

; 719  : 	pVtm_t->noblast = noise; 

  0075e	66 89 8e ae 01
	00 00		 mov	 WORD PTR [esi+430], cx
  00765	33 d2		 xor	 edx, edx
  00767	89 44 24 6c	 mov	 DWORD PTR _noiseb$[esp+132], eax
  0076b	eb 06		 jmp	 SHORT $L71611
$L71886:

; 716  : 
; 717  : 			/*  Random number for breathiness (first diff preemphasis) */
; 718  : 	noiseb = noise - pVtm_t->noblast;    /* BREATHINESS NOISE */

  0076d	8b 6c 24 28	 mov	 ebp, DWORD PTR _Glot_step$[esp+132]
  00771	33 d2		 xor	 edx, edx
$L71611:

; 720  : 
; 721  : #else
; 722  :     pVtm_t->randomx = pVtm_t->randomx * ranmul + ranadd;
; 723  :     noise = pVtm_t->randomx >> 2;
; 724  : 
; 725  :     /******************************************************************/
; 726  :     /*  RANDOM NUMBER FOR FRICATION AND ASPIRATION                    */
; 727  :     /*  Tilt down aspiration noise spectrum at high freqs by low-pass */
; 728  :     /*  filtering. noise = noise + 0.75 * last noise                  */
; 729  :     /******************************************************************/
; 730  : 
; 731  :     noise += frac1mul( 24574, pVtm_t->nolast );
; 732  :     pVtm_t->nolast = noise;
; 733  : 
; 734  :     /******************************************************************/
; 735  :     /*                                                                */
; 736  :     /*  Filter with Pi-rotated antiresonator. (This is the same as an */
; 737  :     /*  ordinary antiresonator except for the b-coef has it's sign    */
; 738  :     /*  flipped). Frequency = 3500, Bandwidth = 1600.                 */
; 739  :     /*                                                                */
; 740  :     /*  This is a three zero filter, but is implemented as a special  */
; 741  :     /*  case because one of the multipliers is 1.0. The input and     */
; 742  :     /*  output variable is "noise".                                   */
; 743  :     /*                                                                */
; 744  :     /******************************************************************/
; 745  : 
; 746  :     two_zero_filter_2( noise, pVtm_t->ablas1, pVtm_t->ablas2, pVtm_t->noiseb, noisec );
; 747  : 
; 748  :     /******************************************************************/
; 749  :     /*  Amplitude modulate noise. Reduce noise amplitude during the   */
; 750  :     /*  second half of the glottal period if "avlin" > 0. "nmod" is   */
; 751  :     /*  set to 0 if "avlin" is zero, i.e. the glottal source is off.  */
; 752  :     /******************************************************************/
; 753  : 
; 754  :     if ( pVtm_t->nper < pVtm_t->nmod )
; 755  : 	noise >>= 1;
; 756  : #endif //new_noise/else
; 757  : 
; 758  :     /******************************************************************/
; 759  :     /*  PERIODIC VOICING WAVEFORM                                     */
; 760  :     /*  A period has duration of T0 samples, nper is the counter of   */
; 761  :     /*  current time. During the first nper = 0 to ( T0 - nopen )     */
; 762  :     /*  samples, the glottis is closed. The glottis opens at time     */
; 763  :     /*  ( T0 - nopen ), and closes at time T0.                        */
; 764  :     /******************************************************************/
; 765  : 
; 766  : #ifndef LOWCOMPUTE
; 767  :     for ( nsr4 = 0; nsr4 < 4; nsr4++ )
; 768  :     {
; 769  : #endif
; 770  :       /****************************************************************/
; 771  :       /*  Compute next value of voicing wave. Calculate glottal pulse */
; 772  :       /*  at 4 times normal sample rate to minimize the quantization  */
; 773  :       /*  of the glottal period.                                      */
; 774  :       /****************************************************************/
; 775  : 
; 776  :       /****************************************************************/
; 777  :       /*  Future upgrade ?                                            */
; 778  :       /*  When glottis closes, reduce F1 and B1.                      */
; 779  :       /****************************************************************/
; 780  : 
; 781  : #ifdef   F1_B1_UPGRADE
; 782  : 	if(pVtm_t->Up_Down_Flag == 0)
; 783  :     { 
; 784  : 		//f1_b1_down(F1inHZ);
; 785  : 	  pVtm_t->r1cc -= (F1inHZ);
; 786  : 	  pVtm_t->r1cb += (pVtm_t->delr1b + (F1inHZ));
; 787  : 
; 788  : 	  pVtm_t->Up_Down_Flag=1;
; 789  : 	}
; 790  : #endif
; 791  : 
; 792  :       /****************************************************************/
; 793  :       /*  voicing has fixed waveshape, at**2 - bt**3                  */
; 794  :       /****************************************************************/
; 795  : 
; 796  :       if ( pVtm_t->nper > ( pVtm_t->T0 - pVtm_t->nopen ))

  00773	0f bf 86 14 02
	00 00		 movsx	 eax, WORD PTR [esi+532]
  0077a	0f bf 8e 16 02
	00 00		 movsx	 ecx, WORD PTR [esi+534]
  00781	2b c1		 sub	 eax, ecx
  00783	0f bf 8e 12 02
	00 00		 movsx	 ecx, WORD PTR [esi+530]
  0078a	3b c8		 cmp	 ecx, eax
  0078c	7e 30		 jle	 SHORT $L71614

; 797  :       {
; 798  : 		 
; 799  : 		(pVtm_t->a) -= pVtm_t->b;             /*  Fixed waveshape at**2 - bt**3         */

  0078e	66 8b 96 0a 02
	00 00		 mov	 dx, WORD PTR [esi+522]
  00795	66 29 96 08 02
	00 00		 sub	 WORD PTR [esi+520], dx
  0079c	66 8b 86 08 02
	00 00		 mov	 ax, WORD PTR [esi+520]

; 800  : 
; 801  : 		(pVtm_t->voice0) += pVtm_t->a>>4;       /*  Differentiated glottal flow.          */

  007a3	66 c1 f8 04	 sar	 ax, 4
  007a7	66 01 86 f4 01
	00 00		 add	 WORD PTR [esi+500], ax

; 802  : 		pVtm_t->avlind = pVtm_t->avlin;     /*  Delay action of "avlin" change.       */

  007ae	66 8b 86 04 02
	00 00		 mov	 ax, WORD PTR [esi+516]
  007b5	66 89 86 06 02
	00 00		 mov	 WORD PTR [esi+518], ax

; 803  :       }
; 804  :       else

  007bc	eb 59		 jmp	 SHORT $L71622
$L71614:

; 805  :       {
; 806  : #ifdef NEW_VTM
; 807  : 		  /* EAB 4/26/98 When glot_step is a big number, much greater then 10 it represents a more sinusoidal type of vocaliztion
; 808  : 		  and when it is 10 or less it represents an exponential decay which is similar to instantaneous closure in males
; 809  : 		  but with less high frequency energy as seen in many female voice and some males*/
; 810  : 
; 811  : 		  if(Glot_step)

  007be	66 3b ea	 cmp	 bp, dx
  007c1	74 4d		 je	 SHORT $L71616

; 812  : 			{
; 813  : 				if(pVtm_t->voice0 < 0 && pVtm_t->voice0 < Glot_step)

  007c3	66 8b 86 f4 01
	00 00		 mov	 ax, WORD PTR [esi+500]
  007ca	66 3b c2	 cmp	 ax, dx
  007cd	7d 2f		 jge	 SHORT $L71617
  007cf	66 3b c5	 cmp	 ax, bp
  007d2	7d 2a		 jge	 SHORT $L71617

; 814  : 				{
; 815  : 					if (Glot_step <= 4)

  007d4	66 83 fd 04	 cmp	 bp, 4
  007d8	7f 19		 jg	 SHORT $L71618

; 816  : 					{
; 817  : 						pVtm_t->voice0 -=(pVtm_t->voice0 >>Glot_step);

  007da	8b c8		 mov	 ecx, eax
  007dc	89 4c 24 5c	 mov	 DWORD PTR -40+[esp+132], ecx
  007e0	66 8b cd	 mov	 cx, bp
  007e3	8b e8		 mov	 ebp, eax
  007e5	66 d3 fd	 sar	 bp, cl
  007e8	2b c5		 sub	 eax, ebp
  007ea	66 89 86 f4 01
	00 00		 mov	 WORD PTR [esi+500], ax

; 818  : 					}
; 819  : 					else

  007f1	eb 12		 jmp	 SHORT $L71620
$L71618:

; 820  : 					{
; 821  : 					pVtm_t->voice0 =pVtm_t->voice0 + Glot_step;

  007f3	03 c5		 add	 eax, ebp
  007f5	66 89 86 f4 01
	00 00		 mov	 WORD PTR [esi+500], ax

; 822  : 					}
; 823  : 				}else 

  007fc	eb 07		 jmp	 SHORT $L71620
$L71617:

; 824  : 					pVtm_t->voice0  = 0;

  007fe	66 89 96 f4 01
	00 00		 mov	 WORD PTR [esi+500], dx
$L71620:

; 825  : 
; 826  : 			/* exponential decay could cause a long dc build up, beside I'm assuming physiologically
; 827  : 				that at some point the cords just collapse trying 2000 for that figure 4/27/98*/
; 828  : 
; 829  : 				if(pVtm_t->voice0 > -2000)

  00805	66 81 be f4 01
	00 00 30 f8	 cmp	 WORD PTR [esi+500], -2000 ; fffff830H
  0080e	7e 07		 jle	 SHORT $L71622
$L71616:

; 830  : 				{
; 831  : 					pVtm_t->voice0  = 0;
; 832  : 				}
; 833  : 
; 834  : 			}
; 835  : 			else 
; 836  : 				pVtm_t->voice0  = 0;

  00810	66 89 96 f4 01
	00 00		 mov	 WORD PTR [esi+500], dx
$L71622:

; 837  : 
; 838  : #ifdef NEW_TILT
; 839  : #ifndef CLOSING_TIME
; 840  : 	  /* Reset tilt filter at glottal open time (WHY NOT AT CLOSE TIME?) */
; 841  : 		if (pVtm_t->nper == (pVtm_t->topen)) 
; 842  : 			{
; 843  : 		/* BUG: Some kind of obscure overload if TILTDB == 0,1 */
; 844  : 				
; 845  : 				if (TILTDB < 2)    TILTDB = 1;
; 846  : 				if (TILTDB > 41)  
; 847  : 					TILTDB = 41;
; 848  : 
; 849  : 				Ftilt = frac1mul(20000,tiltf[TILTDB]);  
; 850  : 				/* 0.6 (fold into table)*/
; 851  : 				BWtilt = tiltbw[TILTDB];
; 852  : 			/* need to add new spdef for rltlg*/
; 853  : 				rtltg=2048;   
; 854  : 			 
; 855  : /*                Make gain approx. constant at f=300 rather than at f=0 */
; 856  : /*                This results in boost of as much as 8 dB at f=100 fund comp */
; 857  : 				if (TILTDB > 10)   
; 858  : 					rtltg += ((TILTDB-10) * (TILTDB-10) * 4);
; 859  : 				/* eab had to drop correction at high tilts we were overeloading*/
; 860  : 		    /*    Set one-pole low-pass filter that tilts glottal source */
; 861  : 
; 862  :             //setabc( Ftilt, BWtilt, &pVtm_t->rtca, &pVtm_t->rtcb, &pVtm_t->rtcc);
; 863  : 			pVtm_t->rtca = d2pole_pf( pVtm_t,&pVtm_t->rtcb, &pVtm_t->rtcc, Ftilt, BWtilt, rtltg);
; 864  : 			} 
; 865  : #endif //CLOSING_TIME
; 866  : #endif //NEW_TILT
; 867  : 
; 868  : #else
; 869  : 				pVtm_t->voice0  = 0;
; 870  : 
; 871  : #endif /* NEW_VTM */
; 872  : 
; 873  :       }
; 874  : 
; 875  :     
; 876  : 
; 877  :       /****************************************************************/
; 878  :       /*  Scale the glottal waveform using the speaker dependant      */
; 879  :       /*  parameter "avgain".                                         */
; 880  :       /****************************************************************/
; 881  : 	  /* EAB 6/9/99 It was necessary to move things because otherwise the 
; 882  : 	  average level of the phrom base is not properly normalized while tuning
; 883  : 	  and tuning it later causes overload problems. */
; 884  : 
; 885  : 	  voice = frac4mul( pVtm_t->avlind, pVtm_t->voice0 );
; 886  : 
; 887  : 
; 888  :       voice = frac4mul( voice, pVtm_t->avgain );

  00817	0f bf 8e 06 02
	00 00		 movsx	 ecx, WORD PTR [esi+518]
  0081e	0f bf 96 f4 01
	00 00		 movsx	 edx, WORD PTR [esi+500]
  00825	0f af ca	 imul	 ecx, edx
  00828	0f bf 86 f6 01
	00 00		 movsx	 eax, WORD PTR [esi+502]
  0082f	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00832	0f bf e9	 movsx	 ebp, cx
  00835	0f af e8	 imul	 ebp, eax

; 889  : 	  
; 890  : 
; 891  :       /****************************************************************/
; 892  :       /*  SOME PARAMETERS ARE UPDATED PITCH SYNCHRONOUSLY             */
; 893  :       /*  (at sample before glottal close time)                       */
; 894  :       /****************************************************************/
; 895  : 
; 896  :       if ( pVtm_t->nper == pVtm_t->T0 )

  00838	66 8b 8e 12 02
	00 00		 mov	 cx, WORD PTR [esi+530]
  0083f	c1 fd 0c	 sar	 ebp, 12			; 0000000cH
  00842	66 3b 8e 14 02
	00 00		 cmp	 cx, WORD PTR [esi+532]
  00849	0f 85 ee 03 00
	00		 jne	 $L71625

; 897  :       {
; 898  : 	/**************************************************************/
; 899  : 	/*  Reset period when 'nper' reaches T0, glottis about to     */
; 900  : 	/*  open.                                                     */
; 901  : 	/**************************************************************/
; 902  : 
; 903  : 	pVtm_t->nper = 0;
; 904  : 
; 905  : 	/**************************************************************/
; 906  : 	/*  'avlin' moved to 'avlind' after half period.              */
; 907  : 	/**************************************************************/
; 908  : 
; 909  : 	pVtm_t->avlin = amptable[AVinDB + 4];  /*  Convert from dB to linear. */

  0084f	0f bf 54 24 60	 movsx	 edx, WORD PTR _AVinDB$[esp+132]
  00854	66 c7 86 12 02
	00 00 00 00	 mov	 WORD PTR [esi+530], 0
  0085d	66 8b 04 55 08
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2+8]
  00865	66 89 86 04 02
	00 00		 mov	 WORD PTR [esi+516], ax

; 910  : #ifdef LOWCOMPUTE
; 911  : 	pVtm_t->T0 = T0inS4>>2;          /*  T0inS4 remembers period in case     */
; 912  : 	      /*  more than 1 period in cur frame.    */
; 913  : 	pVtm_t->T0 += frac4mul( (pVtm_t->t0jitr>>2), pVtm_t->T0 ); /*  Add jitter, if any.        */
; 914  : 	
; 915  : #else
; 916  : 
; 917  : 	pVtm_t->T0 = T0inS4;

  0086c	8b 44 24 2c	 mov	 eax, DWORD PTR _T0inS4$[esp+132]
  00870	66 89 86 14 02
	00 00		 mov	 WORD PTR [esi+532], ax

; 918  : 	      /*  more than 1 period in cur frame.    */
; 919  : 	pVtm_t->T0 += frac4mul( pVtm_t->t0jitr, pVtm_t->T0 ); /*  Add jitter, if any.        */

  00877	0f bf 96 24 01
	00 00		 movsx	 edx, WORD PTR [esi+292]
  0087e	0f bf c8	 movsx	 ecx, ax
  00881	0f af ca	 imul	 ecx, edx
  00884	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00887	03 c8		 add	 ecx, eax
  00889	66 89 8e 14 02
	00 00		 mov	 WORD PTR [esi+532], cx

; 920  : 	
; 921  : #endif
; 922  : 			
; 923  : 	pVtm_t->t0jitr = -(pVtm_t->t0jitr);     /*  Change sign for alternating jitter. */

  00890	66 8b 86 24 01
	00 00		 mov	 ax, WORD PTR [esi+292]
  00897	66 f7 d8	 neg	 ax
  0089a	66 89 86 24 01
	00 00		 mov	 WORD PTR [esi+292], ax

; 924  : 
; 925  : 	/**************************************************************/
; 926  : 	/*  \1 is the Speaker definition breathiness coeficient   */
; 927  : 	/**************************************************************/
; 928  : 
; 929  : 	pVtm_t->aturb1 = pVtm_t->Aturb;

  008a1	66 8b 8e 28 01
	00 00		 mov	 cx, WORD PTR [esi+296]

; 930  : 
; 931  : 	if ( F1inHZ < 250 )

  008a8	66 81 fb fa 00	 cmp	 bx, 250			; 000000faH
  008ad	66 89 8e f8 01
	00 00		 mov	 WORD PTR [esi+504], cx
  008b4	7d 05		 jge	 SHORT $L71627

; 932  : 	  F1inHZ = 250;

  008b6	bb fa 00 00 00	 mov	 ebx, 250		; 000000faH
$L71627:

; 933  : 
; 934  : 	/**************************************************************/
; 935  : 	/*  Use a one pole iir filter to tilt the glottal source.     */
; 936  : 	/**************************************************************/
; 937  : 
; 938  : 	switch( pVtm_t->uiSampleRateChange )
; 939  : 	{

  008bb	8b 06		 mov	 eax, DWORD PTR [esi]
  008bd	83 e8 00	 sub	 eax, 0
  008c0	74 21		 je	 SHORT $L71632
  008c2	48		 dec	 eax
  008c3	74 09		 je	 SHORT $L71634
  008c5	48		 dec	 eax

; 949  : 
; 950  : 	case NO_SAMPLE_RATE_CHANGE:
; 951  : 
; 952  : 	  pVtm_t->decay = 1094 * (S32)TILTDB;

  008c6	8b 44 24 18	 mov	 eax, DWORD PTR _TILTDB$[esp+132]
  008ca	75 33		 jne	 SHORT $L71629

; 953  : 	  break;

  008cc	eb 19		 jmp	 SHORT $L71893
$L71634:

; 943  : 	  break;
; 944  : 
; 945  : 	case SAMPLE_RATE_DECREASE:
; 946  : 
; 947  : 	  pVtm_t->decay = 1073 * (S32)TILTDB;

  008ce	8b 44 24 18	 mov	 eax, DWORD PTR _TILTDB$[esp+132]
  008d2	8b d0		 mov	 edx, eax
  008d4	c1 e2 05	 shl	 edx, 5
  008d7	03 d0		 add	 edx, eax
  008d9	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  008dc	c1 e1 04	 shl	 ecx, 4
  008df	03 c8		 add	 ecx, eax

; 948  : 	  break;

  008e1	eb 15		 jmp	 SHORT $L71894
$L71632:

; 940  : 	case SAMPLE_RATE_INCREASE:
; 941  : 
; 942  : 	  pVtm_t->decay = 1094 * (S32)TILTDB;

  008e3	8b 44 24 18	 mov	 eax, DWORD PTR _TILTDB$[esp+132]
$L71893:
  008e7	8b d0		 mov	 edx, eax
  008e9	c1 e2 04	 shl	 edx, 4
  008ec	03 d0		 add	 edx, eax
  008ee	c1 e2 04	 shl	 edx, 4
  008f1	03 d0		 add	 edx, eax
  008f3	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  008f6	d1 e1		 shl	 ecx, 1
$L71894:
  008f8	66 89 8e f0 01
	00 00		 mov	 WORD PTR [esi+496], cx
$L71629:

; 954  : 
; 955  : 	default:
; 956  : 
; 957  : 	  break;
; 958  : 	}
; 959  : #ifdef CLOSING_TIME
; 960  : 	// For firat pass use tiltdb as a driving parameter because
; 961  : 	// we don't have an closing time argument EAB 
; 962  : 	  pVtm_t->decay= decaytab[TILTDB];

  008ff	0f bf d0	 movsx	 edx, ax
  00902	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _decaytab[edx*2]

; 963  : 	//pVtm_t->decay= 29648; //eab used by wang to force values
; 964  : 
; 965  : #endif
; 966  : 
; 967  : 	if ( pVtm_t->decay >= 0 )

  0090a	66 85 c0	 test	 ax, ax
  0090d	66 89 86 f0 01
	00 00		 mov	 WORD PTR [esi+496], ax
  00914	7c 10		 jl	 SHORT $L71639

; 968  : 	  pVtm_t->one_minus_decay = 32767 - pVtm_t->decay;

  00916	b9 ff 7f 00 00	 mov	 ecx, 32767		; 00007fffH
  0091b	2b c8		 sub	 ecx, eax
  0091d	66 89 8e f2 01
	00 00		 mov	 WORD PTR [esi+498], cx

; 969  : 	else

  00924	eb 09		 jmp	 SHORT $L71640
$L71639:

; 970  : 	  pVtm_t->one_minus_decay = 32767;

  00926	66 c7 86 f2 01
	00 00 ff 7f	 mov	 WORD PTR [esi+498], 32767 ; 00007fffH
$L71640:

; 971  : 
; 972  : 	/**************************************************************/
; 973  : 	/*  Set to "nmod" during the first half of the period.        */
; 974  : 	/*  Modulate the amplitude of the noise if "avlin" > 0, i.e.  */
; 975  : 	/*  the glottal source is enabled.                            */
; 976  : 	/**************************************************************/
; 977  : 
; 978  : 	pVtm_t->nmod = 0;

  0092f	66 c7 86 1a 02
	00 00 00 00	 mov	 WORD PTR [esi+538], 0

; 979  : 
; 980  : 	if ( pVtm_t->avlin > 0 )

  00938	66 83 be 04 02
	00 00 00	 cmp	 WORD PTR [esi+516], 0
  00940	7e 11		 jle	 SHORT $L71641

; 981  : 	  pVtm_t->nmod = pVtm_t->T0 >> 1;

  00942	66 8b 96 14 02
	00 00		 mov	 dx, WORD PTR [esi+532]
  00949	66 d1 fa	 sar	 dx, 1
  0094c	66 89 96 1a 02
	00 00		 mov	 WORD PTR [esi+538], dx
$L71641:

; 982  : #ifdef LOWCOMPUTE
; 983  : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + (pVtm_t->k2>>1);   /*  in open part of period */
; 984  : #else
; 985  : #ifdef UPGRADES1999
; 986  : 	/*spdef pars k1 & k2 NOT USED ANYMORE 
; 987  : 	   nopen = frac1mul(k1,T0) + k2; */
; 988  : 		temp3 = OPENQ;

  00953	8b 44 24 1c	 mov	 eax, DWORD PTR _OPENQ$[esp+132]

; 989  : 		if (temp3 < 10)    temp3 = 10;

  00957	66 3d 0a 00	 cmp	 ax, 10			; 0000000aH
  0095b	7d 07		 jge	 SHORT $L71642
  0095d	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 990  : 		if (temp3 > 75)    temp3 = 75;

  00962	eb 0b		 jmp	 SHORT $L71643
$L71642:
  00964	66 3d 4b 00	 cmp	 ax, 75			; 0000004bH
  00968	7e 05		 jle	 SHORT $L71643
  0096a	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
$L71643:

; 991  : 		temp = (temp3*pVtm_t->T0)>>6;
; 992  : 		pVtm_t->nopen = frac4mul(2620,temp);

  0096f	0f bf 8e 14 02
	00 00		 movsx	 ecx, WORD PTR [esi+532]
  00976	0f bf c0	 movsx	 eax, ax
  00979	0f af c1	 imul	 eax, ecx
  0097c	c1 f8 06	 sar	 eax, 6
  0097f	0f bf c0	 movsx	 eax, ax
  00982	8b d0		 mov	 edx, eax
  00984	c1 e2 06	 shl	 edx, 6
  00987	03 d0		 add	 edx, eax
  00989	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]
  0098c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0098f	c1 e0 02	 shl	 eax, 2
  00992	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00995	66 89 86 16 02
	00 00		 mov	 WORD PTR [esi+534], ax

; 993  : 
; 994  : 		switch( pVtm_t->uiSampleRateChange )
; 995  :   {

  0099c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0099e	83 e9 00	 sub	 ecx, 0
  009a1	74 12		 je	 SHORT $L71649
  009a3	49		 dec	 ecx
  009a4	75 26		 jne	 SHORT $L71646

; 999  :     break;
; 1000 : 
; 1001 :   case SAMPLE_RATE_DECREASE:
; 1002 : 
; 1003 :     pVtm_t->nopen = frac1mul( pVtm_t->rate_scale, pVtm_t->nopen );

  009a6	0f bf 4e 04	 movsx	 ecx, WORD PTR [esi+4]
  009aa	0f bf d0	 movsx	 edx, ax
  009ad	0f af ca	 imul	 ecx, edx
  009b0	c1 f9 0f	 sar	 ecx, 15			; 0000000fH

; 1004 :     break;

  009b3	eb 10		 jmp	 SHORT $L71891
$L71649:

; 996  :   case SAMPLE_RATE_INCREASE:
; 997  : 
; 998  :     pVtm_t->nopen = frac1mul( pVtm_t->rate_scale, pVtm_t->nopen ) << 1;

  009b5	0f bf 4e 04	 movsx	 ecx, WORD PTR [esi+4]
  009b9	0f bf d0	 movsx	 edx, ax
  009bc	0f af ca	 imul	 ecx, edx
  009bf	c1 f9 0e	 sar	 ecx, 14			; 0000000eH
  009c2	83 e1 fe	 and	 ecx, -2			; fffffffeH
$L71891:
  009c5	66 89 8e 16 02
	00 00		 mov	 WORD PTR [esi+534], cx
$L71646:

; 1005 : 
; 1006 :   case NO_SAMPLE_RATE_CHANGE:
; 1007 : 
; 1008 :     break;
; 1009 : 
; 1010 :   default:
; 1011 : 
; 1012 :     break;
; 1013 :   }
; 1014 : #endif //UPGRADES1999
; 1015 : 
; 1016 : 	pVtm_t->nopen = frac1mul( pVtm_t->k1, pVtm_t->T0 ) + pVtm_t->k2;   /*  in open part of period */

  009cc	0f bf 86 0c 02
	00 00		 movsx	 eax, WORD PTR [esi+524]
  009d3	0f bf 8e 14 02
	00 00		 movsx	 ecx, WORD PTR [esi+532]
  009da	0f af c1	 imul	 eax, ecx
  009dd	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  009e0	66 03 86 0e 02
	00 00		 add	 ax, WORD PTR [esi+526]

; 1017 : #endif
; 1018 : 
; 1019 : 
; 1020 : 	
; 1021 : #ifndef LOWCOMPUTE
; 1022 : #ifndef NEW_TILT
; 1023 : 	pVtm_t->nopen += ( TILTDB<<2  );      /*  Longer if TILTDB increases */
; 1024 : #endif
; 1025 : 	if ( pVtm_t->nopen < 40 )

  009e7	66 3d 28 00	 cmp	 ax, 40			; 00000028H
  009eb	66 89 86 16 02
	00 00		 mov	 WORD PTR [esi+534], ax
  009f2	7d 0b		 jge	 SHORT $L71656

; 1026 : 	  pVtm_t->nopen = 40;        /*  Min is 40                            */

  009f4	66 c7 86 16 02
	00 00 28 00	 mov	 WORD PTR [esi+534], 40	; 00000028H

; 1027 : 	else

  009fd	eb 0f		 jmp	 SHORT $L71658
$L71656:

; 1028 : 	  if ( pVtm_t->nopen > 263 )

  009ff	66 3d 07 01	 cmp	 ax, 263			; 00000107H
  00a03	7e 09		 jle	 SHORT $L71658

; 1029 : 	    pVtm_t->nopen = 263;     /*  Max is 263                           */

  00a05	66 c7 86 16 02
	00 00 07 01	 mov	 WORD PTR [esi+534], 263	; 00000107H
$L71658:

; 1030 : 
; 1031 : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))

  00a0e	0f bf 86 14 02
	00 00		 movsx	 eax, WORD PTR [esi+532]
  00a15	0f bf 96 16 02
	00 00		 movsx	 edx, WORD PTR [esi+534]
  00a1c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00a1f	c1 f8 02	 sar	 eax, 2
  00a22	3b d0		 cmp	 edx, eax
  00a24	7c 07		 jl	 SHORT $L71659

; 1032 : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */

  00a26	66 89 86 16 02
	00 00		 mov	 WORD PTR [esi+534], ax
$L71659:

; 1033 : #else
; 1034 : #ifndef UPGRADES1999	
; 1035 : 	pVtm_t->nopen += ( TILTDB  );      /*  Longer if TILTDB increases */
; 1036 : #endif
; 1037 : 
; 1038 : 
; 1039 : 	if ( pVtm_t->nopen < 10 )
; 1040 : 	  pVtm_t->nopen = 10;        /*  Min is 40                            */
; 1041 : 	else
; 1042 : 	  if ( pVtm_t->nopen > (263>>2) )
; 1043 : 	    pVtm_t->nopen = (263>>2);     /*  Max is 263                           */
; 1044 : 
; 1045 : 	if ( pVtm_t->nopen >= (( pVtm_t->T0 * 3 ) >> 2 ))
; 1046 : 	  pVtm_t->nopen = (( pVtm_t->T0 * 3 ) >> 2 );    /*  or 3/4 T0                */
; 1047 : #endif
; 1048 : 	
; 1049 : #ifdef NEW_TILT
; 1050 : 	pVtm_t->topen=  pVtm_t->T0-pVtm_t->nopen;

  00a2d	66 8b 86 14 02
	00 00		 mov	 ax, WORD PTR [esi+532]
  00a34	66 2b 86 16 02
	00 00		 sub	 ax, WORD PTR [esi+534]
  00a3b	66 89 86 18 02
	00 00		 mov	 WORD PTR [esi+536], ax

; 1051 : #endif
; 1052 : 
; 1053 : 	/**************************************************************/
; 1054 : 	/*  Reset a & b, which determine shape of glottal waveform.   */
; 1055 : 	/*  Let a = (b * nopen) / 3 without doing the divide.         */
; 1056 : 	/**************************************************************/
; 1057 : #ifdef LOWCOMPUTE
; 1058 : 	//EAB minus 11 is to make sure we round down in lookup otherwise
; 1059 : 	//overflows are possible 1/11/99
; 1060 : 	// 1/17/99     BATS852 There was an error in the way nopen was calculated and the
; 1061 : 	//				boiler plate code was holding back the flood.
; 1062 : 	pVtm_t->b = B0[(pVtm_t->nopen-9)];
; 1063 : #else
; 1064 : 	pVtm_t->b = B0[pVtm_t->nopen-40];

  00a42	0f bf 8e 16 02
	00 00		 movsx	 ecx, WORD PTR [esi+534]
  00a49	66 8b 0c 4d b0
	ff ff ff	 mov	 cx, WORD PTR _B0[ecx*2-80]
  00a51	66 89 8e 0a 02
	00 00		 mov	 WORD PTR [esi+522], cx

; 1065 : #endif
; 1066 : 
; 1067 : 
; 1068 : 	pVtm_t->temp = pVtm_t->b +1;

  00a58	41		 inc	 ecx
  00a59	66 89 8e 1c 02
	00 00		 mov	 WORD PTR [esi+540], cx

; 1069 : 
; 1070 : 
; 1071 : 
; 1072 : 	if ( pVtm_t->nopen > 95 )

  00a60	66 8b 86 16 02
	00 00		 mov	 ax, WORD PTR [esi+534]
  00a67	66 3d 5f 00	 cmp	 ax, 95			; 0000005fH
  00a6b	7e 2b		 jle	 SHORT $L71660

; 1073 : 	{
; 1074 : 	  pVtm_t->temp = (S32)pVtm_t->temp * pVtm_t->nopen;

  00a6d	0f af c1	 imul	 eax, ecx
  00a70	66 89 86 1c 02
	00 00		 mov	 WORD PTR [esi+540], ax

; 1075 : 	  pVtm_t->a = frac1mul(10923, pVtm_t->temp );

  00a77	0f bf c0	 movsx	 eax, ax
  00a7a	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00a7d	8d 14 c9	 lea	 edx, DWORD PTR [ecx+ecx*8]
  00a80	8d 0c 50	 lea	 ecx, DWORD PTR [eax+edx*2]
  00a83	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00a86	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00a89	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00a8c	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00a8f	66 89 96 08 02
	00 00		 mov	 WORD PTR [esi+520], dx

; 1076 : 	}
; 1077 : 	else

  00a96	eb 2e		 jmp	 SHORT $L71663
$L71660:

; 1078 : 	{
; 1079 : 	  pVtm_t->temp = frac1mul(10923, pVtm_t->temp );

  00a98	0f bf c1	 movsx	 eax, cx
  00a9b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00a9e	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  00aa1	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00aa4	8d 14 89	 lea	 edx, DWORD PTR [ecx+ecx*4]
  00aa7	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]
  00aaa	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00aad	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00ab0	66 89 86 1c 02
	00 00		 mov	 WORD PTR [esi+540], ax

; 1080 : 	  pVtm_t->a = (S32)pVtm_t->temp * pVtm_t->nopen;

  00ab7	66 0f af 86 16
	02 00 00	 imul	 ax, WORD PTR [esi+534]
  00abf	66 89 86 08 02
	00 00		 mov	 WORD PTR [esi+520], ax
$L71663:

; 1081 : 	}
; 1082 : 	//  1/17/99 BATS852 There was an error in the way nopen was calculated 
; 1083 : 	//	and the	boiler plate code was holding back the flood.
; 1084 : 
; 1085 : 
; 1086 : 
; 1087 : 	/**************************************************************/
; 1088 : 	/*  Set coeficients of variable cascade resonators.           */
; 1089 : 	/**************************************************************/
; 1090 : #ifdef NEW_VTM
; 1091 : 	//FNPinHZ = (500+(FZinHZ-263)*3);
; 1092 : 	//FNPinHZ = (500+((FZinHZ-263)*6)); //eab idebtical to zero to check performance
; 1093 : 	d2pole_cf123( pVtm_t,pKsd_t, &pVtm_t->rnpb, &pVtm_t->rnpc,FNPinHZ , 120 ,0 );

  00ac6	8b 44 24 64	 mov	 eax, DWORD PTR _FNPinHZ$[esp+132]
  00aca	6a 00		 push	 0
  00acc	6a 78		 push	 120			; 00000078H
  00ace	8d 8e e0 01 00
	00		 lea	 ecx, DWORD PTR [esi+480]
  00ad4	50		 push	 eax
  00ad5	8d 96 de 01 00
	00		 lea	 edx, DWORD PTR [esi+478]
  00adb	51		 push	 ecx
  00adc	52		 push	 edx
  00add	57		 push	 edi
  00ade	56		 push	 esi
  00adf	e8 00 00 00 00	 call	 _d2pole_cf123

; 1094 : #endif
; 1095 : 	
; 1096 : 	pVtm_t->R3ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r3cb, &pVtm_t->r3cc, F3inHZ, B3inHZ, pVtm_t->r3cg );

  00ae4	66 8b 86 fe 01
	00 00		 mov	 ax, WORD PTR [esi+510]
  00aeb	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR _B3inHZ$[esp+160]
  00af2	8b 54 24 68	 mov	 edx, DWORD PTR _F3inHZ$[esp+160]
  00af6	50		 push	 eax
  00af7	51		 push	 ecx
  00af8	8d 86 ce 01 00
	00		 lea	 eax, DWORD PTR [esi+462]
  00afe	52		 push	 edx
  00aff	8d 8e cc 01 00
	00		 lea	 ecx, DWORD PTR [esi+460]
  00b05	50		 push	 eax
  00b06	51		 push	 ecx
  00b07	57		 push	 edi
  00b08	56		 push	 esi
  00b09	e8 00 00 00 00	 call	 _d2pole_cf123

; 1097 : 	pVtm_t->R2ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r2cb, &pVtm_t->r2cc, F2inHZ, B2inHZ, pVtm_t->r2cg );

  00b0e	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _F2inHZ$[esp+188]
  00b15	66 89 86 ca 01
	00 00		 mov	 WORD PTR [esi+458], ax
  00b1c	66 8b 96 00 02
	00 00		 mov	 dx, WORD PTR [esi+512]
  00b23	8b 44 24 68	 mov	 eax, DWORD PTR _B2inHZ$[esp+188]
  00b27	52		 push	 edx
  00b28	50		 push	 eax
  00b29	8d 96 c8 01 00
	00		 lea	 edx, DWORD PTR [esi+456]
  00b2f	51		 push	 ecx
  00b30	8d 86 c6 01 00
	00		 lea	 eax, DWORD PTR [esi+454]
  00b36	52		 push	 edx
  00b37	50		 push	 eax
  00b38	57		 push	 edi
  00b39	56		 push	 esi
  00b3a	e8 00 00 00 00	 call	 _d2pole_cf123

; 1098 : 	pVtm_t->R1ca = d2pole_cf123( pVtm_t,pKsd_t,&pVtm_t->r1cb, &pVtm_t->r1cc, F1inHZ, B1inHZ, pVtm_t->r1cg );

  00b3f	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR _B1inHZ$[esp+216]
  00b46	83 c4 54	 add	 esp, 84			; 00000054H
  00b49	66 89 86 c4 01
	00 00		 mov	 WORD PTR [esi+452], ax
  00b50	66 8b 8e 02 02
	00 00		 mov	 cx, WORD PTR [esi+514]
  00b57	51		 push	 ecx
  00b58	52		 push	 edx
  00b59	8d 86 be 01 00
	00		 lea	 eax, DWORD PTR [esi+446]
  00b5f	53		 push	 ebx
  00b60	8d 8e bc 01 00
	00		 lea	 ecx, DWORD PTR [esi+444]
  00b66	50		 push	 eax
  00b67	51		 push	 ecx
  00b68	57		 push	 edi
  00b69	56		 push	 esi
  00b6a	e8 00 00 00 00	 call	 _d2pole_cf123
  00b6f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1099 : 
; 1100 : 	/**************************************************************/
; 1101 : 	/*  Scale up R1 gain here.                                    */
; 1102 : 	/**************************************************************/
; 1103 : 
; 1104 : 	if ( pVtm_t->R1ca > 16383 )

  00b72	66 3d ff 3f	 cmp	 ax, 16383		; 00003fffH
  00b76	66 89 86 ba 01
	00 00		 mov	 WORD PTR [esi+442], ax
  00b7d	7e 09		 jle	 SHORT $L71666

; 1105 : 	  pVtm_t->R1ca = 16383;

  00b7f	66 c7 86 ba 01
	00 00 ff 3f	 mov	 WORD PTR [esi+442], 16383 ; 00003fffH
$L71666:

; 1106 : 
; 1107 : 	pVtm_t->R1ca = pVtm_t->R1ca << 1;

  00b88	66 d1 a6 ba 01
	00 00		 shl	 WORD PTR [esi+442], 1

; 1108 : 
; 1109 : #ifdef UPGRADES1999
; 1110 : /*  Adjust memory variables to have proper levels for a given sudden
; 1111 :               change to F1inHZ.
; 1112 : 	      Approximate r1c_n' = r1c_n * sqrt(r1ca/r1calast)
; 1113 : 	      by r1c_n' = r1c_n * (F1hz/F1hzlast) */
; 1114 : 		pVtm_t->logf1 = logtab[F1inHZ>>3];

  00b8f	0f bf d3	 movsx	 edx, bx
  00b92	c1 fa 03	 sar	 edx, 3

; 1115 : 	     if ((F1inHZ < 200) && (F1inHZ < pVtm_t->f1last)) 

  00b95	66 81 fb c8 00	 cmp	 bx, 200			; 000000c8H
  00b9a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _logtab[edx*2]
  00ba2	66 89 86 a8 01
	00 00		 mov	 WORD PTR [esi+424], ax
  00ba9	7d 56		 jge	 SHORT $L71667
  00bab	66 3b 9e a4 01
	00 00		 cmp	 bx, WORD PTR [esi+420]
  00bb2	7d 4d		 jge	 SHORT $L71667

; 1116 : 			{
; 1117 : 			 pVtm_t->anorm = loginv[pVtm_t->logf1l-pVtm_t->logf1];  

  00bb4	0f bf 8e aa 01
	00 00		 movsx	 ecx, WORD PTR [esi+426]
  00bbb	0f bf d0	 movsx	 edx, ax
  00bbe	2b ca		 sub	 ecx, edx
  00bc0	66 8b 04 4d 00
	00 00 00	 mov	 ax, WORD PTR _loginv[ecx*2]
  00bc8	66 89 86 a6 01
	00 00		 mov	 WORD PTR [esi+422], ax

; 1118 : 			 /* anorm = Fx / Fxlast; */
; 1119 : /*	      For reasons that I don't understand, amplitude compensation
; 1120 :               seems to be needed only when a formant goes down in frequency */
; 1121 : 		    pVtm_t->r1cd1 = frac1mul(pVtm_t->r1cd1,pVtm_t->anorm);

  00bcf	0f bf 8e 3e 01
	00 00		 movsx	 ecx, WORD PTR [esi+318]
  00bd6	0f bf c0	 movsx	 eax, ax
  00bd9	0f af c1	 imul	 eax, ecx
  00bdc	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00bdf	66 89 86 3e 01
	00 00		 mov	 WORD PTR [esi+318], ax

; 1122 : 		    pVtm_t->r1cd2 = frac1mul(pVtm_t->r1cd2,pVtm_t->anorm);

  00be6	0f bf 96 a6 01
	00 00		 movsx	 edx, WORD PTR [esi+422]
  00bed	0f bf 86 40 01
	00 00		 movsx	 eax, WORD PTR [esi+320]
  00bf4	0f af d0	 imul	 edx, eax
  00bf7	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00bfa	66 89 96 40 01
	00 00		 mov	 WORD PTR [esi+320], dx
$L71667:

; 1123 : 		}
; 1124 : 		pVtm_t->f1last = F1inHZ;

  00c01	66 89 9e a4 01
	00 00		 mov	 WORD PTR [esi+420], bx

; 1125 : 		pVtm_t->logf1l = pVtm_t->logf1;	/* Save to use next time */

  00c08	66 8b 8e a8 01
	00 00		 mov	 cx, WORD PTR [esi+424]

; 1126 : 
; 1127 : #endif //upgrades1999
; 1128 : 
; 1129 : 
; 1130 : #ifdef COMPRESSION
; 1131 : 	// tek 29oct98 if this is a silence phoneme, cut the gain back 
; 1132 : 	// to make sure we really end up with silence. 
; 1133 : 	if (variabpars[OUT_PH] == 0)
; 1134 : 	{
; 1135 : 		pVtm_t->R3ca = pVtm_t->R3ca >> 1;
; 1136 : 		pVtm_t->R2ca = pVtm_t->R2ca >> 1;
; 1137 : 		pVtm_t->R1ca = pVtm_t->R1ca >> 1;
; 1138 : 	}
; 1139 : #endif //COMPRESSION
; 1140 : 
; 1141 : 
; 1142 : 	/**************************************************************/
; 1143 : 	/*  Future upgrade ?                                          */
; 1144 : 	/*  Set pitch-synchronous changes to F1.                      */
; 1145 : 	/**************************************************************/
; 1146 : 
; 1147 : #ifdef F1_B1_UPGRADE
; 1148 : 
; 1149 : 	if(pVtm_t->Up_Down_Flag == 1)
; 1150 : 	{
; 1151 : 	//f1_b1_up(F1inHZ);
; 1152 : 	pVtm_t->delr1b = frac4mul( F1inHZ, F1inHZ ) >>1;
; 1153 : 	pVtm_t->r1cc += (F1inHZ);
; 1154 : 	pVtm_t->r1cb -= (pVtm_t->delr1b + (F1inHZ));
; 1155 : 	pVtm_t->Up_Down_Flag =0;
; 1156 : 	}
; 1157 : 
; 1158 : #endif
; 1159 : 
; 1160 : #ifndef NEW_VTM
; 1161 : 	/**************************************************************/
; 1162 : 	/*  Set coeficients of nasal zero antiresonator by table      */
; 1163 : 	/*  lookup.                                                   */
; 1164 : 	/**************************************************************/
; 1165 : 	pVtm_t->temp =FZinHZ;
; 1166 : 
; 1167 : 	pVtm_t->temp = ( FZinHZ >> 3 ) - 31;
; 1168 : 
; 1169 : 	if ( pVtm_t->temp > 34 )
; 1170 : 	  pVtm_t->temp = 34;
; 1171 : 
; 1172 : 	pVtm_t->rnza = azero_tab[pVtm_t->temp];
; 1173 : 	pVtm_t->rnzb = bzero_tab[pVtm_t->temp];
; 1174 : 	pVtm_t->rnzc = czero_tab[pVtm_t->temp];
; 1175 :       } 
; 1176 : #else
; 1177 : #ifdef NOTCH_FILTER
; 1178 : 	  //temporary until I implement new nasal control--just for test*/
; 1179 :     Notch_Filter(voice,pVtm_t->rnzd1,pVtm_t->rnzd2,pVtm_t->rnzd3,pVtm_t->rnzd4, pVtm_t->rnza, pVtm_t->rnzb, pVtm_t->rnzc,200); 
; 1180 : #else
; 1181 : #ifdef NEW_TEST
; 1182 : /*  Adjust memory variables to have proper levels for a given sudden
; 1183 :               change to F1inHZ.
; 1184 : 	      Approximate r1c_n' = r1c_n * sqrt(r1ca/r1calast)
; 1185 : 	      by r1c_n' = r1c_n * (F1hz/F1hzlast) */
; 1186 : 		pVtm_t->logz1 = logtab[FZinHZ>>3];
; 1187 : 	     if ( FZinHZ < pVtm_t->fzlast) 
; 1188 : 			{
; 1189 : 			 pVtm_t->aznorm = loginv[pVtm_t->logz1l-pVtm_t->logz1];  
; 1190 : 			 /* anorm = Fx / Fxlast; */
; 1191 : /*	      For reasons that I don't understand, amplitude compensation
; 1192 :               seems to be needed only when a formant goes down in frequency */
; 1193 : 		    pVtm_t->rnzd1 = frac1mul(pVtm_t->rnzd1,pVtm_t->aznorm);
; 1194 : 		    pVtm_t->rnzd2 = frac1mul(pVtm_t->rnzd2,pVtm_t->aznorm);
; 1195 : 		}
; 1196 : 		pVtm_t->fzlast = FZinHZ;
; 1197 : 		pVtm_t->logz1l = pVtm_t->logz1;	/* Save to use next time */
; 1198 : #endif
; 1199 : 
; 1200 : 
; 1201 : 
; 1202 : 
; 1203 : 
; 1204 : 	setzeroabc( FZinHZ,80, 93, &pVtm_t->rnza, &pVtm_t->rnzb, &pVtm_t->rnzc);

  00c0f	8d 96 e6 01 00
	00		 lea	 edx, DWORD PTR [esi+486]
  00c15	66 89 8e aa 01
	00 00		 mov	 WORD PTR [esi+426], cx
  00c1c	8d 86 e4 01 00
	00		 lea	 eax, DWORD PTR [esi+484]
  00c22	52		 push	 edx
  00c23	0f bf 54 24 3c	 movsx	 edx, WORD PTR _FZinHZ$[esp+136]
  00c28	8d 8e e2 01 00
	00		 lea	 ecx, DWORD PTR [esi+482]
  00c2e	50		 push	 eax
  00c2f	51		 push	 ecx
  00c30	6a 5d		 push	 93			; 0000005dH
  00c32	6a 50		 push	 80			; 00000050H
  00c34	52		 push	 edx
  00c35	e8 00 00 00 00	 call	 _setzeroabc
  00c3a	83 c4 18	 add	 esp, 24			; 00000018H
$L71625:

; 1205 : 	  }
; 1206 : 
; 1207 : 			
; 1208 : #endif //notch_filter
; 1209 : #endif /*NEW_VTM*/
; 1210 : 		//pVtm_t->iwave[ns] = voice;
; 1211 : 
; 1212 : #ifndef LOWCOMPUTE
; 1213 : 		
; 1214 :       /****************************************************************/
; 1215 :       /*  Downsampling low-pass filter.                               */
; 1216 :       /*  Decimate the glottal pulse from a 40 KHz rate to 10 KHz.    */
; 1217 :       /*  The variable 'rlpd1' is the output of downsampling low-pass */
; 1218 :       /*  filter and is copied back to the variable 'voice'. 'nper'   */
; 1219 :       /*  is the 40 KHz sample counter.                               */
; 1220 :       /****************************************************************/
; 1221 : 
; 1222 :       two_pole_filter( voice, pVtm_t->rlpd1, pVtm_t->rlpd2, pVtm_t->rlpa, pVtm_t->rlpb, pVtm_t->rlpc );

  00c3d	0f bf 8e ec 01
	00 00		 movsx	 ecx, WORD PTR [esi+492]
  00c44	0f bf 86 5c 01
	00 00		 movsx	 eax, WORD PTR [esi+348]
  00c4b	66 8b 96 5a 01
	00 00		 mov	 dx, WORD PTR [esi+346]
  00c52	0f af c8	 imul	 ecx, eax
  00c55	66 89 96 5c 01
	00 00		 mov	 WORD PTR [esi+348], dx
  00c5c	0f bf 86 5a 01
	00 00		 movsx	 eax, WORD PTR [esi+346]
  00c63	0f bf 96 ea 01
	00 00		 movsx	 edx, WORD PTR [esi+490]
  00c6a	0f af c2	 imul	 eax, edx
  00c6d	03 c8		 add	 ecx, eax
  00c6f	0f bf 86 e8 01
	00 00		 movsx	 eax, WORD PTR [esi+488]
  00c76	0f bf d5	 movsx	 edx, bp
  00c79	0f af c2	 imul	 eax, edx
  00c7c	03 c1		 add	 eax, ecx
  00c7e	8b 4c 24 3c	 mov	 ecx, DWORD PTR -72+[esp+132]
  00c82	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00c85	66 89 86 5a 01
	00 00		 mov	 WORD PTR [esi+346], ax

; 1223 : 
; 1224 :       voice = pVtm_t->rlpd1;
; 1225 : 
; 1226 :       pVtm_t->nper++;

  00c8c	66 ff 86 12 02
	00 00		 inc	 WORD PTR [esi+530]
  00c93	49		 dec	 ecx
  00c94	89 4c 24 3c	 mov	 DWORD PTR -72+[esp+132], ecx
  00c98	0f 85 cf fa ff
	ff		 jne	 $L71886

; 1227 :     }
; 1228 : #else
; 1229 : 	
; 1230 :     pVtm_t->rlpd1 = voice;	// for getmax
; 1231 : 	pVtm_t->nper++;
; 1232 : 	
; 1233 : #endif
; 1234 : 
; 1235 :     /******************************************************************/
; 1236 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1237 :     /*  use 1-pole iir filter.                                        */
; 1238 :     /******************************************************************/
; 1239 : #else	//ACI_LICENSE
; 1240 : 
; 1241 : 		doit();
; 1242 : #endif
; 1243 : 
; 1244 :    /******************************************************************/
; 1245 :     /*  Tilt spectrum down by TILTDB dB at 3 kHz,                     */
; 1246 :     /*  use 1-pole iir filter.                                        */
; 1247 :     /******************************************************************/
; 1248 : 
; 1249 :     
; 1250 : 
; 1251 : 	voice = frac1mul( pVtm_t->one_minus_decay, voice )
; 1252 : 		  + frac1mul( pVtm_t->decay, pVtm_t->vlast );

  00c9e	0f bf 8e 6e 01
	00 00		 movsx	 ecx, WORD PTR [esi+366]
  00ca5	0f bf 96 f0 01
	00 00		 movsx	 edx, WORD PTR [esi+496]
  00cac	0f af ca	 imul	 ecx, edx
  00caf	0f bf 96 f2 01
	00 00		 movsx	 edx, WORD PTR [esi+498]
  00cb6	0f bf c0	 movsx	 eax, ax
  00cb9	0f af d0	 imul	 edx, eax

; 1253 : 	pVtm_t->vlast = voice;
; 1254 : 
; 1255 : 
; 1256 :     /******************************************************************/
; 1257 :     /*  Add breathiness to voicing. Increase noise if Aspiration.     */
; 1258 :     /******************************************************************/
; 1259 : 	/*EAB With move of voicing gain noise aspiration to be gated by the fact that 
; 1260 : 	we're voicing for now anway */
; 1261 : 
; 1262 : #ifdef NEW_NOISE
; 1263 : 	voice += frac1mul((abreth), noiseb  );
; 1264 : #else
; 1265 : 	voice += frac1mul( pVtm_t->aturb1, noise );
; 1266 : #endif
; 1267 : 	
; 1268 : 
; 1269 : 
; 1270 : 
; 1271 : #ifndef NEW_TILT
; 1272 : 
; 1273 : //	pVtm_t->iwave[ns] = voice;
; 1274 : 	voice = frac1mul( pVtm_t->one_minus_decay, voice )
; 1275 : 		  + frac1mul( pVtm_t->decay, pVtm_t->vlast );
; 1276 : 	pVtm_t->vlast = voice;
; 1277 : 
; 1278 : //	pVtm_t->iwave[ns] = voice;
; 1279 : #else
; 1280 : #ifdef CLOSING_TIME
; 1281 : //	Tgain=Tgaintab[TILTDB]-20;
; 1282 : //	pVtm_t->one_minus_decay = frac4mul( pVtm_t->one_minus_decay, Tgain);
; 1283 : 
; 1284 : 	voice = frac1mul( pVtm_t->one_minus_decay,voice )
; 1285 : 		  + frac1mul( pVtm_t->decay, pVtm_t->vlast );

  00cbc	0f bf 44 24 70	 movsx	 eax, WORD PTR _abreth$[esp+132]
  00cc1	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00cc4	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00cc7	03 ca		 add	 ecx, edx
  00cc9	89 5c 24 3c	 mov	 DWORD PTR _F1inHZ$[esp+132], ebx
  00ccd	0f bf 54 24 6c	 movsx	 edx, WORD PTR _noiseb$[esp+132]
  00cd2	0f af d0	 imul	 edx, eax
  00cd5	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  00cd8	03 d1		 add	 edx, ecx
  00cda	66 89 8e 6e 01
	00 00		 mov	 WORD PTR [esi+366], cx
  00ce1	0f bf c2	 movsx	 eax, dx
  00ce4	0f bf 96 f2 01
	00 00		 movsx	 edx, WORD PTR [esi+498]
  00ceb	0f af c2	 imul	 eax, edx
  00cee	0f bf 96 f0 01
	00 00		 movsx	 edx, WORD PTR [esi+496]
  00cf5	0f bf c9	 movsx	 ecx, cx
  00cf8	0f af ca	 imul	 ecx, edx

; 1286 :     
; 1287 : 	pVtm_t->vlast = voice;
; 1288 : 
; 1289 : 
; 1290 : 
; 1291 : //	pVtm_t->iwave[ns] = voice;
; 1292 : #else
; 1293 : 	
; 1294 : /*    Tilt spectrum of voicing source down by soft low-pass filtering, amount
; 1295 :       of tilt determined by TL which determines additional dB down at 3 kHz */
; 1296 :    
; 1297 : 	two_pole_filter( voice, pVtm_t->rtd1, pVtm_t->rtd2, pVtm_t->rtca, pVtm_t->rtcb, pVtm_t->rtcc );
; 1298 : 	voice=pVtm_t->rtd1;
; 1299 :     
; 1300 : #endif //closing_time
; 1301 : #endif //new_tilt
; 1302 : 
; 1303 : 	//pVtm_t->iwave[ns] = voice;
; 1304 : 
; 1305 : 
; 1306 :     /******************************************************************/
; 1307 :     /*  Add aspiration to voicing.                                    */
; 1308 :     /******************************************************************/
; 1309 : 
; 1310 : 
; 1311 : 
; 1312 : #ifdef NEW_NOISE
; 1313 :     voice += frac1mul( APlin, noise );

  00cfb	0f bf 7c 24 20	 movsx	 edi, WORD PTR _noise$[esp+132]
  00d00	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  00d03	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00d06	03 c1		 add	 eax, ecx
  00d08	0f bf 4c 24 74	 movsx	 ecx, WORD PTR _APlin$[esp+132]
  00d0d	0f af cf	 imul	 ecx, edi
  00d10	66 89 86 6e 01
	00 00		 mov	 WORD PTR [esi+366], ax

; 1314 : #else
; 1315 : 	voice += frac1mul( APlin, noise );
; 1316 : #endif
; 1317 : 	
; 1318 :     /******************************************************************/
; 1319 :     /******************************************************************/
; 1320 :     /*                                                                */
; 1321 :     /*  CASCADE VOCAL TRACT, EXCITED BY LARYNGEAL SOURCES             */
; 1322 :     /*                                                                */
; 1323 :     /*  Nasal antiresonator, then formants fnp, f5c, f4c, F3inHZ      */
; 1324 :     /*  F2inHZ, and F1inHZ                                            */
; 1325 :     /*                                                                */
; 1326 :     /******************************************************************/
; 1327 :     /******************************************************************/
; 1328 : 
; 1329 : 
; 1330 :     /******************************************************************/
; 1331 :     /*  Nasal Antiresonator of Cascade Vocal Tract:                   */
; 1332 :     /*  rnzout = (rnza * voice) + (rnzb * rnzd1) + (rnzc * rnzd2)     */
; 1333 :     /******************************************************************/
; 1334 : 
; 1335 : #ifdef NOTCH_FILTER
; 1336 : 	Notch_Filter(voice,pVtm_t->rnzd1,pVtm_t->rnzd2,pVtm_t->rnzd3, pVtm_t->rnzd4, pVtm_t->rnza, pVtm_t->rnzb, pVtm_t->rnzc,200);
; 1337 : 	//rnzout=pVtm_t->rnzd1;
; 1338 : #else
; 1339 : 	two_zero_filter( voice, rnzout, pVtm_t->rnzd1, pVtm_t->rnzd2, pVtm_t->rnza, pVtm_t->rnzb, pVtm_t->rnzc );

  00d17	66 8b 96 56 01
	00 00		 mov	 dx, WORD PTR [esi+342]
  00d1e	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  00d21	03 c1		 add	 eax, ecx
  00d23	0f bf 8e e4 01
	00 00		 movsx	 ecx, WORD PTR [esi+484]
  00d2a	0f bf da	 movsx	 ebx, dx
  00d2d	0f af cb	 imul	 ecx, ebx
  00d30	0f bf 9e e2 01
	00 00		 movsx	 ebx, WORD PTR [esi+482]
  00d37	0f bf e8	 movsx	 ebp, ax
  00d3a	0f af dd	 imul	 ebx, ebp
  00d3d	0f bf ae 58 01
	00 00		 movsx	 ebp, WORD PTR [esi+344]
  00d44	03 cb		 add	 ecx, ebx
  00d46	0f bf 9e e6 01
	00 00		 movsx	 ebx, WORD PTR [esi+486]
  00d4d	0f af dd	 imul	 ebx, ebp
  00d50	66 89 96 58 01
	00 00		 mov	 WORD PTR [esi+344], dx
  00d57	66 89 86 56 01
	00 00		 mov	 WORD PTR [esi+342], ax

; 1340 : #endif //Notch_filter
; 1341 : 
; 1342 : 	//pVtm_t->iwave[ns] = rnzout;
; 1343 :     /******************************************************************/
; 1344 :     /*  Nasal Resonator of Cascade Vocal Tract                        */
; 1345 :     /*  output is rnpd1.                                              */
; 1346 :     /******************************************************************/
; 1347 : 	//pVtm_t->rnpad = pVtm_t->rnpa - ((FZinHZ-200)<<1);
; 1348 :     two_pole_filter( rnzout, pVtm_t->rnpd1, pVtm_t->rnpd2, pVtm_t->rnpa, pVtm_t->rnpb, pVtm_t->rnpc );

  00d5e	0f bf 96 e0 01
	00 00		 movsx	 edx, WORD PTR [esi+480]
  00d65	0f bf 86 54 01
	00 00		 movsx	 eax, WORD PTR [esi+340]
  00d6c	0f af d0	 imul	 edx, eax
  00d6f	66 8b 86 52 01
	00 00		 mov	 ax, WORD PTR [esi+338]
  00d76	03 cb		 add	 ecx, ebx
  00d78	66 89 86 54 01
	00 00		 mov	 WORD PTR [esi+340], ax
  00d7f	0f bf 86 de 01
	00 00		 movsx	 eax, WORD PTR [esi+478]
  00d86	0f bf 9e 52 01
	00 00		 movsx	 ebx, WORD PTR [esi+338]
  00d8d	0f af c3	 imul	 eax, ebx
  00d90	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00d93	03 d0		 add	 edx, eax

; 1349 : 
; 1350 : 
; 1351 : 	//pVtm_t->iwave[ns] = pVtm_t->rnpd1;
; 1352 : 
; 1353 : #ifndef LOWER_YET
; 1354 : 	
; 1355 : 
; 1356 : 
; 1357 : 		
; 1358 :     /*  *****************************************************************/
; 1359 :     /*  Fifth Formant                                                 */
; 1360 :     /*  output is r5cd1.                                              */
; 1361 :     /******************************************************************/
; 1362 : 
; 1363 :     if ( pKsd_t->uiSampleRate > 9500 )

  00d95	8b 5c 24 54	 mov	 ebx, DWORD PTR _pKsd_t$[esp+132]
  00d99	0f bf 86 dc 01
	00 00		 movsx	 eax, WORD PTR [esi+476]
  00da0	0f bf c9	 movsx	 ecx, cx
  00da3	0f af c1	 imul	 eax, ecx
  00da6	03 c2		 add	 eax, edx
  00da8	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00dab	66 89 86 52 01
	00 00		 mov	 WORD PTR [esi+338], ax
  00db2	8b 8b 2c 02 00
	00		 mov	 ecx, DWORD PTR [ebx+556]
  00db8	81 f9 1c 25 00
	00		 cmp	 ecx, 9500		; 0000251cH
  00dbe	76 4a		 jbe	 SHORT $L71688

; 1364 :     {
; 1365 : 
; 1366 : 	  two_pole_filter(pVtm_t->rnpd1, pVtm_t->r5cd1, pVtm_t->r5cd2, pVtm_t->R5ca, pVtm_t->R5cb, pVtm_t->R5cc );

  00dc0	0f bf 86 da 01
	00 00		 movsx	 eax, WORD PTR [esi+474]
  00dc7	0f bf 96 50 01
	00 00		 movsx	 edx, WORD PTR [esi+336]
  00dce	66 8b 8e 4e 01
	00 00		 mov	 cx, WORD PTR [esi+334]
  00dd5	0f af c2	 imul	 eax, edx
  00dd8	66 89 8e 50 01
	00 00		 mov	 WORD PTR [esi+336], cx
  00ddf	0f bf 96 d8 01
	00 00		 movsx	 edx, WORD PTR [esi+472]
  00de6	0f bf 8e 4e 01
	00 00		 movsx	 ecx, WORD PTR [esi+334]
  00ded	0f af d1	 imul	 edx, ecx
  00df0	0f bf 8e 52 01
	00 00		 movsx	 ecx, WORD PTR [esi+338]
  00df7	03 c2		 add	 eax, edx
  00df9	0f bf 96 d6 01
	00 00		 movsx	 edx, WORD PTR [esi+470]
  00e00	0f af d1	 imul	 edx, ecx
  00e03	03 d0		 add	 edx, eax
  00e05	c1 fa 0c	 sar	 edx, 12			; 0000000cH

; 1367 : 
; 1368 :     }
; 1369 :     else

  00e08	eb 10		 jmp	 SHORT $L71892
$L71688:

; 1370 :     {
; 1371 :       pVtm_t->r5cd1 = frac4mul( pVtm_t->R5ca, pVtm_t->rnpd1 ) >> 1;

  00e0a	0f bf 96 d6 01
	00 00		 movsx	 edx, WORD PTR [esi+470]
  00e11	0f bf c0	 movsx	 eax, ax
  00e14	0f af d0	 imul	 edx, eax
  00e17	c1 fa 0d	 sar	 edx, 13			; 0000000dH
$L71892:
  00e1a	66 89 96 4e 01
	00 00		 mov	 WORD PTR [esi+334], dx

; 1372 :     }
; 1373 : #else
; 1374 : 		pVtm_t->r5cd1= pVtm_t->rnpd1>>1;
; 1375 : #endif //lower_yet
; 1376 : 
; 1377 : 
; 1378 : 		/******************************************************************/
; 1379 :     /*  First Formant of Cascade Vocal Tract                          */
; 1380 :     /*  output is r1cd1.                                              */
; 1381 :     /******************************************************************/
; 1382 : 
; 1383 :     two_pole_filter( pVtm_t->r5cd1, pVtm_t->r1cd1, pVtm_t->r1cd2, pVtm_t->R1ca, pVtm_t->r1cb, pVtm_t->r1cc );

  00e21	66 8b 96 3e 01
	00 00		 mov	 dx, WORD PTR [esi+318]
  00e28	0f bf 86 be 01
	00 00		 movsx	 eax, WORD PTR [esi+446]
  00e2f	0f bf 8e 40 01
	00 00		 movsx	 ecx, WORD PTR [esi+320]
  00e36	0f af c1	 imul	 eax, ecx
  00e39	0f bf 8e bc 01
	00 00		 movsx	 ecx, WORD PTR [esi+444]
  00e40	66 89 96 40 01
	00 00		 mov	 WORD PTR [esi+320], dx
  00e47	0f bf 96 3e 01
	00 00		 movsx	 edx, WORD PTR [esi+318]
  00e4e	0f af ca	 imul	 ecx, edx
  00e51	0f bf 96 4e 01
	00 00		 movsx	 edx, WORD PTR [esi+334]
  00e58	03 c1		 add	 eax, ecx
  00e5a	0f bf 8e ba 01
	00 00		 movsx	 ecx, WORD PTR [esi+442]
  00e61	0f af ca	 imul	 ecx, edx
  00e64	03 c8		 add	 ecx, eax

; 1384 : #ifndef lower_yet
; 1385 : 
; 1386 :     /******************************************************************/
; 1387 :     /*  Fourth Formant                                                */
; 1388 :     /*  output is r4cd1.                                              */
; 1389 :     /******************************************************************/
; 1390 : 
; 1391 :     two_pole_filter( pVtm_t->r1cd1, pVtm_t->r4cd1, pVtm_t->r4cd2, pVtm_t->R4ca, pVtm_t->R4cb, pVtm_t->R4cc );

  00e66	0f bf 86 d4 01
	00 00		 movsx	 eax, WORD PTR [esi+468]
  00e6d	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  00e70	66 89 8e 3e 01
	00 00		 mov	 WORD PTR [esi+318], cx
  00e77	0f bf 8e 4c 01
	00 00		 movsx	 ecx, WORD PTR [esi+332]
  00e7e	0f bf 96 d2 01
	00 00		 movsx	 edx, WORD PTR [esi+466]
  00e85	0f af c1	 imul	 eax, ecx
  00e88	66 8b 8e 4a 01
	00 00		 mov	 cx, WORD PTR [esi+330]
  00e8f	66 89 8e 4c 01
	00 00		 mov	 WORD PTR [esi+332], cx
  00e96	0f bf c9	 movsx	 ecx, cx
  00e99	0f af d1	 imul	 edx, ecx
  00e9c	0f bf 8e 3e 01
	00 00		 movsx	 ecx, WORD PTR [esi+318]
  00ea3	03 c2		 add	 eax, edx
  00ea5	0f bf 96 d0 01
	00 00		 movsx	 edx, WORD PTR [esi+464]
  00eac	0f af d1	 imul	 edx, ecx

; 1392 : #else 
; 1393 : 	pVtm_t->r4cd1= pVtm_t->r1cd1;
; 1394 : 
; 1395 : #endif //lower_yet
; 1396 : 
; 1397 :     /******************************************************************/
; 1398 :     /*  Third Formant                                                 */
; 1399 :     /*  output is r3cd1.                                              */
; 1400 :     /******************************************************************/
; 1401 : 
; 1402 :     two_pole_filter( pVtm_t->r4cd1, pVtm_t->r3cd1, pVtm_t->r3cd2, pVtm_t->R3ca, pVtm_t->r3cb, pVtm_t->r3cc );

  00eaf	66 8b 8e 46 01
	00 00		 mov	 cx, WORD PTR [esi+326]
  00eb6	03 d0		 add	 edx, eax
  00eb8	0f bf 86 ce 01
	00 00		 movsx	 eax, WORD PTR [esi+462]
  00ebf	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00ec2	66 89 96 4a 01
	00 00		 mov	 WORD PTR [esi+330], dx
  00ec9	0f bf 96 48 01
	00 00		 movsx	 edx, WORD PTR [esi+328]
  00ed0	0f af c2	 imul	 eax, edx
  00ed3	0f bf 96 cc 01
	00 00		 movsx	 edx, WORD PTR [esi+460]
  00eda	66 89 8e 48 01
	00 00		 mov	 WORD PTR [esi+328], cx
  00ee1	0f bf c9	 movsx	 ecx, cx
  00ee4	0f af d1	 imul	 edx, ecx
  00ee7	0f bf 8e 4a 01
	00 00		 movsx	 ecx, WORD PTR [esi+330]
  00eee	03 c2		 add	 eax, edx
  00ef0	0f bf 96 ca 01
	00 00		 movsx	 edx, WORD PTR [esi+458]
  00ef7	0f af d1	 imul	 edx, ecx

; 1403 : 
; 1404 : 	//pVtm_t->iwave[ns] =  pVtm_t->r3cd1;
; 1405 :     /******************************************************************/
; 1406 :     /*  Second Formant                                                */
; 1407 :     /*  output is r2cd1.                                              */
; 1408 :     /******************************************************************/
; 1409 : 
; 1410 :     two_pole_filter( pVtm_t->r3cd1, pVtm_t->r2cd1, pVtm_t->r2cd2, pVtm_t->R2ca, pVtm_t->r2cb, pVtm_t->r2cc );

  00efa	66 8b 8e 42 01
	00 00		 mov	 cx, WORD PTR [esi+322]
  00f01	03 d0		 add	 edx, eax
  00f03	0f bf 86 c8 01
	00 00		 movsx	 eax, WORD PTR [esi+456]
  00f0a	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00f0d	66 89 96 46 01
	00 00		 mov	 WORD PTR [esi+326], dx
  00f14	0f bf 96 44 01
	00 00		 movsx	 edx, WORD PTR [esi+324]
  00f1b	0f af c2	 imul	 eax, edx
  00f1e	0f bf 96 c6 01
	00 00		 movsx	 edx, WORD PTR [esi+454]
  00f25	66 89 8e 44 01
	00 00		 mov	 WORD PTR [esi+324], cx
  00f2c	0f bf c9	 movsx	 ecx, cx
  00f2f	0f af d1	 imul	 edx, ecx
  00f32	0f bf 8e 46 01
	00 00		 movsx	 ecx, WORD PTR [esi+326]
  00f39	03 c2		 add	 eax, edx
  00f3b	0f bf 96 c4 01
	00 00		 movsx	 edx, WORD PTR [esi+452]
  00f42	0f af d1	 imul	 edx, ecx

; 1411 : //	pVtm_t->iwave[ns] = pVtm_t->r2cd1; 
; 1412 : 
; 1413 : 	
; 1414 : 
; 1415 : 	 out = pVtm_t->r2cd1;
; 1416 : 	//pVtm_t->iwave[ns] = out;
; 1417 :     
; 1418 :     /******************************************************************/
; 1419 :     /******************************************************************/
; 1420 :     /*                                                                */
; 1421 :     /*  PARALLEL VOCAL TRACT                                          */
; 1422 :     /*                                                                */
; 1423 :     /*  Excited by frication noise source. Uses formant frequencies   */
; 1424 :     /*  f6p, f5p, f4p, F3inHz, F2inHz and bypass path, outputs added  */
; 1425 :     /*  with alternating sign to prevent overflow.                    */
; 1426 :     /*                                                                */
; 1427 :     /******************************************************************/
; 1428 :     /******************************************************************/
; 1429 : 
; 1430 :     /******************************************************************/
; 1431 :     /*  Sixth Formant of Parallel Vocal Tract                         */
; 1432 :     /******************************************************************/
; 1433 : 
; 1434 :     two_pole_filter( noise, pVtm_t->r6pd1, pVtm_t->r6pd2, r6pa,r6pb, r6pc );

  00f45	0f bf 8e 3c 01
	00 00		 movsx	 ecx, WORD PTR [esi+316]
  00f4c	03 d0		 add	 edx, eax
  00f4e	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00f51	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00f54	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00f57	66 89 96 42 01
	00 00		 mov	 WORD PTR [esi+322], dx
  00f5e	c1 e0 04	 shl	 eax, 4
  00f61	2b c1		 sub	 eax, ecx
  00f63	f7 d8		 neg	 eax
  00f65	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00f68	66 8b 86 3a 01
	00 00		 mov	 ax, WORD PTR [esi+314]
  00f6f	0f bf c8	 movsx	 ecx, ax
  00f72	66 89 86 3c 01
	00 00		 mov	 WORD PTR [esi+316], ax
  00f79	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00f7c	c1 e0 05	 shl	 eax, 5
  00f7f	2b c1		 sub	 eax, ecx
  00f81	f7 d8		 neg	 eax
  00f83	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00f86	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00f89	d1 e0		 shl	 eax, 1
  00f8b	2b c1		 sub	 eax, ecx
  00f8d	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00f90	0f bf 44 24 40	 movsx	 eax, WORD PTR _r6pa$[esp+132]
  00f95	0f af c7	 imul	 eax, edi
  00f98	03 c1		 add	 eax, ecx
  00f9a	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  00f9d	66 89 86 3a 01
	00 00		 mov	 WORD PTR [esi+314], ax

; 1435 : 	
; 1436 :     out = pVtm_t->r6pd1 - out;
; 1437 : #ifndef LOWEST
; 1438 : 
; 1439 :     /******************************************************************/
; 1440 :     /*  Fifth Formant of Parallel Vocal Tract                         */
; 1441 :     /*  Fifth parallel formant effectively out of circuit if the      */
; 1442 :     /*  sample rate is low enough.                                    */
; 1443 :     /******************************************************************/
; 1444 : 
; 1445 :     if ( pKsd_t->uiSampleRate > 9600 )

  00fa4	8b 8b 2c 02 00
	00		 mov	 ecx, DWORD PTR [ebx+556]
  00faa	66 2b 86 42 01
	00 00		 sub	 ax, WORD PTR [esi+322]
  00fb1	81 f9 80 25 00
	00		 cmp	 ecx, 9600		; 00002580H
  00fb7	76 44		 jbe	 SHORT $L71715

; 1446 :     {
; 1447 :       two_pole_filter( noise, pVtm_t->r5pd1, pVtm_t->r5pd2, r5pa, pVtm_t->R5pb, pVtm_t->r5pc );

  00fb9	0f bf 8e b8 01
	00 00		 movsx	 ecx, WORD PTR [esi+440]
  00fc0	0f bf 96 38 01
	00 00		 movsx	 edx, WORD PTR [esi+312]
  00fc7	0f bf 9e b6 01
	00 00		 movsx	 ebx, WORD PTR [esi+438]
  00fce	0f af ca	 imul	 ecx, edx
  00fd1	66 8b 96 36 01
	00 00		 mov	 dx, WORD PTR [esi+310]
  00fd8	66 89 96 38 01
	00 00		 mov	 WORD PTR [esi+312], dx
  00fdf	0f bf d2	 movsx	 edx, dx
  00fe2	0f af da	 imul	 ebx, edx
  00fe5	0f bf 54 24 44	 movsx	 edx, WORD PTR _r5pa$[esp+132]
  00fea	0f af d7	 imul	 edx, edi
  00fed	03 cb		 add	 ecx, ebx
  00fef	03 d1		 add	 edx, ecx
  00ff1	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  00ff4	66 89 96 36 01
	00 00		 mov	 WORD PTR [esi+310], dx

; 1448 :     }
; 1449 :     else

  00ffb	eb 09		 jmp	 SHORT $L71720
$L71715:

; 1450 :     {
; 1451 :       pVtm_t->r5pd1 = 0;

  00ffd	66 c7 86 36 01
	00 00 00 00	 mov	 WORD PTR [esi+310], 0
$L71720:

; 1452 :     }
; 1453 : 
; 1454 :     out = pVtm_t->r5pd1 - out;
; 1455 : 
; 1456 :     /******************************************************************/
; 1457 :     /*  Fourth Formant of Parallel Vocal Tract                        */
; 1458 :     /******************************************************************/
; 1459 : 
; 1460 :     two_pole_filter( noise, pVtm_t->r4pd1, pVtm_t->r4pd2, r4pa, pVtm_t->R4pb, pVtm_t->r4pc );

  01006	0f bf 8e b4 01
	00 00		 movsx	 ecx, WORD PTR [esi+436]
  0100d	0f bf 96 34 01
	00 00		 movsx	 edx, WORD PTR [esi+308]
  01014	0f bf 9e b2 01
	00 00		 movsx	 ebx, WORD PTR [esi+434]
  0101b	0f af ca	 imul	 ecx, edx
  0101e	66 8b 96 32 01
	00 00		 mov	 dx, WORD PTR [esi+306]
  01025	66 89 96 34 01
	00 00		 mov	 WORD PTR [esi+308], dx
  0102c	0f bf d2	 movsx	 edx, dx
  0102f	0f af da	 imul	 ebx, edx
  01032	0f bf 54 24 78	 movsx	 edx, WORD PTR _r4pa$[esp+132]
  01037	0f af d7	 imul	 edx, edi
  0103a	03 cb		 add	 ecx, ebx
  0103c	03 d1		 add	 edx, ecx

; 1461 : 
; 1462 :     out = pVtm_t->r4pd1 - out;
; 1463 : #endif
; 1464 :     /******************************************************************/
; 1465 :     /*  Third Formant of Parallel Vocal Tract                         */
; 1466 :     /******************************************************************/
; 1467 : 
; 1468 :     two_pole_filter( noise, pVtm_t->r3pd1, pVtm_t->r3pd2, r3pa, r3pb, r3pc );

  0103e	0f bf 8e 30 01
	00 00		 movsx	 ecx, WORD PTR [esi+304]
  01045	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  01048	66 89 96 32 01
	00 00		 mov	 WORD PTR [esi+306], dx
  0104f	0f bf 54 24 10	 movsx	 edx, WORD PTR _r3pc$[esp+132]
  01054	0f af ca	 imul	 ecx, edx
  01057	66 8b 96 2e 01
	00 00		 mov	 dx, WORD PTR [esi+302]
  0105e	66 89 96 30 01
	00 00		 mov	 WORD PTR [esi+304], dx
  01065	0f bf 5c 24 12	 movsx	 ebx, WORD PTR _r3pb$[esp+132]
  0106a	0f bf d2	 movsx	 edx, dx
  0106d	0f af d3	 imul	 edx, ebx
  01070	03 ca		 add	 ecx, edx
  01072	0f bf 54 24 7c	 movsx	 edx, WORD PTR _r3pa$[esp+132]
  01077	0f af d7	 imul	 edx, edi
  0107a	03 d1		 add	 edx, ecx
  0107c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0107f	66 89 96 2e 01
	00 00		 mov	 WORD PTR [esi+302], dx

; 1469 : 
; 1470 :     out = pVtm_t->r3pd1 - out;
; 1471 : 
; 1472 :     /******************************************************************/
; 1473 :     /*  Second Formant of Parallel Vocal Tract                        */
; 1474 :     /******************************************************************/
; 1475 : 
; 1476 :     two_pole_filter( noise, pVtm_t->r2pd1, pVtm_t->r2pd2, r2pa, r2pb, r2pc );

  01086	0f bf 4c 24 14	 movsx	 ecx, WORD PTR _r2pc$[esp+132]
  0108b	0f bf 96 2c 01
	00 00		 movsx	 edx, WORD PTR [esi+300]
  01092	0f af ca	 imul	 ecx, edx
  01095	66 8b 96 2a 01
	00 00		 mov	 dx, WORD PTR [esi+298]
  0109c	66 89 96 2c 01
	00 00		 mov	 WORD PTR [esi+300], dx
  010a3	0f bf 5c 24 16	 movsx	 ebx, WORD PTR _r2pb$[esp+132]
  010a8	0f bf d2	 movsx	 edx, dx
  010ab	0f af d3	 imul	 edx, ebx
  010ae	03 ca		 add	 ecx, edx
  010b0	0f bf 94 24 80
	00 00 00	 movsx	 edx, WORD PTR _r2pa$[esp+132]
  010b8	0f af d7	 imul	 edx, edi
  010bb	03 d1		 add	 edx, ecx

; 1477 : 
; 1478 :     out = pVtm_t->r2pd1 - out;
; 1479 : 
; 1480 :     about = frac1mul( ABlin, noise );  /*  Output of bypass path      */
; 1481 : 
; 1482 :     out = about - out;

  010bd	0f bf 4c 24 48	 movsx	 ecx, WORD PTR _ABlin$[esp+132]
  010c2	0f af cf	 imul	 ecx, edi
  010c5	c1 f9 0f	 sar	 ecx, 15			; 0000000fH
  010c8	66 2b 8e 32 01
	00 00		 sub	 cx, WORD PTR [esi+306]
  010cf	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  010d2	2b c8		 sub	 ecx, eax
  010d4	66 89 96 2a 01
	00 00		 mov	 WORD PTR [esi+298], dx
  010db	2b ca		 sub	 ecx, edx
  010dd	66 03 8e 2e 01
	00 00		 add	 cx, WORD PTR [esi+302]
  010e4	66 03 8e 36 01
	00 00		 add	 cx, WORD PTR [esi+310]

; 1483 : 
; 1484 : 	 //6/22/99 With the hotter tuning of the vocal tract the limit sycles are becoming very annoying
; 1485 : 	 //since we now pass phoneme information we can build a decayer to choke out he limit cycle
; 1486 : 	 //when we reach silence with av off we ramp down the gain....This also solves the problem of continues
; 1487 : 	 //noise with a breathy voice. 
; 1488 : 
; 1489 : 	 if (pVtm_t->avlind == 0 && variabpars[OUT_PH] == 0 )

  010eb	66 83 be 06 02
	00 00 00	 cmp	 WORD PTR [esi+518], 0
  010f3	75 3e		 jne	 SHORT $L71734
  010f5	66 83 be f4 00
	00 00 00	 cmp	 WORD PTR [esi+244], 0
  010fd	75 34		 jne	 SHORT $L71734

; 1490 : 	 {
; 1491 : 		
; 1492 : 		 pVtm_t->rampdown += 200;

  010ff	66 81 86 10 02
	00 00 c8 00	 add	 WORD PTR [esi+528], 200	; 000000c8H

; 1493 : 		  if (pVtm_t->rampdown >= 4096)

  01108	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0110d	66 39 86 10 02
	00 00		 cmp	 WORD PTR [esi+528], ax
  01114	7c 07		 jl	 SHORT $L71735

; 1494 : 		  {
; 1495 : 			 pVtm_t->rampdown = 4096;

  01116	66 89 86 10 02
	00 00		 mov	 WORD PTR [esi+528], ax
$L71735:

; 1496 : 		  }
; 1497 : 		  out = frac4mul( out,(4096 - pVtm_t->rampdown));

  0111d	0f bf 96 10 02
	00 00		 movsx	 edx, WORD PTR [esi+528]
  01124	0f bf c9	 movsx	 ecx, cx
  01127	2b c2		 sub	 eax, edx
  01129	0f af c1	 imul	 eax, ecx
  0112c	c1 f8 0c	 sar	 eax, 12			; 0000000cH
  0112f	8b c8		 mov	 ecx, eax

; 1498 : 
; 1499 : 
; 1500 : 	 }
; 1501 : 	 else

  01131	eb 09		 jmp	 SHORT $L71737
$L71734:

; 1502 : 
; 1503 : 		 pVtm_t->rampdown=0;

  01133	66 c7 86 10 02
	00 00 00 00	 mov	 WORD PTR [esi+528], 0
$L71737:

; 1504 : 
; 1505 :     /******************************************************************/
; 1506 :     /*  Bring the signal level up near +/-32767.                      */
; 1507 :     /*  If the sample rate is 8000 Hz. then the peak signal level is  */
; 1508 :     /*  approximately 8000. This is because of the parameters in file */
; 1509 :     /*  phvdef.c for a sample rate of 8000 Hz.                        */
; 1510 :     /*                                                                */
; 1511 :     /*  Very occasionaly a large impulse will be generated. Clip it.  */
; 1512 :     /*  This allows running the volume level much higher.             */
; 1513 :     /******************************************************************/
; 1514 : 
; 1515 : 
; 1516 : /* EAB BATS #491 && 554 1/28/98 The statement that the 8K was tuned to +-8000 was 
; 1517 : probably correct but it wasn't supose to be tuned to those levels it was also
; 1518 : suppose to be +-32767- when the vdef got retuned to hotter levels then the compressor
; 1519 : was clipping too much which when fed into a mu-law compressor further degraded the signal
; 1520 : causing it to sound bad. The follwoing code is a simple compressor to raise the average signal level
; 1521 : by 3 db by simply limiting peak excursions whwen they occur */
; 1522 : #ifdef COMPRESSION
; 1523 : 	// tek 29oct98 do a simple bit of compression. 
; 1524 : 	// This algorithm uses a look-up table to quickly 
; 1525 : 	// find the maximum gain for a sample (to avoid having to 
; 1526 : 	// do a calculation for each).
; 1527 : 	{
; 1528 : 		S16 sabs = out;
; 1529 : 		S16 stGain;
; 1530 : 
; 1531 : 		// get absolute value..
; 1532 : 		if (sabs<0)
; 1533 : 			sabs = -sabs;
; 1534 : 
; 1535 : 		pVtm_t->sGain += CompGainIncrement;
; 1536 : 
; 1537 : 
; 1538 : 		// get the gain from the lookup table
; 1539 : 		// shift by 9 gives us six bits of index,
; 1540 : 		// because the sign bit is always 0.
; 1541 : 		stGain = CompGainTable[(sabs)>>9];
; 1542 : 		if (stGain<pVtm_t->sGain)
; 1543 : 		{
; 1544 : 			// reduce gain
; 1545 : 			pVtm_t->sGain = stGain;
; 1546 : 		}
; 1547 : 		// scale the sample
; 1548 : 		// this is probably frac4mul.. at any rate, it's 
; 1549 : 		// Q0*Q12
; 1550 : 		sabs = (S16)(((S32)sabs * (S32)pVtm_t->sGain)>>12);
; 1551 : 		// put it back, with the correct sign
; 1552 : 		if (out<0)
; 1553 : 		{
; 1554 : 	    pVtm_t->iwave[ns] = -sabs;
; 1555 : 		}
; 1556 : 		else
; 1557 : 		{
; 1558 : 	    pVtm_t->iwave[ns] = sabs;
; 1559 : 		}
; 1560 : 	}
; 1561 : #else //COMPRESSION
; 1562 :     if ( out > 16383 )

  0113c	66 81 f9 ff 3f	 cmp	 cx, 16383		; 00003fffH
  01141	7e 07		 jle	 SHORT $L71738

; 1563 : 		out = 16383;

  01143	b9 ff 3f 00 00	 mov	 ecx, 16383		; 00003fffH

; 1564 :      else if ( out < -16384 )

  01148	eb 0c		 jmp	 SHORT $L71740
$L71738:
  0114a	66 81 f9 00 c0	 cmp	 cx, -16384		; ffffc000H
  0114f	7d 05		 jge	 SHORT $L71740

; 1565 : 	  out = -16384;

  01151	b9 00 c0 ff ff	 mov	 ecx, -16384		; ffffc000H
$L71740:

; 1566 :       pVtm_t->iwave[ns] = out << 1;

  01156	8b 44 24 24	 mov	 eax, DWORD PTR -96+[esp+132]
  0115a	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0115d	66 89 10	 mov	 WORD PTR [eax], dx

; 1567 : #endif //COMPRESSION
; 1568 : 
; 1569 : 	// tek 28oct98 move all the tuning pickups here, so that we can turn them on/off
; 1570 : 	// with just one if statement
; 1571 : 
; 1572 : 	if(pVtm_t->bDoTuning)

  01160	8b 86 28 02 00
	00		 mov	 eax, DWORD PTR [esi+552]
  01166	85 c0		 test	 eax, eax
  01168	0f 84 f3 01 00
	00		 je	 $L71607

; 1573 : 	{
; 1574 : 		BOOL bOverloaded = FALSE;
; 1575 : 		DWORD dwPhoneme = variabpars[OUT_PH];

  0116e	0f bf 86 f4 00
	00 00		 movsx	 eax, WORD PTR [esi+244]

; 1576 : 
; 1577 : 		// keep track of the phonemes..
; 1578 : 		if (dwPhoneme != pVtm_t->vtdTuneResults.dwThisPhoneme)

  01175	8b 8e 8c 01 00
	00		 mov	 ecx, DWORD PTR [esi+396]
  0117b	3b c1		 cmp	 eax, ecx
  0117d	74 0c		 je	 SHORT $L71744

; 1579 : 		{
; 1580 : 			pVtm_t->vtdTuneResults.dwLastPhoneme = pVtm_t->vtdTuneResults.dwThisPhoneme;

  0117f	89 8e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ecx

; 1581 : 			pVtm_t->vtdTuneResults.dwThisPhoneme = dwPhoneme;

  01185	89 86 8c 01 00
	00		 mov	 DWORD PTR [esi+396], eax
$L71744:

; 1582 : 		}
; 1583 : 
; 1584 : 		getmax(pVtm_t->rlpd1,&pVtm_t->vtdTuneResults.purevmax);

  0118b	66 8b 8e 5a 01
	00 00		 mov	 cx, WORD PTR [esi+346]
  01192	8d be 7e 01 00
	00		 lea	 edi, DWORD PTR [esi+382]
  01198	57		 push	 edi
  01199	51		 push	 ecx
  0119a	e8 00 00 00 00	 call	 _getmax

; 1585 : 		getmax(pVtm_t->rnzd1,&pVtm_t->vtdTuneResults.rnzmax);

  0119f	66 8b 96 56 01
	00 00		 mov	 dx, WORD PTR [esi+342]
  011a6	8d 9e 72 01 00
	00		 lea	 ebx, DWORD PTR [esi+370]
  011ac	53		 push	 ebx
  011ad	52		 push	 edx
  011ae	e8 00 00 00 00	 call	 _getmax

; 1586 : 		getmax(pVtm_t->rnpd1,&pVtm_t->vtdTuneResults.rnpmax);

  011b3	66 8b 86 52 01
	00 00		 mov	 ax, WORD PTR [esi+338]
  011ba	8d ae 70 01 00
	00		 lea	 ebp, DWORD PTR [esi+368]
  011c0	55		 push	 ebp
  011c1	50		 push	 eax
  011c2	e8 00 00 00 00	 call	 _getmax

; 1587 : 		getmax(pVtm_t->r5cd1,&pVtm_t->vtdTuneResults.c5max);

  011c7	66 8b 8e 4e 01
	00 00		 mov	 cx, WORD PTR [esi+334]
  011ce	8d 86 7c 01 00
	00		 lea	 eax, DWORD PTR [esi+380]
  011d4	50		 push	 eax
  011d5	51		 push	 ecx
  011d6	e8 00 00 00 00	 call	 _getmax

; 1588 : 		getmax(pVtm_t->r4cd1,&pVtm_t->vtdTuneResults.c4max);

  011db	66 8b 96 4a 01
	00 00		 mov	 dx, WORD PTR [esi+330]
  011e2	8d 86 7a 01 00
	00		 lea	 eax, DWORD PTR [esi+378]
  011e8	50		 push	 eax
  011e9	52		 push	 edx
  011ea	e8 00 00 00 00	 call	 _getmax

; 1589 : 		getmax(pVtm_t->r3cd1,&pVtm_t->vtdTuneResults.c3max);

  011ef	8d 86 78 01 00
	00		 lea	 eax, DWORD PTR [esi+376]
  011f5	50		 push	 eax
  011f6	66 8b 86 46 01
	00 00		 mov	 ax, WORD PTR [esi+326]
  011fd	50		 push	 eax
  011fe	e8 00 00 00 00	 call	 _getmax

; 1590 : 		getmax(pVtm_t->r2cd1,&pVtm_t->vtdTuneResults.c2max);

  01203	66 8b 8e 42 01
	00 00		 mov	 cx, WORD PTR [esi+322]
  0120a	8d 86 76 01 00
	00		 lea	 eax, DWORD PTR [esi+374]
  01210	50		 push	 eax
  01211	51		 push	 ecx
  01212	e8 00 00 00 00	 call	 _getmax

; 1591 : 		getmax(pVtm_t->r1cd1,&pVtm_t->vtdTuneResults.c1max);

  01217	66 8b 96 3e 01
	00 00		 mov	 dx, WORD PTR [esi+318]
  0121e	8d 86 74 01 00
	00		 lea	 eax, DWORD PTR [esi+372]
  01224	50		 push	 eax
  01225	52		 push	 edx
  01226	e8 00 00 00 00	 call	 _getmax

; 1592 : 		getmax(pVtm_t->r2pd1,&pVtm_t->vtdTuneResults.r2pd1);

  0122b	66 8b 8e 2a 01
	00 00		 mov	 cx, WORD PTR [esi+298]
  01232	83 c4 40	 add	 esp, 64			; 00000040H
  01235	8d 86 80 01 00
	00		 lea	 eax, DWORD PTR [esi+384]
  0123b	50		 push	 eax
  0123c	51		 push	 ecx
  0123d	e8 00 00 00 00	 call	 _getmax

; 1593 : 		getmax(pVtm_t->r3pd1,&pVtm_t->vtdTuneResults.r3pd1);

  01242	66 8b 86 2e 01
	00 00		 mov	 ax, WORD PTR [esi+302]
  01249	8d 96 82 01 00
	00		 lea	 edx, DWORD PTR [esi+386]
  0124f	52		 push	 edx
  01250	50		 push	 eax
  01251	e8 00 00 00 00	 call	 _getmax

; 1594 : 		getmax(pVtm_t->r4pd1,&pVtm_t->vtdTuneResults.r4pd1);

  01256	66 8b 96 32 01
	00 00		 mov	 dx, WORD PTR [esi+306]
  0125d	8d 8e 84 01 00
	00		 lea	 ecx, DWORD PTR [esi+388]
  01263	51		 push	 ecx
  01264	52		 push	 edx
  01265	e8 00 00 00 00	 call	 _getmax

; 1595 : 		//getmax(pVtm_t->r5pd1,&pVtm_t->vtdTuneResults.r5pd1);
; 1596 : 		getmax(pVtm_t->iwave[ns],&pVtm_t->vtdTuneResults.r5pd1);

  0126a	8d 86 86 01 00
	00		 lea	 eax, DWORD PTR [esi+390]
  01270	50		 push	 eax
  01271	8b 44 24 40	 mov	 eax, DWORD PTR -96+[esp+160]
  01275	66 8b 08	 mov	 cx, WORD PTR [eax]
  01278	51		 push	 ecx
  01279	e8 00 00 00 00	 call	 _getmax
  0127e	83 c4 20	 add	 esp, 32			; 00000020H

; 1597 : 
; 1598 : 		if (  (pVtm_t->vtdTuneResults.purevmax > MAX_TRIGGER)
; 1599 : 			||(pVtm_t->vtdTuneResults.rnzmax > MAX_TRIGGER)
; 1600 : 			||(pVtm_t->vtdTuneResults.rnpmax > MAX_TRIGGER)
; 1601 : 			||(pVtm_t->vtdTuneResults.c5max > MAX_TRIGGER)
; 1602 : 			||(pVtm_t->vtdTuneResults.c4max > MAX_TRIGGER)
; 1603 : 			||(pVtm_t->vtdTuneResults.c3max > MAX_TRIGGER)
; 1604 : 			||(pVtm_t->vtdTuneResults.c2max > MAX_TRIGGER)
; 1605 : 			||(pVtm_t->vtdTuneResults.c1max > MAX_TRIGGER)
; 1606 : 			//eab 6/11/99 Also check output at end of parallel tract
; 1607 : 			//becuase we really don't want any overloads......
; 1608 : 			|| (pVtm_t->vtdTuneResults.r5pd1 > 28000)
; 1609 : 			)

  01281	66 81 3f 80 3e	 cmp	 WORD PTR [edi], 16000	; 00003e80H
  01286	7f 55		 jg	 SHORT $L71746
  01288	66 81 3b 80 3e	 cmp	 WORD PTR [ebx], 16000	; 00003e80H
  0128d	7f 4e		 jg	 SHORT $L71746
  0128f	66 81 7d 00 80
	3e		 cmp	 WORD PTR [ebp], 16000	; 00003e80H
  01295	7f 46		 jg	 SHORT $L71746
  01297	66 81 be 7c 01
	00 00 80 3e	 cmp	 WORD PTR [esi+380], 16000 ; 00003e80H
  012a0	7f 3b		 jg	 SHORT $L71746
  012a2	66 81 be 7a 01
	00 00 80 3e	 cmp	 WORD PTR [esi+378], 16000 ; 00003e80H
  012ab	7f 30		 jg	 SHORT $L71746
  012ad	66 81 be 78 01
	00 00 80 3e	 cmp	 WORD PTR [esi+376], 16000 ; 00003e80H
  012b6	7f 25		 jg	 SHORT $L71746
  012b8	66 81 be 76 01
	00 00 80 3e	 cmp	 WORD PTR [esi+374], 16000 ; 00003e80H
  012c1	7f 1a		 jg	 SHORT $L71746
  012c3	66 81 be 74 01
	00 00 80 3e	 cmp	 WORD PTR [esi+372], 16000 ; 00003e80H
  012cc	7f 0f		 jg	 SHORT $L71746
  012ce	66 81 be 86 01
	00 00 60 6d	 cmp	 WORD PTR [esi+390], 28000 ; 00006d60H
  012d7	0f 8e 84 00 00
	00		 jle	 $L71607
$L71746:

; 1610 : 		{
; 1611 : 			bOverloaded=TRUE;
; 1612 : 
; 1613 : 		}
; 1614 : 
; 1615 : 		
; 1616 : 		if (bOverloaded)
; 1617 : 		{
; 1618 : 			// stop tracing
; 1619 : 			pVtm_t->bDoTuning = FALSE;

  012dd	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0

; 1620 : 			pVtm_t->vtdTuneResults.bDidOverload = TRUE;

  012e7	c7 86 88 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+392], 1

; 1621 : 			pVtm_t->vtdTuneResults.r1cd2 = pVtm_t->r1cd2;

  012f1	66 8b 96 40 01
	00 00		 mov	 dx, WORD PTR [esi+320]
  012f8	66 89 96 94 01
	00 00		 mov	 WORD PTR [esi+404], dx

; 1622 : 			pVtm_t->vtdTuneResults.r2cd2 = pVtm_t->r2cd2;

  012ff	66 8b 86 44 01
	00 00		 mov	 ax, WORD PTR [esi+324]
  01306	66 89 86 96 01
	00 00		 mov	 WORD PTR [esi+406], ax

; 1623 : 			pVtm_t->vtdTuneResults.r3cd2 = pVtm_t->r3cd2;

  0130d	66 8b 8e 48 01
	00 00		 mov	 cx, WORD PTR [esi+328]
  01314	66 89 8e 98 01
	00 00		 mov	 WORD PTR [esi+408], cx

; 1624 : 			pVtm_t->vtdTuneResults.r4cd2 = pVtm_t->r4cd2;

  0131b	66 8b 96 4c 01
	00 00		 mov	 dx, WORD PTR [esi+332]
  01322	66 89 96 9a 01
	00 00		 mov	 WORD PTR [esi+410], dx

; 1625 : 			pVtm_t->vtdTuneResults.r5cd2 = pVtm_t->r5cd2;

  01329	66 8b 86 50 01
	00 00		 mov	 ax, WORD PTR [esi+336]
  01330	66 89 86 9c 01
	00 00		 mov	 WORD PTR [esi+412], ax

; 1626 : 			pVtm_t->vtdTuneResults.rnpd2 = pVtm_t->rnpd2;

  01337	66 8b 8e 54 01
	00 00		 mov	 cx, WORD PTR [esi+340]
  0133e	66 89 8e 9e 01
	00 00		 mov	 WORD PTR [esi+414], cx

; 1627 : 			pVtm_t->vtdTuneResults.rnzd2 = pVtm_t->rnzd2;

  01345	66 8b 96 58 01
	00 00		 mov	 dx, WORD PTR [esi+344]
  0134c	66 89 96 a0 01
	00 00		 mov	 WORD PTR [esi+416], dx

; 1628 : 			pVtm_t->vtdTuneResults.rlpd2 = pVtm_t->rlpd2;

  01353	66 8b 86 5c 01
	00 00		 mov	 ax, WORD PTR [esi+348]
  0135a	66 89 86 a2 01
	00 00		 mov	 WORD PTR [esi+418], ax
$L71607:
  01361	8b 44 24 58	 mov	 eax, DWORD PTR _ns$[esp+132]
  01365	8b 54 24 24	 mov	 edx, DWORD PTR -96+[esp+132]
  01369	8b 8e 14 01 00
	00		 mov	 ecx, DWORD PTR [esi+276]
  0136f	40		 inc	 eax
  01370	83 c2 02	 add	 edx, 2
  01373	3b c1		 cmp	 eax, ecx
  01375	89 44 24 58	 mov	 DWORD PTR _ns$[esp+132], eax
  01379	89 54 24 24	 mov	 DWORD PTR -96+[esp+132], edx
  0137d	0f 82 56 f3 ff
	ff		 jb	 $L71884
$L71608:
  01383	5f		 pop	 edi
  01384	5e		 pop	 esi
  01385	5d		 pop	 ebp
  01386	5b		 pop	 ebx

; 1629 : 		}
; 1630 : 	}
; 1631 : 
; 1632 : 
; 1633 : 
; 1634 :   }
; 1635 :   return;
; 1636 : }

  01387	83 c4 74	 add	 esp, 116		; 00000074H
  0138a	c3		 ret	 0
_speech_waveform_generator ENDP
_TEXT	ENDS
PUBLIC	_read_speaker_definition
_TEXT	SEGMENT
_phTTS$ = 8
_flp$ = 8
_blp$ = 8
_rlpg$ = 8
_read_speaker_definition PROC NEAR

; 1646 : {

  01390	53		 push	 ebx

; 1647 :   S16 *spdeftochip;
; 1648 :   S16 f4c;       /*  Frequency of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1649 :   S16 b4c;       /*  Bandwidth of fixed cascade 4th formant *//* MVP : Moved from vtm.h*/
; 1650 :   S16 f5c;       /*  Frequency of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1651 :   S16 b5c;       /*  Bandwidth of fixed cascade 5th formant *//* MVP : Moved from vtm.h*/
; 1652 :   S16 f4p;       /*  Frequency of fixed parallel 4th formant*//* MVP : Moved from vtm.h*/
; 1653 :   S16 b4p;       /*  Bandwidth of fixed parallel 4th formant*/
; 1654 :   S16 f5p;       /*  Frequency of fixed parallel 5th formant            */
; 1655 :   S16 b5p;       /*  Bandwidth of fixed parallel 5th formant            */
; 1656 :   S16 fnp;       /*  Frequency of fixed nasal formant                   */
; 1657 :   S16 bnp;       /*  Bandwidth of fixed nasal formant                   */
; 1658 :   S16 flp;       /*  Frequency of fixed glottal decimating filter       */
; 1659 :   S16 blp;       /*  Bandwidth of fixed glottal decimating filter       */
; 1660 :   S16 rlpg;      /*  Gain of down-sampling low-pass resonator           */
; 1661 :   S16 avg;       /*  Gain factor for voicing                            */
; 1662 :   S16 apg;       /*  Gain factor for aspiration                         */
; 1663 :   S16 afg;       /*  Gain factor for frication                          */
; 1664 :   S16 rnpg;      /*  Gain factor for nasal pole resonator               */
; 1665 :   S16 a5gain;    /*  Gain in dB for the 5th cascade resonator.          */
; 1666 :   S16 a4gain;    /*  Gain in dB for the 4th cascade resonator.          */
; 1667 :   S16 a3gain;    /*  Gain in dB for the 3rd cascade resonator.          */
; 1668 :   S16 a2gain;    /*  Gain in dB for the 2nd cascade resonator.          */
; 1669 :   S16 a1gain;    /*  Gain in dB for the 1st cascade resonator.          */
; 1670 : 
; 1671 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;

  01391	8b 5c 24 08	 mov	 ebx, DWORD PTR _phTTS$[esp]
  01395	56		 push	 esi
  01396	57		 push	 edi
  01397	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]

; 1672 : 
; 1673 :     /********************************************************************/
; 1674 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 1675 :   /********************************************************************/
; 1676 : #ifdef  F1_B1_UPGRADE  
; 1677 :     pVtm_t->Up_Down_Flag=0;
; 1678 : #endif
; 1679 : 
; 1680 : 	pVtm_t->ldspdef=1;	 /* flag that we loaded a speaker def eab 10/96*/
; 1681 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  0139a	33 ff		 xor	 edi, edi
  0139c	c7 86 20 02 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+544], 1
  013a6	66 89 be 2a 01
	00 00		 mov	 WORD PTR [esi+298], di

; 1682 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  013ad	66 89 be 2c 01
	00 00		 mov	 WORD PTR [esi+300], di

; 1683 : 
; 1684 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  013b4	66 89 be 2e 01
	00 00		 mov	 WORD PTR [esi+302], di

; 1685 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  013bb	66 89 be 30 01
	00 00		 mov	 WORD PTR [esi+304], di

; 1686 : 
; 1687 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  013c2	66 89 be 32 01
	00 00		 mov	 WORD PTR [esi+306], di

; 1688 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  013c9	66 89 be 34 01
	00 00		 mov	 WORD PTR [esi+308], di

; 1689 : 	
; 1690 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  013d0	66 89 be 36 01
	00 00		 mov	 WORD PTR [esi+310], di

; 1691 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  013d7	66 89 be 38 01
	00 00		 mov	 WORD PTR [esi+312], di

; 1692 : 
; 1693 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  013de	66 89 be 3a 01
	00 00		 mov	 WORD PTR [esi+314], di

; 1694 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  013e5	66 89 be 3c 01
	00 00		 mov	 WORD PTR [esi+316], di

; 1695 : 
; 1696 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  013ec	66 89 be 3e 01
	00 00		 mov	 WORD PTR [esi+318], di

; 1697 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  013f3	66 89 be 40 01
	00 00		 mov	 WORD PTR [esi+320], di

; 1698 : 
; 1699 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  013fa	66 89 be 42 01
	00 00		 mov	 WORD PTR [esi+322], di

; 1700 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  01401	66 89 be 44 01
	00 00		 mov	 WORD PTR [esi+324], di

; 1701 : 
; 1702 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */
; 1703 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */
; 1704 : 
; 1705 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */
; 1706 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */
; 1707 : 
; 1708 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */
; 1709 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */
; 1710 : 
; 1711 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */
; 1712 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */
; 1713 : 
; 1714 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */
; 1715 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */
; 1716 : 
; 1717 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */
; 1718 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */
; 1719 : 
; 1720 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */
; 1721 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */
; 1722 : 
; 1723 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */
; 1724 : 
; 1725 : 	/* Second sample of the tilt filter. 
; 1726 : 	   10/96 eab this filter parameter needs to be zeroed also */
; 1727 : 	pVtm_t->one_minus_decay = 0;
; 1728 : 
; 1729 : 	pVtm_t->avlind = 0;		// tek 08oct96
; 1730 : 	pVtm_t->voice0 = 0;		// tek 08oct96
; 1731 : 
; 1732 :   pVtm_t->vtdTuneResults.purevmax = 0;    /*maximum value within filter of casade rnz*/
; 1733 :   pVtm_t->vtdTuneResults.rnzmax = 0;       /* maximum value within filter of casade rnz */
; 1734 :   pVtm_t->vtdTuneResults.rnpmax = 0;       /* maximum value within filter of casade rnp */
; 1735 :   pVtm_t->vtdTuneResults.c4max = 0;        /* maximum value within filter of casade 4 */
; 1736 :   pVtm_t->vtdTuneResults.c3max = 0;        /* maximum value within filter of casade 3 */
; 1737 :   pVtm_t->vtdTuneResults.c2max = 0;        /* maximum value within filter of casade 3 */
; 1738 :   pVtm_t->vtdTuneResults.c1max = 0;        /* maximum value within filter of casade 3 */
; 1739 :   pVtm_t->vtdTuneResults.r5pd1 = 0;
; 1740 : 
; 1741 : 
; 1742 :   spdeftochip = &(pVtm_t->parambuff[1]);
; 1743 : 
; 1744 :   /********************************************************************/
; 1745 :   /*  Constants used in random number generation.                     */
; 1746 :   /********************************************************************/
; 1747 :   /*
; 1748 :   ranmul = 20077;
; 1749 :   ranadd = 12345;
; 1750 :   */
; 1751 :   /********************************************************************/
; 1752 :   /*  Constants used to filter the noise.                             */
; 1753 :   /********************************************************************/
; 1754 : 
; 1755 :   switch( pVtm_t->uiSampleRateChange )
; 1756 :   {

  01408	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0140a	66 89 be 46 01
	00 00		 mov	 WORD PTR [esi+326], di
  01411	66 89 be 48 01
	00 00		 mov	 WORD PTR [esi+328], di
  01418	66 89 be 4a 01
	00 00		 mov	 WORD PTR [esi+330], di
  0141f	66 89 be 4c 01
	00 00		 mov	 WORD PTR [esi+332], di
  01426	66 89 be 4e 01
	00 00		 mov	 WORD PTR [esi+334], di
  0142d	66 89 be 50 01
	00 00		 mov	 WORD PTR [esi+336], di
  01434	66 89 be 52 01
	00 00		 mov	 WORD PTR [esi+338], di
  0143b	66 89 be 54 01
	00 00		 mov	 WORD PTR [esi+340], di
  01442	66 89 be 56 01
	00 00		 mov	 WORD PTR [esi+342], di
  01449	66 89 be 58 01
	00 00		 mov	 WORD PTR [esi+344], di
  01450	8b c1		 mov	 eax, ecx
  01452	66 89 be 5a 01
	00 00		 mov	 WORD PTR [esi+346], di
  01459	66 89 be 5c 01
	00 00		 mov	 WORD PTR [esi+348], di
  01460	2b c7		 sub	 eax, edi
  01462	66 89 be 5e 01
	00 00		 mov	 WORD PTR [esi+350], di
  01469	66 89 be 60 01
	00 00		 mov	 WORD PTR [esi+352], di
  01470	66 89 be 6e 01
	00 00		 mov	 WORD PTR [esi+366], di
  01477	66 89 be f2 01
	00 00		 mov	 WORD PTR [esi+498], di
  0147e	66 89 be 06 02
	00 00		 mov	 WORD PTR [esi+518], di
  01485	66 89 be f4 01
	00 00		 mov	 WORD PTR [esi+500], di
  0148c	66 89 be 7e 01
	00 00		 mov	 WORD PTR [esi+382], di
  01493	66 89 be 72 01
	00 00		 mov	 WORD PTR [esi+370], di
  0149a	66 89 be 70 01
	00 00		 mov	 WORD PTR [esi+368], di
  014a1	66 89 be 7a 01
	00 00		 mov	 WORD PTR [esi+378], di
  014a8	66 89 be 78 01
	00 00		 mov	 WORD PTR [esi+376], di
  014af	66 89 be 76 01
	00 00		 mov	 WORD PTR [esi+374], di
  014b6	66 89 be 74 01
	00 00		 mov	 WORD PTR [esi+372], di
  014bd	66 89 be 86 01
	00 00		 mov	 WORD PTR [esi+390], di
  014c4	74 06		 je	 SHORT $L71779
  014c6	48		 dec	 eax
  014c7	74 27		 je	 SHORT $L71780
  014c9	48		 dec	 eax
  014ca	75 09		 jne	 SHORT $L71776
$L71779:

; 1757 :   case SAMPLE_RATE_INCREASE:
; 1758 : 
; 1759 :     pVtm_t->noiseb = -2913;

  014cc	66 c7 86 ee 01
	00 00 9f f4	 mov	 WORD PTR [esi+494], -2913 ; fffff49fH
$L71776:

; 1768 : 
; 1769 :   case NO_SAMPLE_RATE_CHANGE:
; 1770 : 
; 1771 :     pVtm_t->noiseb = -2913;
; 1772 :     /*noisec = 1499;*/
; 1773 :     break;
; 1774 : 
; 1775 :   default:
; 1776 : 
; 1777 :     break;
; 1778 :   }
; 1779 : 
; 1780 :   /********************************************************************/
; 1781 :   /*  Parallel 6th formant                                            */
; 1782 :   /*  Resonator constant "r6pa" is set elsewhere from A6inDB.         */
; 1783 :   /********************************************************************/
; 1784 : 
; 1785 :   /*pVtm_t->r6pb = -5702;*/     /* MVP : moved as a local constant */
; 1786 :   /*r6pc = -1995;                */     /* MVP : moved as a local constant */
; 1787 : 
; 1788 :   /********************************************************************/
; 1789 :   /*  Coefficients for fixed nasal formant.                           */
; 1790 :   /*  Gain parameter "rnpa" is set below by speaker definition        */
; 1791 :   /*  parameter "rnpg". Note possible future change, this could vary  */
; 1792 :   /*  from speaker to speaker.                                        */
; 1793 :   /********************************************************************/
; 1794 : 
; 1795 :   //fnp = 290;
; 1796 : 
; 1797 :   //bnp = 70;
; 1798 :   //d2pole_pf( pVtm_t,&pVtm_t->rnpb, &pVtm_t->rnpc, fnp, bnp, 0 );
; 1799 : 
; 1800 :   /********************************************************************/
; 1801 :   /*  Coefficients for fixed downsampling low-pass filter             */
; 1802 :   /********************************************************************/
; 1803 : 
; 1804 :   switch( pVtm_t->uiSampleRateChange )
; 1805 :   {

  014d5	2b cf		 sub	 ecx, edi
  014d7	74 33		 je	 SHORT $L71787
  014d9	49		 dec	 ecx
  014da	74 1f		 je	 SHORT $L71788
  014dc	49		 dec	 ecx
  014dd	75 3e		 jne	 SHORT $L71896

; 1819 : 
; 1820 :   case NO_SAMPLE_RATE_CHANGE:
; 1821 : 
; 1822 :     flp = 860;

  014df	ba 5c 03 00 00	 mov	 edx, 860		; 0000035cH

; 1823 :     blp = 558;

  014e4	b9 2e 02 00 00	 mov	 ecx, 558		; 0000022eH

; 1824 :     rlpg = 2400;

  014e9	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H

; 1825 :     break;

  014ee	eb 39		 jmp	 SHORT $L71784
$L71780:

; 1760 :     /*noisec = 1499; */
; 1761 :     break;
; 1762 : 
; 1763 :   case SAMPLE_RATE_DECREASE:
; 1764 : 
; 1765 :     pVtm_t->noiseb = -1873;

  014f0	66 c7 86 ee 01
	00 00 af f8	 mov	 WORD PTR [esi+494], -1873 ; fffff8afH

; 1766 :     /*noisec = 1499;*/
; 1767 :     break;

  014f9	eb da		 jmp	 SHORT $L71776
$L71788:

; 1811 :     break;
; 1812 : 
; 1813 :   case SAMPLE_RATE_DECREASE:
; 1814 : 
; 1815 :     flp = 698;

  014fb	ba ba 02 00 00	 mov	 edx, 698		; 000002baH

; 1816 :     blp = 453;

  01500	b9 c5 01 00 00	 mov	 ecx, 453		; 000001c5H

; 1817 :     rlpg = 2400;

  01505	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H

; 1818 :     break;

  0150a	eb 1d		 jmp	 SHORT $L71784
$L71787:

; 1806 :   case SAMPLE_RATE_INCREASE:
; 1807 : 
; 1808 :     flp = 948;

  0150c	ba b4 03 00 00	 mov	 edx, 948		; 000003b4H

; 1809 :     blp = 615;

  01511	b9 67 02 00 00	 mov	 ecx, 615		; 00000267H

; 1810 :     rlpg = 2400;

  01516	b8 60 09 00 00	 mov	 eax, 2400		; 00000960H
  0151b	eb 0c		 jmp	 SHORT $L71784
$L71896:
  0151d	8b 44 24 10	 mov	 eax, DWORD PTR _rlpg$[esp+8]
  01521	8b 4c 24 10	 mov	 ecx, DWORD PTR _blp$[esp+8]
  01525	8b 54 24 10	 mov	 edx, DWORD PTR _flp$[esp+8]
$L71784:

; 1826 : 
; 1827 :   default:
; 1828 : 
; 1829 :     break;
; 1830 :   }
; 1831 : 
; 1832 :   pVtm_t->rlpa = d2pole_pf( pVtm_t,&pVtm_t->rlpb, &pVtm_t->rlpc, flp, blp, rlpg );

  01529	50		 push	 eax
  0152a	51		 push	 ecx
  0152b	8d 86 ec 01 00
	00		 lea	 eax, DWORD PTR [esi+492]
  01531	52		 push	 edx
  01532	8d 8e ea 01 00
	00		 lea	 ecx, DWORD PTR [esi+490]
  01538	50		 push	 eax
  01539	51		 push	 ecx
  0153a	56		 push	 esi
  0153b	e8 00 00 00 00	 call	 _d2pole_pf
  01540	66 89 86 e8 01
	00 00		 mov	 WORD PTR [esi+488], ax

; 1833 : 
; 1834 :   /********************************************************************/
; 1835 :   /*  Begin set coeficients of speaker-def controlled resonators.     */
; 1836 :   /*  Cascade fourth formant                                          */
; 1837 :   /********************************************************************/
; 1838 : 
; 1839 :   f4c = ((SP_CHIP *)spdeftochip)->r4cb;   /*  1                       */
; 1840 :   b4c = ((SP_CHIP *)spdeftochip)->r4cc;   /*  2                       */
; 1841 : 
; 1842 :   d2pole_cf45( pVtm_t,&pVtm_t->R4cb, &pVtm_t->R4cc, f4c, b4c, 0 );

  01547	66 8b 96 d4 00
	00 00		 mov	 dx, WORD PTR [esi+212]
  0154e	66 8b 86 d2 00
	00 00		 mov	 ax, WORD PTR [esi+210]
  01555	57		 push	 edi
  01556	52		 push	 edx
  01557	8d 8e d4 01 00
	00		 lea	 ecx, DWORD PTR [esi+468]
  0155d	50		 push	 eax
  0155e	8d 96 d2 01 00
	00		 lea	 edx, DWORD PTR [esi+466]
  01564	51		 push	 ecx
  01565	52		 push	 edx
  01566	56		 push	 esi
  01567	e8 00 00 00 00	 call	 _d2pole_cf45

; 1843 : 
; 1844 :   /********************************************************************/
; 1845 :   /*  Cascade fifth formant                                           */
; 1846 :   /********************************************************************/
; 1847 : 
; 1848 :   f5c = ((SP_CHIP *)spdeftochip)->r5cb;   /*  3                       */
; 1849 :   b5c = ((SP_CHIP *)spdeftochip)->r5cc;   /*  4                       */
; 1850 : 
; 1851 :   d2pole_cf45(pVtm_t,&pVtm_t->R5cb, &pVtm_t->R5cc, f5c, b5c, 0 );

  0156c	66 8b 86 d8 00
	00 00		 mov	 ax, WORD PTR [esi+216]
  01573	66 8b 8e d6 00
	00 00		 mov	 cx, WORD PTR [esi+214]
  0157a	57		 push	 edi
  0157b	50		 push	 eax
  0157c	8d 96 da 01 00
	00		 lea	 edx, DWORD PTR [esi+474]
  01582	51		 push	 ecx
  01583	8d 86 d8 01 00
	00		 lea	 eax, DWORD PTR [esi+472]
  01589	52		 push	 edx
  0158a	50		 push	 eax
  0158b	56		 push	 esi
  0158c	e8 00 00 00 00	 call	 _d2pole_cf45

; 1852 : 
; 1853 :   /********************************************************************/
; 1854 :   /*  Parallel fourth formant                                         */
; 1855 :   /********************************************************************/
; 1856 : 
; 1857 :   f4p = ((SP_CHIP *)spdeftochip)->r4pb;   /*  5                       */
; 1858 :   b4p = 400;
; 1859 : 
; 1860 :   d2pole_pf( pVtm_t,&pVtm_t->R4pb, &pVtm_t->r4pc, f4p, b4p, 0 );

  01591	66 8b 8e da 00
	00 00		 mov	 cx, WORD PTR [esi+218]
  01598	83 c4 48	 add	 esp, 72			; 00000048H
  0159b	8d 96 b4 01 00
	00		 lea	 edx, DWORD PTR [esi+436]
  015a1	8d 86 b2 01 00
	00		 lea	 eax, DWORD PTR [esi+434]
  015a7	57		 push	 edi
  015a8	68 90 01 00 00	 push	 400			; 00000190H
  015ad	51		 push	 ecx
  015ae	52		 push	 edx
  015af	50		 push	 eax
  015b0	56		 push	 esi
  015b1	e8 00 00 00 00	 call	 _d2pole_pf

; 1861 : 
; 1862 :   /********************************************************************/
; 1863 :   /*  Parallel fifth formant                                          */
; 1864 :   /********************************************************************/
; 1865 : 
; 1866 :   f5p = ((SP_CHIP *)spdeftochip)->r5pb;    /*  6                      */
; 1867 :   b5p = 500;
; 1868 : 
; 1869 :   d2pole_pf( pVtm_t,&pVtm_t->R5pb, &pVtm_t->r5pc, f5p, b5p, 0 );

  015b6	66 8b 8e dc 00
	00 00		 mov	 cx, WORD PTR [esi+220]
  015bd	57		 push	 edi
  015be	68 f4 01 00 00	 push	 500			; 000001f4H
  015c3	8d 96 b8 01 00
	00		 lea	 edx, DWORD PTR [esi+440]
  015c9	51		 push	 ecx
  015ca	8d 86 b6 01 00
	00		 lea	 eax, DWORD PTR [esi+438]
  015d0	52		 push	 edx
  015d1	50		 push	 eax
  015d2	56		 push	 esi
  015d3	e8 00 00 00 00	 call	 _d2pole_pf
  015d8	83 c4 30	 add	 esp, 48			; 00000030H

; 1870 : 
; 1871 :   /********************************************************************/
; 1872 :   /*  End of set coeficients of speaker definition controlled         */
; 1873 :   /*  resonators.                                                     */
; 1874 :   /********************************************************************/
; 1875 : 
; 1876 :   /********************************************************************/
; 1877 :   /*  The following parameter deleted 12-JUL-85                       */
; 1878 :   /*  TLToff = ((SP_CHIP *)spdeftochip)->tltoff;      7               */
; 1879 :   /********************************************************************/
; 1880 : 
; 1881 :   /********************************************************************/
; 1882 :   /*  Jitter parameter has it's sign flipped from the current value.  */
; 1883 :   /*  t0jitr is a time, so it should be scaled if fs != 10K.          */
; 1884 :   /********************************************************************/
; 1885 : 
; 1886 :   if ( pVtm_t->t0jitr < 0 )

  015db	66 39 be 24 01
	00 00		 cmp	 WORD PTR [esi+292], di
  015e2	7d 13		 jge	 SHORT $L71797

; 1887 :     pVtm_t->t0jitr = -((SP_CHIP *)spdeftochip)->t0jit;    /*  8               */

  015e4	66 8b 8e de 00
	00 00		 mov	 cx, WORD PTR [esi+222]
  015eb	66 f7 d9	 neg	 cx
  015ee	66 89 8e 24 01
	00 00		 mov	 WORD PTR [esi+292], cx

; 1888 :   else

  015f5	eb 0e		 jmp	 SHORT $L71799
$L71797:

; 1889 :     pVtm_t->t0jitr = ((SP_CHIP *)spdeftochip)->t0jit;

  015f7	66 8b 96 de 00
	00 00		 mov	 dx, WORD PTR [esi+222]
  015fe	66 89 96 24 01
	00 00		 mov	 WORD PTR [esi+292], dx
$L71799:

; 1890 : 
; 1891 :   switch( pVtm_t->uiSampleRateChange )
; 1892 :   {

  01605	8b 06		 mov	 eax, DWORD PTR [esi]
  01607	2b c7		 sub	 eax, edi
  01609	74 1d		 je	 SHORT $L71805
  0160b	48		 dec	 eax
  0160c	75 35		 jne	 SHORT $L71802

; 1896 :     break;
; 1897 : 
; 1898 :   case SAMPLE_RATE_DECREASE:
; 1899 : 
; 1900 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr );

  0160e	0f bf 46 04	 movsx	 eax, WORD PTR [esi+4]
  01612	0f bf 8e 24 01
	00 00		 movsx	 ecx, WORD PTR [esi+292]
  01619	0f af c1	 imul	 eax, ecx
  0161c	c1 f8 0f	 sar	 eax, 15			; 0000000fH
  0161f	66 89 86 24 01
	00 00		 mov	 WORD PTR [esi+292], ax

; 1901 :     break;

  01626	eb 1b		 jmp	 SHORT $L71802
$L71805:

; 1893 :   case SAMPLE_RATE_INCREASE:
; 1894 : 
; 1895 :     pVtm_t->t0jitr = frac1mul( pVtm_t->rate_scale, pVtm_t->t0jitr ) << 1;

  01628	0f bf 56 04	 movsx	 edx, WORD PTR [esi+4]
  0162c	0f bf 86 24 01
	00 00		 movsx	 eax, WORD PTR [esi+292]
  01633	0f af d0	 imul	 edx, eax
  01636	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  01639	83 e2 fe	 and	 edx, -2			; fffffffeH
  0163c	66 89 96 24 01
	00 00		 mov	 WORD PTR [esi+292], dx
$L71802:

; 1902 : 
; 1903 :   case NO_SAMPLE_RATE_CHANGE:
; 1904 : 
; 1905 :     break;
; 1906 : 
; 1907 :   default:
; 1908 : 
; 1909 :     break;
; 1910 :   }
; 1911 : 
; 1912 :   /********************************************************************/
; 1913 :   /*  Gains of cascade resonators (used to keep signal in high order  */
; 1914 :   /*  bits).                                                          */
; 1915 :   /********************************************************************/
; 1916 : 
; 1917 :   a5gain = ((SP_CHIP *)spdeftochip)->r5ca;    /*  9                   */
; 1918 :   pVtm_t->R5ca = amptable[a5gain];

  01643	0f bf 8e e0 00
	00 00		 movsx	 ecx, WORD PTR [esi+224]
  0164a	5f		 pop	 edi
  0164b	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01653	66 89 96 d6 01
	00 00		 mov	 WORD PTR [esi+470], dx

; 1919 :   a4gain = ((SP_CHIP *)spdeftochip)->r4ca;    /*  10                  */
; 1920 :   pVtm_t->R4ca = amptable[a4gain];

  0165a	0f bf 86 e2 00
	00 00		 movsx	 eax, WORD PTR [esi+226]
  01661	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  01669	66 89 8e d0 01
	00 00		 mov	 WORD PTR [esi+464], cx

; 1921 :   a3gain = ((SP_CHIP *)spdeftochip)->r3ca;    /*  11                  */
; 1922 :   pVtm_t->r3cg = amptable[a3gain];

  01670	0f bf 96 e4 00
	00 00		 movsx	 edx, WORD PTR [esi+228]
  01677	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  0167f	66 89 86 fe 01
	00 00		 mov	 WORD PTR [esi+510], ax

; 1923 :   a2gain = ((SP_CHIP *)spdeftochip)->r2ca;    /*  12                  */
; 1924 :   pVtm_t->r2cg = amptable[a2gain];

  01686	0f bf 8e e6 00
	00 00		 movsx	 ecx, WORD PTR [esi+230]
  0168d	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01695	66 89 96 00 02
	00 00		 mov	 WORD PTR [esi+512], dx

; 1925 :   a1gain = ((SP_CHIP *)spdeftochip)->r1ca;    /*  13                  */
; 1926 :   pVtm_t->r1cg = amptable[a1gain];

  0169c	0f bf 86 e8 00
	00 00		 movsx	 eax, WORD PTR [esi+232]
  016a3	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  016ab	66 89 8e 02 02
	00 00		 mov	 WORD PTR [esi+514], cx

; 1927 : 
; 1928 :   /********************************************************************/
; 1929 :   /*  Constants that determine the duration of the open phase of the  */
; 1930 :   /*  glottal period.                                                 */
; 1931 :   /********************************************************************/
; 1932 : 
; 1933 :   pVtm_t->k1 = ((SP_CHIP *)spdeftochip)->nopen1;      /* 14                   */

  016b2	66 8b 96 ea 00
	00 00		 mov	 dx, WORD PTR [esi+234]
  016b9	66 89 96 0c 02
	00 00		 mov	 WORD PTR [esi+524], dx

; 1934 :   pVtm_t->k2 = ((SP_CHIP *)spdeftochip)->nopen2;      /* 15                   */

  016c0	66 8b 86 ec 00
	00 00		 mov	 ax, WORD PTR [esi+236]
  016c7	66 89 86 0e 02
	00 00		 mov	 WORD PTR [esi+526], ax

; 1935 : 
; 1936 :   /********************************************************************/
; 1937 :   /*  Breathiness coefficient.                                        */
; 1938 :   /********************************************************************/
; 1939 : 
; 1940 :   pVtm_t->Aturb = ((SP_CHIP *)spdeftochip)->aturb;    /*  16                  */

  016ce	66 8b 8e ee 00
	00 00		 mov	 cx, WORD PTR [esi+238]
  016d5	66 89 8e 28 01
	00 00		 mov	 WORD PTR [esi+296], cx

; 1941 : 
; 1942 : 
; 1943 :  /********************************************************************/
; 1944 :  /*  T0range = ((SP_CHIP *)spdeftochip)->f0scale;  17  (Not used)    */
; 1945 :  /********************************************************************/
; 1946 : 
; 1947 :   /********************************************************************/
; 1948 :   /*  Scale factor for variable formants F1inHZ, F2inHZ, and F3inHZ.  */
; 1949 :   /********************************************************************/
; 1950 : 
; 1951 :   pVtm_t->fnscal = ((SP_CHIP *)spdeftochip)->fnscale;     /*  18              */

  016dc	66 8b 96 f0 00
	00 00		 mov	 dx, WORD PTR [esi+240]
  016e3	66 89 96 26 01
	00 00		 mov	 WORD PTR [esi+294], dx

; 1952 : 
; 1953 :   /********************************************************************/
; 1954 :   /*  Overall gain of frication source re other sources               */
; 1955 :   /********************************************************************/
; 1956 : 
; 1957 :   afg = ((SP_CHIP *)spdeftochip)->afgain;     /*  19                  */
; 1958 : 
; 1959 :   pVtm_t->AFgain = amptable[afg ];

  016ea	0f bf 86 f2 00
	00 00		 movsx	 eax, WORD PTR [esi+242]
  016f1	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  016f9	66 89 8e fc 01
	00 00		 mov	 WORD PTR [esi+508], cx

; 1960 : 
; 1961 : 
; 1962 :   /********************************************************************/
; 1963 :   /*  Gain of the nasal pole resonator of cascade filter section.     */
; 1964 :   /********************************************************************/
; 1965 : 
; 1966 :   rnpg = ((SP_CHIP *)spdeftochip)->rnpgain;   /*  20                  */
; 1967 :   pVtm_t->rnpa = amptable[rnpg];

  01700	0f bf 96 f4 00
	00 00		 movsx	 edx, WORD PTR [esi+244]
  01707	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _amptable[edx*2]
  0170f	66 89 86 dc 01
	00 00		 mov	 WORD PTR [esi+476], ax

; 1968 :   
; 1969 : 
; 1970 :   /********************************************************************/
; 1971 :   /*  Overall gain of voicing source relative to other sources        */
; 1972 :   /********************************************************************/
; 1973 : 
; 1974 :   avg = ((SP_CHIP *)spdeftochip)->azgain;     /*  21                  */
; 1975 :   pVtm_t->avgain = amptable[avg];

  01716	0f bf 8e f6 00
	00 00		 movsx	 ecx, WORD PTR [esi+246]
  0171d	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _amptable[ecx*2]
  01725	66 89 96 f6 01
	00 00		 mov	 WORD PTR [esi+502], dx

; 1976 : 
; 1977 :   /********************************************************************/
; 1978 :   /*  Overall gain of aspiration source relative to other sources     */
; 1979 :   /********************************************************************/
; 1980 : 
; 1981 :   apg = ((SP_CHIP *)spdeftochip)->apgain;     /*  22                  */
; 1982 :   pVtm_t->APgain = amptable[apg];

  0172c	0f bf 86 f8 00
	00 00		 movsx	 eax, WORD PTR [esi+248]
  01733	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _amptable[eax*2]
  0173b	66 89 8e fa 01
	00 00		 mov	 WORD PTR [esi+506], cx

; 1983 : 
; 1984 :   phTTS->pKernelShareData->uiCurrentSpeaker = (DWORD)((SP_CHIP *)spdeftochip)->speaker;

  01742	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  01745	66 8b 86 fe 00
	00 00		 mov	 ax, WORD PTR [esi+254]
  0174c	5e		 pop	 esi
  0174d	66 89 82 24 02
	00 00		 mov	 WORD PTR [edx+548], ax
  01754	5b		 pop	 ebx

; 1985 : #ifdef COMPRESSION
; 1986 :   // set the initial gain fairly low, it will quickly set itself.
; 1987 :   pVtm_t->sGain = CompGainTable[COMPRESSION_GAIN_TABLE_SIZE/2];
; 1988 : #endif //COMPRESSION
; 1989 : 
; 1990 : }

  01755	c3		 ret	 0
_read_speaker_definition ENDP
_TEXT	ENDS
PUBLIC	_InitializeVTM
_TEXT	SEGMENT
_phTTS$ = 8
_InitializeVTM PROC NEAR

; 2006 : 	PVTM_T pVtm_t =phTTS->pVTMThreadData;

  01760	8b 44 24 04	 mov	 eax, DWORD PTR _phTTS$[esp-4]

; 2007 : 	
; 2008 :   /********************************************************************/
; 2009 :   /*  Zero Vocal-Tract-Model parameters.                              */
; 2010 :   /********************************************************************/
; 2011 : 
; 2012 : 	pVtm_t->r2pd1 = 0;    /*  Last output sample from parallel 2nd formant        */

  01764	33 c9		 xor	 ecx, ecx
  01766	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  01769	66 89 88 2a 01
	00 00		 mov	 WORD PTR [eax+298], cx

; 2013 : 	pVtm_t->r2pd2 = 0;    /*  Second-previous output sample                       */

  01770	66 89 88 2c 01
	00 00		 mov	 WORD PTR [eax+300], cx

; 2014 : 
; 2015 : 	pVtm_t->r3pd1 = 0;    /*  Last output sample from parallel 3rd formant        */

  01777	66 89 88 2e 01
	00 00		 mov	 WORD PTR [eax+302], cx

; 2016 : 	pVtm_t->r3pd2 = 0;    /*  Second-previous output sample                       */

  0177e	66 89 88 30 01
	00 00		 mov	 WORD PTR [eax+304], cx

; 2017 : 
; 2018 : 	pVtm_t->r4pd1 = 0;    /*  Last output sample from parallel 4th formant        */

  01785	66 89 88 32 01
	00 00		 mov	 WORD PTR [eax+306], cx

; 2019 : 	pVtm_t->r4pd2 = 0;    /*  Second-previous output sample                       */

  0178c	66 89 88 34 01
	00 00		 mov	 WORD PTR [eax+308], cx

; 2020 : 	
; 2021 : 	pVtm_t->r5pd1 = 0;    /*  Last output sample from parallel 5th formant        */

  01793	66 89 88 36 01
	00 00		 mov	 WORD PTR [eax+310], cx

; 2022 : 	pVtm_t->r5pd2 = 0;    /*  Second-previous output sample                       */

  0179a	66 89 88 38 01
	00 00		 mov	 WORD PTR [eax+312], cx

; 2023 : 
; 2024 : 	pVtm_t->r6pd1 = 0;    /*  Last output sample from parallel 6th formant        */

  017a1	66 89 88 3a 01
	00 00		 mov	 WORD PTR [eax+314], cx

; 2025 : 	pVtm_t->r6pd2 = 0;    /*  Second-previous output sample                       */

  017a8	66 89 88 3c 01
	00 00		 mov	 WORD PTR [eax+316], cx

; 2026 : 
; 2027 : 	pVtm_t->r1cd1 = 0;    /*  Last output sample from cascade 1st formant         */

  017af	66 89 88 3e 01
	00 00		 mov	 WORD PTR [eax+318], cx

; 2028 : 	pVtm_t->r1cd2 = 0;    /*  Second-previous output sample                       */

  017b6	66 89 88 40 01
	00 00		 mov	 WORD PTR [eax+320], cx

; 2029 : 
; 2030 : 	pVtm_t->r2cd1 = 0;    /*  Last output sample from cascade 2nd formant         */

  017bd	66 89 88 42 01
	00 00		 mov	 WORD PTR [eax+322], cx

; 2031 : 	pVtm_t->r2cd2 = 0;    /*  Second-previous output sample                       */

  017c4	66 89 88 44 01
	00 00		 mov	 WORD PTR [eax+324], cx

; 2032 : 
; 2033 : 	pVtm_t->r3cd1 = 0;    /*  Last output sample from cascade 3rd formant         */

  017cb	66 89 88 46 01
	00 00		 mov	 WORD PTR [eax+326], cx

; 2034 : 	pVtm_t->r3cd2 = 0;    /*  Second-previous output sample                       */

  017d2	66 89 88 48 01
	00 00		 mov	 WORD PTR [eax+328], cx

; 2035 : 
; 2036 : 	pVtm_t->r4cd1 = 0;    /*  Last output sample from cascade 4th formant         */

  017d9	66 89 88 4a 01
	00 00		 mov	 WORD PTR [eax+330], cx

; 2037 : 	pVtm_t->r4cd2 = 0;    /*  Second-previous output sample                       */

  017e0	66 89 88 4c 01
	00 00		 mov	 WORD PTR [eax+332], cx

; 2038 : 
; 2039 : 	pVtm_t->r5cd1 = 0;    /*  Last output sample from cascade 5th formant         */

  017e7	66 89 88 4e 01
	00 00		 mov	 WORD PTR [eax+334], cx

; 2040 : 	pVtm_t->r5cd2 = 0;    /*  Second-previous output sample                       */

  017ee	66 89 88 50 01
	00 00		 mov	 WORD PTR [eax+336], cx

; 2041 : 
; 2042 : 	pVtm_t->rnpd1 = 0;    /*  Last output sample from cascade nasal pole          */

  017f5	66 89 88 52 01
	00 00		 mov	 WORD PTR [eax+338], cx

; 2043 : 	pVtm_t->rnpd2 = 0;    /*  Second-previous output sample                       */

  017fc	66 89 88 54 01
	00 00		 mov	 WORD PTR [eax+340], cx

; 2044 : 
; 2045 : 	pVtm_t->rnzd1 = 0;    /*  Last output sample from cascade nasal zero          */

  01803	66 89 88 56 01
	00 00		 mov	 WORD PTR [eax+342], cx

; 2046 : 	pVtm_t->rnzd2 = 0;    /*  Second-previous output sample                       */

  0180a	66 89 88 58 01
	00 00		 mov	 WORD PTR [eax+344], cx

; 2047 : 
; 2048 : 	pVtm_t->rlpd1 = 0;    /*  Last output sample from low-pass filter             */

  01811	66 89 88 5a 01
	00 00		 mov	 WORD PTR [eax+346], cx

; 2049 : 	pVtm_t->rlpd2 = 0;    /*  Second-previous output sample                       */

  01818	66 89 88 5c 01
	00 00		 mov	 WORD PTR [eax+348], cx

; 2050 : 
; 2051 : 	pVtm_t->ablas1 = 0;   /*  Last output sample from nasal anti-resonator        */

  0181f	66 89 88 5e 01
	00 00		 mov	 WORD PTR [eax+350], cx

; 2052 : 	pVtm_t->ablas2 = 0;   /*  Second-previous output sample                       */

  01826	66 89 88 60 01
	00 00		 mov	 WORD PTR [eax+352], cx

; 2053 : 
; 2054 : 	pVtm_t->vlast = 0;    /*  Last output sample of the tilt filter.              */

  0182d	66 89 88 6e 01
	00 00		 mov	 WORD PTR [eax+366], cx

; 2055 : 
; 2056 : 	pVtm_t->one_minus_decay = 0;    /* Second sample of the tilt filter.          */

  01834	66 89 88 f2 01
	00 00		 mov	 WORD PTR [eax+498], cx

; 2057 : 
; 2058 : 	pVtm_t->rampdown=0;

  0183b	66 89 88 10 02
	00 00		 mov	 WORD PTR [eax+528], cx

; 2059 : }

  01842	c3		 ret	 0
_InitializeVTM ENDP
_TEXT	ENDS
PUBLIC	__real@8@3fff8000000000000000
PUBLIC	_SetSampleRate
EXTRN	__fltused:NEAR
;	COMDAT __real@8@3fff8000000000000000
; File D:\work\product\dapi\src\Vtm\vtm2.c
CONST	SEGMENT
__real@8@3fff8000000000000000 DQ 03ff0000000000000r ; 1
CONST	ENDS
_TEXT	SEGMENT
_phTTS$ = 8
_uiSampRate$ = 12
_SetSampleRate PROC NEAR

; 2115 : {

  01850	83 ec 08	 sub	 esp, 8

; 2116 :   /********************************************************************/
; 2117 :   /*  Set the global sample rate dependant parameters.                */
; 2118 :   /*  Some day these should be moved into the TTS handle.             */
; 2119 :   /********************************************************************/
; 2120 :   PKSD_T pKsd_t = phTTS->pKernelShareData;
; 2121 :   PVTM_T pVtm_t = phTTS->pVTMThreadData;
; 2122 : 
; 2123 :   pKsd_t->uiSampleRate = uiSampRate;

  01853	8b 54 24 10	 mov	 edx, DWORD PTR _uiSampRate$[esp+4]
  01857	8b 44 24 0c	 mov	 eax, DWORD PTR _phTTS$[esp+4]

; 2124 :   pVtm_t->SampleRate = (double)pKsd_t->uiSampleRate;

  0185b	89 54 24 00	 mov	 DWORD PTR -8+[esp+8], edx
  0185f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR -8+[esp+12], 0
  01867	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0186a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0186d	df 6c 24 00	 fild	 QWORD PTR -8+[esp+8]
  01871	89 91 2c 02 00
	00		 mov	 DWORD PTR [ecx+556], edx
  01877	dd 90 18 01 00
	00		 fst	 QWORD PTR [eax+280]

; 2125 :    //pVtm_t->SampleRate = 8000; /* for 8khz tune eab 1/15/98 */
; 2126 :   //pKsd_t->uiSampleRate = 8000; 
; 2127 :   pKsd_t->SamplePeriod = 1.0 / pVtm_t->SampleRate;

  0187d	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@8@3fff8000000000000000
  01883	d8 f1		 fdiv	 ST(0), ST(1)

; 2128 : 
; 2129 :   /********************************************************************/
; 2130 :   /*  Setup for either 8, 10, or 11.025 kHz.                          */
; 2131 :   /********************************************************************/
; 2132 : 
; 2133 :   if ( pKsd_t->uiSampleRate == PC_SAMPLE_RATE )

  01885	8b 91 2c 02 00
	00		 mov	 edx, DWORD PTR [ecx+556]
  0188b	81 fa 11 2b 00
	00		 cmp	 edx, 11025		; 00002b11H
  01891	dd 99 30 02 00
	00		 fstp	 QWORD PTR [ecx+560]
  01897	dd d8		 fstp	 ST(0)
  01899	75 28		 jne	 SHORT $L71838

; 2134 :   {
; 2135 :     pVtm_t->bEightKHz = FALSE;

  0189b	c7 80 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+288], 0

; 2136 : 
; 2137 :     /******************************************************************/
; 2138 :     /*  Set the vocal tract model to 11 KHz.                          */
; 2139 :     /******************************************************************/
; 2140 : 
; 2141 :     pVtm_t->uiSampleRateChange = SAMPLE_RATE_INCREASE;

  018a5	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2142 :     pVtm_t->rate_scale = 18063;   /*  Equals 1.1 in Q14 format for 11 KHz.    */

  018ab	66 c7 40 04 8f
	46		 mov	 WORD PTR [eax+4], 18063	; 0000468fH

; 2143 :     pVtm_t->inv_rate_scale = 29722;    /*  Equals 0.909 in Q15 format.        */

  018b1	66 c7 40 06 1a
	74		 mov	 WORD PTR [eax+6], 29722	; 0000741aH

; 2144 :     pVtm_t->uiNumberOfSamplesPerFrame = 71;

  018b7	c7 80 14 01 00
	00 47 00 00 00	 mov	 DWORD PTR [eax+276], 71	; 00000047H

; 2145 :   }
; 2146 :   else

  018c1	eb 36		 jmp	 SHORT $L71841
$L71838:

; 2147 :   {
; 2148 :     if ( pKsd_t->uiSampleRate == MULAW_SAMPLE_RATE )

  018c3	81 fa 40 1f 00
	00		 cmp	 edx, 8000		; 00001f40H
  018c9	75 28		 jne	 SHORT $L71840

; 2149 :    {
; 2150 :       pVtm_t->bEightKHz = TRUE;

  018cb	c7 80 20 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+288], 1

; 2151 : 
; 2152 :       /****************************************************************/
; 2153 :       /*  Set the vocal tract model to 8 KHz.                         */
; 2154 :       /****************************************************************/
; 2155 : 
; 2156 :       pVtm_t->uiSampleRateChange = SAMPLE_RATE_DECREASE;

  018d5	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 2157 :       pVtm_t->rate_scale = 26214;    /*  Equals 0.8 in Q15 format for 8 KHz */

  018db	66 c7 40 04 66
	66		 mov	 WORD PTR [eax+4], 26214	; 00006666H

; 2158 :       pVtm_t->inv_rate_scale = 20480;    /*  Equals 1.25 in Q14 format.     */

  018e1	66 c7 40 06 00
	50		 mov	 WORD PTR [eax+6], 20480	; 00005000H

; 2159 :       pVtm_t->uiNumberOfSamplesPerFrame = 51;

  018e7	c7 80 14 01 00
	00 33 00 00 00	 mov	 DWORD PTR [eax+276], 51	; 00000033H

; 2160 :     }
; 2161 :     else

  018f1	eb 06		 jmp	 SHORT $L71841
$L71840:

; 2162 :     {
; 2163 :       pVtm_t->uiSampleRateChange = NO_SAMPLE_RATE_CHANGE;

  018f3	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$L71841:

; 2164 :     }
; 2165 :   }
; 2166 : 
; 2167 :   /********************************************************************/
; 2168 :   /*  Update the speaker definition for the new sample rate.          */
; 2169 :   /********************************************************************/
; 2170 : 
; 2171 :   pKsd_t->async_voice = pKsd_t->last_voice ;

  018f9	0f bf 81 20 02
	00 00		 movsx	 eax, WORD PTR [ecx+544]
  01900	89 81 3c 02 00
	00		 mov	 DWORD PTR [ecx+572], eax

; 2172 :   pKsd_t->async_change |= ASYNC_voice;

  01906	8b 81 38 02 00
	00		 mov	 eax, DWORD PTR [ecx+568]
  0190c	0c 01		 or	 al, 1
  0190e	89 81 38 02 00
	00		 mov	 DWORD PTR [ecx+568], eax

; 2173 : 
; 2174 :   return;
; 2175 : }

  01914	83 c4 08	 add	 esp, 8
  01917	c3		 ret	 0
_SetSampleRate ENDP
_value$ = 8
_maxval$ = 12
_getmax	PROC NEAR

; 2179 : 	if (value <0)

  01920	8b 44 24 04	 mov	 eax, DWORD PTR _value$[esp-4]
  01924	66 85 c0	 test	 ax, ax
  01927	7d 02		 jge	 SHORT $L71847

; 2180 : 		value = -value;

  01929	f7 d8		 neg	 eax
$L71847:

; 2181 : 
; 2182 : 	if (value > *maxval)	*maxval=value;

  0192b	8b 4c 24 08	 mov	 ecx, DWORD PTR _maxval$[esp-4]
  0192f	66 3b 01	 cmp	 ax, WORD PTR [ecx]
  01932	7e 03		 jle	 SHORT $L71848
  01934	66 89 01	 mov	 WORD PTR [ecx], ax
$L71848:

; 2183 : 	return;
; 2184 : }

  01937	c3		 ret	 0
_getmax	ENDP
_f$ = 8
_bw$ = 12
_rnzg$ = 16
_sacoef$ = 20
_sbcoef$ = 24
_sccoef$ = 28
_setzeroabc PROC NEAR

; 2203 : 	/* EAB 7/7/99 CHnages varibales from ints to S32 to avoid overflow errors*/
; 2204 : 
; 2205 : S32 acoef;
; 2206 : S32 bcoef;
; 2207 : S32 ccoef;
; 2208 : 
; 2209 : 
; 2210 : S32 r;
; 2211 : 
; 2212 : /*    First compute ordinary resonator coefficients */
; 2213 : /*    Let r  =  exp(-pi bw t) */
; 2214 : /*    To get rid of transcendentals for chip implementation, see above: */
; 2215 : 
; 2216 : 		r = radius_table[bw >> 3];

  01940	8b 44 24 08	 mov	 eax, DWORD PTR _bw$[esp-4]

; 2217 : 		
; 2218 : 
; 2219 :     
; 2220 : 
; 2221 : 
; 2222 : /*    Let c  =  -r**2 */
; 2223 : 
; 2224 : 	 ccoef = -frac4mul(r,r);
; 2225 : 		
; 2226 : 
; 2227 : /*    Let b = r * 2*cos(2 pi f t) */
; 2228 : /*    To get rid of transcendentals for chip implementation, see above: */
; 2229 : 
; 2230 : 		 bcoef = frac4mul( r, cosine_table[ f >> 3 ] );

  01944	8b 54 24 04	 mov	 edx, DWORD PTR _f$[esp-4]
  01948	c1 f8 03	 sar	 eax, 3
  0194b	c1 fa 03	 sar	 edx, 3
  0194e	0f bf 04 45 00
	00 00 00	 movsx	 eax, WORD PTR _radius_table[eax*2]
  01956	53		 push	 ebx
  01957	56		 push	 esi
  01958	0f bf 34 55 00
	00 00 00	 movsx	 esi, WORD PTR _cosine_table[edx*2]
  01960	8b c8		 mov	 ecx, eax
  01962	0f af f0	 imul	 esi, eax
  01965	0f af c8	 imul	 ecx, eax

; 2231 : 
; 2232 : /*    Let a = 1.0 - b - c */
; 2233 : 	 
; 2234 : 	 acoef = 4096 - bcoef - ccoef;
; 2235 : 
; 2236 : /* Now convert to antiresonator coefficients (a'=1/a, b'=-b/a, c'=-c/a) */
; 2237 : /* It would be desirable to turn these divides into tables for chip impl. */
; 2238 : 	  
; 2239 : 	*sacoef = ( (4096* rnzg )/acoef);

  01968	8b 5c 24 14	 mov	 ebx, DWORD PTR _rnzg$[esp+4]
  0196c	57		 push	 edi
  0196d	8b c3		 mov	 eax, ebx
  0196f	bf 00 10 00 00	 mov	 edi, 4096		; 00001000H
  01974	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  01977	c1 fe 0c	 sar	 esi, 12			; 0000000cH
  0197a	c1 e0 0c	 shl	 eax, 12			; 0000000cH
  0197d	f7 d9		 neg	 ecx
  0197f	2b fe		 sub	 edi, esi
  01981	99		 cdq
  01982	2b f9		 sub	 edi, ecx
  01984	f7 ff		 idiv	 edi
  01986	8b 54 24 1c	 mov	 edx, DWORD PTR _sacoef$[esp+8]
  0198a	66 89 02	 mov	 WORD PTR [edx], ax

; 2240 : 	*sbcoef = -((bcoef*rnzg)/acoef);

  0198d	8b c6		 mov	 eax, esi
  0198f	0f af c3	 imul	 eax, ebx
  01992	99		 cdq
  01993	f7 ff		 idiv	 edi
  01995	8b 54 24 20	 mov	 edx, DWORD PTR _sbcoef$[esp+8]
  01999	f7 d8		 neg	 eax
  0199b	66 89 02	 mov	 WORD PTR [edx], ax

; 2241 : 	*sccoef = -((ccoef*rnzg)/acoef);

  0199e	8b c1		 mov	 eax, ecx
  019a0	0f af c3	 imul	 eax, ebx
  019a3	99		 cdq
  019a4	f7 ff		 idiv	 edi
  019a6	8b 4c 24 24	 mov	 ecx, DWORD PTR _sccoef$[esp+8]
  019aa	5f		 pop	 edi
  019ab	5e		 pop	 esi
  019ac	5b		 pop	 ebx
  019ad	f7 d8		 neg	 eax
  019af	66 89 01	 mov	 WORD PTR [ecx], ax

; 2242 : 
; 2243 : 	
; 2244 : 	
; 2245 : 	/*    Debugging printout *
; 2246 :       printf("fz=%3d bw=%3d acoef=%8.5f bcoef=%8.5f ccoef=%8.5f\n",
; 2247 : 	  f, bw, *acoef, *bcoef, *ccoef);  */
; 2248 : 
; 2249 : }

  019b2	c3		 ret	 0
_setzeroabc ENDP
_TEXT	ENDS
END
